
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 c0 15 00 	lgdtl  0x15c018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc bf 15 f0       	mov    $0xf015bfbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 02 00 00 00       	call   f010003f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <FOS_initialize>:
extern uint32 isBufferingEnabled();
extern uint32 setModifiedBufferLength();

//First ever function called in FOS kernel
void FOS_initialize()
{
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100045:	ba 68 0d 88 f0       	mov    $0xf0880d68,%edx
f010004a:	b8 28 1d 7e f0       	mov    $0xf07e1d28,%eax
f010004f:	29 c2                	sub    %eax,%edx
f0100051:	89 d0                	mov    %edx,%eax
f0100053:	83 ec 04             	sub    $0x4,%esp
f0100056:	50                   	push   %eax
f0100057:	6a 00                	push   $0x0
f0100059:	68 28 1d 7e f0       	push   $0xf07e1d28
f010005e:	e8 08 cf 01 00       	call   f011cf6b <memset>
f0100063:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100066:	e8 8b 0c 00 00       	call   f0100cf6 <console_initialize>

	//print welcome message
	print_welcome_message();
f010006b:	e8 c6 00 00 00       	call   f0100136 <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100070:	e8 04 2c 00 00       	call   f0102c79 <detect_memory>
	initialize_kernel_VM();
f0100075:	e8 3c 32 00 00       	call   f01032b6 <initialize_kernel_VM>
	initialize_paging();
f010007a:	e8 63 36 00 00       	call   f01036e2 <initialize_paging>
//	page_check();


	// Lab 3 user environment initialization functions
	env_init();
f010007f:	e8 cb 64 00 00       	call   f010654f <env_init>
	idt_init();
f0100084:	e8 cc 71 00 00       	call   f0107255 <idt_init>
	setPageReplacmentAlgorithmModifiedCLOCK();
f0100089:	e8 c4 86 00 00       	call   f0108752 <setPageReplacmentAlgorithmModifiedCLOCK>
	setUHeapPlacementStrategyBESTFIT();
f010008e:	e8 c5 54 00 00       	call   f0105558 <setUHeapPlacementStrategyBESTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f0100093:	e8 6c 55 00 00       	call   f0105604 <setKHeapPlacementStrategyFIRSTFIT>
	enableBuffering(1);
f0100098:	83 ec 0c             	sub    $0xc,%esp
f010009b:	6a 01                	push   $0x1
f010009d:	e8 44 87 00 00       	call   f01087e6 <enableBuffering>
f01000a2:	83 c4 10             	add    $0x10,%esp
	//enableModifiedBuffer(1) ;
	enableModifiedBuffer(1) ;
f01000a5:	83 ec 0c             	sub    $0xc,%esp
f01000a8:	6a 01                	push   $0x1
f01000aa:	e8 1f 87 00 00       	call   f01087ce <enableModifiedBuffer>
f01000af:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000b2:	83 ec 0c             	sub    $0xc,%esp
f01000b5:	68 e8 03 00 00       	push   $0x3e8
f01000ba:	e8 3f 87 00 00       	call   f01087fe <setModifiedBufferLength>
f01000bf:	83 c4 10             	add    $0x10,%esp

	//remove this line
	chksch(1);
f01000c2:	83 ec 0c             	sub    $0xc,%esp
f01000c5:	6a 01                	push   $0x1
f01000c7:	e8 c0 ad 01 00       	call   f011ae8c <chksch>
f01000cc:	83 c4 10             	add    $0x10,%esp
	// Lab 4 multitasking initialization functions
	pic_init();
f01000cf:	e8 61 6f 00 00       	call   f0107035 <pic_init>
	sched_init() ;
f01000d4:	e8 f8 93 00 00       	call   f01094d1 <sched_init>
//		cprintf("Timer After Loop: Counter0 Value = %d\n", cnt0 );

		//cprintf("Int Flag before = %d\n", read_eflags() & FL_IF) ;

	//Project initializations
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
f01000d9:	c7 05 80 28 7e f0 61 	movl   $0x61,0xf07e2880
f01000e0:	00 00 00 
	create_shares_array(MAX_SHARES);
f01000e3:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f01000e8:	83 ec 0c             	sub    $0xc,%esp
f01000eb:	50                   	push   %eax
f01000ec:	e8 37 c7 00 00       	call   f010c828 <create_shares_array>
f01000f1:	83 c4 10             	add    $0x10,%esp

	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
f01000f4:	c7 05 50 28 7e f0 59 	movl   $0x59,0xf07e2850
f01000fb:	00 00 00 
	create_semaphores_array(MAX_SEMAPHORES);
f01000fe:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f0100103:	83 ec 0c             	sub    $0xc,%esp
f0100106:	50                   	push   %eax
f0100107:	e8 2b c3 00 00       	call   f010c437 <create_semaphores_array>
f010010c:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010010f:	83 ec 0c             	sub    $0xc,%esp
f0100112:	68 c0 d9 11 f0       	push   $0xf011d9c0
f0100117:	e8 e8 70 00 00       	call   f0107204 <cprintf>
f010011c:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010011f:	83 ec 0c             	sub    $0xc,%esp
f0100122:	68 ec d9 11 f0       	push   $0xf011d9ec
f0100127:	e8 d8 70 00 00       	call   f0107204 <cprintf>
f010012c:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f010012f:	e8 f9 16 00 00       	call   f010182d <run_command_prompt>
	}
f0100134:	eb d9                	jmp    f010010f <FOS_initialize+0xd0>

f0100136 <print_welcome_message>:
}


void print_welcome_message()
{
f0100136:	55                   	push   %ebp
f0100137:	89 e5                	mov    %esp,%ebp
f0100139:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f010013c:	83 ec 0c             	sub    $0xc,%esp
f010013f:	68 11 da 11 f0       	push   $0xf011da11
f0100144:	e8 bb 70 00 00       	call   f0107204 <cprintf>
f0100149:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010014c:	83 ec 0c             	sub    $0xc,%esp
f010014f:	68 18 da 11 f0       	push   $0xf011da18
f0100154:	e8 ab 70 00 00       	call   f0107204 <cprintf>
f0100159:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010015c:	83 ec 0c             	sub    $0xc,%esp
f010015f:	68 60 da 11 f0       	push   $0xf011da60
f0100164:	e8 9b 70 00 00       	call   f0107204 <cprintf>
f0100169:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f010016c:	83 ec 0c             	sub    $0xc,%esp
f010016f:	68 a8 da 11 f0       	push   $0xf011daa8
f0100174:	e8 8b 70 00 00       	call   f0107204 <cprintf>
f0100179:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f010017c:	83 ec 0c             	sub    $0xc,%esp
f010017f:	68 60 da 11 f0       	push   $0xf011da60
f0100184:	e8 7b 70 00 00       	call   f0107204 <cprintf>
f0100189:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f010018c:	83 ec 0c             	sub    $0xc,%esp
f010018f:	68 18 da 11 f0       	push   $0xf011da18
f0100194:	e8 6b 70 00 00       	call   f0107204 <cprintf>
f0100199:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f010019c:	83 ec 0c             	sub    $0xc,%esp
f010019f:	68 ed da 11 f0       	push   $0xf011daed
f01001a4:	e8 5b 70 00 00       	call   f0107204 <cprintf>
f01001a9:	83 c4 10             	add    $0x10,%esp
}
f01001ac:	90                   	nop
f01001ad:	c9                   	leave  
f01001ae:	c3                   	ret    

f01001af <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001af:	55                   	push   %ebp
f01001b0:	89 e5                	mov    %esp,%ebp
f01001b2:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001b5:	8b 45 10             	mov    0x10(%ebp),%eax
f01001b8:	a3 40 1d 7e f0       	mov    %eax,0xf07e1d40

	va_start(ap, fmt);
f01001bd:	8d 45 10             	lea    0x10(%ebp),%eax
f01001c0:	83 c0 04             	add    $0x4,%eax
f01001c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001c6:	83 ec 04             	sub    $0x4,%esp
f01001c9:	ff 75 0c             	pushl  0xc(%ebp)
f01001cc:	ff 75 08             	pushl  0x8(%ebp)
f01001cf:	68 f2 da 11 f0       	push   $0xf011daf2
f01001d4:	e8 2b 70 00 00       	call   f0107204 <cprintf>
f01001d9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01001df:	83 ec 08             	sub    $0x8,%esp
f01001e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01001e5:	50                   	push   %eax
f01001e6:	e8 f0 6f 00 00       	call   f01071db <vcprintf>
f01001eb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001ee:	83 ec 0c             	sub    $0xc,%esp
f01001f1:	68 0b db 11 f0       	push   $0xf011db0b
f01001f6:	e8 09 70 00 00       	call   f0107204 <cprintf>
f01001fb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001fe:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0100203:	85 c0                	test   %eax,%eax
f0100205:	74 12                	je     f0100219 <_panic+0x6a>
f0100207:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010020c:	8b 40 54             	mov    0x54(%eax),%eax
f010020f:	83 f8 02             	cmp    $0x2,%eax
f0100212:	75 05                	jne    f0100219 <_panic+0x6a>
	{
		//2015
		env_exit();
f0100214:	e8 70 69 00 00       	call   f0106b89 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100219:	e8 3c 91 00 00       	call   f010935a <fos_scheduler>

f010021e <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f010021e:	55                   	push   %ebp
f010021f:	89 e5                	mov    %esp,%ebp
f0100221:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100224:	8b 45 10             	mov    0x10(%ebp),%eax
f0100227:	a3 40 1d 7e f0       	mov    %eax,0xf07e1d40

	va_start(ap, fmt);
f010022c:	8d 45 10             	lea    0x10(%ebp),%eax
f010022f:	83 c0 04             	add    $0x4,%eax
f0100232:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f0100235:	83 ec 04             	sub    $0x4,%esp
f0100238:	ff 75 0c             	pushl  0xc(%ebp)
f010023b:	ff 75 08             	pushl  0x8(%ebp)
f010023e:	68 f2 da 11 f0       	push   $0xf011daf2
f0100243:	e8 bc 6f 00 00       	call   f0107204 <cprintf>
f0100248:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010024b:	8b 45 10             	mov    0x10(%ebp),%eax
f010024e:	83 ec 08             	sub    $0x8,%esp
f0100251:	ff 75 f4             	pushl  -0xc(%ebp)
f0100254:	50                   	push   %eax
f0100255:	e8 81 6f 00 00       	call   f01071db <vcprintf>
f010025a:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f010025d:	83 ec 0c             	sub    $0xc,%esp
f0100260:	68 0b db 11 f0       	push   $0xf011db0b
f0100265:	e8 9a 6f 00 00       	call   f0107204 <cprintf>
f010026a:	83 c4 10             	add    $0x10,%esp

dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f010026d:	e8 ab 9d 00 00       	call   f010a01d <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100272:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0100277:	85 c0                	test   %eax,%eax
f0100279:	74 14                	je     f010028f <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f010027b:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0100280:	8b 40 4c             	mov    0x4c(%eax),%eax
f0100283:	83 ec 0c             	sub    $0xc,%esp
f0100286:	50                   	push   %eax
f0100287:	e8 78 9b 00 00       	call   f0109e04 <sched_exit_env>
f010028c:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f010028f:	e8 c6 90 00 00       	call   f010935a <fos_scheduler>

f0100294 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100294:	55                   	push   %ebp
f0100295:	89 e5                	mov    %esp,%ebp
f0100297:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010029a:	8b 45 10             	mov    0x10(%ebp),%eax
f010029d:	a3 40 1d 7e f0       	mov    %eax,0xf07e1d40

	va_start(ap, fmt);
f01002a2:	8d 45 10             	lea    0x10(%ebp),%eax
f01002a5:	83 c0 04             	add    $0x4,%eax
f01002a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002ab:	83 ec 04             	sub    $0x4,%esp
f01002ae:	ff 75 0c             	pushl  0xc(%ebp)
f01002b1:	ff 75 08             	pushl  0x8(%ebp)
f01002b4:	68 f2 da 11 f0       	push   $0xf011daf2
f01002b9:	e8 46 6f 00 00       	call   f0107204 <cprintf>
f01002be:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002c1:	8b 45 10             	mov    0x10(%ebp),%eax
f01002c4:	83 ec 08             	sub    $0x8,%esp
f01002c7:	ff 75 f4             	pushl  -0xc(%ebp)
f01002ca:	50                   	push   %eax
f01002cb:	e8 0b 6f 00 00       	call   f01071db <vcprintf>
f01002d0:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002d3:	83 ec 0c             	sub    $0xc,%esp
f01002d6:	68 0b db 11 f0       	push   $0xf011db0b
f01002db:	e8 24 6f 00 00       	call   f0107204 <cprintf>
f01002e0:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002e3:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01002e8:	85 c0                	test   %eax,%eax
f01002ea:	74 28                	je     f0100314 <_panic_into_prompt+0x80>
f01002ec:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01002f1:	8b 40 54             	mov    0x54(%eax),%eax
f01002f4:	83 f8 02             	cmp    $0x2,%eax
f01002f7:	75 1b                	jne    f0100314 <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f9:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01002fe:	83 ec 0c             	sub    $0xc,%esp
f0100301:	50                   	push   %eax
f0100302:	e8 08 94 00 00       	call   f010970f <sched_insert_exit>
f0100307:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f010030a:	c7 05 90 1f 7e f0 00 	movl   $0x0,0xf07e1f90
f0100311:	00 00 00 
	}

	lcr3(phys_page_directory);
f0100314:	a1 38 0d 80 f0       	mov    0xf0800d38,%eax
f0100319:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010031c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010031f:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100322:	c7 05 ac 28 7e f0 00 	movl   $0x0,0xf07e28ac
f0100329:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f010032c:	83 ec 0c             	sub    $0xc,%esp
f010032f:	6a 00                	push   $0x0
f0100331:	e8 f7 14 00 00       	call   f010182d <run_command_prompt>
f0100336:	83 c4 10             	add    $0x10,%esp
f0100339:	eb f1                	jmp    f010032c <_panic_into_prompt+0x98>

f010033b <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f010033b:	55                   	push   %ebp
f010033c:	89 e5                	mov    %esp,%ebp
f010033e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100341:	8d 45 10             	lea    0x10(%ebp),%eax
f0100344:	83 c0 04             	add    $0x4,%eax
f0100347:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f010034a:	83 ec 04             	sub    $0x4,%esp
f010034d:	ff 75 0c             	pushl  0xc(%ebp)
f0100350:	ff 75 08             	pushl  0x8(%ebp)
f0100353:	68 0d db 11 f0       	push   $0xf011db0d
f0100358:	e8 a7 6e 00 00       	call   f0107204 <cprintf>
f010035d:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100360:	8b 45 10             	mov    0x10(%ebp),%eax
f0100363:	83 ec 08             	sub    $0x8,%esp
f0100366:	ff 75 f4             	pushl  -0xc(%ebp)
f0100369:	50                   	push   %eax
f010036a:	e8 6c 6e 00 00       	call   f01071db <vcprintf>
f010036f:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100372:	83 ec 0c             	sub    $0xc,%esp
f0100375:	68 0b db 11 f0       	push   $0xf011db0b
f010037a:	e8 85 6e 00 00       	call   f0107204 <cprintf>
f010037f:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100382:	90                   	nop
f0100383:	c9                   	leave  
f0100384:	c3                   	ret    

f0100385 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100385:	55                   	push   %ebp
f0100386:	89 e5                	mov    %esp,%ebp
f0100388:	83 ec 10             	sub    $0x10,%esp
f010038b:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100392:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100395:	89 c2                	mov    %eax,%edx
f0100397:	ec                   	in     (%dx),%al
f0100398:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f010039b:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f010039e:	0f b6 c0             	movzbl %al,%eax
f01003a1:	83 e0 01             	and    $0x1,%eax
f01003a4:	85 c0                	test   %eax,%eax
f01003a6:	75 07                	jne    f01003af <serial_proc_data+0x2a>
		return -1;
f01003a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003ad:	eb 16                	jmp    f01003c5 <serial_proc_data+0x40>
f01003af:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b9:	89 c2                	mov    %eax,%edx
f01003bb:	ec                   	in     (%dx),%al
f01003bc:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003bf:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003c2:	0f b6 c0             	movzbl %al,%eax
}
f01003c5:	c9                   	leave  
f01003c6:	c3                   	ret    

f01003c7 <serial_intr>:

void
serial_intr(void)
{
f01003c7:	55                   	push   %ebp
f01003c8:	89 e5                	mov    %esp,%ebp
f01003ca:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003cd:	a1 64 1d 7e f0       	mov    0xf07e1d64,%eax
f01003d2:	85 c0                	test   %eax,%eax
f01003d4:	74 10                	je     f01003e6 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003d6:	83 ec 0c             	sub    $0xc,%esp
f01003d9:	68 85 03 10 f0       	push   $0xf0100385
f01003de:	e8 58 07 00 00       	call   f0100b3b <cons_intr>
f01003e3:	83 c4 10             	add    $0x10,%esp
}
f01003e6:	90                   	nop
f01003e7:	c9                   	leave  
f01003e8:	c3                   	ret    

f01003e9 <serial_init>:

void
serial_init(void)
{
f01003e9:	55                   	push   %ebp
f01003ea:	89 e5                	mov    %esp,%ebp
f01003ec:	83 ec 40             	sub    $0x40,%esp
f01003ef:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003f6:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003fa:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003fd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0100400:	ee                   	out    %al,(%dx)
f0100401:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f0100408:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f010040c:	8a 45 cf             	mov    -0x31(%ebp),%al
f010040f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100412:	ee                   	out    %al,(%dx)
f0100413:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f010041a:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f010041e:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100421:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100424:	ee                   	out    %al,(%dx)
f0100425:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f010042c:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100430:	8a 45 d1             	mov    -0x2f(%ebp),%al
f0100433:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100436:	ee                   	out    %al,(%dx)
f0100437:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f010043e:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100442:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0100445:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100448:	ee                   	out    %al,(%dx)
f0100449:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100450:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f0100454:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0100457:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010045a:	ee                   	out    %al,(%dx)
f010045b:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100462:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f0100466:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100469:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010046c:	ee                   	out    %al,(%dx)
f010046d:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100474:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100477:	89 c2                	mov    %eax,%edx
f0100479:	ec                   	in     (%dx),%al
f010047a:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f010047d:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100480:	3c ff                	cmp    $0xff,%al
f0100482:	0f 95 c0             	setne  %al
f0100485:	0f b6 c0             	movzbl %al,%eax
f0100488:	a3 64 1d 7e f0       	mov    %eax,0xf07e1d64
f010048d:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100494:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100497:	89 c2                	mov    %eax,%edx
f0100499:	ec                   	in     (%dx),%al
f010049a:	88 45 d6             	mov    %al,-0x2a(%ebp)
f010049d:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f01004a4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01004a7:	89 c2                	mov    %eax,%edx
f01004a9:	ec                   	in     (%dx),%al
f01004aa:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004ad:	90                   	nop
f01004ae:	c9                   	leave  
f01004af:	c3                   	ret    

f01004b0 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004b0:	55                   	push   %ebp
f01004b1:	89 e5                	mov    %esp,%ebp
f01004b3:	83 ec 20             	sub    $0x20,%esp
f01004b6:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004c0:	89 c2                	mov    %eax,%edx
f01004c2:	ec                   	in     (%dx),%al
f01004c3:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004c6:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004d0:	89 c2                	mov    %eax,%edx
f01004d2:	ec                   	in     (%dx),%al
f01004d3:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004d6:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004e0:	89 c2                	mov    %eax,%edx
f01004e2:	ec                   	in     (%dx),%al
f01004e3:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004e6:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004f0:	89 c2                	mov    %eax,%edx
f01004f2:	ec                   	in     (%dx),%al
f01004f3:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004f6:	90                   	nop
f01004f7:	c9                   	leave  
f01004f8:	c3                   	ret    

f01004f9 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f9:	55                   	push   %ebp
f01004fa:	89 e5                	mov    %esp,%ebp
f01004fc:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004ff:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0100506:	eb 08                	jmp    f0100510 <lpt_putc+0x17>
		delay();
f0100508:	e8 a3 ff ff ff       	call   f01004b0 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f010050d:	ff 45 fc             	incl   -0x4(%ebp)
f0100510:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f0100517:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010051a:	89 c2                	mov    %eax,%edx
f010051c:	ec                   	in     (%dx),%al
f010051d:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100520:	8a 45 eb             	mov    -0x15(%ebp),%al
f0100523:	84 c0                	test   %al,%al
f0100525:	78 09                	js     f0100530 <lpt_putc+0x37>
f0100527:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f010052e:	7e d8                	jle    f0100508 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100530:	8b 45 08             	mov    0x8(%ebp),%eax
f0100533:	0f b6 c0             	movzbl %al,%eax
f0100536:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f010053d:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100540:	8a 45 e8             	mov    -0x18(%ebp),%al
f0100543:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100546:	ee                   	out    %al,(%dx)
f0100547:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f010054e:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100552:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100555:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100558:	ee                   	out    %al,(%dx)
f0100559:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100560:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100564:	8a 45 ea             	mov    -0x16(%ebp),%al
f0100567:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010056a:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f010056b:	90                   	nop
f010056c:	c9                   	leave  
f010056d:	c3                   	ret    

f010056e <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f010056e:	55                   	push   %ebp
f010056f:	89 e5                	mov    %esp,%ebp
f0100571:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100574:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f010057b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057e:	66 8b 00             	mov    (%eax),%ax
f0100581:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100585:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100588:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f010058d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100590:	66 8b 00             	mov    (%eax),%ax
f0100593:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100597:	74 13                	je     f01005ac <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100599:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f01005a0:	c7 05 68 1d 7e f0 b4 	movl   $0x3b4,0xf07e1d68
f01005a7:	03 00 00 
f01005aa:	eb 14                	jmp    f01005c0 <cga_init+0x52>
	} else {
		*cp = was;
f01005ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005af:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005b3:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005b6:	c7 05 68 1d 7e f0 d4 	movl   $0x3d4,0xf07e1d68
f01005bd:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005c0:	a1 68 1d 7e f0       	mov    0xf07e1d68,%eax
f01005c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005c8:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005cc:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005d2:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005d3:	a1 68 1d 7e f0       	mov    0xf07e1d68,%eax
f01005d8:	40                   	inc    %eax
f01005d9:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005df:	89 c2                	mov    %eax,%edx
f01005e1:	ec                   	in     (%dx),%al
f01005e2:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005e5:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005e8:	0f b6 c0             	movzbl %al,%eax
f01005eb:	c1 e0 08             	shl    $0x8,%eax
f01005ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005f1:	a1 68 1d 7e f0       	mov    0xf07e1d68,%eax
f01005f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f9:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005fd:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100600:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100603:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f0100604:	a1 68 1d 7e f0       	mov    0xf07e1d68,%eax
f0100609:	40                   	inc    %eax
f010060a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010060d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100610:	89 c2                	mov    %eax,%edx
f0100612:	ec                   	in     (%dx),%al
f0100613:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100616:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100619:	0f b6 c0             	movzbl %al,%eax
f010061c:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f010061f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100622:	a3 6c 1d 7e f0       	mov    %eax,0xf07e1d6c
	crt_pos = pos;
f0100627:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010062a:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
}
f0100630:	90                   	nop
f0100631:	c9                   	leave  
f0100632:	c3                   	ret    

f0100633 <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f0100633:	55                   	push   %ebp
f0100634:	89 e5                	mov    %esp,%ebp
f0100636:	53                   	push   %ebx
f0100637:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f010063a:	8b 45 08             	mov    0x8(%ebp),%eax
f010063d:	b0 00                	mov    $0x0,%al
f010063f:	85 c0                	test   %eax,%eax
f0100641:	75 07                	jne    f010064a <cga_putc+0x17>
		c |= 0x0700;
f0100643:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f010064a:	8b 45 08             	mov    0x8(%ebp),%eax
f010064d:	0f b6 c0             	movzbl %al,%eax
f0100650:	83 f8 0a             	cmp    $0xa,%eax
f0100653:	74 77                	je     f01006cc <cga_putc+0x99>
f0100655:	83 f8 0a             	cmp    $0xa,%eax
f0100658:	7f 13                	jg     f010066d <cga_putc+0x3a>
f010065a:	83 f8 08             	cmp    $0x8,%eax
f010065d:	74 2e                	je     f010068d <cga_putc+0x5a>
f010065f:	83 f8 09             	cmp    $0x9,%eax
f0100662:	0f 84 a8 00 00 00    	je     f0100710 <cga_putc+0xdd>
f0100668:	e9 22 01 00 00       	jmp    f010078f <cga_putc+0x15c>
f010066d:	3d e4 00 00 00       	cmp    $0xe4,%eax
f0100672:	0f 84 de 00 00 00    	je     f0100756 <cga_putc+0x123>
f0100678:	3d e5 00 00 00       	cmp    $0xe5,%eax
f010067d:	0f 84 f1 00 00 00    	je     f0100774 <cga_putc+0x141>
f0100683:	83 f8 0d             	cmp    $0xd,%eax
f0100686:	74 5d                	je     f01006e5 <cga_putc+0xb2>
f0100688:	e9 02 01 00 00       	jmp    f010078f <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f010068d:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f0100693:	66 85 c0             	test   %ax,%ax
f0100696:	0f 84 4f 01 00 00    	je     f01007eb <cga_putc+0x1b8>
			crt_pos--;
f010069c:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01006a2:	48                   	dec    %eax
f01006a3:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f01006a9:	8b 15 6c 1d 7e f0    	mov    0xf07e1d6c,%edx
f01006af:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01006b5:	0f b7 c0             	movzwl %ax,%eax
f01006b8:	01 c0                	add    %eax,%eax
f01006ba:	01 c2                	add    %eax,%edx
f01006bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01006bf:	b0 00                	mov    $0x0,%al
f01006c1:	83 c8 20             	or     $0x20,%eax
f01006c4:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006c7:	e9 1f 01 00 00       	jmp    f01007eb <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f01006cc:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01006d2:	83 c0 50             	add    $0x50,%eax
f01006d5:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
		text_length = 0;
f01006db:	c7 05 60 1d 7e f0 00 	movl   $0x0,0xf07e1d60
f01006e2:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006e5:	66 8b 0d 70 1d 7e f0 	mov    0xf07e1d70,%cx
f01006ec:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01006f2:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01006fc:	66 f7 f3             	div    %bx
f01006ff:	89 d0                	mov    %edx,%eax
f0100701:	29 c1                	sub    %eax,%ecx
f0100703:	89 c8                	mov    %ecx,%eax
f0100705:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
		break;
f010070b:	e9 e5 00 00 00       	jmp    f01007f5 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f0100710:	83 ec 0c             	sub    $0xc,%esp
f0100713:	6a 20                	push   $0x20
f0100715:	e8 ba 05 00 00       	call   f0100cd4 <cons_putc>
f010071a:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010071d:	83 ec 0c             	sub    $0xc,%esp
f0100720:	6a 20                	push   $0x20
f0100722:	e8 ad 05 00 00       	call   f0100cd4 <cons_putc>
f0100727:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010072a:	83 ec 0c             	sub    $0xc,%esp
f010072d:	6a 20                	push   $0x20
f010072f:	e8 a0 05 00 00       	call   f0100cd4 <cons_putc>
f0100734:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100737:	83 ec 0c             	sub    $0xc,%esp
f010073a:	6a 20                	push   $0x20
f010073c:	e8 93 05 00 00       	call   f0100cd4 <cons_putc>
f0100741:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100744:	83 ec 0c             	sub    $0xc,%esp
f0100747:	6a 20                	push   $0x20
f0100749:	e8 86 05 00 00       	call   f0100cd4 <cons_putc>
f010074e:	83 c4 10             	add    $0x10,%esp
		break;
f0100751:	e9 9f 00 00 00       	jmp    f01007f5 <cga_putc+0x1c2>
	case 228:
              if(crt_pos>0)
f0100756:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f010075c:	66 85 c0             	test   %ax,%ax
f010075f:	0f 84 89 00 00 00    	je     f01007ee <cga_putc+0x1bb>
		     crt_pos--;
f0100765:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f010076b:	48                   	dec    %eax
f010076c:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
		     break;
f0100772:	eb 7a                	jmp    f01007ee <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100774:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f010077a:	66 3d cf 07          	cmp    $0x7cf,%ax
f010077e:	77 71                	ja     f01007f1 <cga_putc+0x1be>
			     crt_pos++;
f0100780:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f0100786:	40                   	inc    %eax
f0100787:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
			     break;
f010078d:	eb 62                	jmp    f01007f1 <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f010078f:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100796:	74 5c                	je     f01007f4 <cga_putc+0x1c1>
f0100798:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f010079f:	74 53                	je     f01007f4 <cga_putc+0x1c1>
		crt_buf[crt_pos++] = c;		/* write the character */
f01007a1:	8b 0d 6c 1d 7e f0    	mov    0xf07e1d6c,%ecx
f01007a7:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01007ad:	8d 50 01             	lea    0x1(%eax),%edx
f01007b0:	66 89 15 70 1d 7e f0 	mov    %dx,0xf07e1d70
f01007b7:	0f b7 c0             	movzwl %ax,%eax
f01007ba:	01 c0                	add    %eax,%eax
f01007bc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01007bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01007c2:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f01007c5:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01007cb:	0f b7 c0             	movzwl %ax,%eax
f01007ce:	8b 15 60 1d 7e f0    	mov    0xf07e1d60,%edx
f01007d4:	81 c2 80 07 00 00    	add    $0x780,%edx
f01007da:	39 d0                	cmp    %edx,%eax
f01007dc:	7e 16                	jle    f01007f4 <cga_putc+0x1c1>
				text_length++;
f01007de:	a1 60 1d 7e f0       	mov    0xf07e1d60,%eax
f01007e3:	40                   	inc    %eax
f01007e4:	a3 60 1d 7e f0       	mov    %eax,0xf07e1d60
		}
		break;
f01007e9:	eb 09                	jmp    f01007f4 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f01007eb:	90                   	nop
f01007ec:	eb 07                	jmp    f01007f5 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
              if(crt_pos>0)
		     crt_pos--;
		     break;
f01007ee:	90                   	nop
f01007ef:	eb 04                	jmp    f01007f5 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			     crt_pos++;
			     break;
f01007f1:	90                   	nop
f01007f2:	eb 01                	jmp    f01007f5 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
		crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01007f4:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01007f5:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01007fb:	66 3d cf 07          	cmp    $0x7cf,%ax
f01007ff:	76 58                	jbe    f0100859 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f0100801:	a1 6c 1d 7e f0       	mov    0xf07e1d6c,%eax
f0100806:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f010080c:	a1 6c 1d 7e f0       	mov    0xf07e1d6c,%eax
f0100811:	83 ec 04             	sub    $0x4,%esp
f0100814:	68 00 0f 00 00       	push   $0xf00
f0100819:	52                   	push   %edx
f010081a:	50                   	push   %eax
f010081b:	e8 7b c7 01 00       	call   f011cf9b <memcpy>
f0100820:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100823:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f010082a:	eb 15                	jmp    f0100841 <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f010082c:	8b 15 6c 1d 7e f0    	mov    0xf07e1d6c,%edx
f0100832:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100835:	01 c0                	add    %eax,%eax
f0100837:	01 d0                	add    %edx,%eax
f0100839:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010083e:	ff 45 f4             	incl   -0xc(%ebp)
f0100841:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f0100848:	7e e2                	jle    f010082c <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f010084a:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f0100850:	83 e8 50             	sub    $0x50,%eax
f0100853:	66 a3 70 1d 7e f0    	mov    %ax,0xf07e1d70
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100859:	a1 68 1d 7e f0       	mov    0xf07e1d68,%eax
f010085e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100861:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100865:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100868:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010086b:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f010086c:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f0100872:	66 c1 e8 08          	shr    $0x8,%ax
f0100876:	0f b6 c0             	movzbl %al,%eax
f0100879:	8b 15 68 1d 7e f0    	mov    0xf07e1d68,%edx
f010087f:	42                   	inc    %edx
f0100880:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100883:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100886:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100889:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010088c:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f010088d:	a1 68 1d 7e f0       	mov    0xf07e1d68,%eax
f0100892:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100895:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100899:	8a 45 e2             	mov    -0x1e(%ebp),%al
f010089c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010089f:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01008a0:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01008a6:	0f b6 c0             	movzbl %al,%eax
f01008a9:	8b 15 68 1d 7e f0    	mov    0xf07e1d68,%edx
f01008af:	42                   	inc    %edx
f01008b0:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01008b3:	88 45 e3             	mov    %al,-0x1d(%ebp)
f01008b6:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01008b9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01008bc:	ee                   	out    %al,(%dx)
}
f01008bd:	90                   	nop
f01008be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01008c1:	c9                   	leave  
f01008c2:	c3                   	ret    

f01008c3 <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f01008c3:	55                   	push   %ebp
f01008c4:	89 e5                	mov    %esp,%ebp
f01008c6:	83 ec 28             	sub    $0x28,%esp
f01008c9:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01008d3:	89 c2                	mov    %eax,%edx
f01008d5:	ec                   	in     (%dx),%al
f01008d6:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01008d9:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f01008dc:	0f b6 c0             	movzbl %al,%eax
f01008df:	83 e0 01             	and    $0x1,%eax
f01008e2:	85 c0                	test   %eax,%eax
f01008e4:	75 0a                	jne    f01008f0 <kbd_proc_data+0x2d>
		return -1;
f01008e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01008eb:	e9 2a 02 00 00       	jmp    f0100b1a <kbd_proc_data+0x257>
f01008f0:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01008f7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01008fa:	89 c2                	mov    %eax,%edx
f01008fc:	ec                   	in     (%dx),%al
f01008fd:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100900:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100903:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100906:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f010090a:	75 17                	jne    f0100923 <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f010090c:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f0100911:	83 c8 40             	or     $0x40,%eax
f0100914:	a3 88 1f 7e f0       	mov    %eax,0xf07e1f88
		return 0;
f0100919:	b8 00 00 00 00       	mov    $0x0,%eax
f010091e:	e9 f7 01 00 00       	jmp    f0100b1a <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100923:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100926:	84 c0                	test   %al,%al
f0100928:	79 44                	jns    f010096e <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f010092a:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f010092f:	83 e0 40             	and    $0x40,%eax
f0100932:	85 c0                	test   %eax,%eax
f0100934:	75 08                	jne    f010093e <kbd_proc_data+0x7b>
f0100936:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100939:	83 e0 7f             	and    $0x7f,%eax
f010093c:	eb 03                	jmp    f0100941 <kbd_proc_data+0x7e>
f010093e:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100941:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100944:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100948:	8a 80 20 c0 15 f0    	mov    -0xfea3fe0(%eax),%al
f010094e:	83 c8 40             	or     $0x40,%eax
f0100951:	0f b6 c0             	movzbl %al,%eax
f0100954:	f7 d0                	not    %eax
f0100956:	89 c2                	mov    %eax,%edx
f0100958:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f010095d:	21 d0                	and    %edx,%eax
f010095f:	a3 88 1f 7e f0       	mov    %eax,0xf07e1f88
		return 0;
f0100964:	b8 00 00 00 00       	mov    $0x0,%eax
f0100969:	e9 ac 01 00 00       	jmp    f0100b1a <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f010096e:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f0100973:	83 e0 40             	and    $0x40,%eax
f0100976:	85 c0                	test   %eax,%eax
f0100978:	74 11                	je     f010098b <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f010097a:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f010097e:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f0100983:	83 e0 bf             	and    $0xffffffbf,%eax
f0100986:	a3 88 1f 7e f0       	mov    %eax,0xf07e1f88
	}

	shift |= shiftcode[data];
f010098b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f010098f:	8a 80 20 c0 15 f0    	mov    -0xfea3fe0(%eax),%al
f0100995:	0f b6 d0             	movzbl %al,%edx
f0100998:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f010099d:	09 d0                	or     %edx,%eax
f010099f:	a3 88 1f 7e f0       	mov    %eax,0xf07e1f88
	shift ^= togglecode[data];
f01009a4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009a8:	8a 80 20 c1 15 f0    	mov    -0xfea3ee0(%eax),%al
f01009ae:	0f b6 d0             	movzbl %al,%edx
f01009b1:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f01009b6:	31 d0                	xor    %edx,%eax
f01009b8:	a3 88 1f 7e f0       	mov    %eax,0xf07e1f88

	c = charcode[shift & (CTL | SHIFT)][data];
f01009bd:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f01009c2:	83 e0 03             	and    $0x3,%eax
f01009c5:	8b 14 85 20 c5 15 f0 	mov    -0xfea3ae0(,%eax,4),%edx
f01009cc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01009d0:	01 d0                	add    %edx,%eax
f01009d2:	8a 00                	mov    (%eax),%al
f01009d4:	0f b6 c0             	movzbl %al,%eax
f01009d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f01009da:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f01009e1:	0f 85 9c 00 00 00    	jne    f0100a83 <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f01009e7:	a1 60 1d 7e f0       	mov    0xf07e1d60,%eax
f01009ec:	85 c0                	test   %eax,%eax
f01009ee:	0f 8e 85 00 00 00    	jle    f0100a79 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f01009f4:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f01009fa:	0f b7 c0             	movzwl %ax,%eax
f01009fd:	8b 15 60 1d 7e f0    	mov    0xf07e1d60,%edx
f0100a03:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100a09:	39 d0                	cmp    %edx,%eax
f0100a0b:	75 0a                	jne    f0100a17 <kbd_proc_data+0x154>
				return 0;
f0100a0d:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a12:	e9 03 01 00 00       	jmp    f0100b1a <kbd_proc_data+0x257>
			else {
			text_length--;
f0100a17:	a1 60 1d 7e f0       	mov    0xf07e1d60,%eax
f0100a1c:	48                   	dec    %eax
f0100a1d:	a3 60 1d 7e f0       	mov    %eax,0xf07e1d60
				int crt_pos_Length = crt_pos - 1925;
f0100a22:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f0100a28:	0f b7 c0             	movzwl %ax,%eax
f0100a2b:	2d 85 07 00 00       	sub    $0x785,%eax
f0100a30:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a33:	66 a1 70 1d 7e f0    	mov    0xf07e1d70,%ax
f0100a39:	0f b7 c0             	movzwl %ax,%eax
f0100a3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a3f:	eb 26                	jmp    f0100a67 <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100a41:	8b 15 6c 1d 7e f0    	mov    0xf07e1d6c,%edx
f0100a47:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100a4a:	01 c0                	add    %eax,%eax
f0100a4c:	01 c2                	add    %eax,%edx
f0100a4e:	a1 6c 1d 7e f0       	mov    0xf07e1d6c,%eax
f0100a53:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100a56:	41                   	inc    %ecx
f0100a57:	01 c9                	add    %ecx,%ecx
f0100a59:	01 c8                	add    %ecx,%eax
f0100a5b:	66 8b 00             	mov    (%eax),%ax
f0100a5e:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100a61:	ff 45 e8             	incl   -0x18(%ebp)
f0100a64:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
			text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100a67:	a1 60 1d 7e f0       	mov    0xf07e1d60,%eax
f0100a6c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100a6f:	7e d0                	jle    f0100a41 <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a74:	e9 a1 00 00 00       	jmp    f0100b1a <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100a79:	b8 00 00 00 00       	mov    $0x0,%eax
f0100a7e:	e9 97 00 00 00       	jmp    f0100b1a <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100a83:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f0100a88:	83 e0 08             	and    $0x8,%eax
f0100a8b:	85 c0                	test   %eax,%eax
f0100a8d:	74 22                	je     f0100ab1 <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100a8f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100a93:	7e 0c                	jle    f0100aa1 <kbd_proc_data+0x1de>
f0100a95:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100a99:	7f 06                	jg     f0100aa1 <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100a9b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100a9f:	eb 10                	jmp    f0100ab1 <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100aa1:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100aa5:	7e 0a                	jle    f0100ab1 <kbd_proc_data+0x1ee>
f0100aa7:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100aab:	7f 04                	jg     f0100ab1 <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100aad:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100ab1:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f0100ab6:	83 f8 10             	cmp    $0x10,%eax
f0100ab9:	75 13                	jne    f0100ace <kbd_proc_data+0x20b>
f0100abb:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100abf:	7e 0d                	jle    f0100ace <kbd_proc_data+0x20b>
f0100ac1:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100ac5:	7f 07                	jg     f0100ace <kbd_proc_data+0x20b>
		return 0;
f0100ac7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100acc:	eb 4c                	jmp    f0100b1a <kbd_proc_data+0x257>
	if (c == 255)
f0100ace:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100ad5:	75 07                	jne    f0100ade <kbd_proc_data+0x21b>
		return 0;
f0100ad7:	b8 00 00 00 00       	mov    $0x0,%eax
f0100adc:	eb 3c                	jmp    f0100b1a <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100ade:	a1 88 1f 7e f0       	mov    0xf07e1f88,%eax
f0100ae3:	f7 d0                	not    %eax
f0100ae5:	83 e0 06             	and    $0x6,%eax
f0100ae8:	85 c0                	test   %eax,%eax
f0100aea:	75 2b                	jne    f0100b17 <kbd_proc_data+0x254>
f0100aec:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100af3:	75 22                	jne    f0100b17 <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100af5:	83 ec 0c             	sub    $0xc,%esp
f0100af8:	68 28 db 11 f0       	push   $0xf011db28
f0100afd:	e8 02 67 00 00       	call   f0107204 <cprintf>
f0100b02:	83 c4 10             	add    $0x10,%esp
f0100b05:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100b0c:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100b10:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100b13:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100b16:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100b17:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100b1a:	c9                   	leave  
f0100b1b:	c3                   	ret    

f0100b1c <kbd_intr>:

void
kbd_intr(void)
{
f0100b1c:	55                   	push   %ebp
f0100b1d:	89 e5                	mov    %esp,%ebp
f0100b1f:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100b22:	83 ec 0c             	sub    $0xc,%esp
f0100b25:	68 c3 08 10 f0       	push   $0xf01008c3
f0100b2a:	e8 0c 00 00 00       	call   f0100b3b <cons_intr>
f0100b2f:	83 c4 10             	add    $0x10,%esp
}
f0100b32:	90                   	nop
f0100b33:	c9                   	leave  
f0100b34:	c3                   	ret    

f0100b35 <kbd_init>:

void
kbd_init(void)
{
f0100b35:	55                   	push   %ebp
f0100b36:	89 e5                	mov    %esp,%ebp
}
f0100b38:	90                   	nop
f0100b39:	5d                   	pop    %ebp
f0100b3a:	c3                   	ret    

f0100b3b <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100b3b:	55                   	push   %ebp
f0100b3c:	89 e5                	mov    %esp,%ebp
f0100b3e:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100b41:	eb 35                	jmp    f0100b78 <cons_intr+0x3d>
		if (c == 0)
f0100b43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100b47:	75 02                	jne    f0100b4b <cons_intr+0x10>
			continue;
f0100b49:	eb 2d                	jmp    f0100b78 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100b4b:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100b50:	8d 50 01             	lea    0x1(%eax),%edx
f0100b53:	89 15 84 1f 7e f0    	mov    %edx,0xf07e1f84
f0100b59:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100b5c:	88 90 80 1d 7e f0    	mov    %dl,-0xf81e280(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100b62:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100b67:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b6c:	75 0a                	jne    f0100b78 <cons_intr+0x3d>
			cons.wpos = 0;
f0100b6e:	c7 05 84 1f 7e f0 00 	movl   $0x0,0xf07e1f84
f0100b75:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100b78:	8b 45 08             	mov    0x8(%ebp),%eax
f0100b7b:	ff d0                	call   *%eax
f0100b7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100b80:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100b84:	75 bd                	jne    f0100b43 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100b86:	90                   	nop
f0100b87:	c9                   	leave  
f0100b88:	c3                   	ret    

f0100b89 <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100b89:	55                   	push   %ebp
f0100b8a:	89 e5                	mov    %esp,%ebp
f0100b8c:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100b8f:	e8 33 f8 ff ff       	call   f01003c7 <serial_intr>
	kbd_intr();
f0100b94:	e8 83 ff ff ff       	call   f0100b1c <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100b99:	8b 15 80 1f 7e f0    	mov    0xf07e1f80,%edx
f0100b9f:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100ba4:	39 c2                	cmp    %eax,%edx
f0100ba6:	74 35                	je     f0100bdd <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100ba8:	a1 80 1f 7e f0       	mov    0xf07e1f80,%eax
f0100bad:	8d 50 01             	lea    0x1(%eax),%edx
f0100bb0:	89 15 80 1f 7e f0    	mov    %edx,0xf07e1f80
f0100bb6:	8a 80 80 1d 7e f0    	mov    -0xf81e280(%eax),%al
f0100bbc:	0f b6 c0             	movzbl %al,%eax
f0100bbf:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100bc2:	a1 80 1f 7e f0       	mov    0xf07e1f80,%eax
f0100bc7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100bcc:	75 0a                	jne    f0100bd8 <cons_getc+0x4f>
			cons.rpos = 0;
f0100bce:	c7 05 80 1f 7e f0 00 	movl   $0x0,0xf07e1f80
f0100bd5:	00 00 00 
		return c;
f0100bd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100bdb:	eb 05                	jmp    f0100be2 <cons_getc+0x59>
	}
	return 0;
f0100bdd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100be2:	c9                   	leave  
f0100be3:	c3                   	ret    

f0100be4 <cons_getc2>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100bea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100bf1:	a1 64 1d 7e f0       	mov    0xf07e1d64,%eax
f0100bf6:	85 c0                	test   %eax,%eax
f0100bf8:	74 41                	je     f0100c3b <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100bfa:	e8 86 f7 ff ff       	call   f0100385 <serial_proc_data>
f0100bff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100c02:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100c06:	74 33                	je     f0100c3b <cons_getc2+0x57>
				if (c1 == 0)
f0100c08:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100c0c:	74 2d                	je     f0100c3b <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100c0e:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100c13:	8d 50 01             	lea    0x1(%eax),%edx
f0100c16:	89 15 84 1f 7e f0    	mov    %edx,0xf07e1f84
f0100c1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100c1f:	88 90 80 1d 7e f0    	mov    %dl,-0xf81e280(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100c25:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100c2a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c2f:	75 0a                	jne    f0100c3b <cons_getc2+0x57>
						cons.wpos = 0;
f0100c31:	c7 05 84 1f 7e f0 00 	movl   $0x0,0xf07e1f84
f0100c38:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100c3b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100c42:	e8 7c fc ff ff       	call   f01008c3 <kbd_proc_data>
f0100c47:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100c4a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100c4e:	74 33                	je     f0100c83 <cons_getc2+0x9f>
			if (c2 == 0)
f0100c50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c54:	74 2d                	je     f0100c83 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100c56:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100c5b:	8d 50 01             	lea    0x1(%eax),%edx
f0100c5e:	89 15 84 1f 7e f0    	mov    %edx,0xf07e1f84
f0100c64:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100c67:	88 90 80 1d 7e f0    	mov    %dl,-0xf81e280(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100c6d:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100c72:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100c77:	75 0a                	jne    f0100c83 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100c79:	c7 05 84 1f 7e f0 00 	movl   $0x0,0xf07e1f84
f0100c80:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100c83:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100c87:	7e 44                	jle    f0100ccd <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100c89:	8b 15 80 1f 7e f0    	mov    0xf07e1f80,%edx
f0100c8f:	a1 84 1f 7e f0       	mov    0xf07e1f84,%eax
f0100c94:	39 c2                	cmp    %eax,%edx
f0100c96:	74 35                	je     f0100ccd <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100c98:	a1 80 1f 7e f0       	mov    0xf07e1f80,%eax
f0100c9d:	8d 50 01             	lea    0x1(%eax),%edx
f0100ca0:	89 15 80 1f 7e f0    	mov    %edx,0xf07e1f80
f0100ca6:	8a 80 80 1d 7e f0    	mov    -0xf81e280(%eax),%al
f0100cac:	0f b6 c0             	movzbl %al,%eax
f0100caf:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100cb2:	a1 80 1f 7e f0       	mov    0xf07e1f80,%eax
f0100cb7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100cbc:	75 0a                	jne    f0100cc8 <cons_getc2+0xe4>
				cons.rpos = 0;
f0100cbe:	c7 05 80 1f 7e f0 00 	movl   $0x0,0xf07e1f80
f0100cc5:	00 00 00 
			return c;
f0100cc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100ccb:	eb 05                	jmp    f0100cd2 <cons_getc2+0xee>
		}
	}
	return 0;
f0100ccd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100cd2:	c9                   	leave  
f0100cd3:	c3                   	ret    

f0100cd4 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100cd4:	55                   	push   %ebp
f0100cd5:	89 e5                	mov    %esp,%ebp
f0100cd7:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100cda:	ff 75 08             	pushl  0x8(%ebp)
f0100cdd:	e8 17 f8 ff ff       	call   f01004f9 <lpt_putc>
f0100ce2:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100ce5:	83 ec 0c             	sub    $0xc,%esp
f0100ce8:	ff 75 08             	pushl  0x8(%ebp)
f0100ceb:	e8 43 f9 ff ff       	call   f0100633 <cga_putc>
f0100cf0:	83 c4 10             	add    $0x10,%esp
}
f0100cf3:	90                   	nop
f0100cf4:	c9                   	leave  
f0100cf5:	c3                   	ret    

f0100cf6 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100cf6:	55                   	push   %ebp
f0100cf7:	89 e5                	mov    %esp,%ebp
f0100cf9:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100cfc:	e8 6d f8 ff ff       	call   f010056e <cga_init>
	kbd_init();
f0100d01:	e8 2f fe ff ff       	call   f0100b35 <kbd_init>
	serial_init();
f0100d06:	e8 de f6 ff ff       	call   f01003e9 <serial_init>

	if (!serial_exists)
f0100d0b:	a1 64 1d 7e f0       	mov    0xf07e1d64,%eax
f0100d10:	85 c0                	test   %eax,%eax
f0100d12:	75 10                	jne    f0100d24 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100d14:	83 ec 0c             	sub    $0xc,%esp
f0100d17:	68 34 db 11 f0       	push   $0xf011db34
f0100d1c:	e8 e3 64 00 00       	call   f0107204 <cprintf>
f0100d21:	83 c4 10             	add    $0x10,%esp
}
f0100d24:	90                   	nop
f0100d25:	c9                   	leave  
f0100d26:	c3                   	ret    

f0100d27 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100d27:	55                   	push   %ebp
f0100d28:	89 e5                	mov    %esp,%ebp
f0100d2a:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100d2d:	83 ec 0c             	sub    $0xc,%esp
f0100d30:	ff 75 08             	pushl  0x8(%ebp)
f0100d33:	e8 9c ff ff ff       	call   f0100cd4 <cons_putc>
f0100d38:	83 c4 10             	add    $0x10,%esp
}
f0100d3b:	90                   	nop
f0100d3c:	c9                   	leave  
f0100d3d:	c3                   	ret    

f0100d3e <getchar>:

int
getchar(void)
{
f0100d3e:	55                   	push   %ebp
f0100d3f:	89 e5                	mov    %esp,%ebp
f0100d41:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100d44:	e8 40 fe ff ff       	call   f0100b89 <cons_getc>
f0100d49:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d50:	74 f2                	je     f0100d44 <getchar+0x6>
		/* do nothing */;
	return c;
f0100d52:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100d55:	c9                   	leave  
f0100d56:	c3                   	ret    

f0100d57 <iscons>:

int
iscons(int fdnum)
{
f0100d57:	55                   	push   %ebp
f0100d58:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100d5a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100d5f:	5d                   	pop    %ebp
f0100d60:	c3                   	ret    

f0100d61 <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0100d61:	55                   	push   %ebp
f0100d62:	89 e5                	mov    %esp,%ebp
f0100d64:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100d67:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d6a:	c1 e8 0c             	shr    $0xc,%eax
f0100d6d:	89 c2                	mov    %eax,%edx
f0100d6f:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0100d74:	39 c2                	cmp    %eax,%edx
f0100d76:	72 14                	jb     f0100d8c <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100d78:	83 ec 04             	sub    $0x4,%esp
f0100d7b:	68 54 db 11 f0       	push   $0xf011db54
f0100d80:	6a 78                	push   $0x78
f0100d82:	68 79 db 11 f0       	push   $0xf011db79
f0100d87:	e8 23 f4 ff ff       	call   f01001af <_panic>
	return &frames_info[PPN(physical_address)];
f0100d8c:	8b 15 24 0d 80 f0    	mov    0xf0800d24,%edx
f0100d92:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d95:	c1 e8 0c             	shr    $0xc,%eax
f0100d98:	89 c1                	mov    %eax,%ecx
f0100d9a:	89 c8                	mov    %ecx,%eax
f0100d9c:	01 c0                	add    %eax,%eax
f0100d9e:	01 c8                	add    %ecx,%eax
f0100da0:	c1 e0 03             	shl    $0x3,%eax
f0100da3:	01 d0                	add    %edx,%eax
}
f0100da5:	c9                   	leave  
f0100da6:	c3                   	ret    

f0100da7 <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100da7:	55                   	push   %ebp
f0100da8:	89 e5                	mov    %esp,%ebp
f0100daa:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100dad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100db4:	eb 10                	jmp    f0100dc6 <clearandwritecommand+0x1f>
		cputchar('\b');
f0100db6:	83 ec 0c             	sub    $0xc,%esp
f0100db9:	6a 08                	push   $0x8
f0100dbb:	e8 67 ff ff ff       	call   f0100d27 <cputchar>
f0100dc0:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100dc3:	ff 45 f4             	incl   -0xc(%ebp)
f0100dc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0100dc9:	8b 00                	mov    (%eax),%eax
f0100dcb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100dce:	7f e6                	jg     f0100db6 <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100dd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100dd3:	c1 e0 0a             	shl    $0xa,%eax
f0100dd6:	05 e0 b8 7f f0       	add    $0xf07fb8e0,%eax
f0100ddb:	83 ec 0c             	sub    $0xc,%esp
f0100dde:	50                   	push   %eax
f0100ddf:	e8 99 bf 01 00       	call   f011cd7d <strlen>
f0100de4:	83 c4 10             	add    $0x10,%esp
f0100de7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100dea:	83 ec 04             	sub    $0x4,%esp
f0100ded:	68 00 04 00 00       	push   $0x400
f0100df2:	68 00 09 80 f0       	push   $0xf0800900
f0100df7:	ff 75 10             	pushl  0x10(%ebp)
f0100dfa:	e8 9c c1 01 00       	call   f011cf9b <memcpy>
f0100dff:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100e02:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100e0b:	eb 52                	jmp    f0100e5f <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0100e0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e10:	8b 00                	mov    (%eax),%eax
f0100e12:	8b 55 0c             	mov    0xc(%ebp),%edx
f0100e15:	c1 e2 0a             	shl    $0xa,%edx
f0100e18:	01 d0                	add    %edx,%eax
f0100e1a:	05 e0 b8 7f f0       	add    $0xf07fb8e0,%eax
f0100e1f:	8a 00                	mov    (%eax),%al
f0100e21:	0f be c0             	movsbl %al,%eax
f0100e24:	83 ec 0c             	sub    $0xc,%esp
f0100e27:	50                   	push   %eax
f0100e28:	e8 fa fe ff ff       	call   f0100d27 <cputchar>
f0100e2d:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0100e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e33:	8b 00                	mov    (%eax),%eax
f0100e35:	89 c2                	mov    %eax,%edx
f0100e37:	8b 45 10             	mov    0x10(%ebp),%eax
f0100e3a:	01 c2                	add    %eax,%edx
f0100e3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e3f:	8b 00                	mov    (%eax),%eax
f0100e41:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0100e44:	c1 e1 0a             	shl    $0xa,%ecx
f0100e47:	01 c8                	add    %ecx,%eax
f0100e49:	05 e0 b8 7f f0       	add    $0xf07fb8e0,%eax
f0100e4e:	8a 00                	mov    (%eax),%al
f0100e50:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100e52:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e55:	8b 00                	mov    (%eax),%eax
f0100e57:	8d 50 01             	lea    0x1(%eax),%edx
f0100e5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e5d:	89 10                	mov    %edx,(%eax)
f0100e5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100e62:	8b 00                	mov    (%eax),%eax
f0100e64:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100e67:	7c a4                	jl     f0100e0d <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f0100e69:	8b 45 14             	mov    0x14(%ebp),%eax
f0100e6c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100e6f:	89 10                	mov    %edx,(%eax)
}
f0100e71:	90                   	nop
f0100e72:	c9                   	leave  
f0100e73:	c3                   	ret    

f0100e74 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0100e74:	55                   	push   %ebp
f0100e75:	89 e5                	mov    %esp,%ebp
f0100e77:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f0100e7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100e81:	eb 10                	jmp    f0100e93 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0100e83:	83 ec 0c             	sub    $0xc,%esp
f0100e86:	6a 08                	push   $0x8
f0100e88:	e8 9a fe ff ff       	call   f0100d27 <cputchar>
f0100e8d:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0100e90:	ff 45 f4             	incl   -0xc(%ebp)
f0100e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100e96:	3b 45 08             	cmp    0x8(%ebp),%eax
f0100e99:	7c e8                	jl     f0100e83 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0100e9b:	83 ec 0c             	sub    $0xc,%esp
f0100e9e:	ff 75 0c             	pushl  0xc(%ebp)
f0100ea1:	e8 d7 be 01 00       	call   f011cd7d <strlen>
f0100ea6:	83 c4 10             	add    $0x10,%esp
f0100ea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100eac:	83 ec 04             	sub    $0x4,%esp
f0100eaf:	68 00 04 00 00       	push   $0x400
f0100eb4:	68 00 09 80 f0       	push   $0xf0800900
f0100eb9:	ff 75 10             	pushl  0x10(%ebp)
f0100ebc:	e8 da c0 01 00       	call   f011cf9b <memcpy>
f0100ec1:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ec4:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ec7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0100ecd:	eb 46                	jmp    f0100f15 <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f0100ecf:	8b 45 14             	mov    0x14(%ebp),%eax
f0100ed2:	8b 00                	mov    (%eax),%eax
f0100ed4:	89 c2                	mov    %eax,%edx
f0100ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100ed9:	01 d0                	add    %edx,%eax
f0100edb:	8a 00                	mov    (%eax),%al
f0100edd:	0f be c0             	movsbl %al,%eax
f0100ee0:	83 ec 0c             	sub    $0xc,%esp
f0100ee3:	50                   	push   %eax
f0100ee4:	e8 3e fe ff ff       	call   f0100d27 <cputchar>
f0100ee9:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f0100eec:	8b 45 14             	mov    0x14(%ebp),%eax
f0100eef:	8b 00                	mov    (%eax),%eax
f0100ef1:	89 c2                	mov    %eax,%edx
f0100ef3:	8b 45 10             	mov    0x10(%ebp),%eax
f0100ef6:	01 c2                	add    %eax,%edx
f0100ef8:	8b 45 14             	mov    0x14(%ebp),%eax
f0100efb:	8b 00                	mov    (%eax),%eax
f0100efd:	89 c1                	mov    %eax,%ecx
f0100eff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f02:	01 c8                	add    %ecx,%eax
f0100f04:	8a 00                	mov    (%eax),%al
f0100f06:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0100f08:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f0b:	8b 00                	mov    (%eax),%eax
f0100f0d:	8d 50 01             	lea    0x1(%eax),%edx
f0100f10:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f13:	89 10                	mov    %edx,(%eax)
f0100f15:	8b 45 14             	mov    0x14(%ebp),%eax
f0100f18:	8b 00                	mov    (%eax),%eax
f0100f1a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0100f1d:	7c b0                	jl     f0100ecf <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0100f1f:	8b 45 18             	mov    0x18(%ebp),%eax
f0100f22:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100f25:	89 10                	mov    %edx,(%eax)
}
f0100f27:	90                   	nop
f0100f28:	c9                   	leave  
f0100f29:	c3                   	ret    

f0100f2a <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f0100f2a:	55                   	push   %ebp
f0100f2b:	89 e5                	mov    %esp,%ebp
f0100f2d:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0100f30:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100f37:	eb 21                	jmp    f0100f5a <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f0100f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f3c:	c1 e0 0a             	shl    $0xa,%eax
f0100f3f:	05 e0 28 7e f0       	add    $0xf07e28e0,%eax
f0100f44:	83 ec 04             	sub    $0x4,%esp
f0100f47:	68 00 04 00 00       	push   $0x400
f0100f4c:	6a 00                	push   $0x0
f0100f4e:	50                   	push   %eax
f0100f4f:	e8 17 c0 01 00       	call   f011cf6b <memset>
f0100f54:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f0100f57:	ff 45 f4             	incl   -0xc(%ebp)
f0100f5a:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0100f5e:	7e d9                	jle    f0100f39 <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0100f60:	90                   	nop
f0100f61:	c9                   	leave  
f0100f62:	c3                   	ret    

f0100f63 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0100f63:	55                   	push   %ebp
f0100f64:	89 e5                	mov    %esp,%ebp
f0100f66:	57                   	push   %edi
f0100f67:	53                   	push   %ebx
f0100f68:	81 ec b0 08 00 00    	sub    $0x8b0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0100f6e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0100f72:	74 13                	je     f0100f87 <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0100f74:	83 ec 08             	sub    $0x8,%esp
f0100f77:	ff 75 08             	pushl  0x8(%ebp)
f0100f7a:	68 13 e4 11 f0       	push   $0xf011e413
f0100f7f:	e8 80 62 00 00       	call   f0107204 <cprintf>
f0100f84:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f0100f87:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f0100f8c:	40                   	inc    %eax
f0100f8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0100f90:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
f0100f97:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100f9a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0100f9d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100fa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f0100fa3:	83 ec 0c             	sub    $0xc,%esp
f0100fa6:	6a 00                	push   $0x0
f0100fa8:	e8 aa fd ff ff       	call   f0100d57 <iscons>
f0100fad:	83 c4 10             	add    $0x10,%esp
f0100fb0:	89 45 ac             	mov    %eax,-0x54(%ebp)
	while (1) {
		c = getchar();
f0100fb3:	e8 86 fd ff ff       	call   f0100d3e <getchar>
f0100fb8:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if (i > lastIndex)
f0100fbb:	8b 55 90             	mov    -0x70(%ebp),%edx
f0100fbe:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0100fc1:	39 c2                	cmp    %eax,%edx
f0100fc3:	7e 06                	jle    f0100fcb <command_prompt_readline+0x68>
			lastIndex = i;
f0100fc5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0100fc8:	89 45 8c             	mov    %eax,-0x74(%ebp)
		if (c < 0) {
f0100fcb:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0100fcf:	79 22                	jns    f0100ff3 <command_prompt_readline+0x90>

			if (c != -E_EOF)
f0100fd1:	83 7d a8 07          	cmpl   $0x7,-0x58(%ebp)
f0100fd5:	0f 84 47 08 00 00    	je     f0101822 <command_prompt_readline+0x8bf>
				cprintf("read error: %e\n", c);
f0100fdb:	83 ec 08             	sub    $0x8,%esp
f0100fde:	ff 75 a8             	pushl  -0x58(%ebp)
f0100fe1:	68 16 e4 11 f0       	push   $0xf011e416
f0100fe6:	e8 19 62 00 00       	call   f0107204 <cprintf>
f0100feb:	83 c4 10             	add    $0x10,%esp
			return;
f0100fee:	e9 2f 08 00 00       	jmp    f0101822 <command_prompt_readline+0x8bf>
		} else if (c == 226) { // Up arrow
f0100ff3:	81 7d a8 e2 00 00 00 	cmpl   $0xe2,-0x58(%ebp)
f0100ffa:	75 24                	jne    f0101020 <command_prompt_readline+0xbd>
			if (commandidx)
f0100ffc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101000:	74 03                	je     f0101005 <command_prompt_readline+0xa2>
				commandidx--;
f0101002:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101005:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0101008:	50                   	push   %eax
f0101009:	ff 75 0c             	pushl  0xc(%ebp)
f010100c:	ff 75 f4             	pushl  -0xc(%ebp)
f010100f:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101012:	50                   	push   %eax
f0101013:	e8 8f fd ff ff       	call   f0100da7 <clearandwritecommand>
f0101018:	83 c4 10             	add    $0x10,%esp
f010101b:	e9 eb 07 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
		} else if (c == 227) { // Down arrow
f0101020:	81 7d a8 e3 00 00 00 	cmpl   $0xe3,-0x58(%ebp)
f0101027:	75 35                	jne    f010105e <command_prompt_readline+0xfb>
			if (commandidx < last_command_idx)
f0101029:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f010102e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101031:	7d 03                	jge    f0101036 <command_prompt_readline+0xd3>
				commandidx++;
f0101033:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101036:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f010103b:	85 c0                	test   %eax,%eax
f010103d:	0f 88 c8 07 00 00    	js     f010180b <command_prompt_readline+0x8a8>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101043:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0101046:	50                   	push   %eax
f0101047:	ff 75 0c             	pushl  0xc(%ebp)
f010104a:	ff 75 f4             	pushl  -0xc(%ebp)
f010104d:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101050:	50                   	push   %eax
f0101051:	e8 51 fd ff ff       	call   f0100da7 <clearandwritecommand>
f0101056:	83 c4 10             	add    $0x10,%esp
f0101059:	e9 ad 07 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
		} else if (c == 9) { // Tab button
f010105e:	83 7d a8 09          	cmpl   $0x9,-0x58(%ebp)
f0101062:	0f 85 71 05 00 00    	jne    f01015d9 <command_prompt_readline+0x676>
			if (last_c != 9) {
f0101068:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f010106c:	0f 84 0c 05 00 00    	je     f010157e <command_prompt_readline+0x61b>
				clear_prefix_list(PrefixList, 100);
f0101072:	83 ec 08             	sub    $0x8,%esp
f0101075:	6a 64                	push   $0x64
f0101077:	68 e0 28 7e f0       	push   $0xf07e28e0
f010107c:	e8 a9 fe ff ff       	call   f0100f2a <clear_prefix_list>
f0101081:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f0101084:	83 ec 0c             	sub    $0xc,%esp
f0101087:	ff 75 0c             	pushl  0xc(%ebp)
f010108a:	e8 ee bc 01 00       	call   f011cd7d <strlen>
f010108f:	83 c4 10             	add    $0x10,%esp
f0101092:	85 c0                	test   %eax,%eax
f0101094:	0f 84 7c 07 00 00    	je     f0101816 <command_prompt_readline+0x8b3>
f010109a:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f01010a1:	0f 84 6f 07 00 00    	je     f0101816 <command_prompt_readline+0x8b3>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f01010a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01010ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01010b1:	89 45 88             	mov    %eax,-0x78(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f01010b4:	83 ec 08             	sub    $0x8,%esp
f01010b7:	ff 75 0c             	pushl  0xc(%ebp)
f01010ba:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01010c0:	50                   	push   %eax
f01010c1:	e8 06 bd 01 00       	call   f011cdcc <strcpy>
f01010c6:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01010c9:	83 ec 0c             	sub    $0xc,%esp
f01010cc:	ff 75 0c             	pushl  0xc(%ebp)
f01010cf:	e8 a9 bc 01 00       	call   f011cd7d <strlen>
f01010d4:	83 c4 10             	add    $0x10,%esp
f01010d7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
				if (buf[bufLength - 1] == ' ')
f01010da:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01010dd:	8d 50 ff             	lea    -0x1(%eax),%edx
f01010e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010e3:	01 d0                	add    %edx,%eax
f01010e5:	8a 00                	mov    (%eax),%al
f01010e7:	3c 20                	cmp    $0x20,%al
f01010e9:	0f 84 2d 07 00 00    	je     f010181c <command_prompt_readline+0x8b9>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f01010ef:	8d 45 88             	lea    -0x78(%ebp),%eax
f01010f2:	50                   	push   %eax
f01010f3:	8d 85 48 f7 ff ff    	lea    -0x8b8(%ebp),%eax
f01010f9:	50                   	push   %eax
f01010fa:	68 26 e4 11 f0       	push   $0xf011e426
f01010ff:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101105:	50                   	push   %eax
f0101106:	e8 a6 c2 01 00       	call   f011d3b1 <strsplit>
f010110b:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f010110e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				if (number_of_arguments > 1) {
f0101115:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101118:	83 f8 01             	cmp    $0x1,%eax
f010111b:	0f 8e dc 00 00 00    	jle    f01011fd <command_prompt_readline+0x29a>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
f0101121:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101127:	83 ec 08             	sub    $0x8,%esp
f010112a:	68 2f de 11 f0       	push   $0xf011de2f
f010112f:	50                   	push   %eax
f0101130:	e8 54 bd 01 00       	call   f011ce89 <strcmp>
f0101135:	83 c4 10             	add    $0x10,%esp
f0101138:	85 c0                	test   %eax,%eax
f010113a:	74 21                	je     f010115d <command_prompt_readline+0x1fa>
f010113c:	8b 85 48 f7 ff ff    	mov    -0x8b8(%ebp),%eax
f0101142:	83 ec 08             	sub    $0x8,%esp
f0101145:	68 4e de 11 f0       	push   $0xf011de4e
f010114a:	50                   	push   %eax
f010114b:	e8 39 bd 01 00       	call   f011ce89 <strcmp>
f0101150:	83 c4 10             	add    $0x10,%esp
f0101153:	85 c0                	test   %eax,%eax
f0101155:	74 06                	je     f010115d <command_prompt_readline+0x1fa>
						continue;
f0101157:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101158:	e9 b9 06 00 00       	jmp    f0101816 <command_prompt_readline+0x8b3>
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
f010115d:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101164:	00 00 00 
f0101167:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f010116d:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101172:	b8 00 00 00 00       	mov    $0x0,%eax
f0101177:	89 d7                	mov    %edx,%edi
f0101179:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f010117b:	8b 45 88             	mov    -0x78(%ebp),%eax
f010117e:	48                   	dec    %eax
f010117f:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f0101186:	83 ec 0c             	sub    $0xc,%esp
f0101189:	50                   	push   %eax
f010118a:	e8 ee bb 01 00       	call   f011cd7d <strlen>
f010118f:	83 c4 10             	add    $0x10,%esp
f0101192:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101195:	29 c2                	sub    %eax,%edx
f0101197:	89 d0                	mov    %edx,%eax
f0101199:	89 45 a0             	mov    %eax,-0x60(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f010119c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f01011a3:	eb 1d                	jmp    f01011c2 <command_prompt_readline+0x25f>
						temp[it_str++] = buf[var];
f01011a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01011a8:	8d 50 01             	lea    0x1(%eax),%edx
f01011ab:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01011ae:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01011b1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01011b4:	01 ca                	add    %ecx,%edx
f01011b6:	8a 12                	mov    (%edx),%dl
f01011b8:	88 94 05 88 fb ff ff 	mov    %dl,-0x478(%ebp,%eax,1)
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load) only
						continue;
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f01011bf:	ff 45 e0             	incl   -0x20(%ebp)
f01011c2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01011c5:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f01011c8:	7c db                	jl     f01011a5 <command_prompt_readline+0x242>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f01011ca:	83 ec 08             	sub    $0x8,%esp
f01011cd:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f01011d3:	50                   	push   %eax
f01011d4:	ff 75 0c             	pushl  0xc(%ebp)
f01011d7:	e8 f0 bb 01 00       	call   f011cdcc <strcpy>
f01011dc:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f01011df:	8b 45 88             	mov    -0x78(%ebp),%eax
f01011e2:	48                   	dec    %eax
f01011e3:	8b 84 85 48 f7 ff ff 	mov    -0x8b8(%ebp,%eax,4),%eax
f01011ea:	83 ec 08             	sub    $0x8,%esp
f01011ed:	50                   	push   %eax
f01011ee:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f01011f4:	50                   	push   %eax
f01011f5:	e8 d2 bb 01 00       	call   f011cdcc <strcpy>
f01011fa:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f01011fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if(number_of_arguments == 1)
f0101204:	8b 45 88             	mov    -0x78(%ebp),%eax
f0101207:	83 f8 01             	cmp    $0x1,%eax
f010120a:	0f 85 2c 01 00 00    	jne    f010133c <command_prompt_readline+0x3d9>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101210:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0101217:	e9 0f 01 00 00       	jmp    f010132b <command_prompt_readline+0x3c8>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f010121c:	83 ec 0c             	sub    $0xc,%esp
f010121f:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101225:	50                   	push   %eax
f0101226:	e8 52 bb 01 00       	call   f011cd7d <strlen>
f010122b:	83 c4 10             	add    $0x10,%esp
f010122e:	89 c1                	mov    %eax,%ecx
f0101230:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101233:	89 d0                	mov    %edx,%eax
f0101235:	01 c0                	add    %eax,%eax
f0101237:	01 d0                	add    %edx,%eax
f0101239:	c1 e0 02             	shl    $0x2,%eax
f010123c:	05 40 c5 15 f0       	add    $0xf015c540,%eax
f0101241:	8b 00                	mov    (%eax),%eax
f0101243:	83 ec 04             	sub    $0x4,%esp
f0101246:	51                   	push   %ecx
f0101247:	50                   	push   %eax
f0101248:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f010124e:	50                   	push   %eax
f010124f:	e8 6d bc 01 00       	call   f011cec1 <strncmp>
f0101254:	83 c4 10             	add    $0x10,%esp
f0101257:	89 45 9c             	mov    %eax,-0x64(%ebp)
						if (x == 0) {
f010125a:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f010125e:	0f 85 c4 00 00 00    	jne    f0101328 <command_prompt_readline+0x3c5>
							it_str = -1;
f0101264:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f010126b:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f0101272:	00 00 00 
f0101275:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f010127b:	b9 ff 00 00 00       	mov    $0xff,%ecx
f0101280:	b8 00 00 00 00       	mov    $0x0,%eax
f0101285:	89 d7                	mov    %edx,%edi
f0101287:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101289:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0101290:	eb 2d                	jmp    f01012bf <command_prompt_readline+0x35c>
								string[++it_str] = commands[var].name[var3];
f0101292:	ff 45 e4             	incl   -0x1c(%ebp)
f0101295:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0101298:	89 d0                	mov    %edx,%eax
f010129a:	01 c0                	add    %eax,%eax
f010129c:	01 d0                	add    %edx,%eax
f010129e:	c1 e0 02             	shl    $0x2,%eax
f01012a1:	05 40 c5 15 f0       	add    $0xf015c540,%eax
f01012a6:	8b 10                	mov    (%eax),%edx
f01012a8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01012ab:	01 d0                	add    %edx,%eax
f01012ad:	8a 00                	mov    (%eax),%al
f01012af:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01012b5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01012b8:	01 ca                	add    %ecx,%edx
f01012ba:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f01012bc:	ff 45 d4             	incl   -0x2c(%ebp)
f01012bf:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01012c2:	89 d0                	mov    %edx,%eax
f01012c4:	01 c0                	add    %eax,%eax
f01012c6:	01 d0                	add    %edx,%eax
f01012c8:	c1 e0 02             	shl    $0x2,%eax
f01012cb:	05 40 c5 15 f0       	add    $0xf015c540,%eax
f01012d0:	8b 00                	mov    (%eax),%eax
f01012d2:	83 ec 0c             	sub    $0xc,%esp
f01012d5:	50                   	push   %eax
f01012d6:	e8 a2 ba 01 00       	call   f011cd7d <strlen>
f01012db:	83 c4 10             	add    $0x10,%esp
f01012de:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f01012e1:	7f af                	jg     f0101292 <command_prompt_readline+0x32f>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f01012e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012e6:	c1 e0 0a             	shl    $0xa,%eax
f01012e9:	05 e0 28 7e f0       	add    $0xf07e28e0,%eax
f01012ee:	83 ec 04             	sub    $0x4,%esp
f01012f1:	68 00 04 00 00       	push   $0x400
f01012f6:	6a 00                	push   $0x0
f01012f8:	50                   	push   %eax
f01012f9:	e8 6d bc 01 00       	call   f011cf6b <memset>
f01012fe:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101301:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101304:	40                   	inc    %eax
f0101305:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101308:	c1 e2 0a             	shl    $0xa,%edx
f010130b:	81 c2 e0 28 7e f0    	add    $0xf07e28e0,%edx
f0101311:	83 ec 04             	sub    $0x4,%esp
f0101314:	50                   	push   %eax
f0101315:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f010131b:	50                   	push   %eax
f010131c:	52                   	push   %edx
f010131d:	e8 d8 ba 01 00       	call   f011cdfa <strncpy>
f0101322:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f0101325:	ff 45 dc             	incl   -0x24(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f0101328:	ff 45 d8             	incl   -0x28(%ebp)
f010132b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010132e:	83 f8 2f             	cmp    $0x2f,%eax
f0101331:	0f 86 e5 fe ff ff    	jbe    f010121c <command_prompt_readline+0x2b9>
f0101337:	e9 73 01 00 00       	jmp    f01014af <command_prompt_readline+0x54c>
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f010133c:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101343:	e9 59 01 00 00       	jmp    f01014a1 <command_prompt_readline+0x53e>
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f0101348:	83 ec 0c             	sub    $0xc,%esp
f010134b:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f0101351:	50                   	push   %eax
f0101352:	e8 26 ba 01 00       	call   f011cd7d <strlen>
f0101357:	83 c4 10             	add    $0x10,%esp
f010135a:	89 c1                	mov    %eax,%ecx
f010135c:	8b 1d 78 cc 15 f0    	mov    0xf015cc78,%ebx
f0101362:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101365:	89 d0                	mov    %edx,%eax
f0101367:	01 c0                	add    %eax,%eax
f0101369:	01 d0                	add    %edx,%eax
f010136b:	c1 e0 02             	shl    $0x2,%eax
f010136e:	01 d8                	add    %ebx,%eax
f0101370:	8b 00                	mov    (%eax),%eax
f0101372:	83 ec 04             	sub    $0x4,%esp
f0101375:	51                   	push   %ecx
f0101376:	50                   	push   %eax
f0101377:	8d 85 88 f7 ff ff    	lea    -0x878(%ebp),%eax
f010137d:	50                   	push   %eax
f010137e:	e8 3e bb 01 00       	call   f011cec1 <strncmp>
f0101383:	83 c4 10             	add    $0x10,%esp
f0101386:	89 45 98             	mov    %eax,-0x68(%ebp)
						if (x == 0) {
f0101389:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f010138d:	0f 85 0b 01 00 00    	jne    f010149e <command_prompt_readline+0x53b>
							it_str = -1;
f0101393:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
							char string[1024] = "";
f010139a:	c7 85 88 fb ff ff 00 	movl   $0x0,-0x478(%ebp)
f01013a1:	00 00 00 
f01013a4:	8d 95 8c fb ff ff    	lea    -0x474(%ebp),%edx
f01013aa:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013af:	b8 00 00 00 00       	mov    $0x0,%eax
f01013b4:	89 d7                	mov    %edx,%edi
f01013b6:	f3 ab                	rep stos %eax,%es:(%edi)
							if (number_of_arguments > 1) {
f01013b8:	8b 45 88             	mov    -0x78(%ebp),%eax
f01013bb:	83 f8 01             	cmp    $0x1,%eax
f01013be:	7e 39                	jle    f01013f9 <command_prompt_readline+0x496>
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013c0:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01013c7:	eb 1d                	jmp    f01013e6 <command_prompt_readline+0x483>
									string[++it_str] = buf[var2];
f01013c9:	ff 45 e4             	incl   -0x1c(%ebp)
f01013cc:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01013cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013d2:	01 d0                	add    %edx,%eax
f01013d4:	8a 00                	mov    (%eax),%al
f01013d6:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f01013dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01013df:	01 ca                	add    %ecx,%edx
f01013e1:	88 02                	mov    %al,(%edx)
						int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01013e3:	ff 45 cc             	incl   -0x34(%ebp)
f01013e6:	83 ec 0c             	sub    $0xc,%esp
f01013e9:	ff 75 0c             	pushl  0xc(%ebp)
f01013ec:	e8 8c b9 01 00       	call   f011cd7d <strlen>
f01013f1:	83 c4 10             	add    $0x10,%esp
f01013f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01013f7:	7f d0                	jg     f01013c9 <command_prompt_readline+0x466>
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01013f9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0101400:	eb 30                	jmp    f0101432 <command_prompt_readline+0x4cf>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
f0101402:	ff 45 e4             	incl   -0x1c(%ebp)
f0101405:	8b 0d 78 cc 15 f0    	mov    0xf015cc78,%ecx
f010140b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010140e:	89 d0                	mov    %edx,%eax
f0101410:	01 c0                	add    %eax,%eax
f0101412:	01 d0                	add    %edx,%eax
f0101414:	c1 e0 02             	shl    $0x2,%eax
f0101417:	01 c8                	add    %ecx,%eax
f0101419:	8b 10                	mov    (%eax),%edx
f010141b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010141e:	01 d0                	add    %edx,%eax
f0101420:	8a 00                	mov    (%eax),%al
f0101422:	8d 8d 88 fb ff ff    	lea    -0x478(%ebp),%ecx
f0101428:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010142b:	01 ca                	add    %ecx,%edx
f010142d:	88 02                	mov    %al,(%edx)
							if (number_of_arguments > 1) {
								for (int var2 = 0; var2 < strlen(buf); ++var2) {
									string[++it_str] = buf[var2];
								}
							}
							for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f010142f:	ff 45 c8             	incl   -0x38(%ebp)
f0101432:	8b 0d 78 cc 15 f0    	mov    0xf015cc78,%ecx
f0101438:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010143b:	89 d0                	mov    %edx,%eax
f010143d:	01 c0                	add    %eax,%eax
f010143f:	01 d0                	add    %edx,%eax
f0101441:	c1 e0 02             	shl    $0x2,%eax
f0101444:	01 c8                	add    %ecx,%eax
f0101446:	8b 00                	mov    (%eax),%eax
f0101448:	83 ec 0c             	sub    $0xc,%esp
f010144b:	50                   	push   %eax
f010144c:	e8 2c b9 01 00       	call   f011cd7d <strlen>
f0101451:	83 c4 10             	add    $0x10,%esp
f0101454:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0101457:	7f a9                	jg     f0101402 <command_prompt_readline+0x49f>
								string[++it_str] = ptr_UserPrograms[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101459:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010145c:	c1 e0 0a             	shl    $0xa,%eax
f010145f:	05 e0 28 7e f0       	add    $0xf07e28e0,%eax
f0101464:	83 ec 04             	sub    $0x4,%esp
f0101467:	68 00 04 00 00       	push   $0x400
f010146c:	6a 00                	push   $0x0
f010146e:	50                   	push   %eax
f010146f:	e8 f7 ba 01 00       	call   f011cf6b <memset>
f0101474:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101477:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010147a:	40                   	inc    %eax
f010147b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010147e:	c1 e2 0a             	shl    $0xa,%edx
f0101481:	81 c2 e0 28 7e f0    	add    $0xf07e28e0,%edx
f0101487:	83 ec 04             	sub    $0x4,%esp
f010148a:	50                   	push   %eax
f010148b:	8d 85 88 fb ff ff    	lea    -0x478(%ebp),%eax
f0101491:	50                   	push   %eax
f0101492:	52                   	push   %edx
f0101493:	e8 62 b9 01 00       	call   f011cdfa <strncpy>
f0101498:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f010149b:	ff 45 dc             	incl   -0x24(%ebp)
						}
					}
				}
				else
				{
					for (int var = 0; var < NUM_USER_PROGS; ++var) {
f010149e:	ff 45 d0             	incl   -0x30(%ebp)
f01014a1:	a1 7c cc 15 f0       	mov    0xf015cc7c,%eax
f01014a6:	39 45 d0             	cmp    %eax,-0x30(%ebp)
f01014a9:	0f 8c 99 fe ff ff    	jl     f0101348 <command_prompt_readline+0x3e5>
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
							it_prefix_list++;
						}
					}
				}
				prefix_list_size = it_prefix_list;
f01014af:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01014b2:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f01014b5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01014b9:	0f 84 4c 03 00 00    	je     f010180b <command_prompt_readline+0x8a8>
					prefix_list_idx = it_str = 0;
f01014bf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01014c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01014c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014cc:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01014d3:	eb 1f                	jmp    f01014f4 <command_prompt_readline+0x591>
						buf[it_str++] = PrefixList[0][var2];}
f01014d5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01014d8:	8d 50 01             	lea    0x1(%eax),%edx
f01014db:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01014de:	89 c2                	mov    %eax,%edx
f01014e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014e3:	01 c2                	add    %eax,%edx
f01014e5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01014e8:	05 e0 28 7e f0       	add    $0xf07e28e0,%eax
f01014ed:	8a 00                	mov    (%eax),%al
f01014ef:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01014f1:	ff 45 c4             	incl   -0x3c(%ebp)
f01014f4:	83 ec 0c             	sub    $0xc,%esp
f01014f7:	68 e0 28 7e f0       	push   $0xf07e28e0
f01014fc:	e8 7c b8 01 00       	call   f011cd7d <strlen>
f0101501:	83 c4 10             	add    $0x10,%esp
f0101504:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101507:	7f cc                	jg     f01014d5 <command_prompt_readline+0x572>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101509:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0101510:	eb 10                	jmp    f0101522 <command_prompt_readline+0x5bf>
						cputchar('\b');}
f0101512:	83 ec 0c             	sub    $0xc,%esp
f0101515:	6a 08                	push   $0x8
f0101517:	e8 0b f8 ff ff       	call   f0100d27 <cputchar>
f010151c:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f010151f:	ff 45 c0             	incl   -0x40(%ebp)
f0101522:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0101525:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0101528:	7c e8                	jl     f0101512 <command_prompt_readline+0x5af>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010152a:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101531:	eb 1c                	jmp    f010154f <command_prompt_readline+0x5ec>
						cputchar(buf[j]);}
f0101533:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101536:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101539:	01 d0                	add    %edx,%eax
f010153b:	8a 00                	mov    (%eax),%al
f010153d:	0f be c0             	movsbl %al,%eax
f0101540:	83 ec 0c             	sub    $0xc,%esp
f0101543:	50                   	push   %eax
f0101544:	e8 de f7 ff ff       	call   f0100d27 <cputchar>
f0101549:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010154c:	ff 45 bc             	incl   -0x44(%ebp)
f010154f:	83 ec 0c             	sub    $0xc,%esp
f0101552:	ff 75 0c             	pushl  0xc(%ebp)
f0101555:	e8 23 b8 01 00       	call   f011cd7d <strlen>
f010155a:	83 c4 10             	add    $0x10,%esp
f010155d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0101560:	7f d1                	jg     f0101533 <command_prompt_readline+0x5d0>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101562:	83 ec 0c             	sub    $0xc,%esp
f0101565:	ff 75 0c             	pushl  0xc(%ebp)
f0101568:	e8 10 b8 01 00       	call   f011cd7d <strlen>
f010156d:	83 c4 10             	add    $0x10,%esp
f0101570:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101573:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101576:	89 45 90             	mov    %eax,-0x70(%ebp)
f0101579:	e9 8d 02 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f010157e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101582:	0f 8e 83 02 00 00    	jle    f010180b <command_prompt_readline+0x8a8>
f0101588:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010158b:	89 45 94             	mov    %eax,-0x6c(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f010158e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101591:	40                   	inc    %eax
f0101592:	99                   	cltd   
f0101593:	f7 7d ec             	idivl  -0x14(%ebp)
f0101596:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f0101599:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010159c:	c1 e0 0a             	shl    $0xa,%eax
f010159f:	8d 98 e0 28 7e f0    	lea    -0xf81d720(%eax),%ebx
f01015a5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01015a8:	c1 e0 0a             	shl    $0xa,%eax
f01015ab:	05 e0 28 7e f0       	add    $0xf07e28e0,%eax
f01015b0:	83 ec 0c             	sub    $0xc,%esp
f01015b3:	50                   	push   %eax
f01015b4:	e8 c4 b7 01 00       	call   f011cd7d <strlen>
f01015b9:	83 c4 10             	add    $0x10,%esp
f01015bc:	83 ec 0c             	sub    $0xc,%esp
f01015bf:	8d 55 8c             	lea    -0x74(%ebp),%edx
f01015c2:	52                   	push   %edx
f01015c3:	8d 55 90             	lea    -0x70(%ebp),%edx
f01015c6:	52                   	push   %edx
f01015c7:	ff 75 0c             	pushl  0xc(%ebp)
f01015ca:	53                   	push   %ebx
f01015cb:	50                   	push   %eax
f01015cc:	e8 a3 f8 ff ff       	call   f0100e74 <RoundAutoCompleteCommandWithTheSamePrefix>
f01015d1:	83 c4 20             	add    $0x20,%esp
f01015d4:	e9 32 02 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
				}
			}
		}

		else if (c == 228) { // left arrow
f01015d9:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f01015e0:	75 25                	jne    f0101607 <command_prompt_readline+0x6a4>
			if (i > 0) {
f01015e2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015e5:	85 c0                	test   %eax,%eax
f01015e7:	0f 8e 1e 02 00 00    	jle    f010180b <command_prompt_readline+0x8a8>
				i--;
f01015ed:	8b 45 90             	mov    -0x70(%ebp),%eax
f01015f0:	48                   	dec    %eax
f01015f1:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f01015f4:	83 ec 0c             	sub    $0xc,%esp
f01015f7:	ff 75 a8             	pushl  -0x58(%ebp)
f01015fa:	e8 28 f7 ff ff       	call   f0100d27 <cputchar>
f01015ff:	83 c4 10             	add    $0x10,%esp
f0101602:	e9 04 02 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
			}
		} else if (c == 229) { // right arrow
f0101607:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f010160e:	75 28                	jne    f0101638 <command_prompt_readline+0x6d5>
			if (i < lastIndex) {
f0101610:	8b 55 90             	mov    -0x70(%ebp),%edx
f0101613:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101616:	39 c2                	cmp    %eax,%edx
f0101618:	0f 8d ed 01 00 00    	jge    f010180b <command_prompt_readline+0x8a8>
				i++;
f010161e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101621:	40                   	inc    %eax
f0101622:	89 45 90             	mov    %eax,-0x70(%ebp)
				cputchar(c);
f0101625:	83 ec 0c             	sub    $0xc,%esp
f0101628:	ff 75 a8             	pushl  -0x58(%ebp)
f010162b:	e8 f7 f6 ff ff       	call   f0100d27 <cputchar>
f0101630:	83 c4 10             	add    $0x10,%esp
f0101633:	e9 d3 01 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f0101638:	81 7d a8 e9 00 00 00 	cmpl   $0xe9,-0x58(%ebp)
f010163f:	75 3d                	jne    f010167e <command_prompt_readline+0x71b>
f0101641:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101644:	85 c0                	test   %eax,%eax
f0101646:	7e 36                	jle    f010167e <command_prompt_readline+0x71b>
			for (int var = i; var <= lastIndex; ++var) {
f0101648:	8b 45 90             	mov    -0x70(%ebp),%eax
f010164b:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010164e:	eb 1a                	jmp    f010166a <command_prompt_readline+0x707>
				buf[var] = buf[var + 1];
f0101650:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0101653:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101656:	01 c2                	add    %eax,%edx
f0101658:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010165b:	8d 48 01             	lea    0x1(%eax),%ecx
f010165e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101661:	01 c8                	add    %ecx,%eax
f0101663:	8a 00                	mov    (%eax),%al
f0101665:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101667:	ff 45 b8             	incl   -0x48(%ebp)
f010166a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010166d:	39 45 b8             	cmp    %eax,-0x48(%ebp)
f0101670:	7e de                	jle    f0101650 <command_prompt_readline+0x6ed>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101672:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101675:	48                   	dec    %eax
f0101676:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0101679:	e9 8d 01 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f010167e:	83 7d a8 1f          	cmpl   $0x1f,-0x58(%ebp)
f0101682:	7e 51                	jle    f01016d5 <command_prompt_readline+0x772>
f0101684:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101687:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f010168c:	7f 47                	jg     f01016d5 <command_prompt_readline+0x772>
f010168e:	81 7d a8 e5 00 00 00 	cmpl   $0xe5,-0x58(%ebp)
f0101695:	74 3e                	je     f01016d5 <command_prompt_readline+0x772>
f0101697:	81 7d a8 e4 00 00 00 	cmpl   $0xe4,-0x58(%ebp)
f010169e:	74 35                	je     f01016d5 <command_prompt_readline+0x772>
			if (echoing)
f01016a0:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016a4:	74 0e                	je     f01016b4 <command_prompt_readline+0x751>
				cputchar(c);
f01016a6:	83 ec 0c             	sub    $0xc,%esp
f01016a9:	ff 75 a8             	pushl  -0x58(%ebp)
f01016ac:	e8 76 f6 ff ff       	call   f0100d27 <cputchar>
f01016b1:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01016b4:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016b7:	8d 50 01             	lea    0x1(%eax),%edx
f01016ba:	89 55 90             	mov    %edx,-0x70(%ebp)
f01016bd:	89 c2                	mov    %eax,%edx
f01016bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016c2:	01 d0                	add    %edx,%eax
f01016c4:	8b 55 a8             	mov    -0x58(%ebp),%edx
f01016c7:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f01016c9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01016cc:	40                   	inc    %eax
f01016cd:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01016d0:	e9 36 01 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
		} else if (c == '\b' && i > 0) {
f01016d5:	83 7d a8 08          	cmpl   $0x8,-0x58(%ebp)
f01016d9:	75 51                	jne    f010172c <command_prompt_readline+0x7c9>
f01016db:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016de:	85 c0                	test   %eax,%eax
f01016e0:	7e 4a                	jle    f010172c <command_prompt_readline+0x7c9>

			if (echoing)
f01016e2:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01016e6:	74 0e                	je     f01016f6 <command_prompt_readline+0x793>
				cputchar(c);
f01016e8:	83 ec 0c             	sub    $0xc,%esp
f01016eb:	ff 75 a8             	pushl  -0x58(%ebp)
f01016ee:	e8 34 f6 ff ff       	call   f0100d27 <cputchar>
f01016f3:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f01016f6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01016f9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01016fc:	eb 1a                	jmp    f0101718 <command_prompt_readline+0x7b5>
				buf[var - 1] = buf[var];
f01016fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0101701:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101704:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101707:	01 c2                	add    %eax,%edx
f0101709:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f010170c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010170f:	01 c8                	add    %ecx,%eax
f0101711:	8a 00                	mov    (%eax),%al
f0101713:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101715:	ff 45 b4             	incl   -0x4c(%ebp)
f0101718:	8b 45 90             	mov    -0x70(%ebp),%eax
f010171b:	39 45 b4             	cmp    %eax,-0x4c(%ebp)
f010171e:	7e de                	jle    f01016fe <command_prompt_readline+0x79b>
				buf[var - 1] = buf[var];
			}
			i--;
f0101720:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101723:	48                   	dec    %eax
f0101724:	89 45 90             	mov    %eax,-0x70(%ebp)
f0101727:	e9 df 00 00 00       	jmp    f010180b <command_prompt_readline+0x8a8>
		} else if (c == '\n' || c == '\r') {
f010172c:	83 7d a8 0a          	cmpl   $0xa,-0x58(%ebp)
f0101730:	74 0a                	je     f010173c <command_prompt_readline+0x7d9>
f0101732:	83 7d a8 0d          	cmpl   $0xd,-0x58(%ebp)
f0101736:	0f 85 cf 00 00 00    	jne    f010180b <command_prompt_readline+0x8a8>

			if (echoing)
f010173c:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f0101740:	74 0e                	je     f0101750 <command_prompt_readline+0x7ed>
				cputchar(c);
f0101742:	83 ec 0c             	sub    $0xc,%esp
f0101745:	ff 75 a8             	pushl  -0x58(%ebp)
f0101748:	e8 da f5 ff ff       	call   f0100d27 <cputchar>
f010174d:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101750:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0101753:	89 c2                	mov    %eax,%edx
f0101755:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101758:	01 d0                	add    %edx,%eax
f010175a:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f010175d:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f0101762:	83 f8 13             	cmp    $0x13,%eax
f0101765:	75 56                	jne    f01017bd <command_prompt_readline+0x85a>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101767:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f010176e:	eb 2d                	jmp    f010179d <command_prompt_readline+0x83a>
					memcpy(command_history[idx], command_history[idx + 1],
f0101770:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101773:	40                   	inc    %eax
f0101774:	c1 e0 0a             	shl    $0xa,%eax
f0101777:	8d 90 e0 b8 7f f0    	lea    -0xf804720(%eax),%edx
f010177d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0101780:	c1 e0 0a             	shl    $0xa,%eax
f0101783:	05 e0 b8 7f f0       	add    $0xf07fb8e0,%eax
f0101788:	83 ec 04             	sub    $0x4,%esp
f010178b:	68 00 04 00 00       	push   $0x400
f0101790:	52                   	push   %edx
f0101791:	50                   	push   %eax
f0101792:	e8 04 b8 01 00       	call   f011cf9b <memcpy>
f0101797:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f010179a:	ff 45 b0             	incl   -0x50(%ebp)
f010179d:	83 7d b0 12          	cmpl   $0x12,-0x50(%ebp)
f01017a1:	7e cd                	jle    f0101770 <command_prompt_readline+0x80d>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f01017a3:	83 ec 04             	sub    $0x4,%esp
f01017a6:	68 00 04 00 00       	push   $0x400
f01017ab:	ff 75 0c             	pushl  0xc(%ebp)
f01017ae:	68 e0 04 80 f0       	push   $0xf08004e0
f01017b3:	e8 e3 b7 01 00       	call   f011cf9b <memcpy>
f01017b8:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f01017bb:	eb 68                	jmp    f0101825 <command_prompt_readline+0x8c2>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f01017bd:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f01017c2:	c1 e0 0a             	shl    $0xa,%eax
f01017c5:	05 e0 b8 7f f0       	add    $0xf07fb8e0,%eax
f01017ca:	83 ec 08             	sub    $0x8,%esp
f01017cd:	ff 75 0c             	pushl  0xc(%ebp)
f01017d0:	50                   	push   %eax
f01017d1:	e8 b3 b6 01 00       	call   f011ce89 <strcmp>
f01017d6:	83 c4 10             	add    $0x10,%esp
f01017d9:	85 c0                	test   %eax,%eax
f01017db:	74 48                	je     f0101825 <command_prompt_readline+0x8c2>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f01017dd:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f01017e2:	40                   	inc    %eax
f01017e3:	a3 80 c7 15 f0       	mov    %eax,0xf015c780
f01017e8:	a1 80 c7 15 f0       	mov    0xf015c780,%eax
f01017ed:	c1 e0 0a             	shl    $0xa,%eax
f01017f0:	05 e0 b8 7f f0       	add    $0xf07fb8e0,%eax
f01017f5:	83 ec 04             	sub    $0x4,%esp
f01017f8:	68 00 04 00 00       	push   $0x400
f01017fd:	ff 75 0c             	pushl  0xc(%ebp)
f0101800:	50                   	push   %eax
f0101801:	e8 95 b7 01 00       	call   f011cf9b <memcpy>
f0101806:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101809:	eb 1a                	jmp    f0101825 <command_prompt_readline+0x8c2>

		}
		last_c = c;
f010180b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010180e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101811:	e9 9d f7 ff ff       	jmp    f0100fb3 <command_prompt_readline+0x50>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101816:	90                   	nop
f0101817:	e9 97 f7 ff ff       	jmp    f0100fb3 <command_prompt_readline+0x50>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f010181c:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f010181d:	e9 91 f7 ff ff       	jmp    f0100fb3 <command_prompt_readline+0x50>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101822:	90                   	nop
f0101823:	eb 01                	jmp    f0101826 <command_prompt_readline+0x8c3>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101825:	90                   	nop

		}
		last_c = c;
	}
}
f0101826:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101829:	5b                   	pop    %ebx
f010182a:	5f                   	pop    %edi
f010182b:	5d                   	pop    %ebp
f010182c:	c3                   	ret    

f010182d <run_command_prompt>:
// ******************************************************************
// ******************************************************************

//invoke the command prompt
void run_command_prompt()
{
f010182d:	55                   	push   %ebp
f010182e:	89 e5                	mov    %esp,%ebp
f0101830:	81 ec 08 04 00 00    	sub    $0x408,%esp
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101836:	83 ec 04             	sub    $0x4,%esp
f0101839:	68 00 04 00 00       	push   $0x400
f010183e:	6a 00                	push   $0x0
f0101840:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101846:	50                   	push   %eax
f0101847:	e8 1f b7 01 00       	call   f011cf6b <memset>
f010184c:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f010184f:	83 ec 08             	sub    $0x8,%esp
f0101852:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0101858:	50                   	push   %eax
f0101859:	68 2b e4 11 f0       	push   $0xf011e42b
f010185e:	e8 00 f7 ff ff       	call   f0100f63 <command_prompt_readline>
f0101863:	83 c4 10             	add    $0x10,%esp


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101866:	83 ec 0c             	sub    $0xc,%esp
f0101869:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f010186f:	50                   	push   %eax
f0101870:	e8 0d 00 00 00       	call   f0101882 <execute_command>
f0101875:	83 c4 10             	add    $0x10,%esp
f0101878:	85 c0                	test   %eax,%eax
f010187a:	78 02                	js     f010187e <run_command_prompt+0x51>
				break;
	}
f010187c:	eb b8                	jmp    f0101836 <run_command_prompt+0x9>


		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f010187e:	90                   	nop
	}
}
f010187f:	90                   	nop
f0101880:	c9                   	leave  
f0101881:	c3                   	ret    

f0101882 <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101882:	55                   	push   %ebp
f0101883:	89 e5                	mov    %esp,%ebp
f0101885:	83 ec 58             	sub    $0x58,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101888:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010188b:	50                   	push   %eax
f010188c:	8d 45 a8             	lea    -0x58(%ebp),%eax
f010188f:	50                   	push   %eax
f0101890:	68 26 e4 11 f0       	push   $0xf011e426
f0101895:	ff 75 08             	pushl  0x8(%ebp)
f0101898:	e8 14 bb 01 00       	call   f011d3b1 <strsplit>
f010189d:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f01018a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01018a3:	85 c0                	test   %eax,%eax
f01018a5:	75 0a                	jne    f01018b1 <execute_command+0x2f>
		return 0;
f01018a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01018ac:	e9 95 00 00 00       	jmp    f0101946 <execute_command+0xc4>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f01018b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01018bf:	eb 33                	jmp    f01018f4 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f01018c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01018c4:	89 d0                	mov    %edx,%eax
f01018c6:	01 c0                	add    %eax,%eax
f01018c8:	01 d0                	add    %edx,%eax
f01018ca:	c1 e0 02             	shl    $0x2,%eax
f01018cd:	05 40 c5 15 f0       	add    $0xf015c540,%eax
f01018d2:	8b 10                	mov    (%eax),%edx
f01018d4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01018d7:	83 ec 08             	sub    $0x8,%esp
f01018da:	52                   	push   %edx
f01018db:	50                   	push   %eax
f01018dc:	e8 a8 b5 01 00       	call   f011ce89 <strcmp>
f01018e1:	83 c4 10             	add    $0x10,%esp
f01018e4:	85 c0                	test   %eax,%eax
f01018e6:	75 09                	jne    f01018f1 <execute_command+0x6f>
		{
			command_found = 1;
f01018e8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f01018ef:	eb 0b                	jmp    f01018fc <execute_command+0x7a>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01018f1:	ff 45 f0             	incl   -0x10(%ebp)
f01018f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01018f7:	83 f8 2f             	cmp    $0x2f,%eax
f01018fa:	76 c5                	jbe    f01018c1 <execute_command+0x3f>
			command_found = 1;
			break;
		}
	}

	if(command_found)
f01018fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101900:	74 2b                	je     f010192d <execute_command+0xab>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0101902:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101905:	89 d0                	mov    %edx,%eax
f0101907:	01 c0                	add    %eax,%eax
f0101909:	01 d0                	add    %edx,%eax
f010190b:	c1 e0 02             	shl    $0x2,%eax
f010190e:	05 48 c5 15 f0       	add    $0xf015c548,%eax
f0101913:	8b 00                	mov    (%eax),%eax
f0101915:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0101918:	83 ec 08             	sub    $0x8,%esp
f010191b:	8d 4d a8             	lea    -0x58(%ebp),%ecx
f010191e:	51                   	push   %ecx
f010191f:	52                   	push   %edx
f0101920:	ff d0                	call   *%eax
f0101922:	83 c4 10             	add    $0x10,%esp
f0101925:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return return_value;
f0101928:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010192b:	eb 19                	jmp    f0101946 <execute_command+0xc4>
	}
	else
	{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
f010192d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0101930:	83 ec 08             	sub    $0x8,%esp
f0101933:	50                   	push   %eax
f0101934:	68 31 e4 11 f0       	push   $0xf011e431
f0101939:	e8 c6 58 00 00       	call   f0107204 <cprintf>
f010193e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101941:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0101946:	c9                   	leave  
f0101947:	c3                   	ret    

f0101948 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0101948:	55                   	push   %ebp
f0101949:	89 e5                	mov    %esp,%ebp
f010194b:	53                   	push   %ebx
f010194c:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010194f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101956:	eb 3b                	jmp    f0101993 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0101958:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010195b:	89 d0                	mov    %edx,%eax
f010195d:	01 c0                	add    %eax,%eax
f010195f:	01 d0                	add    %edx,%eax
f0101961:	c1 e0 02             	shl    $0x2,%eax
f0101964:	05 44 c5 15 f0       	add    $0xf015c544,%eax
f0101969:	8b 10                	mov    (%eax),%edx
f010196b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010196e:	89 c8                	mov    %ecx,%eax
f0101970:	01 c0                	add    %eax,%eax
f0101972:	01 c8                	add    %ecx,%eax
f0101974:	c1 e0 02             	shl    $0x2,%eax
f0101977:	05 40 c5 15 f0       	add    $0xf015c540,%eax
f010197c:	8b 00                	mov    (%eax),%eax
f010197e:	83 ec 04             	sub    $0x4,%esp
f0101981:	52                   	push   %edx
f0101982:	50                   	push   %eax
f0101983:	68 47 e4 11 f0       	push   $0xf011e447
f0101988:	e8 77 58 00 00       	call   f0107204 <cprintf>
f010198d:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0101990:	ff 45 f4             	incl   -0xc(%ebp)
f0101993:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101996:	83 f8 2f             	cmp    $0x2f,%eax
f0101999:	76 bd                	jbe    f0101958 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f010199b:	83 ec 0c             	sub    $0xc,%esp
f010199e:	68 50 e4 11 f0       	push   $0xf011e450
f01019a3:	e8 5c 58 00 00       	call   f0107204 <cprintf>
f01019a8:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01019b2:	eb 42                	jmp    f01019f6 <command_help+0xae>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f01019b4:	8b 0d 78 cc 15 f0    	mov    0xf015cc78,%ecx
f01019ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01019bd:	89 d0                	mov    %edx,%eax
f01019bf:	01 c0                	add    %eax,%eax
f01019c1:	01 d0                	add    %edx,%eax
f01019c3:	c1 e0 02             	shl    $0x2,%eax
f01019c6:	01 c8                	add    %ecx,%eax
f01019c8:	8b 50 04             	mov    0x4(%eax),%edx
f01019cb:	8b 1d 78 cc 15 f0    	mov    0xf015cc78,%ebx
f01019d1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01019d4:	89 c8                	mov    %ecx,%eax
f01019d6:	01 c0                	add    %eax,%eax
f01019d8:	01 c8                	add    %ecx,%eax
f01019da:	c1 e0 02             	shl    $0x2,%eax
f01019dd:	01 d8                	add    %ebx,%eax
f01019df:	8b 00                	mov    (%eax),%eax
f01019e1:	83 ec 04             	sub    $0x4,%esp
f01019e4:	52                   	push   %edx
f01019e5:	50                   	push   %eax
f01019e6:	68 65 e4 11 f0       	push   $0xf011e465
f01019eb:	e8 14 58 00 00       	call   f0107204 <cprintf>
f01019f0:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f01019f3:	ff 45 f4             	incl   -0xc(%ebp)
f01019f6:	a1 7c cc 15 f0       	mov    0xf015cc7c,%eax
f01019fb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f01019fe:	7c b4                	jl     f01019b4 <command_help+0x6c>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101a00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101a05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101a08:	c9                   	leave  
f0101a09:	c3                   	ret    

f0101a0a <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f0101a0a:	55                   	push   %ebp
f0101a0b:	89 e5                	mov    %esp,%ebp
f0101a0d:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101a10:	83 ec 0c             	sub    $0xc,%esp
f0101a13:	68 81 e4 11 f0       	push   $0xf011e481
f0101a18:	e8 e7 57 00 00       	call   f0107204 <cprintf>
f0101a1d:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101a20:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0101a25:	83 ec 04             	sub    $0x4,%esp
f0101a28:	50                   	push   %eax
f0101a29:	68 0c 00 10 f0       	push   $0xf010000c
f0101a2e:	68 9c e4 11 f0       	push   $0xf011e49c
f0101a33:	e8 cc 57 00 00       	call   f0107204 <cprintf>
f0101a38:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f0101a3b:	b8 b1 d9 11 00       	mov    $0x11d9b1,%eax
f0101a40:	83 ec 04             	sub    $0x4,%esp
f0101a43:	50                   	push   %eax
f0101a44:	68 b1 d9 11 f0       	push   $0xf011d9b1
f0101a49:	68 d8 e4 11 f0       	push   $0xf011e4d8
f0101a4e:	e8 b1 57 00 00       	call   f0107204 <cprintf>
f0101a53:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f0101a56:	b8 28 1d 7e 00       	mov    $0x7e1d28,%eax
f0101a5b:	83 ec 04             	sub    $0x4,%esp
f0101a5e:	50                   	push   %eax
f0101a5f:	68 28 1d 7e f0       	push   $0xf07e1d28
f0101a64:	68 14 e5 11 f0       	push   $0xf011e514
f0101a69:	e8 96 57 00 00       	call   f0107204 <cprintf>
f0101a6e:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f0101a71:	b8 68 0d 88 00       	mov    $0x880d68,%eax
f0101a76:	83 ec 04             	sub    $0x4,%esp
f0101a79:	50                   	push   %eax
f0101a7a:	68 68 0d 88 f0       	push   $0xf0880d68
f0101a7f:	68 5c e5 11 f0       	push   $0xf011e55c
f0101a84:	e8 7b 57 00 00       	call   f0107204 <cprintf>
f0101a89:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f0101a8c:	b8 68 0d 88 f0       	mov    $0xf0880d68,%eax
f0101a91:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f0101a97:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f0101a9c:	29 c2                	sub    %eax,%edx
f0101a9e:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f0101aa0:	85 c0                	test   %eax,%eax
f0101aa2:	79 05                	jns    f0101aa9 <command_kernel_info+0x9f>
f0101aa4:	05 ff 03 00 00       	add    $0x3ff,%eax
f0101aa9:	c1 f8 0a             	sar    $0xa,%eax
f0101aac:	83 ec 08             	sub    $0x8,%esp
f0101aaf:	50                   	push   %eax
f0101ab0:	68 98 e5 11 f0       	push   $0xf011e598
f0101ab5:	e8 4a 57 00 00       	call   f0107204 <cprintf>
f0101aba:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f0101abd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ac2:	c9                   	leave  
f0101ac3:	c3                   	ret    

f0101ac4 <command_writeusermem>:

int command_writeusermem(int number_of_arguments, char **arguments)
{
f0101ac4:	55                   	push   %ebp
f0101ac5:	89 e5                	mov    %esp,%ebp
f0101ac7:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101aca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101acd:	83 c0 04             	add    $0x4,%eax
f0101ad0:	8b 00                	mov    (%eax),%eax
f0101ad2:	83 ec 04             	sub    $0x4,%esp
f0101ad5:	6a 0a                	push   $0xa
f0101ad7:	6a 00                	push   $0x0
f0101ad9:	50                   	push   %eax
f0101ada:	e8 fe b5 01 00       	call   f011d0dd <strtol>
f0101adf:	83 c4 10             	add    $0x10,%esp
f0101ae2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101ae5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101aec:	83 ec 04             	sub    $0x4,%esp
f0101aef:	6a 00                	push   $0x0
f0101af1:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101af4:	50                   	push   %eax
f0101af5:	ff 75 f4             	pushl  -0xc(%ebp)
f0101af8:	e8 7e 16 00 00       	call   f010317b <envid2env>
f0101afd:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[3], NULL, 16);
f0101b00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b03:	83 c0 0c             	add    $0xc,%eax
f0101b06:	8b 00                	mov    (%eax),%eax
f0101b08:	83 ec 04             	sub    $0x4,%esp
f0101b0b:	6a 10                	push   $0x10
f0101b0d:	6a 00                	push   $0x0
f0101b0f:	50                   	push   %eax
f0101b10:	e8 c8 b5 01 00       	call   f011d0dd <strtol>
f0101b15:	83 c4 10             	add    $0x10,%esp
f0101b18:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101b1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101b1e:	85 c0                	test   %eax,%eax
f0101b20:	75 07                	jne    f0101b29 <command_writeusermem+0x65>
f0101b22:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b27:	eb 43                	jmp    f0101b6c <command_writeusermem+0xa8>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101b29:	0f 20 d8             	mov    %cr3,%eax
f0101b2c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101b2f:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32) (env->env_cr3));
f0101b35:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101b38:	8b 40 60             	mov    0x60(%eax),%eax
f0101b3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101b3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101b41:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101b44:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101b47:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	*ptr = arguments[2][0];
f0101b4a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b4d:	83 c0 08             	add    $0x8,%eax
f0101b50:	8b 00                	mov    (%eax),%eax
f0101b52:	8a 00                	mov    (%eax),%al
f0101b54:	88 c2                	mov    %al,%dl
f0101b56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101b59:	88 10                	mov    %dl,(%eax)
f0101b5b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101b5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101b61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101b64:	0f 22 d8             	mov    %eax,%cr3
	lcr3(oldDir);

	return 0;
f0101b67:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b6c:	c9                   	leave  
f0101b6d:	c3                   	ret    

f0101b6e <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0101b6e:	55                   	push   %ebp
f0101b6f:	89 e5                	mov    %esp,%ebp
f0101b71:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101b74:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b77:	83 c0 04             	add    $0x4,%eax
f0101b7a:	8b 00                	mov    (%eax),%eax
f0101b7c:	83 ec 04             	sub    $0x4,%esp
f0101b7f:	6a 10                	push   $0x10
f0101b81:	6a 00                	push   $0x0
f0101b83:	50                   	push   %eax
f0101b84:	e8 54 b5 01 00       	call   f011d0dd <strtol>
f0101b89:	83 c4 10             	add    $0x10,%esp
f0101b8c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101b91:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101b94:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b97:	83 c0 08             	add    $0x8,%eax
f0101b9a:	8b 00                	mov    (%eax),%eax
f0101b9c:	83 ec 04             	sub    $0x4,%esp
f0101b9f:	6a 0a                	push   $0xa
f0101ba1:	6a 00                	push   $0x0
f0101ba3:	50                   	push   %eax
f0101ba4:	e8 34 b5 01 00       	call   f011d0dd <strtol>
f0101ba9:	83 c4 10             	add    $0x10,%esp
f0101bac:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f0101baf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f0101bb6:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bb9:	83 c0 0c             	add    $0xc,%eax
f0101bbc:	8b 00                	mov    (%eax),%eax
f0101bbe:	83 ec 0c             	sub    $0xc,%esp
f0101bc1:	50                   	push   %eax
f0101bc2:	e8 b6 b1 01 00       	call   f011cd7d <strlen>
f0101bc7:	83 c4 10             	add    $0x10,%esp
f0101bca:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101bcd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101bd4:	eb 30                	jmp    f0101c06 <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f0101bd6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101bdd:	eb 1c                	jmp    f0101bfb <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101be2:	83 c0 0c             	add    $0xc,%eax
f0101be5:	8b 10                	mov    (%eax),%edx
f0101be7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bea:	01 d0                	add    %edx,%eax
f0101bec:	8a 00                	mov    (%eax),%al
f0101bee:	88 c2                	mov    %al,%dl
f0101bf0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101bf3:	88 10                	mov    %dl,(%eax)
			address++;
f0101bf5:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f0101bf8:	ff 45 ec             	incl   -0x14(%ebp)
f0101bfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101bfe:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101c01:	7c dc                	jl     f0101bdf <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101c03:	ff 45 f0             	incl   -0x10(%ebp)
f0101c06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c09:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101c0c:	7c c8                	jl     f0101bd6 <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101c0e:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101c13:	c9                   	leave  
f0101c14:	c3                   	ret    

f0101c15 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0101c15:	55                   	push   %ebp
f0101c16:	89 e5                	mov    %esp,%ebp
f0101c18:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101c1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c1e:	83 c0 04             	add    $0x4,%eax
f0101c21:	8b 00                	mov    (%eax),%eax
f0101c23:	83 ec 04             	sub    $0x4,%esp
f0101c26:	6a 0a                	push   $0xa
f0101c28:	6a 00                	push   $0x0
f0101c2a:	50                   	push   %eax
f0101c2b:	e8 ad b4 01 00       	call   f011d0dd <strtol>
f0101c30:	83 c4 10             	add    $0x10,%esp
f0101c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101c36:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101c3d:	83 ec 04             	sub    $0x4,%esp
f0101c40:	6a 00                	push   $0x0
f0101c42:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101c45:	50                   	push   %eax
f0101c46:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c49:	e8 2d 15 00 00       	call   f010317b <envid2env>
f0101c4e:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101c51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c54:	83 c0 08             	add    $0x8,%eax
f0101c57:	8b 00                	mov    (%eax),%eax
f0101c59:	83 ec 04             	sub    $0x4,%esp
f0101c5c:	6a 10                	push   $0x10
f0101c5e:	6a 00                	push   $0x0
f0101c60:	50                   	push   %eax
f0101c61:	e8 77 b4 01 00       	call   f011d0dd <strtol>
f0101c66:	83 c4 10             	add    $0x10,%esp
f0101c69:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if(env == NULL) return 0;
f0101c6c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c6f:	85 c0                	test   %eax,%eax
f0101c71:	75 07                	jne    f0101c7a <command_readusermem+0x65>
f0101c73:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c78:	eb 4e                	jmp    f0101cc8 <command_readusermem+0xb3>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101c7a:	0f 20 d8             	mov    %cr3,%eax
f0101c7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101c80:	8b 45 e8             	mov    -0x18(%ebp),%eax

	uint32 oldDir = rcr3();
f0101c83:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101c86:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101c89:	8b 40 60             	mov    0x60(%eax),%eax
f0101c8c:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101c8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101c92:	0f 22 d8             	mov    %eax,%cr3

	unsigned char *ptr = (unsigned char *)(address) ;
f0101c95:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101c98:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	//Write the given Character
	cprintf("value at address %x = %c\n", address, *ptr);
f0101c9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101c9e:	8a 00                	mov    (%eax),%al
f0101ca0:	0f b6 c0             	movzbl %al,%eax
f0101ca3:	83 ec 04             	sub    $0x4,%esp
f0101ca6:	50                   	push   %eax
f0101ca7:	ff 75 f0             	pushl  -0x10(%ebp)
f0101caa:	68 c3 e5 11 f0       	push   $0xf011e5c3
f0101caf:	e8 50 55 00 00       	call   f0107204 <cprintf>
f0101cb4:	83 c4 10             	add    $0x10,%esp
f0101cb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101cba:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0101cbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101cc0:	0f 22 d8             	mov    %eax,%cr3

	lcr3(oldDir);
	return 0;
f0101cc3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cc8:	c9                   	leave  
f0101cc9:	c3                   	ret    

f0101cca <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101cca:	55                   	push   %ebp
f0101ccb:	89 e5                	mov    %esp,%ebp
f0101ccd:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cd3:	83 c0 04             	add    $0x4,%eax
f0101cd6:	8b 00                	mov    (%eax),%eax
f0101cd8:	83 ec 04             	sub    $0x4,%esp
f0101cdb:	6a 10                	push   $0x10
f0101cdd:	6a 00                	push   $0x0
f0101cdf:	50                   	push   %eax
f0101ce0:	e8 f8 b3 01 00       	call   f011d0dd <strtol>
f0101ce5:	83 c4 10             	add    $0x10,%esp
f0101ce8:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101ced:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101cf3:	83 c0 08             	add    $0x8,%eax
f0101cf6:	8b 00                	mov    (%eax),%eax
f0101cf8:	83 ec 04             	sub    $0x4,%esp
f0101cfb:	6a 0a                	push   $0xa
f0101cfd:	6a 00                	push   $0x0
f0101cff:	50                   	push   %eax
f0101d00:	e8 d8 b3 01 00       	call   f011d0dd <strtol>
f0101d05:	83 c4 10             	add    $0x10,%esp
f0101d08:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f0101d0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f0101d12:	eb 22                	jmp    f0101d36 <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f0101d14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d17:	8d 50 01             	lea    0x1(%eax),%edx
f0101d1a:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0101d1d:	8a 00                	mov    (%eax),%al
f0101d1f:	0f b6 c0             	movzbl %al,%eax
f0101d22:	83 ec 08             	sub    $0x8,%esp
f0101d25:	50                   	push   %eax
f0101d26:	68 dd e5 11 f0       	push   $0xf011e5dd
f0101d2b:	e8 d4 54 00 00       	call   f0107204 <cprintf>
f0101d30:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f0101d33:	ff 45 f0             	incl   -0x10(%ebp)
f0101d36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101d39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0101d3c:	7c d6                	jl     f0101d14 <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f0101d3e:	83 ec 0c             	sub    $0xc,%esp
f0101d41:	68 e0 e5 11 f0       	push   $0xf011e5e0
f0101d46:	e8 b9 54 00 00       	call   f0107204 <cprintf>
f0101d4b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d4e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d53:	c9                   	leave  
f0101d54:	c3                   	ret    

f0101d55 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0101d55:	55                   	push   %ebp
f0101d56:	89 e5                	mov    %esp,%ebp
f0101d58:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d5e:	83 c0 04             	add    $0x4,%eax
f0101d61:	8b 00                	mov    (%eax),%eax
f0101d63:	83 ec 04             	sub    $0x4,%esp
f0101d66:	6a 0a                	push   $0xa
f0101d68:	6a 00                	push   $0x0
f0101d6a:	50                   	push   %eax
f0101d6b:	e8 6d b3 01 00       	call   f011d0dd <strtol>
f0101d70:	83 c4 10             	add    $0x10,%esp
f0101d73:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0101d76:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101d7d:	83 ec 04             	sub    $0x4,%esp
f0101d80:	6a 00                	push   $0x0
f0101d82:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101d85:	50                   	push   %eax
f0101d86:	ff 75 ec             	pushl  -0x14(%ebp)
f0101d89:	e8 ed 13 00 00       	call   f010317b <envid2env>
f0101d8e:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0101d91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d94:	83 c0 08             	add    $0x8,%eax
f0101d97:	8b 00                	mov    (%eax),%eax
f0101d99:	83 ec 04             	sub    $0x4,%esp
f0101d9c:	6a 10                	push   $0x10
f0101d9e:	6a 00                	push   $0x0
f0101da0:	50                   	push   %eax
f0101da1:	e8 37 b3 01 00       	call   f011d0dd <strtol>
f0101da6:	83 c4 10             	add    $0x10,%esp
f0101da9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101dac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101daf:	83 c0 0c             	add    $0xc,%eax
f0101db2:	8b 00                	mov    (%eax),%eax
f0101db4:	83 ec 04             	sub    $0x4,%esp
f0101db7:	6a 0a                	push   $0xa
f0101db9:	6a 00                	push   $0x0
f0101dbb:	50                   	push   %eax
f0101dbc:	e8 1c b3 01 00       	call   f011d0dd <strtol>
f0101dc1:	83 c4 10             	add    $0x10,%esp
f0101dc4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101dc7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101dca:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101dcd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101dd0:	85 c0                	test   %eax,%eax
f0101dd2:	75 07                	jne    f0101ddb <command_readuserblock+0x86>
f0101dd4:	b8 00 00 00 00       	mov    $0x0,%eax
f0101dd9:	eb 65                	jmp    f0101e40 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101ddb:	0f 20 d8             	mov    %cr3,%eax
f0101dde:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0101de1:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0101de4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101de7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101dea:	8b 40 60             	mov    0x60(%eax),%eax
f0101ded:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101df0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101df3:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0101df6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dfd:	eb 28                	jmp    f0101e27 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0101dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e02:	8a 00                	mov    (%eax),%al
f0101e04:	0f b6 d0             	movzbl %al,%edx
f0101e07:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e0a:	8a 00                	mov    (%eax),%al
f0101e0c:	0f b6 c0             	movzbl %al,%eax
f0101e0f:	52                   	push   %edx
f0101e10:	50                   	push   %eax
f0101e11:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e14:	68 e2 e5 11 f0       	push   $0xf011e5e2
f0101e19:	e8 e6 53 00 00       	call   f0107204 <cprintf>
f0101e1e:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0101e21:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0101e24:	ff 45 f0             	incl   -0x10(%ebp)
f0101e27:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e2a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e2d:	7c d0                	jl     f0101dff <command_readuserblock+0xaa>
f0101e2f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101e32:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e35:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e38:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0101e3b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e40:	c9                   	leave  
f0101e41:	c3                   	ret    

f0101e42 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0101e42:	55                   	push   %ebp
f0101e43:	89 e5                	mov    %esp,%ebp
f0101e45:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101e48:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e4b:	83 c0 04             	add    $0x4,%eax
f0101e4e:	8b 00                	mov    (%eax),%eax
f0101e50:	83 ec 04             	sub    $0x4,%esp
f0101e53:	6a 0a                	push   $0xa
f0101e55:	6a 00                	push   $0x0
f0101e57:	50                   	push   %eax
f0101e58:	e8 80 b2 01 00       	call   f011d0dd <strtol>
f0101e5d:	83 c4 10             	add    $0x10,%esp
f0101e60:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101e63:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101e6a:	83 ec 04             	sub    $0x4,%esp
f0101e6d:	6a 00                	push   $0x0
f0101e6f:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0101e72:	50                   	push   %eax
f0101e73:	ff 75 f4             	pushl  -0xc(%ebp)
f0101e76:	e8 00 13 00 00       	call   f010317b <envid2env>
f0101e7b:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101e7e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101e81:	85 c0                	test   %eax,%eax
f0101e83:	75 0a                	jne    f0101e8f <command_remove_table+0x4d>
f0101e85:	b8 00 00 00 00       	mov    $0x0,%eax
f0101e8a:	e9 c7 00 00 00       	jmp    f0101f56 <command_remove_table+0x114>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101e8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101e92:	83 c0 08             	add    $0x8,%eax
f0101e95:	8b 00                	mov    (%eax),%eax
f0101e97:	83 ec 04             	sub    $0x4,%esp
f0101e9a:	6a 10                	push   $0x10
f0101e9c:	6a 00                	push   $0x0
f0101e9e:	50                   	push   %eax
f0101e9f:	e8 39 b2 01 00       	call   f011d0dd <strtol>
f0101ea4:	83 c4 10             	add    $0x10,%esp
f0101ea7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101eaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101ead:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101eb0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101eb3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101eb6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101eb9:	c1 ea 16             	shr    $0x16,%edx
f0101ebc:	c1 e2 02             	shl    $0x2,%edx
f0101ebf:	01 d0                	add    %edx,%eax
f0101ec1:	8b 00                	mov    (%eax),%eax
f0101ec3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101ec8:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//remove the table
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(va))
f0101ecb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ece:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0101ed3:	77 1c                	ja     f0101ef1 <command_remove_table+0xaf>
	{
		kfree((void*)kheap_virtual_address(table_pa));
f0101ed5:	83 ec 0c             	sub    $0xc,%esp
f0101ed8:	ff 75 e8             	pushl  -0x18(%ebp)
f0101edb:	e8 12 b1 00 00       	call   f010cff2 <kheap_virtual_address>
f0101ee0:	83 c4 10             	add    $0x10,%esp
f0101ee3:	83 ec 0c             	sub    $0xc,%esp
f0101ee6:	50                   	push   %eax
f0101ee7:	e8 f4 af 00 00       	call   f010cee0 <kfree>
f0101eec:	83 c4 10             	add    $0x10,%esp
f0101eef:	eb 28                	jmp    f0101f19 <command_remove_table+0xd7>
	}
	else
	{
		// get the physical address and Frame_Info of the page table
		struct Frame_Info *table_frame_info = to_frame_info(table_pa);
f0101ef1:	83 ec 0c             	sub    $0xc,%esp
f0101ef4:	ff 75 e8             	pushl  -0x18(%ebp)
f0101ef7:	e8 65 ee ff ff       	call   f0100d61 <to_frame_info>
f0101efc:	83 c4 10             	add    $0x10,%esp
f0101eff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_frame_info->references = 0;
f0101f02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f05:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_frame_info);
f0101f0b:	83 ec 0c             	sub    $0xc,%esp
f0101f0e:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101f11:	e8 38 1c 00 00       	call   f0103b4e <free_frame>
f0101f16:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0101f19:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101f1c:	c1 e8 16             	shr    $0x16,%eax
f0101f1f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0101f22:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101f25:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101f28:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101f2b:	c1 e2 02             	shl    $0x2,%edx
f0101f2e:	01 c2                	add    %eax,%edx
f0101f30:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0101f33:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101f36:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0101f39:	c1 e1 02             	shl    $0x2,%ecx
f0101f3c:	01 c8                	add    %ecx,%eax
f0101f3e:	8b 00                	mov    (%eax),%eax
f0101f40:	83 e0 fe             	and    $0xfffffffe,%eax
f0101f43:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0101f45:	0f 20 d8             	mov    %cr3,%eax
f0101f48:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0101f4b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101f4e:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0101f51:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f56:	c9                   	leave  
f0101f57:	c3                   	ret    

f0101f58 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0101f58:	55                   	push   %ebp
f0101f59:	89 e5                	mov    %esp,%ebp
f0101f5b:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101f5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101f61:	83 c0 04             	add    $0x4,%eax
f0101f64:	8b 00                	mov    (%eax),%eax
f0101f66:	83 ec 04             	sub    $0x4,%esp
f0101f69:	6a 0a                	push   $0xa
f0101f6b:	6a 00                	push   $0x0
f0101f6d:	50                   	push   %eax
f0101f6e:	e8 6a b1 01 00       	call   f011d0dd <strtol>
f0101f73:	83 c4 10             	add    $0x10,%esp
f0101f76:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0101f79:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	envid2env(envId, &env, 0 );
f0101f80:	83 ec 04             	sub    $0x4,%esp
f0101f83:	6a 00                	push   $0x0
f0101f85:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101f88:	50                   	push   %eax
f0101f89:	ff 75 f4             	pushl  -0xc(%ebp)
f0101f8c:	e8 ea 11 00 00       	call   f010317b <envid2env>
f0101f91:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101f94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101f97:	85 c0                	test   %eax,%eax
f0101f99:	75 07                	jne    f0101fa2 <command_allocuserpage+0x4a>
f0101f9b:	b8 00 00 00 00       	mov    $0x0,%eax
f0101fa0:	eb 6d                	jmp    f010200f <command_allocuserpage+0xb7>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101fa2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101fa5:	83 c0 08             	add    $0x8,%eax
f0101fa8:	8b 00                	mov    (%eax),%eax
f0101faa:	83 ec 04             	sub    $0x4,%esp
f0101fad:	6a 10                	push   $0x10
f0101faf:	6a 00                	push   $0x0
f0101fb1:	50                   	push   %eax
f0101fb2:	e8 26 b1 01 00       	call   f011d0dd <strtol>
f0101fb7:	83 c4 10             	add    $0x10,%esp
f0101fba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101fbd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fc0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct Frame_Info * ptr_frame_info ;
	int ret = allocate_frame(&ptr_frame_info);
f0101fc3:	83 ec 0c             	sub    $0xc,%esp
f0101fc6:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0101fc9:	50                   	push   %eax
f0101fca:	e8 8d 1a 00 00       	call   f0103a5c <allocate_frame>
f0101fcf:	83 c4 10             	add    $0x10,%esp
f0101fd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0101fd5:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0101fd9:	75 17                	jne    f0101ff2 <command_allocuserpage+0x9a>
	{
		cprintf("ERROR: no enough memory\n");
f0101fdb:	83 ec 0c             	sub    $0xc,%esp
f0101fde:	68 f3 e5 11 f0       	push   $0xf011e5f3
f0101fe3:	e8 1c 52 00 00       	call   f0107204 <cprintf>
f0101fe8:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101feb:	b8 00 00 00 00       	mov    $0x0,%eax
f0101ff0:	eb 1d                	jmp    f010200f <command_allocuserpage+0xb7>
	}

	// Map this frame to the given user virtual address
	map_frame(env->env_page_directory, ptr_frame_info, va, PERM_WRITEABLE | PERM_USER);
f0101ff2:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101ff5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101ff8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0101ffb:	6a 06                	push   $0x6
f0101ffd:	ff 75 ec             	pushl  -0x14(%ebp)
f0102000:	52                   	push   %edx
f0102001:	50                   	push   %eax
f0102002:	e8 d0 1d 00 00       	call   f0103dd7 <map_frame>
f0102007:	83 c4 10             	add    $0x10,%esp

	return 0;
f010200a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010200f:	c9                   	leave  
f0102010:	c3                   	ret    

f0102011 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102011:	55                   	push   %ebp
f0102012:	89 e5                	mov    %esp,%ebp
f0102014:	56                   	push   %esi
f0102015:	53                   	push   %ebx
f0102016:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102019:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010201c:	83 ec 0c             	sub    $0xc,%esp
f010201f:	50                   	push   %eax
f0102020:	e8 c1 24 00 00       	call   f01044e6 <calculate_available_frames>
f0102025:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102028:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010202b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010202e:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102031:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102034:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102037:	01 de                	add    %ebx,%esi
f0102039:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010203c:	01 f3                	add    %esi,%ebx
f010203e:	83 ec 0c             	sub    $0xc,%esp
f0102041:	51                   	push   %ecx
f0102042:	52                   	push   %edx
f0102043:	50                   	push   %eax
f0102044:	53                   	push   %ebx
f0102045:	68 0c e6 11 f0       	push   $0xf011e60c
f010204a:	e8 b5 51 00 00       	call   f0107204 <cprintf>
f010204f:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102052:	a1 e0 08 80 f0       	mov    0xf08008e0,%eax
f0102057:	83 ec 08             	sub    $0x8,%esp
f010205a:	50                   	push   %eax
f010205b:	68 64 e6 11 f0       	push   $0xf011e664
f0102060:	e8 9f 51 00 00       	call   f0107204 <cprintf>
f0102065:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102068:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010206d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102070:	5b                   	pop    %ebx
f0102071:	5e                   	pop    %esi
f0102072:	5d                   	pop    %ebp
f0102073:	c3                   	ret    

f0102074 <command_run_program>:


int command_run_program(int number_of_arguments, char **arguments)
{
f0102074:	55                   	push   %ebp
f0102075:	89 e5                	mov    %esp,%ebp
f0102077:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f010207a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010207e:	7f 1a                	jg     f010209a <command_run_program+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102080:	83 ec 0c             	sub    $0xc,%esp
f0102083:	68 a0 e6 11 f0       	push   $0xf011e6a0
f0102088:	e8 77 51 00 00       	call   f0107204 <cprintf>
f010208d:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102090:	b8 00 00 00 00       	mov    $0x0,%eax
f0102095:	e9 b2 00 00 00       	jmp    f010214c <command_run_program+0xd8>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f010209a:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010209e:	75 1d                	jne    f01020bd <command_run_program+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f01020a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020a3:	83 c0 0c             	add    $0xc,%eax
f01020a6:	8b 00                	mov    (%eax),%eax
f01020a8:	83 ec 04             	sub    $0x4,%esp
f01020ab:	6a 0a                	push   $0xa
f01020ad:	6a 00                	push   $0x0
f01020af:	50                   	push   %eax
f01020b0:	e8 28 b0 01 00       	call   f011d0dd <strtol>
f01020b5:	83 c4 10             	add    $0x10,%esp
f01020b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01020bb:	eb 07                	jmp    f01020c4 <command_run_program+0x50>
		else
			percent_WS_pages_to_remove = 0;
f01020bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f01020c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020c7:	83 c0 08             	add    $0x8,%eax
f01020ca:	8b 00                	mov    (%eax),%eax
f01020cc:	83 ec 04             	sub    $0x4,%esp
f01020cf:	6a 0a                	push   $0xa
f01020d1:	6a 00                	push   $0x0
f01020d3:	50                   	push   %eax
f01020d4:	e8 04 b0 01 00       	call   f011d0dd <strtol>
f01020d9:	83 c4 10             	add    $0x10,%esp
f01020dc:	89 c2                	mov    %eax,%edx
f01020de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01020e1:	83 c0 04             	add    $0x4,%eax
f01020e4:	8b 00                	mov    (%eax),%eax
f01020e6:	83 ec 04             	sub    $0x4,%esp
f01020e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01020ec:	52                   	push   %edx
f01020ed:	50                   	push   %eax
f01020ee:	e8 0d 3c 00 00       	call   f0105d00 <env_create>
f01020f3:	83 c4 10             	add    $0x10,%esp
f01020f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if(env == NULL) return 0;
f01020f9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01020fd:	75 07                	jne    f0102106 <command_run_program+0x92>
f01020ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0102104:	eb 46                	jmp    f010214c <command_run_program+0xd8>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102106:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102109:	8b 40 4c             	mov    0x4c(%eax),%eax
f010210c:	83 ec 08             	sub    $0x8,%esp
f010210f:	50                   	push   %eax
f0102110:	68 eb e6 11 f0       	push   $0xf011e6eb
f0102115:	e8 ea 50 00 00       	call   f0107204 <cprintf>
f010211a:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f010211d:	c7 05 e0 08 80 f0 00 	movl   $0x0,0xf08008e0
f0102124:	00 00 00 

	sched_new_env(env);
f0102127:	83 ec 0c             	sub    $0xc,%esp
f010212a:	ff 75 f0             	pushl  -0x10(%ebp)
f010212d:	e8 40 7c 00 00       	call   f0109d72 <sched_new_env>
f0102132:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0102135:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102138:	8b 40 4c             	mov    0x4c(%eax),%eax
f010213b:	83 ec 0c             	sub    $0xc,%esp
f010213e:	50                   	push   %eax
f010213f:	e8 45 7c 00 00       	call   f0109d89 <sched_run_env>
f0102144:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102147:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010214c:	c9                   	leave  
f010214d:	c3                   	ret    

f010214e <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f010214e:	55                   	push   %ebp
f010214f:	89 e5                	mov    %esp,%ebp
f0102151:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102154:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102157:	83 c0 04             	add    $0x4,%eax
f010215a:	8b 00                	mov    (%eax),%eax
f010215c:	83 ec 04             	sub    $0x4,%esp
f010215f:	6a 0a                	push   $0xa
f0102161:	6a 00                	push   $0x0
f0102163:	50                   	push   %eax
f0102164:	e8 74 af 01 00       	call   f011d0dd <strtol>
f0102169:	83 c4 10             	add    $0x10,%esp
f010216c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f010216f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102172:	83 ec 0c             	sub    $0xc,%esp
f0102175:	50                   	push   %eax
f0102176:	e8 e9 7f 00 00       	call   f010a164 <sched_kill_env>
f010217b:	83 c4 10             	add    $0x10,%esp

	return 0;
f010217e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102183:	c9                   	leave  
f0102184:	c3                   	ret    

f0102185 <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0102185:	55                   	push   %ebp
f0102186:	89 e5                	mov    %esp,%ebp
f0102188:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	if(USE_KHEAP)
	{
		if(number_of_arguments < 3)
f010218b:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010218f:	7f 1a                	jg     f01021ab <commnad_load_env+0x26>
		{
			cprintf("Error: Please specify a working set size in the third argument, aborting.\n");
f0102191:	83 ec 0c             	sub    $0xc,%esp
f0102194:	68 a0 e6 11 f0       	push   $0xf011e6a0
f0102199:	e8 66 50 00 00       	call   f0107204 <cprintf>
f010219e:	83 c4 10             	add    $0x10,%esp
			return 0;
f01021a1:	b8 00 00 00 00       	mov    $0x0,%eax
f01021a6:	e9 96 00 00 00       	jmp    f0102241 <commnad_load_env+0xbc>
		}
		unsigned int percent_WS_pages_to_remove;
		if (number_of_arguments == 4)
f01021ab:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01021af:	75 1d                	jne    f01021ce <commnad_load_env+0x49>
			percent_WS_pages_to_remove = strtol(arguments[3], NULL, 10);
f01021b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021b4:	83 c0 0c             	add    $0xc,%eax
f01021b7:	8b 00                	mov    (%eax),%eax
f01021b9:	83 ec 04             	sub    $0x4,%esp
f01021bc:	6a 0a                	push   $0xa
f01021be:	6a 00                	push   $0x0
f01021c0:	50                   	push   %eax
f01021c1:	e8 17 af 01 00       	call   f011d0dd <strtol>
f01021c6:	83 c4 10             	add    $0x10,%esp
f01021c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01021cc:	eb 07                	jmp    f01021d5 <commnad_load_env+0x50>
		else
			percent_WS_pages_to_remove = 0;
f01021ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		env = env_create(arguments[1], strtol(arguments[2], NULL, 10), percent_WS_pages_to_remove);
f01021d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021d8:	83 c0 08             	add    $0x8,%eax
f01021db:	8b 00                	mov    (%eax),%eax
f01021dd:	83 ec 04             	sub    $0x4,%esp
f01021e0:	6a 0a                	push   $0xa
f01021e2:	6a 00                	push   $0x0
f01021e4:	50                   	push   %eax
f01021e5:	e8 f3 ae 01 00       	call   f011d0dd <strtol>
f01021ea:	83 c4 10             	add    $0x10,%esp
f01021ed:	89 c2                	mov    %eax,%edx
f01021ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f01021f2:	83 c0 04             	add    $0x4,%eax
f01021f5:	8b 00                	mov    (%eax),%eax
f01021f7:	83 ec 04             	sub    $0x4,%esp
f01021fa:	ff 75 f4             	pushl  -0xc(%ebp)
f01021fd:	52                   	push   %edx
f01021fe:	50                   	push   %eax
f01021ff:	e8 fc 3a 00 00       	call   f0105d00 <env_create>
f0102204:	83 c4 10             	add    $0x10,%esp
f0102207:	89 45 f0             	mov    %eax,-0x10(%ebp)
			percent_WS_pages_to_remove = 0;

		env = env_create(arguments[1], __PWS_MAX_SIZE, percent_WS_pages_to_remove);
	}

	if (env == NULL)
f010220a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010220e:	75 07                	jne    f0102217 <commnad_load_env+0x92>
		return 0 ;
f0102210:	b8 00 00 00 00       	mov    $0x0,%eax
f0102215:	eb 2a                	jmp    f0102241 <commnad_load_env+0xbc>

	sched_new_env(env) ;
f0102217:	83 ec 0c             	sub    $0xc,%esp
f010221a:	ff 75 f0             	pushl  -0x10(%ebp)
f010221d:	e8 50 7b 00 00       	call   f0109d72 <sched_new_env>
f0102222:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102225:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102228:	8b 40 4c             	mov    0x4c(%eax),%eax
f010222b:	83 ec 08             	sub    $0x8,%esp
f010222e:	50                   	push   %eax
f010222f:	68 eb e6 11 f0       	push   $0xf011e6eb
f0102234:	e8 cb 4f 00 00       	call   f0107204 <cprintf>
f0102239:	83 c4 10             	add    $0x10,%esp
	return 0;
f010223c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102241:	c9                   	leave  
f0102242:	c3                   	ret    

f0102243 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0102243:	55                   	push   %ebp
f0102244:	89 e5                	mov    %esp,%ebp
f0102246:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0102249:	c7 05 e0 08 80 f0 00 	movl   $0x0,0xf08008e0
f0102250:	00 00 00 
	sched_run_all();
f0102253:	e8 85 77 00 00       	call   f01099dd <sched_run_all>

	return 0 ;
f0102258:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010225d:	c9                   	leave  
f010225e:	c3                   	ret    

f010225f <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f010225f:	55                   	push   %ebp
f0102260:	89 e5                	mov    %esp,%ebp
f0102262:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0102265:	e8 69 75 00 00       	call   f01097d3 <sched_print_all>

	return 0 ;
f010226a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010226f:	c9                   	leave  
f0102270:	c3                   	ret    

f0102271 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0102271:	55                   	push   %ebp
f0102272:	89 e5                	mov    %esp,%ebp
f0102274:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0102277:	e8 ce 77 00 00       	call   f0109a4a <sched_kill_all>

	return 0 ;
f010227c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102281:	c9                   	leave  
f0102282:	c3                   	ret    

f0102283 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0102283:	55                   	push   %ebp
f0102284:	89 e5                	mov    %esp,%ebp
f0102286:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmLRU();
f0102289:	e8 94 64 00 00       	call   f0108722 <setPageReplacmentAlgorithmLRU>
	cprintf("Page replacement algorithm is now LRU\n");
f010228e:	83 ec 0c             	sub    $0xc,%esp
f0102291:	68 00 e7 11 f0       	push   $0xf011e700
f0102296:	e8 69 4f 00 00       	call   f0107204 <cprintf>
f010229b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010229e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022a3:	c9                   	leave  
f01022a4:	c3                   	ret    

f01022a5 <command_set_page_rep_CLOCK>:

int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f01022a5:	55                   	push   %ebp
f01022a6:	89 e5                	mov    %esp,%ebp
f01022a8:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f01022ab:	e8 82 64 00 00       	call   f0108732 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f01022b0:	83 ec 0c             	sub    $0xc,%esp
f01022b3:	68 28 e7 11 f0       	push   $0xf011e728
f01022b8:	e8 47 4f 00 00       	call   f0107204 <cprintf>
f01022bd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c5:	c9                   	leave  
f01022c6:	c3                   	ret    

f01022c7 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f01022c7:	55                   	push   %ebp
f01022c8:	89 e5                	mov    %esp,%ebp
f01022ca:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f01022cd:	e8 70 64 00 00       	call   f0108742 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f01022d2:	83 ec 0c             	sub    $0xc,%esp
f01022d5:	68 54 e7 11 f0       	push   $0xf011e754
f01022da:	e8 25 4f 00 00       	call   f0107204 <cprintf>
f01022df:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022e7:	c9                   	leave  
f01022e8:	c3                   	ret    

f01022e9 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f01022e9:	55                   	push   %ebp
f01022ea:	89 e5                	mov    %esp,%ebp
f01022ec:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f01022ef:	e8 5e 64 00 00       	call   f0108752 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f01022f4:	83 ec 0c             	sub    $0xc,%esp
f01022f7:	68 7c e7 11 f0       	push   $0xf011e77c
f01022fc:	e8 03 4f 00 00       	call   f0107204 <cprintf>
f0102301:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102304:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102309:	c9                   	leave  
f010230a:	c3                   	ret    

f010230b <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f010230b:	55                   	push   %ebp
f010230c:	89 e5                	mov    %esp,%ebp
f010230e:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0102311:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102314:	83 c0 04             	add    $0x4,%eax
f0102317:	8b 00                	mov    (%eax),%eax
f0102319:	83 ec 04             	sub    $0x4,%esp
f010231c:	6a 0a                	push   $0xa
f010231e:	6a 00                	push   $0x0
f0102320:	50                   	push   %eax
f0102321:	e8 b7 ad 01 00       	call   f011d0dd <strtol>
f0102326:	83 c4 10             	add    $0x10,%esp
f0102329:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f010232c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0102330:	83 ec 0c             	sub    $0xc,%esp
f0102333:	50                   	push   %eax
f0102334:	e8 0d 71 00 00       	call   f0109446 <sched_init_RR>
f0102339:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f010233c:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f0102341:	8a 00                	mov    (%eax),%al
f0102343:	0f b6 c0             	movzbl %al,%eax
f0102346:	83 ec 08             	sub    $0x8,%esp
f0102349:	50                   	push   %eax
f010234a:	68 b0 e7 11 f0       	push   $0xf011e7b0
f010234f:	e8 b0 4e 00 00       	call   f0107204 <cprintf>
f0102354:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102357:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010235c:	c9                   	leave  
f010235d:	c3                   	ret    

f010235e <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f010235e:	55                   	push   %ebp
f010235f:	89 e5                	mov    %esp,%ebp
f0102361:	53                   	push   %ebx
f0102362:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0102365:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102368:	83 c0 04             	add    $0x4,%eax
f010236b:	8b 00                	mov    (%eax),%eax
f010236d:	83 ec 04             	sub    $0x4,%esp
f0102370:	6a 0a                	push   $0xa
f0102372:	6a 00                	push   $0x0
f0102374:	50                   	push   %eax
f0102375:	e8 63 ad 01 00       	call   f011d0dd <strtol>
f010237a:	83 c4 10             	add    $0x10,%esp
f010237d:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0102380:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102387:	eb 2e                	jmp    f01023b7 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0102389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010238c:	8d 58 fe             	lea    -0x2(%eax),%ebx
f010238f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102392:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102399:	8b 45 0c             	mov    0xc(%ebp),%eax
f010239c:	01 d0                	add    %edx,%eax
f010239e:	8b 00                	mov    (%eax),%eax
f01023a0:	83 ec 04             	sub    $0x4,%esp
f01023a3:	6a 0a                	push   $0xa
f01023a5:	6a 00                	push   $0x0
f01023a7:	50                   	push   %eax
f01023a8:	e8 30 ad 01 00       	call   f011d0dd <strtol>
f01023ad:	83 c4 10             	add    $0x10,%esp
f01023b0:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01023b4:	ff 45 f4             	incl   -0xc(%ebp)
f01023b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01023ba:	3b 45 08             	cmp    0x8(%ebp),%eax
f01023bd:	7c ca                	jl     f0102389 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f01023bf:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f01023c3:	83 ec 08             	sub    $0x8,%esp
f01023c6:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f01023c9:	52                   	push   %edx
f01023ca:	50                   	push   %eax
f01023cb:	e8 37 6f 00 00       	call   f0109307 <sched_init_MLFQ>
f01023d0:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f01023d3:	83 ec 0c             	sub    $0xc,%esp
f01023d6:	68 e8 e7 11 f0       	push   $0xf011e7e8
f01023db:	e8 24 4e 00 00       	call   f0107204 <cprintf>
f01023e0:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f01023e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01023ea:	eb 24                	jmp    f0102410 <command_sch_MLFQ+0xb2>
	{
		cprintf("%d   ", quantums[i]) ;
f01023ec:	8b 15 84 28 7e f0    	mov    0xf07e2884,%edx
f01023f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01023f5:	01 d0                	add    %edx,%eax
f01023f7:	8a 00                	mov    (%eax),%al
f01023f9:	0f b6 c0             	movzbl %al,%eax
f01023fc:	83 ec 08             	sub    $0x8,%esp
f01023ff:	50                   	push   %eax
f0102400:	68 15 e8 11 f0       	push   $0xf011e815
f0102405:	e8 fa 4d 00 00       	call   f0107204 <cprintf>
f010240a:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010240d:	ff 45 f0             	incl   -0x10(%ebp)
f0102410:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0102415:	0f b6 c0             	movzbl %al,%eax
f0102418:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010241b:	7f cf                	jg     f01023ec <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f010241d:	83 ec 0c             	sub    $0xc,%esp
f0102420:	68 e0 e5 11 f0       	push   $0xf011e5e0
f0102425:	e8 da 4d 00 00       	call   f0107204 <cprintf>
f010242a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010242d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102432:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102435:	c9                   	leave  
f0102436:	c3                   	ret    

f0102437 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0102437:	55                   	push   %ebp
f0102438:	89 e5                	mov    %esp,%ebp
f010243a:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f010243d:	e8 ab 6c 00 00       	call   f01090ed <isSchedMethodMLFQ>
f0102442:	85 c0                	test   %eax,%eax
f0102444:	74 5c                	je     f01024a2 <command_print_sch_method+0x6b>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0102446:	83 ec 0c             	sub    $0xc,%esp
f0102449:	68 1c e8 11 f0       	push   $0xf011e81c
f010244e:	e8 b1 4d 00 00       	call   f0107204 <cprintf>
f0102453:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010245d:	eb 24                	jmp    f0102483 <command_print_sch_method+0x4c>
		{
			cprintf("%d   ", quantums[i]) ;
f010245f:	8b 15 84 28 7e f0    	mov    0xf07e2884,%edx
f0102465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102468:	01 d0                	add    %edx,%eax
f010246a:	8a 00                	mov    (%eax),%al
f010246c:	0f b6 c0             	movzbl %al,%eax
f010246f:	83 ec 08             	sub    $0x8,%esp
f0102472:	50                   	push   %eax
f0102473:	68 15 e8 11 f0       	push   $0xf011e815
f0102478:	e8 87 4d 00 00       	call   f0107204 <cprintf>
f010247d:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0102480:	ff 45 f4             	incl   -0xc(%ebp)
f0102483:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0102488:	0f b6 c0             	movzbl %al,%eax
f010248b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010248e:	7f cf                	jg     f010245f <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0102490:	83 ec 0c             	sub    $0xc,%esp
f0102493:	68 e0 e5 11 f0       	push   $0xf011e5e0
f0102498:	e8 67 4d 00 00       	call   f0107204 <cprintf>
f010249d:	83 c4 10             	add    $0x10,%esp
f01024a0:	eb 36                	jmp    f01024d8 <command_print_sch_method+0xa1>
	}
	else if (isSchedMethodRR())
f01024a2:	e8 2c 6c 00 00       	call   f01090d3 <isSchedMethodRR>
f01024a7:	85 c0                	test   %eax,%eax
f01024a9:	74 1d                	je     f01024c8 <command_print_sch_method+0x91>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f01024ab:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f01024b0:	8a 00                	mov    (%eax),%al
f01024b2:	0f b6 c0             	movzbl %al,%eax
f01024b5:	83 ec 08             	sub    $0x8,%esp
f01024b8:	50                   	push   %eax
f01024b9:	68 50 e8 11 f0       	push   $0xf011e850
f01024be:	e8 41 4d 00 00       	call   f0107204 <cprintf>
f01024c3:	83 c4 10             	add    $0x10,%esp
f01024c6:	eb 10                	jmp    f01024d8 <command_print_sch_method+0xa1>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01024c8:	83 ec 0c             	sub    $0xc,%esp
f01024cb:	68 8c e8 11 f0       	push   $0xf011e88c
f01024d0:	e8 2f 4d 00 00       	call   f0107204 <cprintf>
f01024d5:	83 c4 10             	add    $0x10,%esp

	return 0;
f01024d8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01024dd:	c9                   	leave  
f01024de:	c3                   	ret    

f01024df <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01024df:	55                   	push   %ebp
f01024e0:	89 e5                	mov    %esp,%ebp
f01024e2:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01024e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01024e8:	83 c0 04             	add    $0x4,%eax
f01024eb:	8b 00                	mov    (%eax),%eax
f01024ed:	83 ec 04             	sub    $0x4,%esp
f01024f0:	6a 0a                	push   $0xa
f01024f2:	6a 00                	push   $0x0
f01024f4:	50                   	push   %eax
f01024f5:	e8 e3 ab 01 00       	call   f011d0dd <strtol>
f01024fa:	83 c4 10             	add    $0x10,%esp
f01024fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0102500:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102503:	0f b6 c0             	movzbl %al,%eax
f0102506:	83 ec 0c             	sub    $0xc,%esp
f0102509:	50                   	push   %eax
f010250a:	e8 7d 89 01 00       	call   f011ae8c <chksch>
f010250f:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0102512:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102516:	75 12                	jne    f010252a <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0102518:	83 ec 0c             	sub    $0xc,%esp
f010251b:	68 b4 e8 11 f0       	push   $0xf011e8b4
f0102520:	e8 df 4c 00 00       	call   f0107204 <cprintf>
f0102525:	83 c4 10             	add    $0x10,%esp
f0102528:	eb 16                	jmp    f0102540 <command_sch_test+0x61>
	else if (status == 1)
f010252a:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010252e:	75 10                	jne    f0102540 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0102530:	83 ec 0c             	sub    $0xc,%esp
f0102533:	68 dc e8 11 f0       	push   $0xf011e8dc
f0102538:	e8 c7 4c 00 00       	call   f0107204 <cprintf>
f010253d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102540:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102545:	c9                   	leave  
f0102546:	c3                   	ret    

f0102547 <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0102547:	55                   	push   %ebp
f0102548:	89 e5                	mov    %esp,%ebp
f010254a:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f010254d:	e8 2b 62 00 00       	call   f010877d <isPageReplacmentAlgorithmCLOCK>
f0102552:	85 c0                	test   %eax,%eax
f0102554:	74 12                	je     f0102568 <command_print_page_rep+0x21>
		cprintf("Page replacement algorithm is CLOCK\n");
f0102556:	83 ec 0c             	sub    $0xc,%esp
f0102559:	68 00 e9 11 f0       	push   $0xf011e900
f010255e:	e8 a1 4c 00 00       	call   f0107204 <cprintf>
f0102563:	83 c4 10             	add    $0x10,%esp
f0102566:	eb 61                	jmp    f01025c9 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmLRU())
f0102568:	e8 f5 61 00 00       	call   f0108762 <isPageReplacmentAlgorithmLRU>
f010256d:	85 c0                	test   %eax,%eax
f010256f:	74 12                	je     f0102583 <command_print_page_rep+0x3c>
		cprintf("Page replacement algorithm is LRU\n");
f0102571:	83 ec 0c             	sub    $0xc,%esp
f0102574:	68 28 e9 11 f0       	push   $0xf011e928
f0102579:	e8 86 4c 00 00       	call   f0107204 <cprintf>
f010257e:	83 c4 10             	add    $0x10,%esp
f0102581:	eb 46                	jmp    f01025c9 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmFIFO())
f0102583:	e8 10 62 00 00       	call   f0108798 <isPageReplacmentAlgorithmFIFO>
f0102588:	85 c0                	test   %eax,%eax
f010258a:	74 12                	je     f010259e <command_print_page_rep+0x57>
		cprintf("Page replacement algorithm is FIFO\n");
f010258c:	83 ec 0c             	sub    $0xc,%esp
f010258f:	68 4c e9 11 f0       	push   $0xf011e94c
f0102594:	e8 6b 4c 00 00       	call   f0107204 <cprintf>
f0102599:	83 c4 10             	add    $0x10,%esp
f010259c:	eb 2b                	jmp    f01025c9 <command_print_page_rep+0x82>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f010259e:	e8 10 62 00 00       	call   f01087b3 <isPageReplacmentAlgorithmModifiedCLOCK>
f01025a3:	85 c0                	test   %eax,%eax
f01025a5:	74 12                	je     f01025b9 <command_print_page_rep+0x72>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01025a7:	83 ec 0c             	sub    $0xc,%esp
f01025aa:	68 70 e9 11 f0       	push   $0xf011e970
f01025af:	e8 50 4c 00 00       	call   f0107204 <cprintf>
f01025b4:	83 c4 10             	add    $0x10,%esp
f01025b7:	eb 10                	jmp    f01025c9 <command_print_page_rep+0x82>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01025b9:	83 ec 0c             	sub    $0xc,%esp
f01025bc:	68 a0 e9 11 f0       	push   $0xf011e9a0
f01025c1:	e8 3e 4c 00 00       	call   f0107204 <cprintf>
f01025c6:	83 c4 10             	add    $0x10,%esp

	return 0;
f01025c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025ce:	c9                   	leave  
f01025cf:	c3                   	ret    

f01025d0 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01025d0:	55                   	push   %ebp
f01025d1:	89 e5                	mov    %esp,%ebp
f01025d3:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01025d6:	e8 6d 2f 00 00       	call   f0105548 <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01025db:	83 ec 0c             	sub    $0xc,%esp
f01025de:	68 cc e9 11 f0       	push   $0xf011e9cc
f01025e3:	e8 1c 4c 00 00       	call   f0107204 <cprintf>
f01025e8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01025eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025f0:	c9                   	leave  
f01025f1:	c3                   	ret    

f01025f2 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f01025f2:	55                   	push   %ebp
f01025f3:	89 e5                	mov    %esp,%ebp
f01025f5:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f01025f8:	e8 5b 2f 00 00       	call   f0105558 <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f01025fd:	83 ec 0c             	sub    $0xc,%esp
f0102600:	68 fc e9 11 f0       	push   $0xf011e9fc
f0102605:	e8 fa 4b 00 00       	call   f0107204 <cprintf>
f010260a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010260d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102612:	c9                   	leave  
f0102613:	c3                   	ret    

f0102614 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102614:	55                   	push   %ebp
f0102615:	89 e5                	mov    %esp,%ebp
f0102617:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010261a:	e8 49 2f 00 00       	call   f0105568 <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f010261f:	83 ec 0c             	sub    $0xc,%esp
f0102622:	68 2c ea 11 f0       	push   $0xf011ea2c
f0102627:	e8 d8 4b 00 00       	call   f0107204 <cprintf>
f010262c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010262f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102634:	c9                   	leave  
f0102635:	c3                   	ret    

f0102636 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102636:	55                   	push   %ebp
f0102637:	89 e5                	mov    %esp,%ebp
f0102639:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010263c:	e8 37 2f 00 00       	call   f0105578 <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102641:	83 ec 0c             	sub    $0xc,%esp
f0102644:	68 5c ea 11 f0       	push   $0xf011ea5c
f0102649:	e8 b6 4b 00 00       	call   f0107204 <cprintf>
f010264e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102651:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102656:	c9                   	leave  
f0102657:	c3                   	ret    

f0102658 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102658:	55                   	push   %ebp
f0102659:	89 e5                	mov    %esp,%ebp
f010265b:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010265e:	e8 25 2f 00 00       	call   f0105588 <isUHeapPlacementStrategyFIRSTFIT>
f0102663:	85 c0                	test   %eax,%eax
f0102665:	74 12                	je     f0102679 <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102667:	83 ec 0c             	sub    $0xc,%esp
f010266a:	68 8c ea 11 f0       	push   $0xf011ea8c
f010266f:	e8 90 4b 00 00       	call   f0107204 <cprintf>
f0102674:	83 c4 10             	add    $0x10,%esp
f0102677:	eb 61                	jmp    f01026da <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f0102679:	e8 25 2f 00 00       	call   f01055a3 <isUHeapPlacementStrategyBESTFIT>
f010267e:	85 c0                	test   %eax,%eax
f0102680:	74 12                	je     f0102694 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102682:	83 ec 0c             	sub    $0xc,%esp
f0102685:	68 b8 ea 11 f0       	push   $0xf011eab8
f010268a:	e8 75 4b 00 00       	call   f0107204 <cprintf>
f010268f:	83 c4 10             	add    $0x10,%esp
f0102692:	eb 46                	jmp    f01026da <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f0102694:	e8 25 2f 00 00       	call   f01055be <isUHeapPlacementStrategyNEXTFIT>
f0102699:	85 c0                	test   %eax,%eax
f010269b:	74 12                	je     f01026af <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f010269d:	83 ec 0c             	sub    $0xc,%esp
f01026a0:	68 e4 ea 11 f0       	push   $0xf011eae4
f01026a5:	e8 5a 4b 00 00       	call   f0107204 <cprintf>
f01026aa:	83 c4 10             	add    $0x10,%esp
f01026ad:	eb 2b                	jmp    f01026da <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01026af:	e8 25 2f 00 00       	call   f01055d9 <isUHeapPlacementStrategyWORSTFIT>
f01026b4:	85 c0                	test   %eax,%eax
f01026b6:	74 12                	je     f01026ca <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01026b8:	83 ec 0c             	sub    $0xc,%esp
f01026bb:	68 10 eb 11 f0       	push   $0xf011eb10
f01026c0:	e8 3f 4b 00 00       	call   f0107204 <cprintf>
f01026c5:	83 c4 10             	add    $0x10,%esp
f01026c8:	eb 10                	jmp    f01026da <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01026ca:	83 ec 0c             	sub    $0xc,%esp
f01026cd:	68 3c eb 11 f0       	push   $0xf011eb3c
f01026d2:	e8 2d 4b 00 00       	call   f0107204 <cprintf>
f01026d7:	83 c4 10             	add    $0x10,%esp

	return 0;
f01026da:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01026df:	c9                   	leave  
f01026e0:	c3                   	ret    

f01026e1 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01026e1:	55                   	push   %ebp
f01026e2:	89 e5                	mov    %esp,%ebp
f01026e4:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01026e7:	e8 08 2f 00 00       	call   f01055f4 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01026ec:	83 ec 0c             	sub    $0xc,%esp
f01026ef:	68 68 eb 11 f0       	push   $0xf011eb68
f01026f4:	e8 0b 4b 00 00       	call   f0107204 <cprintf>
f01026f9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01026fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102701:	c9                   	leave  
f0102702:	c3                   	ret    

f0102703 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102703:	55                   	push   %ebp
f0102704:	89 e5                	mov    %esp,%ebp
f0102706:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f0102709:	e8 f6 2e 00 00       	call   f0105604 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010270e:	83 ec 0c             	sub    $0xc,%esp
f0102711:	68 68 eb 11 f0       	push   $0xf011eb68
f0102716:	e8 e9 4a 00 00       	call   f0107204 <cprintf>
f010271b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010271e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102723:	c9                   	leave  
f0102724:	c3                   	ret    

f0102725 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102725:	55                   	push   %ebp
f0102726:	89 e5                	mov    %esp,%ebp
f0102728:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010272b:	e8 e4 2e 00 00       	call   f0105614 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102730:	83 ec 0c             	sub    $0xc,%esp
f0102733:	68 9c eb 11 f0       	push   $0xf011eb9c
f0102738:	e8 c7 4a 00 00       	call   f0107204 <cprintf>
f010273d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102740:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102745:	c9                   	leave  
f0102746:	c3                   	ret    

f0102747 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102747:	55                   	push   %ebp
f0102748:	89 e5                	mov    %esp,%ebp
f010274a:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010274d:	e8 d2 2e 00 00       	call   f0105624 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102752:	83 ec 0c             	sub    $0xc,%esp
f0102755:	68 cc eb 11 f0       	push   $0xf011ebcc
f010275a:	e8 a5 4a 00 00       	call   f0107204 <cprintf>
f010275f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102762:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102767:	c9                   	leave  
f0102768:	c3                   	ret    

f0102769 <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102769:	55                   	push   %ebp
f010276a:	89 e5                	mov    %esp,%ebp
f010276c:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f010276f:	e8 c0 2e 00 00       	call   f0105634 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102774:	83 ec 0c             	sub    $0xc,%esp
f0102777:	68 fc eb 11 f0       	push   $0xf011ebfc
f010277c:	e8 83 4a 00 00       	call   f0107204 <cprintf>
f0102781:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102784:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102789:	c9                   	leave  
f010278a:	c3                   	ret    

f010278b <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010278b:	55                   	push   %ebp
f010278c:	89 e5                	mov    %esp,%ebp
f010278e:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f0102791:	e8 ae 2e 00 00       	call   f0105644 <isKHeapPlacementStrategyCONTALLOC>
f0102796:	85 c0                	test   %eax,%eax
f0102798:	74 12                	je     f01027ac <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f010279a:	83 ec 0c             	sub    $0xc,%esp
f010279d:	68 30 ec 11 f0       	push   $0xf011ec30
f01027a2:	e8 5d 4a 00 00       	call   f0107204 <cprintf>
f01027a7:	83 c4 10             	add    $0x10,%esp
f01027aa:	eb 7c                	jmp    f0102828 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01027ac:	e8 ad 2e 00 00       	call   f010565e <isKHeapPlacementStrategyFIRSTFIT>
f01027b1:	85 c0                	test   %eax,%eax
f01027b3:	74 12                	je     f01027c7 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01027b5:	83 ec 0c             	sub    $0xc,%esp
f01027b8:	68 6c ec 11 f0       	push   $0xf011ec6c
f01027bd:	e8 42 4a 00 00       	call   f0107204 <cprintf>
f01027c2:	83 c4 10             	add    $0x10,%esp
f01027c5:	eb 61                	jmp    f0102828 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01027c7:	e8 ad 2e 00 00       	call   f0105679 <isKHeapPlacementStrategyBESTFIT>
f01027cc:	85 c0                	test   %eax,%eax
f01027ce:	74 12                	je     f01027e2 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01027d0:	83 ec 0c             	sub    $0xc,%esp
f01027d3:	68 9c ec 11 f0       	push   $0xf011ec9c
f01027d8:	e8 27 4a 00 00       	call   f0107204 <cprintf>
f01027dd:	83 c4 10             	add    $0x10,%esp
f01027e0:	eb 46                	jmp    f0102828 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01027e2:	e8 ad 2e 00 00       	call   f0105694 <isKHeapPlacementStrategyNEXTFIT>
f01027e7:	85 c0                	test   %eax,%eax
f01027e9:	74 12                	je     f01027fd <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01027eb:	83 ec 0c             	sub    $0xc,%esp
f01027ee:	68 c8 ec 11 f0       	push   $0xf011ecc8
f01027f3:	e8 0c 4a 00 00       	call   f0107204 <cprintf>
f01027f8:	83 c4 10             	add    $0x10,%esp
f01027fb:	eb 2b                	jmp    f0102828 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f01027fd:	e8 ad 2e 00 00       	call   f01056af <isKHeapPlacementStrategyWORSTFIT>
f0102802:	85 c0                	test   %eax,%eax
f0102804:	74 12                	je     f0102818 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0102806:	83 ec 0c             	sub    $0xc,%esp
f0102809:	68 f4 ec 11 f0       	push   $0xf011ecf4
f010280e:	e8 f1 49 00 00       	call   f0107204 <cprintf>
f0102813:	83 c4 10             	add    $0x10,%esp
f0102816:	eb 10                	jmp    f0102828 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102818:	83 ec 0c             	sub    $0xc,%esp
f010281b:	68 24 ed 11 f0       	push   $0xf011ed24
f0102820:	e8 df 49 00 00       	call   f0107204 <cprintf>
f0102825:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102828:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010282d:	c9                   	leave  
f010282e:	c3                   	ret    

f010282f <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f010282f:	55                   	push   %ebp
f0102830:	89 e5                	mov    %esp,%ebp
f0102832:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102835:	e8 ba 5f 00 00       	call   f01087f4 <isBufferingEnabled>
f010283a:	85 c0                	test   %eax,%eax
f010283c:	75 12                	jne    f0102850 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010283e:	83 ec 0c             	sub    $0xc,%esp
f0102841:	68 54 ed 11 f0       	push   $0xf011ed54
f0102846:	e8 b9 49 00 00       	call   f0107204 <cprintf>
f010284b:	83 c4 10             	add    $0x10,%esp
f010284e:	eb 1d                	jmp    f010286d <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102850:	83 ec 0c             	sub    $0xc,%esp
f0102853:	6a 00                	push   $0x0
f0102855:	e8 74 5f 00 00       	call   f01087ce <enableModifiedBuffer>
f010285a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010285d:	83 ec 0c             	sub    $0xc,%esp
f0102860:	68 90 ed 11 f0       	push   $0xf011ed90
f0102865:	e8 9a 49 00 00       	call   f0107204 <cprintf>
f010286a:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010286d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102872:	c9                   	leave  
f0102873:	c3                   	ret    

f0102874 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102874:	55                   	push   %ebp
f0102875:	89 e5                	mov    %esp,%ebp
f0102877:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010287a:	e8 75 5f 00 00       	call   f01087f4 <isBufferingEnabled>
f010287f:	85 c0                	test   %eax,%eax
f0102881:	75 12                	jne    f0102895 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102883:	83 ec 0c             	sub    $0xc,%esp
f0102886:	68 54 ed 11 f0       	push   $0xf011ed54
f010288b:	e8 74 49 00 00       	call   f0107204 <cprintf>
f0102890:	83 c4 10             	add    $0x10,%esp
f0102893:	eb 1d                	jmp    f01028b2 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f0102895:	83 ec 0c             	sub    $0xc,%esp
f0102898:	6a 01                	push   $0x1
f010289a:	e8 2f 5f 00 00       	call   f01087ce <enableModifiedBuffer>
f010289f:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01028a2:	83 ec 0c             	sub    $0xc,%esp
f01028a5:	68 b4 ed 11 f0       	push   $0xf011edb4
f01028aa:	e8 55 49 00 00       	call   f0107204 <cprintf>
f01028af:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01028b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028b7:	c9                   	leave  
f01028b8:	c3                   	ret    

f01028b9 <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01028b9:	55                   	push   %ebp
f01028ba:	89 e5                	mov    %esp,%ebp
f01028bc:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01028bf:	83 ec 0c             	sub    $0xc,%esp
f01028c2:	6a 00                	push   $0x0
f01028c4:	e8 1d 5f 00 00       	call   f01087e6 <enableBuffering>
f01028c9:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01028cc:	83 ec 0c             	sub    $0xc,%esp
f01028cf:	6a 00                	push   $0x0
f01028d1:	e8 f8 5e 00 00       	call   f01087ce <enableModifiedBuffer>
f01028d6:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01028d9:	83 ec 0c             	sub    $0xc,%esp
f01028dc:	68 d4 ed 11 f0       	push   $0xf011edd4
f01028e1:	e8 1e 49 00 00       	call   f0107204 <cprintf>
f01028e6:	83 c4 10             	add    $0x10,%esp
	return 0;
f01028e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01028ee:	c9                   	leave  
f01028ef:	c3                   	ret    

f01028f0 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f01028f0:	55                   	push   %ebp
f01028f1:	89 e5                	mov    %esp,%ebp
f01028f3:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f01028f6:	83 ec 0c             	sub    $0xc,%esp
f01028f9:	6a 01                	push   $0x1
f01028fb:	e8 e6 5e 00 00       	call   f01087e6 <enableBuffering>
f0102900:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102903:	83 ec 0c             	sub    $0xc,%esp
f0102906:	6a 01                	push   $0x1
f0102908:	e8 c1 5e 00 00       	call   f01087ce <enableModifiedBuffer>
f010290d:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102910:	e8 f7 5e 00 00       	call   f010880c <getModifiedBufferLength>
f0102915:	85 c0                	test   %eax,%eax
f0102917:	75 59                	jne    f0102972 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f0102919:	83 ec 0c             	sub    $0xc,%esp
f010291c:	68 f0 ed 11 f0       	push   $0xf011edf0
f0102921:	e8 de 48 00 00       	call   f0107204 <cprintf>
f0102926:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f0102929:	83 ec 08             	sub    $0x8,%esp
f010292c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010292f:	50                   	push   %eax
f0102930:	68 20 ee 11 f0       	push   $0xf011ee20
f0102935:	e8 3d a2 01 00       	call   f011cb77 <readline>
f010293a:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010293d:	83 ec 04             	sub    $0x4,%esp
f0102940:	6a 0a                	push   $0xa
f0102942:	6a 00                	push   $0x0
f0102944:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102947:	50                   	push   %eax
f0102948:	e8 90 a7 01 00       	call   f011d0dd <strtol>
f010294d:	83 c4 10             	add    $0x10,%esp
f0102950:	83 ec 0c             	sub    $0xc,%esp
f0102953:	50                   	push   %eax
f0102954:	e8 a5 5e 00 00       	call   f01087fe <setModifiedBufferLength>
f0102959:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010295c:	e8 ab 5e 00 00       	call   f010880c <getModifiedBufferLength>
f0102961:	83 ec 08             	sub    $0x8,%esp
f0102964:	50                   	push   %eax
f0102965:	68 4c ee 11 f0       	push   $0xf011ee4c
f010296a:	e8 95 48 00 00       	call   f0107204 <cprintf>
f010296f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102972:	83 ec 0c             	sub    $0xc,%esp
f0102975:	68 71 ee 11 f0       	push   $0xf011ee71
f010297a:	e8 85 48 00 00       	call   f0107204 <cprintf>
f010297f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102982:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102987:	c9                   	leave  
f0102988:	c3                   	ret    

f0102989 <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102989:	55                   	push   %ebp
f010298a:	89 e5                	mov    %esp,%ebp
f010298c:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010298f:	e8 60 5e 00 00       	call   f01087f4 <isBufferingEnabled>
f0102994:	85 c0                	test   %eax,%eax
f0102996:	75 12                	jne    f01029aa <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102998:	83 ec 0c             	sub    $0xc,%esp
f010299b:	68 8c ee 11 f0       	push   $0xf011ee8c
f01029a0:	e8 5f 48 00 00       	call   f0107204 <cprintf>
f01029a5:	83 c4 10             	add    $0x10,%esp
f01029a8:	eb 19                	jmp    f01029c3 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01029aa:	e8 2d 5e 00 00       	call   f01087dc <isModifiedBufferEnabled>
f01029af:	85 c0                	test   %eax,%eax
f01029b1:	75 10                	jne    f01029c3 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01029b3:	83 ec 0c             	sub    $0xc,%esp
f01029b6:	68 dc ee 11 f0       	push   $0xf011eedc
f01029bb:	e8 44 48 00 00       	call   f0107204 <cprintf>
f01029c0:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01029c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029c6:	83 c0 04             	add    $0x4,%eax
f01029c9:	8b 00                	mov    (%eax),%eax
f01029cb:	83 ec 04             	sub    $0x4,%esp
f01029ce:	6a 0a                	push   $0xa
f01029d0:	6a 00                	push   $0x0
f01029d2:	50                   	push   %eax
f01029d3:	e8 05 a7 01 00       	call   f011d0dd <strtol>
f01029d8:	83 c4 10             	add    $0x10,%esp
f01029db:	83 ec 0c             	sub    $0xc,%esp
f01029de:	50                   	push   %eax
f01029df:	e8 1a 5e 00 00       	call   f01087fe <setModifiedBufferLength>
f01029e4:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01029e7:	e8 20 5e 00 00       	call   f010880c <getModifiedBufferLength>
f01029ec:	83 ec 08             	sub    $0x8,%esp
f01029ef:	50                   	push   %eax
f01029f0:	68 4c ee 11 f0       	push   $0xf011ee4c
f01029f5:	e8 0a 48 00 00       	call   f0107204 <cprintf>
f01029fa:	83 c4 10             	add    $0x10,%esp
	return 0;
f01029fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a02:	c9                   	leave  
f0102a03:	c3                   	ret    

f0102a04 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102a04:	55                   	push   %ebp
f0102a05:	89 e5                	mov    %esp,%ebp
f0102a07:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102a0a:	e8 e5 5d 00 00       	call   f01087f4 <isBufferingEnabled>
f0102a0f:	85 c0                	test   %eax,%eax
f0102a11:	75 12                	jne    f0102a25 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102a13:	83 ec 0c             	sub    $0xc,%esp
f0102a16:	68 8c ee 11 f0       	push   $0xf011ee8c
f0102a1b:	e8 e4 47 00 00       	call   f0107204 <cprintf>
f0102a20:	83 c4 10             	add    $0x10,%esp
f0102a23:	eb 19                	jmp    f0102a3e <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102a25:	e8 b2 5d 00 00       	call   f01087dc <isModifiedBufferEnabled>
f0102a2a:	85 c0                	test   %eax,%eax
f0102a2c:	75 10                	jne    f0102a3e <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0102a2e:	83 ec 0c             	sub    $0xc,%esp
f0102a31:	68 dc ee 11 f0       	push   $0xf011eedc
f0102a36:	e8 c9 47 00 00       	call   f0107204 <cprintf>
f0102a3b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0102a3e:	e8 c9 5d 00 00       	call   f010880c <getModifiedBufferLength>
f0102a43:	83 ec 08             	sub    $0x8,%esp
f0102a46:	50                   	push   %eax
f0102a47:	68 22 ef 11 f0       	push   $0xf011ef22
f0102a4c:	e8 b3 47 00 00       	call   f0107204 <cprintf>
f0102a51:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102a54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a59:	c9                   	leave  
f0102a5a:	c3                   	ret    

f0102a5b <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f0102a5b:	55                   	push   %ebp
f0102a5c:	89 e5                	mov    %esp,%ebp
f0102a5e:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102a61:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102a68:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a6c:	75 1b                	jne    f0102a89 <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f0102a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a71:	83 c0 04             	add    $0x4,%eax
f0102a74:	8b 00                	mov    (%eax),%eax
f0102a76:	83 ec 04             	sub    $0x4,%esp
f0102a79:	6a 0a                	push   $0xa
f0102a7b:	6a 00                	push   $0x0
f0102a7d:	50                   	push   %eax
f0102a7e:	e8 5a a6 01 00       	call   f011d0dd <strtol>
f0102a83:	83 c4 10             	add    $0x10,%esp
f0102a86:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (isKHeapPlacementStrategyNEXTFIT())
f0102a89:	e8 06 2c 00 00       	call   f0105694 <isKHeapPlacementStrategyNEXTFIT>
f0102a8e:	85 c0                	test   %eax,%eax
f0102a90:	74 44                	je     f0102ad6 <command_test_kmalloc+0x7b>
	{
		if (testNum == 0)
f0102a92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102a96:	75 1a                	jne    f0102ab2 <command_test_kmalloc+0x57>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102a98:	83 ec 0c             	sub    $0xc,%esp
f0102a9b:	68 40 ef 11 f0       	push   $0xf011ef40
f0102aa0:	e8 5f 47 00 00       	call   f0107204 <cprintf>
f0102aa5:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102aa8:	b8 00 00 00 00       	mov    $0x0,%eax
f0102aad:	e9 21 01 00 00       	jmp    f0102bd3 <command_test_kmalloc+0x178>
		}
		//Test cont. allocation
		if (testNum == 1)
f0102ab2:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102ab6:	75 0a                	jne    f0102ac2 <command_test_kmalloc+0x67>
			test_kmalloc();
f0102ab8:	e8 27 a6 00 00       	call   f010d0e4 <test_kmalloc>
f0102abd:	e9 0c 01 00 00       	jmp    f0102bce <command_test_kmalloc+0x173>
		//Test nextfit strategy
		else if (testNum == 2)
f0102ac2:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102ac6:	0f 85 02 01 00 00    	jne    f0102bce <command_test_kmalloc+0x173>
			test_kmalloc_nextfit();
f0102acc:	e8 20 b6 00 00       	call   f010e0f1 <test_kmalloc_nextfit>
f0102ad1:	e9 f8 00 00 00       	jmp    f0102bce <command_test_kmalloc+0x173>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f0102ad6:	e8 9e 2b 00 00       	call   f0105679 <isKHeapPlacementStrategyBESTFIT>
f0102adb:	85 c0                	test   %eax,%eax
f0102add:	74 54                	je     f0102b33 <command_test_kmalloc+0xd8>
	{
		if (testNum == 0)
f0102adf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102ae3:	75 1a                	jne    f0102aff <command_test_kmalloc+0xa4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1 or 2) as an argument\n");
f0102ae5:	83 ec 0c             	sub    $0xc,%esp
f0102ae8:	68 90 ef 11 f0       	push   $0xf011ef90
f0102aed:	e8 12 47 00 00       	call   f0107204 <cprintf>
f0102af2:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102af5:	b8 00 00 00 00       	mov    $0x0,%eax
f0102afa:	e9 d4 00 00 00       	jmp    f0102bd3 <command_test_kmalloc+0x178>
		}
		if (testNum == 1)
f0102aff:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102b03:	75 0a                	jne    f0102b0f <command_test_kmalloc+0xb4>
			test_kmalloc();
f0102b05:	e8 da a5 00 00       	call   f010d0e4 <test_kmalloc>
f0102b0a:	e9 bf 00 00 00       	jmp    f0102bce <command_test_kmalloc+0x173>
		else if (testNum == 2)
f0102b0f:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102b13:	75 0a                	jne    f0102b1f <command_test_kmalloc+0xc4>
			test_kmalloc_bestfit1();
f0102b15:	e8 94 c8 00 00       	call   f010f3ae <test_kmalloc_bestfit1>
f0102b1a:	e9 af 00 00 00       	jmp    f0102bce <command_test_kmalloc+0x173>
		else if (testNum == 3)
f0102b1f:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102b23:	0f 85 a5 00 00 00    	jne    f0102bce <command_test_kmalloc+0x173>
			test_kmalloc_bestfit2();
f0102b29:	e8 18 d8 00 00       	call   f0110346 <test_kmalloc_bestfit2>
f0102b2e:	e9 9b 00 00 00       	jmp    f0102bce <command_test_kmalloc+0x173>
	}
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102b33:	e8 26 2b 00 00       	call   f010565e <isKHeapPlacementStrategyFIRSTFIT>
f0102b38:	85 c0                	test   %eax,%eax
f0102b3a:	74 54                	je     f0102b90 <command_test_kmalloc+0x135>
	{
		cprintf("HERE IS FIRST FIT");
f0102b3c:	83 ec 0c             	sub    $0xc,%esp
f0102b3f:	68 de ef 11 f0       	push   $0xf011efde
f0102b44:	e8 bb 46 00 00       	call   f0107204 <cprintf>
f0102b49:	83 c4 10             	add    $0x10,%esp
		if (testNum == 0)
f0102b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102b50:	75 17                	jne    f0102b69 <command_test_kmalloc+0x10e>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102b52:	83 ec 0c             	sub    $0xc,%esp
f0102b55:	68 f0 ef 11 f0       	push   $0xf011eff0
f0102b5a:	e8 a5 46 00 00       	call   f0107204 <cprintf>
f0102b5f:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102b62:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b67:	eb 6a                	jmp    f0102bd3 <command_test_kmalloc+0x178>
		}
		if (testNum == 1)
f0102b69:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102b6d:	75 07                	jne    f0102b76 <command_test_kmalloc+0x11b>
			test_kmalloc();
f0102b6f:	e8 70 a5 00 00       	call   f010d0e4 <test_kmalloc>
f0102b74:	eb 58                	jmp    f0102bce <command_test_kmalloc+0x173>
		else if (testNum == 2)
f0102b76:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102b7a:	75 07                	jne    f0102b83 <command_test_kmalloc+0x128>
			test_kmalloc_firstfit1();
f0102b7c:	e8 b1 e7 00 00       	call   f0111332 <test_kmalloc_firstfit1>
f0102b81:	eb 4b                	jmp    f0102bce <command_test_kmalloc+0x173>
		else if (testNum == 3)
f0102b83:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102b87:	75 45                	jne    f0102bce <command_test_kmalloc+0x173>
			test_kmalloc_firstfit2();
f0102b89:	e8 52 f8 00 00       	call   f01123e0 <test_kmalloc_firstfit2>
f0102b8e:	eb 3e                	jmp    f0102bce <command_test_kmalloc+0x173>
	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102b90:	e8 1a 2b 00 00       	call   f01056af <isKHeapPlacementStrategyWORSTFIT>
f0102b95:	85 c0                	test   %eax,%eax
f0102b97:	74 35                	je     f0102bce <command_test_kmalloc+0x173>
	{
		if (testNum == 0)
f0102b99:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102b9d:	75 17                	jne    f0102bb6 <command_test_kmalloc+0x15b>
			{
				cprintf("Error: [Kernel.WorstFit] must specify the test number (1 or 2) as an argument\n");
f0102b9f:	83 ec 0c             	sub    $0xc,%esp
f0102ba2:	68 40 f0 11 f0       	push   $0xf011f040
f0102ba7:	e8 58 46 00 00       	call   f0107204 <cprintf>
f0102bac:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102baf:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb4:	eb 1d                	jmp    f0102bd3 <command_test_kmalloc+0x178>
			}
			if (testNum == 1)
f0102bb6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102bba:	75 07                	jne    f0102bc3 <command_test_kmalloc+0x168>
				test_kmalloc();
f0102bbc:	e8 23 a5 00 00       	call   f010d0e4 <test_kmalloc>
f0102bc1:	eb 0b                	jmp    f0102bce <command_test_kmalloc+0x173>
			else if (testNum == 2)
f0102bc3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102bc7:	75 05                	jne    f0102bce <command_test_kmalloc+0x173>
				test_kmalloc_worstfit();
f0102bc9:	e8 55 04 01 00       	call   f0113023 <test_kmalloc_worstfit>
	}
	return 0;
f0102bce:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bd3:	c9                   	leave  
f0102bd4:	c3                   	ret    

f0102bd5 <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f0102bd5:	55                   	push   %ebp
f0102bd6:	89 e5                	mov    %esp,%ebp
f0102bd8:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT())
f0102bdb:	e8 99 2a 00 00       	call   f0105679 <isKHeapPlacementStrategyBESTFIT>
f0102be0:	85 c0                	test   %eax,%eax
f0102be2:	74 07                	je     f0102beb <command_test_kfree+0x16>
	{
		test_kfree_bestfit();
f0102be4:	e8 71 44 01 00       	call   f011705a <test_kfree_bestfit>
f0102be9:	eb 15                	jmp    f0102c00 <command_test_kfree+0x2b>
	}
	else if (isKHeapPlacementStrategyFIRSTFIT())
f0102beb:	e8 6e 2a 00 00       	call   f010565e <isKHeapPlacementStrategyFIRSTFIT>
f0102bf0:	85 c0                	test   %eax,%eax
f0102bf2:	74 07                	je     f0102bfb <command_test_kfree+0x26>
	{
		test_kfree_firstfit();
f0102bf4:	e8 17 2e 01 00       	call   f0115a10 <test_kfree_firstfit>
f0102bf9:	eb 05                	jmp    f0102c00 <command_test_kfree+0x2b>
	}
	else
		test_kfree();
f0102bfb:	e8 af 17 01 00       	call   f01143af <test_kfree>
	return 0;
f0102c00:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c05:	c9                   	leave  
f0102c06:	c3                   	ret    

f0102c07 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f0102c07:	55                   	push   %ebp
f0102c08:	89 e5                	mov    %esp,%ebp
f0102c0a:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f0102c0d:	e8 92 5a 01 00       	call   f01186a4 <test_kheap_phys_addr>
	return 0;
f0102c12:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c17:	c9                   	leave  
f0102c18:	c3                   	ret    

f0102c19 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f0102c19:	55                   	push   %ebp
f0102c1a:	89 e5                	mov    %esp,%ebp
f0102c1c:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f0102c1f:	e8 b4 6b 01 00       	call   f01197d8 <test_kheap_virt_addr>
	return 0;
f0102c24:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c29:	c9                   	leave  
f0102c2a:	c3                   	ret    

f0102c2b <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f0102c2b:	55                   	push   %ebp
f0102c2c:	89 e5                	mov    %esp,%ebp
f0102c2e:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f0102c31:	e8 1d 7c 01 00       	call   f011a853 <test_three_creation_functions>
	return 0;
f0102c36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c3b:	c9                   	leave  
f0102c3c:	c3                   	ret    

f0102c3d <command_test_krealloc>:
int command_test_krealloc(int number_of_arguments, char **arguments) {
f0102c3d:	55                   	push   %ebp
f0102c3e:	89 e5                	mov    %esp,%ebp
	//test_krealloc();
	return 0;
f0102c40:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102c45:	5d                   	pop    %ebp
f0102c46:	c3                   	ret    

f0102c47 <nvram_read>:
{
		sizeof(gdt) - 1, (unsigned long) gdt
};

int nvram_read(int r)
{
f0102c47:	55                   	push   %ebp
f0102c48:	89 e5                	mov    %esp,%ebp
f0102c4a:	53                   	push   %ebx
f0102c4b:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0102c4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c51:	83 ec 0c             	sub    $0xc,%esp
f0102c54:	50                   	push   %eax
f0102c55:	e8 3c 40 00 00       	call   f0106c96 <mc146818_read>
f0102c5a:	83 c4 10             	add    $0x10,%esp
f0102c5d:	89 c3                	mov    %eax,%ebx
f0102c5f:	8b 45 08             	mov    0x8(%ebp),%eax
f0102c62:	40                   	inc    %eax
f0102c63:	83 ec 0c             	sub    $0xc,%esp
f0102c66:	50                   	push   %eax
f0102c67:	e8 2a 40 00 00       	call   f0106c96 <mc146818_read>
f0102c6c:	83 c4 10             	add    $0x10,%esp
f0102c6f:	c1 e0 08             	shl    $0x8,%eax
f0102c72:	09 d8                	or     %ebx,%eax
}
f0102c74:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102c77:	c9                   	leave  
f0102c78:	c3                   	ret    

f0102c79 <detect_memory>:

void detect_memory()
{
f0102c79:	55                   	push   %ebp
f0102c7a:	89 e5                	mov    %esp,%ebp
f0102c7c:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0102c7f:	83 ec 0c             	sub    $0xc,%esp
f0102c82:	6a 15                	push   $0x15
f0102c84:	e8 be ff ff ff       	call   f0102c47 <nvram_read>
f0102c89:	83 c4 10             	add    $0x10,%esp
f0102c8c:	c1 e0 0a             	shl    $0xa,%eax
f0102c8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102c92:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102c95:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c9a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0102c9d:	83 ec 0c             	sub    $0xc,%esp
f0102ca0:	6a 17                	push   $0x17
f0102ca2:	e8 a0 ff ff ff       	call   f0102c47 <nvram_read>
f0102ca7:	83 c4 10             	add    $0x10,%esp
f0102caa:	c1 e0 0a             	shl    $0xa,%eax
f0102cad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0102cb0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102cb3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102cb8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0102cbb:	83 ec 0c             	sub    $0xc,%esp
f0102cbe:	6a 34                	push   $0x34
f0102cc0:	e8 82 ff ff ff       	call   f0102c47 <nvram_read>
f0102cc5:	83 c4 10             	add    $0x10,%esp
f0102cc8:	c1 e0 10             	shl    $0x10,%eax
f0102ccb:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102cce:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102cd1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102cd6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0102cd9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0102cdd:	74 18                	je     f0102cf7 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0102cdf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102ce2:	05 00 00 00 01       	add    $0x1000000,%eax
f0102ce7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0102cea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ced:	2d 00 00 10 00       	sub    $0x100000,%eax
f0102cf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102cf5:	eb 19                	jmp    f0102d10 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0102cf7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102cfb:	74 0d                	je     f0102d0a <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0102cfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102d00:	05 00 00 10 00       	add    $0x100000,%eax
f0102d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0102d08:	eb 06                	jmp    f0102d10 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0102d0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0102d10:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
		while(1);
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0102d17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d1a:	c1 e8 0c             	shr    $0xc,%eax
f0102d1d:	a3 7c 28 7e f0       	mov    %eax,0xf07e287c

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0102d22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d25:	c1 e8 0a             	shr    $0xa,%eax
f0102d28:	83 ec 08             	sub    $0x8,%esp
f0102d2b:	50                   	push   %eax
f0102d2c:	68 90 f0 11 f0       	push   $0xf011f090
f0102d31:	e8 ce 44 00 00       	call   f0107204 <cprintf>
f0102d36:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0102d39:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102d3c:	c1 e8 0a             	shr    $0xa,%eax
f0102d3f:	89 c2                	mov    %eax,%edx
f0102d41:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102d44:	c1 e8 0a             	shr    $0xa,%eax
f0102d47:	83 ec 04             	sub    $0x4,%esp
f0102d4a:	52                   	push   %edx
f0102d4b:	50                   	push   %eax
f0102d4c:	68 b1 f0 11 f0       	push   $0xf011f0b1
f0102d51:	e8 ae 44 00 00       	call   f0107204 <cprintf>
f0102d56:	83 c4 10             	add    $0x10,%esp
}
f0102d59:	90                   	nop
f0102d5a:	c9                   	leave  
f0102d5b:	c3                   	ret    

f0102d5c <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0102d5c:	55                   	push   %ebp
f0102d5d:	89 e5                	mov    %esp,%ebp
f0102d5f:	83 ec 18             	sub    $0x18,%esp

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102d62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102d69:	eb 40                	jmp    f0102dab <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0102d6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102d6e:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102d74:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0102d79:	83 ec 08             	sub    $0x8,%esp
f0102d7c:	52                   	push   %edx
f0102d7d:	50                   	push   %eax
f0102d7e:	e8 9b 01 00 00       	call   f0102f1e <check_va2pa>
f0102d83:	83 c4 10             	add    $0x10,%esp
f0102d86:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0102d89:	74 19                	je     f0102da4 <check_boot_pgdir+0x48>
f0102d8b:	68 d0 f0 11 f0       	push   $0xf011f0d0
f0102d90:	68 06 f1 11 f0       	push   $0xf011f106
f0102d95:	68 86 00 00 00       	push   $0x86
f0102d9a:	68 1b f1 11 f0       	push   $0xf011f11b
f0102d9f:	e8 0b d4 ff ff       	call   f01001af <_panic>

	//2016
	// check phys mem
	if(USE_KHEAP)
	{
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
f0102da4:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102dae:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0102db4:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f0102db9:	39 c2                	cmp    %eax,%edx
f0102dbb:	72 ae                	jb     f0102d6b <check_boot_pgdir+0xf>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102dbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102dc4:	eb 74                	jmp    f0102e3a <check_boot_pgdir+0xde>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0102dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102dc9:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0102dcf:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0102dd4:	83 ec 08             	sub    $0x8,%esp
f0102dd7:	52                   	push   %edx
f0102dd8:	50                   	push   %eax
f0102dd9:	e8 40 01 00 00       	call   f0102f1e <check_va2pa>
f0102dde:	83 c4 10             	add    $0x10,%esp
f0102de1:	c7 45 f0 00 40 15 f0 	movl   $0xf0154000,-0x10(%ebp)
f0102de8:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0102def:	77 17                	ja     f0102e08 <check_boot_pgdir+0xac>
f0102df1:	ff 75 f0             	pushl  -0x10(%ebp)
f0102df4:	68 2c f1 11 f0       	push   $0xf011f12c
f0102df9:	68 90 00 00 00       	push   $0x90
f0102dfe:	68 1b f1 11 f0       	push   $0xf011f11b
f0102e03:	e8 a7 d3 ff ff       	call   f01001af <_panic>
f0102e08:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102e0b:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0102e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102e14:	01 ca                	add    %ecx,%edx
f0102e16:	39 d0                	cmp    %edx,%eax
f0102e18:	74 19                	je     f0102e33 <check_boot_pgdir+0xd7>
f0102e1a:	68 60 f1 11 f0       	push   $0xf011f160
f0102e1f:	68 06 f1 11 f0       	push   $0xf011f106
f0102e24:	68 90 00 00 00       	push   $0x90
f0102e29:	68 1b f1 11 f0       	push   $0xf011f11b
f0102e2e:	e8 7c d3 ff ff       	call   f01001af <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}

	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0102e33:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0102e3a:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0102e41:	76 83                	jbe    f0102dc6 <check_boot_pgdir+0x6a>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102e43:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102e4a:	e9 af 00 00 00       	jmp    f0102efe <check_boot_pgdir+0x1a2>
		switch (i) {
f0102e4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e52:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102e57:	74 11                	je     f0102e6a <check_boot_pgdir+0x10e>
f0102e59:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0102e5e:	72 36                	jb     f0102e96 <check_boot_pgdir+0x13a>
f0102e60:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0102e65:	83 f8 02             	cmp    $0x2,%eax
f0102e68:	77 2c                	ja     f0102e96 <check_boot_pgdir+0x13a>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0102e6a:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0102e6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102e72:	c1 e2 02             	shl    $0x2,%edx
f0102e75:	01 d0                	add    %edx,%eax
f0102e77:	8b 00                	mov    (%eax),%eax
f0102e79:	85 c0                	test   %eax,%eax
f0102e7b:	75 7a                	jne    f0102ef7 <check_boot_pgdir+0x19b>
f0102e7d:	68 e2 f1 11 f0       	push   $0xf011f1e2
f0102e82:	68 06 f1 11 f0       	push   $0xf011f106
f0102e87:	68 9b 00 00 00       	push   $0x9b
f0102e8c:	68 1b f1 11 f0       	push   $0xf011f11b
f0102e91:	e8 19 d3 ff ff       	call   f01001af <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0102e96:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0102e9d:	76 2c                	jbe    f0102ecb <check_boot_pgdir+0x16f>
				assert(ptr_page_directory[i]);
f0102e9f:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0102ea4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ea7:	c1 e2 02             	shl    $0x2,%edx
f0102eaa:	01 d0                	add    %edx,%eax
f0102eac:	8b 00                	mov    (%eax),%eax
f0102eae:	85 c0                	test   %eax,%eax
f0102eb0:	75 48                	jne    f0102efa <check_boot_pgdir+0x19e>
f0102eb2:	68 e2 f1 11 f0       	push   $0xf011f1e2
f0102eb7:	68 06 f1 11 f0       	push   $0xf011f106
f0102ebc:	68 9f 00 00 00       	push   $0x9f
f0102ec1:	68 1b f1 11 f0       	push   $0xf011f11b
f0102ec6:	e8 e4 d2 ff ff       	call   f01001af <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0102ecb:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0102ed0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ed3:	c1 e2 02             	shl    $0x2,%edx
f0102ed6:	01 d0                	add    %edx,%eax
f0102ed8:	8b 00                	mov    (%eax),%eax
f0102eda:	85 c0                	test   %eax,%eax
f0102edc:	74 1c                	je     f0102efa <check_boot_pgdir+0x19e>
f0102ede:	68 f8 f1 11 f0       	push   $0xf011f1f8
f0102ee3:	68 06 f1 11 f0       	push   $0xf011f106
f0102ee8:	68 a1 00 00 00       	push   $0xa1
f0102eed:	68 1b f1 11 f0       	push   $0xf011f11b
f0102ef2:	e8 b8 d2 ff ff       	call   f01001af <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0102ef7:	90                   	nop
f0102ef8:	eb 01                	jmp    f0102efb <check_boot_pgdir+0x19f>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0102efa:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0102efb:	ff 45 f4             	incl   -0xc(%ebp)
f0102efe:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0102f05:	0f 86 44 ff ff ff    	jbe    f0102e4f <check_boot_pgdir+0xf3>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f0102f0b:	83 ec 0c             	sub    $0xc,%esp
f0102f0e:	68 14 f2 11 f0       	push   $0xf011f214
f0102f13:	e8 ec 42 00 00       	call   f0107204 <cprintf>
f0102f18:	83 c4 10             	add    $0x10,%esp
}
f0102f1b:	90                   	nop
f0102f1c:	c9                   	leave  
f0102f1d:	c3                   	ret    

f0102f1e <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0102f1e:	55                   	push   %ebp
f0102f1f:	89 e5                	mov    %esp,%ebp
f0102f21:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0102f24:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f27:	c1 e8 16             	shr    $0x16,%eax
f0102f2a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102f31:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f34:	01 d0                	add    %edx,%eax
f0102f36:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0102f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f3c:	8b 00                	mov    (%eax),%eax
f0102f3e:	83 e0 01             	and    $0x1,%eax
f0102f41:	85 c0                	test   %eax,%eax
f0102f43:	75 0a                	jne    f0102f4f <check_va2pa+0x31>
		return ~0;
f0102f45:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102f4a:	e9 87 00 00 00       	jmp    f0102fd6 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0102f4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102f52:	8b 00                	mov    (%eax),%eax
f0102f54:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102f59:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102f5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102f5f:	c1 e8 0c             	shr    $0xc,%eax
f0102f62:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0102f65:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0102f6a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0102f6d:	72 17                	jb     f0102f86 <check_va2pa+0x68>
f0102f6f:	ff 75 f0             	pushl  -0x10(%ebp)
f0102f72:	68 34 f2 11 f0       	push   $0xf011f234
f0102f77:	68 b7 00 00 00       	push   $0xb7
f0102f7c:	68 1b f1 11 f0       	push   $0xf011f11b
f0102f81:	e8 29 d2 ff ff       	call   f01001af <_panic>
f0102f86:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102f89:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102f8e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0102f91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f94:	c1 e8 0c             	shr    $0xc,%eax
f0102f97:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102f9c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102fa3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102fa6:	01 d0                	add    %edx,%eax
f0102fa8:	8b 00                	mov    (%eax),%eax
f0102faa:	83 e0 01             	and    $0x1,%eax
f0102fad:	85 c0                	test   %eax,%eax
f0102faf:	75 07                	jne    f0102fb8 <check_va2pa+0x9a>
		return ~0;
f0102fb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0102fb6:	eb 1e                	jmp    f0102fd6 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0102fb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fbb:	c1 e8 0c             	shr    $0xc,%eax
f0102fbe:	25 ff 03 00 00       	and    $0x3ff,%eax
f0102fc3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0102fca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102fcd:	01 d0                	add    %edx,%eax
f0102fcf:	8b 00                	mov    (%eax),%eax
f0102fd1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0102fd6:	c9                   	leave  
f0102fd7:	c3                   	ret    

f0102fd8 <tlb_invalidate>:

void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0102fd8:	55                   	push   %ebp
f0102fd9:	89 e5                	mov    %esp,%ebp
f0102fdb:	83 ec 10             	sub    $0x10,%esp
f0102fde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102fe1:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0102fe4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0102fe7:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0102fea:	90                   	nop
f0102feb:	c9                   	leave  
f0102fec:	c3                   	ret    

f0102fed <turn_on_paging>:
	cprintf("page_check() succeeded!\n");
}
*/

void turn_on_paging()
{
f0102fed:	55                   	push   %ebp
f0102fee:	89 e5                	mov    %esp,%ebp
f0102ff0:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0102ff3:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f0102ffa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0103001:	eb 24                	jmp    f0103027 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0103003:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0103008:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010300b:	c1 e2 02             	shl    $0x2,%edx
f010300e:	01 c2                	add    %eax,%edx
f0103010:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0103015:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0103018:	c1 e1 02             	shl    $0x2,%ecx
f010301b:	01 c8                	add    %ecx,%eax
f010301d:	8b 00                	mov    (%eax),%eax
f010301f:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0103021:	ff 45 fc             	incl   -0x4(%ebp)
f0103024:	ff 45 f8             	incl   -0x8(%ebp)
f0103027:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f010302c:	c1 e8 16             	shr    $0x16,%eax
f010302f:	89 c2                	mov    %eax,%edx
f0103031:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103034:	39 c2                	cmp    %eax,%edx
f0103036:	77 cb                	ja     f0103003 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0103038:	a1 38 0d 80 f0       	mov    0xf0800d38,%eax
f010303d:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0103040:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103043:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0103046:	0f 20 c0             	mov    %cr0,%eax
f0103049:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010304c:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f010304f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0103052:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0103059:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010305d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103060:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0103063:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103066:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f0103069:	0f 01 15 d0 c7 15 f0 	lgdtl  0xf015c7d0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0103070:	b8 23 00 00 00       	mov    $0x23,%eax
f0103075:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0103077:	b8 23 00 00 00       	mov    $0x23,%eax
f010307c:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f010307e:	b8 10 00 00 00       	mov    $0x10,%eax
f0103083:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0103085:	b8 10 00 00 00       	mov    $0x10,%eax
f010308a:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010308c:	b8 10 00 00 00       	mov    $0x10,%eax
f0103091:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0103093:	ea 9a 30 10 f0 08 00 	ljmp   $0x8,$0xf010309a
	asm volatile("lldt %%ax" :: "a" (0));
f010309a:	b8 00 00 00 00       	mov    $0x0,%eax
f010309f:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f01030a2:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f01030a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01030b0:	eb 19                	jmp    f01030cb <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f01030b2:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01030b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01030ba:	c1 e2 02             	shl    $0x2,%edx
f01030bd:	01 d0                	add    %edx,%eax
f01030bf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01030c5:	ff 45 f4             	incl   -0xc(%ebp)
f01030c8:	ff 45 f0             	incl   -0x10(%ebp)
f01030cb:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f01030d0:	c1 e8 16             	shr    $0x16,%eax
f01030d3:	89 c2                	mov    %eax,%edx
f01030d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030d8:	39 c2                	cmp    %eax,%edx
f01030da:	77 d6                	ja     f01030b2 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f01030dc:	a1 38 0d 80 f0       	mov    0xf0800d38,%eax
f01030e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01030e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01030e7:	0f 22 d8             	mov    %eax,%cr3
}
f01030ea:	90                   	nop
f01030eb:	c9                   	leave  
f01030ec:	c3                   	ret    

f01030ed <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01030ed:	55                   	push   %ebp
f01030ee:	89 e5                	mov    %esp,%ebp
f01030f0:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01030f3:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01030f8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01030fb:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0103102:	77 17                	ja     f010311b <setup_listing_to_all_page_tables_entries+0x2e>
f0103104:	ff 75 f4             	pushl  -0xc(%ebp)
f0103107:	68 2c f1 11 f0       	push   $0xf011f12c
f010310c:	68 86 01 00 00       	push   $0x186
f0103111:	68 1b f1 11 f0       	push   $0xf011f11b
f0103116:	e8 94 d0 ff ff       	call   f01001af <_panic>
f010311b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010311e:	05 00 00 00 10       	add    $0x10000000,%eax
f0103123:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0103126:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010312b:	05 fc 0e 00 00       	add    $0xefc,%eax
f0103130:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103133:	83 ca 03             	or     $0x3,%edx
f0103136:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0103138:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010313d:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0103143:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0103148:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010314b:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0103152:	77 17                	ja     f010316b <setup_listing_to_all_page_tables_entries+0x7e>
f0103154:	ff 75 ec             	pushl  -0x14(%ebp)
f0103157:	68 2c f1 11 f0       	push   $0xf011f12c
f010315c:	68 8b 01 00 00       	push   $0x18b
f0103161:	68 1b f1 11 f0       	push   $0xf011f11b
f0103166:	e8 44 d0 ff ff       	call   f01001af <_panic>
f010316b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010316e:	05 00 00 00 10       	add    $0x10000000,%eax
f0103173:	83 c8 05             	or     $0x5,%eax
f0103176:	89 02                	mov    %eax,(%edx)

}
f0103178:	90                   	nop
f0103179:	c9                   	leave  
f010317a:	c3                   	ret    

f010317b <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010317b:	55                   	push   %ebp
f010317c:	89 e5                	mov    %esp,%ebp
f010317e:	83 ec 10             	sub    $0x10,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f0103181:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103185:	75 15                	jne    f010319c <envid2env+0x21>
		*env_store = curenv;
f0103187:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f010318d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103190:	89 10                	mov    %edx,(%eax)
		return 0;
f0103192:	b8 00 00 00 00       	mov    $0x0,%eax
f0103197:	e9 87 00 00 00       	jmp    f0103223 <envid2env+0xa8>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010319c:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f01031a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01031a5:	25 eb 04 00 00       	and    $0x4eb,%eax
f01031aa:	89 c2                	mov    %eax,%edx
f01031ac:	89 d0                	mov    %edx,%eax
f01031ae:	01 c0                	add    %eax,%eax
f01031b0:	01 d0                	add    %edx,%eax
f01031b2:	c1 e0 02             	shl    $0x2,%eax
f01031b5:	01 d0                	add    %edx,%eax
f01031b7:	c1 e0 06             	shl    $0x6,%eax
f01031ba:	01 c8                	add    %ecx,%eax
f01031bc:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f01031bf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01031c2:	8b 40 54             	mov    0x54(%eax),%eax
f01031c5:	85 c0                	test   %eax,%eax
f01031c7:	74 0b                	je     f01031d4 <envid2env+0x59>
f01031c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01031cc:	8b 40 4c             	mov    0x4c(%eax),%eax
f01031cf:	3b 45 08             	cmp    0x8(%ebp),%eax
f01031d2:	74 10                	je     f01031e4 <envid2env+0x69>
		*env_store = 0;
f01031d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031d7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f01031dd:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01031e2:	eb 3f                	jmp    f0103223 <envid2env+0xa8>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f01031e4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01031e8:	74 2c                	je     f0103216 <envid2env+0x9b>
f01031ea:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01031ef:	39 45 fc             	cmp    %eax,-0x4(%ebp)
f01031f2:	74 22                	je     f0103216 <envid2env+0x9b>
f01031f4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01031f7:	8b 50 50             	mov    0x50(%eax),%edx
f01031fa:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01031ff:	8b 40 4c             	mov    0x4c(%eax),%eax
f0103202:	39 c2                	cmp    %eax,%edx
f0103204:	74 10                	je     f0103216 <envid2env+0x9b>
		*env_store = 0;
f0103206:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103209:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010320f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f0103214:	eb 0d                	jmp    f0103223 <envid2env+0xa8>
	}

	*env_store = e;
f0103216:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103219:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010321c:	89 10                	mov    %edx,(%eax)
	return 0;
f010321e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103223:	c9                   	leave  
f0103224:	c3                   	ret    

f0103225 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f0103225:	55                   	push   %ebp
f0103226:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103228:	8b 45 08             	mov    0x8(%ebp),%eax
f010322b:	8b 15 24 0d 80 f0    	mov    0xf0800d24,%edx
f0103231:	29 d0                	sub    %edx,%eax
f0103233:	c1 f8 03             	sar    $0x3,%eax
f0103236:	89 c2                	mov    %eax,%edx
f0103238:	89 d0                	mov    %edx,%eax
f010323a:	c1 e0 02             	shl    $0x2,%eax
f010323d:	01 d0                	add    %edx,%eax
f010323f:	c1 e0 02             	shl    $0x2,%eax
f0103242:	01 d0                	add    %edx,%eax
f0103244:	c1 e0 02             	shl    $0x2,%eax
f0103247:	01 d0                	add    %edx,%eax
f0103249:	89 c1                	mov    %eax,%ecx
f010324b:	c1 e1 08             	shl    $0x8,%ecx
f010324e:	01 c8                	add    %ecx,%eax
f0103250:	89 c1                	mov    %eax,%ecx
f0103252:	c1 e1 10             	shl    $0x10,%ecx
f0103255:	01 c8                	add    %ecx,%eax
f0103257:	01 c0                	add    %eax,%eax
f0103259:	01 d0                	add    %edx,%eax
}
f010325b:	5d                   	pop    %ebp
f010325c:	c3                   	ret    

f010325d <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010325d:	55                   	push   %ebp
f010325e:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0103260:	ff 75 08             	pushl  0x8(%ebp)
f0103263:	e8 bd ff ff ff       	call   f0103225 <to_frame_number>
f0103268:	83 c4 04             	add    $0x4,%esp
f010326b:	c1 e0 0c             	shl    $0xc,%eax
}
f010326e:	c9                   	leave  
f010326f:	c3                   	ret    

f0103270 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f0103270:	55                   	push   %ebp
f0103271:	89 e5                	mov    %esp,%ebp
f0103273:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103276:	8b 45 08             	mov    0x8(%ebp),%eax
f0103279:	c1 e8 0c             	shr    $0xc,%eax
f010327c:	89 c2                	mov    %eax,%edx
f010327e:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0103283:	39 c2                	cmp    %eax,%edx
f0103285:	72 14                	jb     f010329b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103287:	83 ec 04             	sub    $0x4,%esp
f010328a:	68 64 f2 11 f0       	push   $0xf011f264
f010328f:	6a 78                	push   $0x78
f0103291:	68 89 f2 11 f0       	push   $0xf011f289
f0103296:	e8 14 cf ff ff       	call   f01001af <_panic>
	return &frames_info[PPN(physical_address)];
f010329b:	8b 15 24 0d 80 f0    	mov    0xf0800d24,%edx
f01032a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01032a4:	c1 e8 0c             	shr    $0xc,%eax
f01032a7:	89 c1                	mov    %eax,%ecx
f01032a9:	89 c8                	mov    %ecx,%eax
f01032ab:	01 c0                	add    %eax,%eax
f01032ad:	01 c8                	add    %ecx,%eax
f01032af:	c1 e0 03             	shl    $0x3,%eax
f01032b2:	01 d0                	add    %edx,%eax
}
f01032b4:	c9                   	leave  
f01032b5:	c3                   	ret    

f01032b6 <initialize_kernel_VM>:
 //
 // From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
 // Above USER_LIMIT the user cannot read (or write).

 void initialize_kernel_VM()
 {
f01032b6:	55                   	push   %ebp
f01032b7:	89 e5                	mov    %esp,%ebp
f01032b9:	83 ec 38             	sub    $0x38,%esp
	 //panic("initialize_kernel_VM: This function is not finished\n");

	 //////////////////////////////////////////////////////////////////////
	 // create initial page directory.

	 ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f01032bc:	83 ec 08             	sub    $0x8,%esp
f01032bf:	68 00 10 00 00       	push   $0x1000
f01032c4:	68 00 10 00 00       	push   $0x1000
f01032c9:	e8 59 02 00 00       	call   f0103527 <boot_allocate_space>
f01032ce:	83 c4 10             	add    $0x10,%esp
f01032d1:	a3 30 0d 80 f0       	mov    %eax,0xf0800d30
	 memset(ptr_page_directory, 0, PAGE_SIZE);
f01032d6:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01032db:	83 ec 04             	sub    $0x4,%esp
f01032de:	68 00 10 00 00       	push   $0x1000
f01032e3:	6a 00                	push   $0x0
f01032e5:	50                   	push   %eax
f01032e6:	e8 80 9c 01 00       	call   f011cf6b <memset>
f01032eb:	83 c4 10             	add    $0x10,%esp
	 phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01032ee:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01032f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01032f6:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f01032fd:	77 14                	ja     f0103313 <initialize_kernel_VM+0x5d>
f01032ff:	ff 75 e8             	pushl  -0x18(%ebp)
f0103302:	68 a4 f2 11 f0       	push   $0xf011f2a4
f0103307:	6a 54                	push   $0x54
f0103309:	68 d5 f2 11 f0       	push   $0xf011f2d5
f010330e:	e8 9c ce ff ff       	call   f01001af <_panic>
f0103313:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103316:	05 00 00 00 10       	add    $0x10000000,%eax
f010331b:	a3 38 0d 80 f0       	mov    %eax,0xf0800d38
	 // Map the kernel stack with VA range :
	 //  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	 // to physical address : "phys_stack_bottom".
	 //     Permissions: kernel RW, user NONE
	 // Your code goes here:
	 boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE);
f0103320:	c7 45 e4 00 40 15 f0 	movl   $0xf0154000,-0x1c(%ebp)
f0103327:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f010332e:	77 14                	ja     f0103344 <initialize_kernel_VM+0x8e>
f0103330:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103333:	68 a4 f2 11 f0       	push   $0xf011f2a4
f0103338:	6a 5c                	push   $0x5c
f010333a:	68 d5 f2 11 f0       	push   $0xf011f2d5
f010333f:	e8 6b ce ff ff       	call   f01001af <_panic>
f0103344:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103347:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f010334d:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0103352:	83 ec 0c             	sub    $0xc,%esp
f0103355:	6a 02                	push   $0x2
f0103357:	52                   	push   %edx
f0103358:	68 00 80 00 00       	push   $0x8000
f010335d:	68 00 80 bf ef       	push   $0xefbf8000
f0103362:	50                   	push   %eax
f0103363:	e8 20 02 00 00       	call   f0103588 <boot_map_range>
f0103368:	83 c4 20             	add    $0x20,%esp
	 // Permissions: kernel RW, user NONE
	 // Your code goes here:

	 //2016:
	 //boot tables
	 unsigned long long sva = KERNEL_BASE;
f010336b:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0103372:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 unsigned int nTables = 0;
f0103379:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	 for (; sva < 0xFFFFFFFF; sva += PTSIZE)
f0103380:	eb 25                	jmp    f01033a7 <initialize_kernel_VM+0xf1>
	 {
		 ++nTables;
f0103382:	ff 45 ec             	incl   -0x14(%ebp)
		 boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0103385:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103388:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010338d:	83 ec 04             	sub    $0x4,%esp
f0103390:	6a 01                	push   $0x1
f0103392:	52                   	push   %edx
f0103393:	50                   	push   %eax
f0103394:	e8 63 02 00 00       	call   f01035fc <boot_get_page_table>
f0103399:	83 c4 10             	add    $0x10,%esp

	 //2016:
	 //boot tables
	 unsigned long long sva = KERNEL_BASE;
	 unsigned int nTables = 0;
	 for (; sva < 0xFFFFFFFF; sva += PTSIZE)
f010339c:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01033a3:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f01033a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01033ab:	72 d5                	jb     f0103382 <initialize_kernel_VM+0xcc>
f01033ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01033b1:	77 06                	ja     f01033b9 <initialize_kernel_VM+0x103>
f01033b3:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f01033b7:	76 c9                	jbe    f0103382 <initialize_kernel_VM+0xcc>
	 //    - frames_info -- kernel RW, user NONE
	 //    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	 // Your code goes here:
	 //cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	 uint32 array_size;
	 array_size = number_of_frames * sizeof(struct Frame_Info);
f01033b9:	8b 15 7c 28 7e f0    	mov    0xf07e287c,%edx
f01033bf:	89 d0                	mov    %edx,%eax
f01033c1:	01 c0                	add    %eax,%eax
f01033c3:	01 d0                	add    %edx,%eax
f01033c5:	c1 e0 03             	shl    $0x3,%eax
f01033c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f01033cb:	83 ec 08             	sub    $0x8,%esp
f01033ce:	68 00 10 00 00       	push   $0x1000
f01033d3:	ff 75 e0             	pushl  -0x20(%ebp)
f01033d6:	e8 4c 01 00 00       	call   f0103527 <boot_allocate_space>
f01033db:	83 c4 10             	add    $0x10,%esp
f01033de:	a3 24 0d 80 f0       	mov    %eax,0xf0800d24
	 memset(frames_info, 0, array_size);
f01033e3:	a1 24 0d 80 f0       	mov    0xf0800d24,%eax
f01033e8:	83 ec 04             	sub    $0x4,%esp
f01033eb:	ff 75 e0             	pushl  -0x20(%ebp)
f01033ee:	6a 00                	push   $0x0
f01033f0:	50                   	push   %eax
f01033f1:	e8 75 9b 01 00       	call   f011cf6b <memset>
f01033f6:	83 c4 10             	add    $0x10,%esp
	 //2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	 // 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	 //boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	 uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct Frame_Info);
f01033f9:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	 disk_frames_info = boot_allocate_space(disk_array_size, PAGE_SIZE);
f0103400:	83 ec 08             	sub    $0x8,%esp
f0103403:	68 00 10 00 00       	push   $0x1000
f0103408:	ff 75 dc             	pushl  -0x24(%ebp)
f010340b:	e8 17 01 00 00       	call   f0103527 <boot_allocate_space>
f0103410:	83 c4 10             	add    $0x10,%esp
f0103413:	a3 10 0d 80 f0       	mov    %eax,0xf0800d10
	 memset(disk_frames_info, 0, disk_array_size);
f0103418:	a1 10 0d 80 f0       	mov    0xf0800d10,%eax
f010341d:	83 ec 04             	sub    $0x4,%esp
f0103420:	ff 75 dc             	pushl  -0x24(%ebp)
f0103423:	6a 00                	push   $0x0
f0103425:	50                   	push   %eax
f0103426:	e8 40 9b 01 00       	call   f011cf6b <memset>
f010342b:	83 c4 10             	add    $0x10,%esp

	 // This allows the kernel & user to access any page table entry using a
	 // specified VA for each: VPT for kernel and UVPT for User.
	 setup_listing_to_all_page_tables_entries();
f010342e:	e8 ba fc ff ff       	call   f01030ed <setup_listing_to_all_page_tables_entries>
	 // Permissions:
	 //    - envs itself -- kernel RW, user NONE
	 //    - the image of envs mapped at UENVS  -- kernel R, user R

	 // LAB 3: Your code here.
	 cprintf("Max Envs = %d\n", NENV);
f0103433:	83 ec 08             	sub    $0x8,%esp
f0103436:	68 ec 04 00 00       	push   $0x4ec
f010343b:	68 eb f2 11 f0       	push   $0xf011f2eb
f0103440:	e8 bf 3d 00 00       	call   f0107204 <cprintf>
f0103445:	83 c4 10             	add    $0x10,%esp
	 int envs_size = NENV * sizeof(struct Env);
f0103448:	c7 45 d8 00 ff 0f 00 	movl   $0xfff00,-0x28(%ebp)

	 //allocate space for "envs" array aligned on 4KB boundary
	 envs = boot_allocate_space(envs_size, PAGE_SIZE);
f010344f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0103452:	83 ec 08             	sub    $0x8,%esp
f0103455:	68 00 10 00 00       	push   $0x1000
f010345a:	50                   	push   %eax
f010345b:	e8 c7 00 00 00       	call   f0103527 <boot_allocate_space>
f0103460:	83 c4 10             	add    $0x10,%esp
f0103463:	a3 8c 1f 7e f0       	mov    %eax,0xf07e1f8c
	 memset(envs, 0, envs_size);
f0103468:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010346b:	a1 8c 1f 7e f0       	mov    0xf07e1f8c,%eax
f0103470:	83 ec 04             	sub    $0x4,%esp
f0103473:	52                   	push   %edx
f0103474:	6a 00                	push   $0x0
f0103476:	50                   	push   %eax
f0103477:	e8 ef 9a 01 00       	call   f011cf6b <memset>
f010347c:	83 c4 10             	add    $0x10,%esp

	 //make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	 boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER);
f010347f:	a1 8c 1f 7e f0       	mov    0xf07e1f8c,%eax
f0103484:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0103487:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f010348e:	77 17                	ja     f01034a7 <initialize_kernel_VM+0x1f1>
f0103490:	ff 75 d4             	pushl  -0x2c(%ebp)
f0103493:	68 a4 f2 11 f0       	push   $0xf011f2a4
f0103498:	68 a5 00 00 00       	push   $0xa5
f010349d:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01034a2:	e8 08 cd ff ff       	call   f01001af <_panic>
f01034a7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01034aa:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01034b0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01034b3:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01034b8:	83 ec 0c             	sub    $0xc,%esp
f01034bb:	6a 04                	push   $0x4
f01034bd:	51                   	push   %ecx
f01034be:	52                   	push   %edx
f01034bf:	68 00 00 c0 ee       	push   $0xeec00000
f01034c4:	50                   	push   %eax
f01034c5:	e8 be 00 00 00       	call   f0103588 <boot_map_range>
f01034ca:	83 c4 20             	add    $0x20,%esp

	 //update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	 ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)] | (PERM_USER | (PERM_PRESENT & (~PERM_WRITEABLE)));
f01034cd:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01034d2:	05 ec 0e 00 00       	add    $0xeec,%eax
f01034d7:	8b 15 30 0d 80 f0    	mov    0xf0800d30,%edx
f01034dd:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f01034e3:	8b 12                	mov    (%edx),%edx
f01034e5:	83 ca 05             	or     $0x5,%edx
f01034e8:	89 10                	mov    %edx,(%eax)
	 if (USE_KHEAP)
	 {
		 // MAKE SURE THAT THIS MAPPING HAPPENS AFTER ALL BOOT ALLOCATIONS (boot_allocate_space)
		 // calls are fininshed, and no remaining data to be allocated for the kernel
		 // map all used pages so far for the kernel
		 boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE);
f01034ea:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f01034ef:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01034f5:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01034fa:	83 ec 0c             	sub    $0xc,%esp
f01034fd:	6a 02                	push   $0x2
f01034ff:	6a 00                	push   $0x0
f0103501:	52                   	push   %edx
f0103502:	68 00 00 00 f0       	push   $0xf0000000
f0103507:	50                   	push   %eax
f0103508:	e8 7b 00 00 00       	call   f0103588 <boot_map_range>
f010350d:	83 c4 20             	add    $0x20,%esp
	 {
		 boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE);
	 }

	 // Check that the initial page directory has been set up correctly.
	 check_boot_pgdir();
f0103510:	e8 47 f8 ff ff       	call   f0102d5c <check_boot_pgdir>

	 memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0103515:	c7 05 60 28 7e f0 19 	movl   $0x19,0xf07e2860
f010351c:	00 00 00 

	 /*
	 NOW: Turn off the segmentation by setting the segments' base to 0, and
	 turn on the paging by setting the corresponding flags in control register 0 (cr0)
	  */
	 turn_on_paging();
f010351f:	e8 c9 fa ff ff       	call   f0102fed <turn_on_paging>
 }
f0103524:	90                   	nop
f0103525:	c9                   	leave  
f0103526:	c3                   	ret    

f0103527 <boot_allocate_space>:
 // It's too early to run out of memory.
 // This function may ONLY be used during boot time,
 // before the free_frame_list has been set up.
 //
 void* boot_allocate_space(uint32 size, uint32 align)
 {
f0103527:	55                   	push   %ebp
f0103528:	89 e5                	mov    %esp,%ebp
f010352a:	83 ec 10             	sub    $0x10,%esp
	 // Initialize ptr_free_mem if this is the first time.
	 // 'end_of_kernel' is a symbol automatically generated by the linker,
	 // which points to the end of the kernel-
	 // i.e., the first virtual address that the linker
	 // did not assign to any kernel code or global variables.
	 if (ptr_free_mem == 0)
f010352d:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f0103532:	85 c0                	test   %eax,%eax
f0103534:	75 0a                	jne    f0103540 <boot_allocate_space+0x19>
		 ptr_free_mem = end_of_kernel;
f0103536:	c7 05 2c 0d 80 f0 68 	movl   $0xf0880d68,0xf0800d2c
f010353d:	0d 88 f0 

	 // Your code here:
	 //	Step 1: round ptr_free_mem up to be aligned properly
	 ptr_free_mem = ROUNDUP(ptr_free_mem, align);
f0103540:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103543:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103546:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f010354b:	89 c2                	mov    %eax,%edx
f010354d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103550:	01 d0                	add    %edx,%eax
f0103552:	48                   	dec    %eax
f0103553:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0103556:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103559:	ba 00 00 00 00       	mov    $0x0,%edx
f010355e:	f7 75 fc             	divl   -0x4(%ebp)
f0103561:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103564:	29 d0                	sub    %edx,%eax
f0103566:	a3 2c 0d 80 f0       	mov    %eax,0xf0800d2c

	 //	Step 2: save current value of ptr_free_mem as allocated space
	 void* ptr_allocated_mem;
	 ptr_allocated_mem = ptr_free_mem;
f010356b:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f0103570:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //	Step 3: increase ptr_free_mem to record allocation
	 ptr_free_mem += size;
f0103573:	8b 15 2c 0d 80 f0    	mov    0xf0800d2c,%edx
f0103579:	8b 45 08             	mov    0x8(%ebp),%eax
f010357c:	01 d0                	add    %edx,%eax
f010357e:	a3 2c 0d 80 f0       	mov    %eax,0xf0800d2c

	 //// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	 //memset(ptr_allocated_mem, 0, size);

	 //	Step 4: return allocated space
	 return ptr_allocated_mem;
f0103583:	8b 45 f4             	mov    -0xc(%ebp),%eax

 }
f0103586:	c9                   	leave  
f0103587:	c3                   	ret    

f0103588 <boot_map_range>:
 //
 // This function may ONLY be used during boot time,
 // before the free_frame_list has been set up.
 //
 void boot_map_range(uint32* ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
 {
f0103588:	55                   	push   %ebp
f0103589:	89 e5                	mov    %esp,%ebp
f010358b:	83 ec 18             	sub    $0x18,%esp
	 int i = 0;
f010358e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 //physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	 ///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	 for (i = 0; i < size; i += PAGE_SIZE)
f0103595:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010359c:	eb 53                	jmp    f01035f1 <boot_map_range+0x69>
	 {
		 uint32* ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1);
f010359e:	83 ec 04             	sub    $0x4,%esp
f01035a1:	6a 01                	push   $0x1
f01035a3:	ff 75 0c             	pushl  0xc(%ebp)
f01035a6:	ff 75 08             	pushl  0x8(%ebp)
f01035a9:	e8 4e 00 00 00       	call   f01035fc <boot_get_page_table>
f01035ae:	83 c4 10             	add    $0x10,%esp
f01035b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 uint32 index_page_table = PTX(virtual_address);
f01035b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01035b7:	c1 e8 0c             	shr    $0xc,%eax
f01035ba:	25 ff 03 00 00       	and    $0x3ff,%eax
f01035bf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		 //LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		 ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT);
f01035c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035c5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01035cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035cf:	01 c2                	add    %eax,%edx
f01035d1:	8b 45 18             	mov    0x18(%ebp),%eax
f01035d4:	0b 45 14             	or     0x14(%ebp),%eax
f01035d7:	83 c8 01             	or     $0x1,%eax
f01035da:	89 02                	mov    %eax,(%edx)

		 physical_address += PAGE_SIZE;
f01035dc:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		 virtual_address += PAGE_SIZE;
f01035e3:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
 {
	 int i = 0;
	 //physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	 ///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	 for (i = 0; i < size; i += PAGE_SIZE)
f01035ea:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01035f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01035f4:	3b 45 10             	cmp    0x10(%ebp),%eax
f01035f7:	72 a5                	jb     f010359e <boot_map_range+0x16>
		 ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT);

		 physical_address += PAGE_SIZE;
		 virtual_address += PAGE_SIZE;
	 }
 }
f01035f9:	90                   	nop
f01035fa:	c9                   	leave  
f01035fb:	c3                   	ret    

f01035fc <boot_get_page_table>:
 // boot_get_page_table cannot fail.  It's too early to fail.
 // This function may ONLY be used during boot time,
 // before the free_frame_list has been set up.
 //
 uint32* boot_get_page_table(uint32* ptr_page_directory, uint32 virtual_address, int create)
 {
f01035fc:	55                   	push   %ebp
f01035fd:	89 e5                	mov    %esp,%ebp
f01035ff:	83 ec 28             	sub    $0x28,%esp
	 uint32 index_page_directory = PDX(virtual_address);
f0103602:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103605:	c1 e8 16             	shr    $0x16,%eax
f0103608:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010360b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010360e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103615:	8b 45 08             	mov    0x8(%ebp),%eax
f0103618:	01 d0                	add    %edx,%eax
f010361a:	8b 00                	mov    (%eax),%eax
f010361c:	89 45 f0             	mov    %eax,-0x10(%ebp)

	 //cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	 uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f010361f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103622:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103627:	89 45 ec             	mov    %eax,-0x14(%ebp)
	 uint32* ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010362a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010362d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103630:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103633:	c1 e8 0c             	shr    $0xc,%eax
f0103636:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103639:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f010363e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103641:	72 17                	jb     f010365a <boot_get_page_table+0x5e>
f0103643:	ff 75 e8             	pushl  -0x18(%ebp)
f0103646:	68 fc f2 11 f0       	push   $0xf011f2fc
f010364b:	68 24 01 00 00       	push   $0x124
f0103650:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0103655:	e8 55 cb ff ff       	call   f01001af <_panic>
f010365a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010365d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103662:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 if (phys_page_table == 0)
f0103665:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0103669:	75 72                	jne    f01036dd <boot_get_page_table+0xe1>
	 {
		 if (create)
f010366b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010366f:	74 65                	je     f01036d6 <boot_get_page_table+0xda>
		 {
			 ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0103671:	83 ec 08             	sub    $0x8,%esp
f0103674:	68 00 10 00 00       	push   $0x1000
f0103679:	68 00 10 00 00       	push   $0x1000
f010367e:	e8 a4 fe ff ff       	call   f0103527 <boot_allocate_space>
f0103683:	83 c4 10             	add    $0x10,%esp
f0103686:	89 45 e0             	mov    %eax,-0x20(%ebp)
			 phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0103689:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010368c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010368f:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0103696:	77 17                	ja     f01036af <boot_get_page_table+0xb3>
f0103698:	ff 75 dc             	pushl  -0x24(%ebp)
f010369b:	68 a4 f2 11 f0       	push   $0xf011f2a4
f01036a0:	68 2a 01 00 00       	push   $0x12a
f01036a5:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01036aa:	e8 00 cb ff ff       	call   f01001af <_panic>
f01036af:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01036b2:	05 00 00 00 10       	add    $0x10000000,%eax
f01036b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
			 ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f01036ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01036bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01036c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01036c7:	01 d0                	add    %edx,%eax
f01036c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01036cc:	83 ca 03             	or     $0x3,%edx
f01036cf:	89 10                	mov    %edx,(%eax)
			 return ptr_page_table;
f01036d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01036d4:	eb 0a                	jmp    f01036e0 <boot_get_page_table+0xe4>
		 }
		 else
			 return 0;
f01036d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01036db:	eb 03                	jmp    f01036e0 <boot_get_page_table+0xe4>
	 }
	 return ptr_page_table;
f01036dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
 }
f01036e0:	c9                   	leave  
f01036e1:	c3                   	ret    

f01036e2 <initialize_paging>:
 // and NEVER use boot_allocate_space() or the related boot-time functions above.
 //

 extern void initialize_disk_page_file();
 void initialize_paging()
 {
f01036e2:	55                   	push   %ebp
f01036e3:	89 e5                	mov    %esp,%ebp
f01036e5:	53                   	push   %ebx
f01036e6:	83 ec 24             	sub    $0x24,%esp
	 //     Some of it is in use, some is free. Where is the kernel?
	 //     Which frames are used for page tables and other data structures?
	 //
	 // Change the code to reflect this.
	 int i;
	 LIST_INIT(&free_frame_list);
f01036e9:	c7 05 14 0d 80 f0 00 	movl   $0x0,0xf0800d14
f01036f0:	00 00 00 
f01036f3:	c7 05 18 0d 80 f0 00 	movl   $0x0,0xf0800d18
f01036fa:	00 00 00 
f01036fd:	c7 05 20 0d 80 f0 00 	movl   $0x0,0xf0800d20
f0103704:	00 00 00 
	 LIST_INIT(&modified_frame_list);
f0103707:	c7 05 00 0d 80 f0 00 	movl   $0x0,0xf0800d00
f010370e:	00 00 00 
f0103711:	c7 05 04 0d 80 f0 00 	movl   $0x0,0xf0800d04
f0103718:	00 00 00 
f010371b:	c7 05 0c 0d 80 f0 00 	movl   $0x0,0xf0800d0c
f0103722:	00 00 00 

	 frames_info[0].references = 1;
f0103725:	a1 24 0d 80 f0       	mov    0xf0800d24,%eax
f010372a:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	 frames_info[1].references = 1;
f0103730:	a1 24 0d 80 f0       	mov    0xf0800d24,%eax
f0103735:	83 c0 18             	add    $0x18,%eax
f0103738:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	 frames_info[2].references = 1;
f010373e:	a1 24 0d 80 f0       	mov    0xf0800d24,%eax
f0103743:	83 c0 30             	add    $0x30,%eax
f0103746:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	 ptr_zero_page = (uint8*)KERNEL_BASE + PAGE_SIZE;
f010374c:	c7 05 28 0d 80 f0 00 	movl   $0xf0001000,0xf0800d28
f0103753:	10 00 f0 
	 ptr_temp_page = (uint8*)KERNEL_BASE + 2 * PAGE_SIZE;
f0103756:	c7 05 34 0d 80 f0 00 	movl   $0xf0002000,0xf0800d34
f010375d:	20 00 f0 
	 i = 0;
f0103760:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 for (; i < 1024; i++)
f0103767:	eb 1f                	jmp    f0103788 <initialize_paging+0xa6>
	 {
		 ptr_zero_page[i] = 0;
f0103769:	8b 15 28 0d 80 f0    	mov    0xf0800d28,%edx
f010376f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103772:	01 d0                	add    %edx,%eax
f0103774:	c6 00 00             	movb   $0x0,(%eax)
		 ptr_temp_page[i] = 0;
f0103777:	8b 15 34 0d 80 f0    	mov    0xf0800d34,%edx
f010377d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103780:	01 d0                	add    %edx,%eax
f0103782:	c6 00 00             	movb   $0x0,(%eax)
	 frames_info[1].references = 1;
	 frames_info[2].references = 1;
	 ptr_zero_page = (uint8*)KERNEL_BASE + PAGE_SIZE;
	 ptr_temp_page = (uint8*)KERNEL_BASE + 2 * PAGE_SIZE;
	 i = 0;
	 for (; i < 1024; i++)
f0103785:	ff 45 f4             	incl   -0xc(%ebp)
f0103788:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010378f:	7e d8                	jle    f0103769 <initialize_paging+0x87>
	 {
		 ptr_zero_page[i] = 0;
		 ptr_temp_page[i] = 0;
	 }

	 int range_end = ROUNDUP(PHYS_IO_MEM, PAGE_SIZE);
f0103791:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103798:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010379b:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01037a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01037a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01037ab:	f7 75 f0             	divl   -0x10(%ebp)
f01037ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01037b1:	29 d0                	sub    %edx,%eax
f01037b3:	89 45 e8             	mov    %eax,-0x18(%ebp)

	 for (i = 3; i < range_end / PAGE_SIZE; i++)
f01037b6:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01037bd:	e9 bc 00 00 00       	jmp    f010387e <initialize_paging+0x19c>
	 {

		 initialize_frame_info(&(frames_info[i]));
f01037c2:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f01037c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01037cb:	89 d0                	mov    %edx,%eax
f01037cd:	01 c0                	add    %eax,%eax
f01037cf:	01 d0                	add    %edx,%eax
f01037d1:	c1 e0 03             	shl    $0x3,%eax
f01037d4:	01 c8                	add    %ecx,%eax
f01037d6:	83 ec 0c             	sub    $0xc,%esp
f01037d9:	50                   	push   %eax
f01037da:	e8 62 02 00 00       	call   f0103a41 <initialize_frame_info>
f01037df:	83 c4 10             	add    $0x10,%esp
		 //frames_info[i].references = 0;

		 LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01037e2:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f01037e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01037eb:	89 d0                	mov    %edx,%eax
f01037ed:	01 c0                	add    %eax,%eax
f01037ef:	01 d0                	add    %edx,%eax
f01037f1:	c1 e0 03             	shl    $0x3,%eax
f01037f4:	01 c8                	add    %ecx,%eax
f01037f6:	8b 15 14 0d 80 f0    	mov    0xf0800d14,%edx
f01037fc:	89 10                	mov    %edx,(%eax)
f01037fe:	8b 00                	mov    (%eax),%eax
f0103800:	85 c0                	test   %eax,%eax
f0103802:	74 1f                	je     f0103823 <initialize_paging+0x141>
f0103804:	8b 15 14 0d 80 f0    	mov    0xf0800d14,%edx
f010380a:	8b 1d 24 0d 80 f0    	mov    0xf0800d24,%ebx
f0103810:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103813:	89 c8                	mov    %ecx,%eax
f0103815:	01 c0                	add    %eax,%eax
f0103817:	01 c8                	add    %ecx,%eax
f0103819:	c1 e0 03             	shl    $0x3,%eax
f010381c:	01 d8                	add    %ebx,%eax
f010381e:	89 42 04             	mov    %eax,0x4(%edx)
f0103821:	eb 19                	jmp    f010383c <initialize_paging+0x15a>
f0103823:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f0103829:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010382c:	89 d0                	mov    %edx,%eax
f010382e:	01 c0                	add    %eax,%eax
f0103830:	01 d0                	add    %edx,%eax
f0103832:	c1 e0 03             	shl    $0x3,%eax
f0103835:	01 c8                	add    %ecx,%eax
f0103837:	a3 18 0d 80 f0       	mov    %eax,0xf0800d18
f010383c:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f0103842:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103845:	89 d0                	mov    %edx,%eax
f0103847:	01 c0                	add    %eax,%eax
f0103849:	01 d0                	add    %edx,%eax
f010384b:	c1 e0 03             	shl    $0x3,%eax
f010384e:	01 c8                	add    %ecx,%eax
f0103850:	a3 14 0d 80 f0       	mov    %eax,0xf0800d14
f0103855:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f010385b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010385e:	89 d0                	mov    %edx,%eax
f0103860:	01 c0                	add    %eax,%eax
f0103862:	01 d0                	add    %edx,%eax
f0103864:	c1 e0 03             	shl    $0x3,%eax
f0103867:	01 c8                	add    %ecx,%eax
f0103869:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103870:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f0103875:	40                   	inc    %eax
f0103876:	a3 20 0d 80 f0       	mov    %eax,0xf0800d20
		 ptr_temp_page[i] = 0;
	 }

	 int range_end = ROUNDUP(PHYS_IO_MEM, PAGE_SIZE);

	 for (i = 3; i < range_end / PAGE_SIZE; i++)
f010387b:	ff 45 f4             	incl   -0xc(%ebp)
f010387e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103881:	85 c0                	test   %eax,%eax
f0103883:	79 05                	jns    f010388a <initialize_paging+0x1a8>
f0103885:	05 ff 0f 00 00       	add    $0xfff,%eax
f010388a:	c1 f8 0c             	sar    $0xc,%eax
f010388d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103890:	0f 8f 2c ff ff ff    	jg     f01037c2 <initialize_paging+0xe0>
		 //frames_info[i].references = 0;

		 LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	 }

	 for (i = PHYS_IO_MEM / PAGE_SIZE; i < PHYS_EXTENDED_MEM / PAGE_SIZE; i++)
f0103896:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f010389d:	eb 1d                	jmp    f01038bc <initialize_paging+0x1da>
	 {
		 frames_info[i].references = 1;
f010389f:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f01038a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01038a8:	89 d0                	mov    %edx,%eax
f01038aa:	01 c0                	add    %eax,%eax
f01038ac:	01 d0                	add    %edx,%eax
f01038ae:	c1 e0 03             	shl    $0x3,%eax
f01038b1:	01 c8                	add    %ecx,%eax
f01038b3:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		 //frames_info[i].references = 0;

		 LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	 }

	 for (i = PHYS_IO_MEM / PAGE_SIZE; i < PHYS_EXTENDED_MEM / PAGE_SIZE; i++)
f01038b9:	ff 45 f4             	incl   -0xc(%ebp)
f01038bc:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01038c3:	7e da                	jle    f010389f <initialize_paging+0x1bd>
	 {
		 frames_info[i].references = 1;
	 }

	 range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01038c5:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01038cc:	a1 2c 0d 80 f0       	mov    0xf0800d2c,%eax
f01038d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01038d4:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f01038db:	77 17                	ja     f01038f4 <initialize_paging+0x212>
f01038dd:	ff 75 e0             	pushl  -0x20(%ebp)
f01038e0:	68 a4 f2 11 f0       	push   $0xf011f2a4
f01038e5:	68 77 01 00 00       	push   $0x177
f01038ea:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01038ef:	e8 bb c8 ff ff       	call   f01001af <_panic>
f01038f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01038f7:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f01038fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103900:	01 d0                	add    %edx,%eax
f0103902:	48                   	dec    %eax
f0103903:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0103906:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103909:	ba 00 00 00 00       	mov    $0x0,%edx
f010390e:	f7 75 e4             	divl   -0x1c(%ebp)
f0103911:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103914:	29 d0                	sub    %edx,%eax
f0103916:	89 45 e8             	mov    %eax,-0x18(%ebp)

	 for (i = PHYS_EXTENDED_MEM / PAGE_SIZE; i < range_end / PAGE_SIZE; i++)
f0103919:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0103920:	eb 1d                	jmp    f010393f <initialize_paging+0x25d>
	 {
		 frames_info[i].references = 1;
f0103922:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f0103928:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010392b:	89 d0                	mov    %edx,%eax
f010392d:	01 c0                	add    %eax,%eax
f010392f:	01 d0                	add    %edx,%eax
f0103931:	c1 e0 03             	shl    $0x3,%eax
f0103934:	01 c8                	add    %ecx,%eax
f0103936:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		 frames_info[i].references = 1;
	 }

	 range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	 for (i = PHYS_EXTENDED_MEM / PAGE_SIZE; i < range_end / PAGE_SIZE; i++)
f010393c:	ff 45 f4             	incl   -0xc(%ebp)
f010393f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103942:	85 c0                	test   %eax,%eax
f0103944:	79 05                	jns    f010394b <initialize_paging+0x269>
f0103946:	05 ff 0f 00 00       	add    $0xfff,%eax
f010394b:	c1 f8 0c             	sar    $0xc,%eax
f010394e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103951:	7f cf                	jg     f0103922 <initialize_paging+0x240>
	 {
		 frames_info[i].references = 1;
	 }

	 for (i = range_end / PAGE_SIZE; i < number_of_frames; i++)
f0103953:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103956:	85 c0                	test   %eax,%eax
f0103958:	79 05                	jns    f010395f <initialize_paging+0x27d>
f010395a:	05 ff 0f 00 00       	add    $0xfff,%eax
f010395f:	c1 f8 0c             	sar    $0xc,%eax
f0103962:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103965:	e9 bc 00 00 00       	jmp    f0103a26 <initialize_paging+0x344>
	 {
		 initialize_frame_info(&(frames_info[i]));
f010396a:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f0103970:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103973:	89 d0                	mov    %edx,%eax
f0103975:	01 c0                	add    %eax,%eax
f0103977:	01 d0                	add    %edx,%eax
f0103979:	c1 e0 03             	shl    $0x3,%eax
f010397c:	01 c8                	add    %ecx,%eax
f010397e:	83 ec 0c             	sub    $0xc,%esp
f0103981:	50                   	push   %eax
f0103982:	e8 ba 00 00 00       	call   f0103a41 <initialize_frame_info>
f0103987:	83 c4 10             	add    $0x10,%esp

		 //frames_info[i].references = 0;
		 LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f010398a:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f0103990:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103993:	89 d0                	mov    %edx,%eax
f0103995:	01 c0                	add    %eax,%eax
f0103997:	01 d0                	add    %edx,%eax
f0103999:	c1 e0 03             	shl    $0x3,%eax
f010399c:	01 c8                	add    %ecx,%eax
f010399e:	8b 15 14 0d 80 f0    	mov    0xf0800d14,%edx
f01039a4:	89 10                	mov    %edx,(%eax)
f01039a6:	8b 00                	mov    (%eax),%eax
f01039a8:	85 c0                	test   %eax,%eax
f01039aa:	74 1f                	je     f01039cb <initialize_paging+0x2e9>
f01039ac:	8b 15 14 0d 80 f0    	mov    0xf0800d14,%edx
f01039b2:	8b 1d 24 0d 80 f0    	mov    0xf0800d24,%ebx
f01039b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01039bb:	89 c8                	mov    %ecx,%eax
f01039bd:	01 c0                	add    %eax,%eax
f01039bf:	01 c8                	add    %ecx,%eax
f01039c1:	c1 e0 03             	shl    $0x3,%eax
f01039c4:	01 d8                	add    %ebx,%eax
f01039c6:	89 42 04             	mov    %eax,0x4(%edx)
f01039c9:	eb 19                	jmp    f01039e4 <initialize_paging+0x302>
f01039cb:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f01039d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039d4:	89 d0                	mov    %edx,%eax
f01039d6:	01 c0                	add    %eax,%eax
f01039d8:	01 d0                	add    %edx,%eax
f01039da:	c1 e0 03             	shl    $0x3,%eax
f01039dd:	01 c8                	add    %ecx,%eax
f01039df:	a3 18 0d 80 f0       	mov    %eax,0xf0800d18
f01039e4:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f01039ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01039ed:	89 d0                	mov    %edx,%eax
f01039ef:	01 c0                	add    %eax,%eax
f01039f1:	01 d0                	add    %edx,%eax
f01039f3:	c1 e0 03             	shl    $0x3,%eax
f01039f6:	01 c8                	add    %ecx,%eax
f01039f8:	a3 14 0d 80 f0       	mov    %eax,0xf0800d14
f01039fd:	8b 0d 24 0d 80 f0    	mov    0xf0800d24,%ecx
f0103a03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a06:	89 d0                	mov    %edx,%eax
f0103a08:	01 c0                	add    %eax,%eax
f0103a0a:	01 d0                	add    %edx,%eax
f0103a0c:	c1 e0 03             	shl    $0x3,%eax
f0103a0f:	01 c8                	add    %ecx,%eax
f0103a11:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103a18:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f0103a1d:	40                   	inc    %eax
f0103a1e:	a3 20 0d 80 f0       	mov    %eax,0xf0800d20
	 for (i = PHYS_EXTENDED_MEM / PAGE_SIZE; i < range_end / PAGE_SIZE; i++)
	 {
		 frames_info[i].references = 1;
	 }

	 for (i = range_end / PAGE_SIZE; i < number_of_frames; i++)
f0103a23:	ff 45 f4             	incl   -0xc(%ebp)
f0103a26:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a29:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0103a2e:	39 c2                	cmp    %eax,%edx
f0103a30:	0f 82 34 ff ff ff    	jb     f010396a <initialize_paging+0x288>

		 //frames_info[i].references = 0;
		 LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	 }

	 initialize_disk_page_file();
f0103a36:	e8 7f 7d 00 00       	call   f010b7ba <initialize_disk_page_file>
 }
f0103a3b:	90                   	nop
f0103a3c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103a3f:	c9                   	leave  
f0103a40:	c3                   	ret    

f0103a41 <initialize_frame_info>:
 // Initialize a Frame_Info structure.
 // The result has null links and 0 references.
 // Note that the corresponding physical frame is NOT initialized!
 //
 void initialize_frame_info(struct Frame_Info* ptr_frame_info)
 {
f0103a41:	55                   	push   %ebp
f0103a42:	89 e5                	mov    %esp,%ebp
f0103a44:	83 ec 08             	sub    $0x8,%esp
	 memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f0103a47:	83 ec 04             	sub    $0x4,%esp
f0103a4a:	6a 18                	push   $0x18
f0103a4c:	6a 00                	push   $0x0
f0103a4e:	ff 75 08             	pushl  0x8(%ebp)
f0103a51:	e8 15 95 01 00       	call   f011cf6b <memset>
f0103a56:	83 c4 10             	add    $0x10,%esp
 }
f0103a59:	90                   	nop
f0103a5a:	c9                   	leave  
f0103a5b:	c3                   	ret    

f0103a5c <allocate_frame>:
 // Hint: references should not be incremented

 extern void env_free(struct Env* e);

 int allocate_frame(struct Frame_Info** ptr_frame_info)
 {
f0103a5c:	55                   	push   %ebp
f0103a5d:	89 e5                	mov    %esp,%ebp
f0103a5f:	83 ec 18             	sub    $0x18,%esp
	 *ptr_frame_info = LIST_FIRST(&free_frame_list);
f0103a62:	8b 15 14 0d 80 f0    	mov    0xf0800d14,%edx
f0103a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a6b:	89 10                	mov    %edx,(%eax)
	 int c = 0;
f0103a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 if (*ptr_frame_info == NULL)
f0103a74:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a77:	8b 00                	mov    (%eax),%eax
f0103a79:	85 c0                	test   %eax,%eax
f0103a7b:	75 17                	jne    f0103a94 <allocate_frame+0x38>
	 {
		 panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f0103a7d:	83 ec 04             	sub    $0x4,%esp
f0103a80:	68 2c f3 11 f0       	push   $0xf011f32c
f0103a85:	68 aa 01 00 00       	push   $0x1aa
f0103a8a:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0103a8f:	e8 1b c7 ff ff       	call   f01001af <_panic>
	 }

	 LIST_REMOVE(&free_frame_list, *ptr_frame_info);
f0103a94:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a97:	8b 00                	mov    (%eax),%eax
f0103a99:	8b 00                	mov    (%eax),%eax
f0103a9b:	85 c0                	test   %eax,%eax
f0103a9d:	74 14                	je     f0103ab3 <allocate_frame+0x57>
f0103a9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa2:	8b 00                	mov    (%eax),%eax
f0103aa4:	8b 00                	mov    (%eax),%eax
f0103aa6:	8b 55 08             	mov    0x8(%ebp),%edx
f0103aa9:	8b 12                	mov    (%edx),%edx
f0103aab:	8b 52 04             	mov    0x4(%edx),%edx
f0103aae:	89 50 04             	mov    %edx,0x4(%eax)
f0103ab1:	eb 0d                	jmp    f0103ac0 <allocate_frame+0x64>
f0103ab3:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ab6:	8b 00                	mov    (%eax),%eax
f0103ab8:	8b 40 04             	mov    0x4(%eax),%eax
f0103abb:	a3 18 0d 80 f0       	mov    %eax,0xf0800d18
f0103ac0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac3:	8b 00                	mov    (%eax),%eax
f0103ac5:	8b 40 04             	mov    0x4(%eax),%eax
f0103ac8:	85 c0                	test   %eax,%eax
f0103aca:	74 13                	je     f0103adf <allocate_frame+0x83>
f0103acc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103acf:	8b 00                	mov    (%eax),%eax
f0103ad1:	8b 40 04             	mov    0x4(%eax),%eax
f0103ad4:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ad7:	8b 12                	mov    (%edx),%edx
f0103ad9:	8b 12                	mov    (%edx),%edx
f0103adb:	89 10                	mov    %edx,(%eax)
f0103add:	eb 0c                	jmp    f0103aeb <allocate_frame+0x8f>
f0103adf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae2:	8b 00                	mov    (%eax),%eax
f0103ae4:	8b 00                	mov    (%eax),%eax
f0103ae6:	a3 14 0d 80 f0       	mov    %eax,0xf0800d14
f0103aeb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aee:	8b 00                	mov    (%eax),%eax
f0103af0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103af6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103af9:	8b 00                	mov    (%eax),%eax
f0103afb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b02:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f0103b07:	48                   	dec    %eax
f0103b08:	a3 20 0d 80 f0       	mov    %eax,0xf0800d20

	 /******************* PAGE BUFFERING CODE *******************
	  ***********************************************************/

	 if ((*ptr_frame_info)->isBuffered)
f0103b0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b10:	8b 00                	mov    (%eax),%eax
f0103b12:	8a 40 14             	mov    0x14(%eax),%al
f0103b15:	84 c0                	test   %al,%al
f0103b17:	74 1d                	je     f0103b36 <allocate_frame+0xda>
	 {
		 pt_clear_page_table_entry((*ptr_frame_info)->environment, (*ptr_frame_info)->va);
f0103b19:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b1c:	8b 00                	mov    (%eax),%eax
f0103b1e:	8b 50 0c             	mov    0xc(%eax),%edx
f0103b21:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b24:	8b 00                	mov    (%eax),%eax
f0103b26:	8b 40 10             	mov    0x10(%eax),%eax
f0103b29:	83 ec 08             	sub    $0x8,%esp
f0103b2c:	52                   	push   %edx
f0103b2d:	50                   	push   %eax
f0103b2e:	e8 5e 16 00 00       	call   f0105191 <pt_clear_page_table_entry>
f0103b33:	83 c4 10             	add    $0x10,%esp
	 }

	 /**********************************************************
	  ***********************************************************/

	 initialize_frame_info(*ptr_frame_info);
f0103b36:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b39:	8b 00                	mov    (%eax),%eax
f0103b3b:	83 ec 0c             	sub    $0xc,%esp
f0103b3e:	50                   	push   %eax
f0103b3f:	e8 fd fe ff ff       	call   f0103a41 <initialize_frame_info>
f0103b44:	83 c4 10             	add    $0x10,%esp

	 return 0;
f0103b47:	b8 00 00 00 00       	mov    $0x0,%eax
 }
f0103b4c:	c9                   	leave  
f0103b4d:	c3                   	ret    

f0103b4e <free_frame>:
 //
 // Return a frame to the free_frame_list.
 // (This function should only be called when ptr_frame_info->references reaches 0.)
 //
 void free_frame(struct Frame_Info* ptr_frame_info)
 {
f0103b4e:	55                   	push   %ebp
f0103b4f:	89 e5                	mov    %esp,%ebp
f0103b51:	83 ec 08             	sub    $0x8,%esp
	 /*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	 initialize_frame_info(ptr_frame_info);
f0103b54:	83 ec 0c             	sub    $0xc,%esp
f0103b57:	ff 75 08             	pushl  0x8(%ebp)
f0103b5a:	e8 e2 fe ff ff       	call   f0103a41 <initialize_frame_info>
f0103b5f:	83 c4 10             	add    $0x10,%esp
	 /*=============================================================================*/

	 // Fill this function in
	 LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f0103b62:	8b 15 14 0d 80 f0    	mov    0xf0800d14,%edx
f0103b68:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b6b:	89 10                	mov    %edx,(%eax)
f0103b6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b70:	8b 00                	mov    (%eax),%eax
f0103b72:	85 c0                	test   %eax,%eax
f0103b74:	74 0d                	je     f0103b83 <free_frame+0x35>
f0103b76:	a1 14 0d 80 f0       	mov    0xf0800d14,%eax
f0103b7b:	8b 55 08             	mov    0x8(%ebp),%edx
f0103b7e:	89 50 04             	mov    %edx,0x4(%eax)
f0103b81:	eb 08                	jmp    f0103b8b <free_frame+0x3d>
f0103b83:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b86:	a3 18 0d 80 f0       	mov    %eax,0xf0800d18
f0103b8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b8e:	a3 14 0d 80 f0       	mov    %eax,0xf0800d14
f0103b93:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b96:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103b9d:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f0103ba2:	40                   	inc    %eax
f0103ba3:	a3 20 0d 80 f0       	mov    %eax,0xf0800d20
	 //LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


 }
f0103ba8:	90                   	nop
f0103ba9:	c9                   	leave  
f0103baa:	c3                   	ret    

f0103bab <decrement_references>:
 //
 // Decrement the reference count on a frame
 // freeing it if there are no more references.
 //
 void decrement_references(struct Frame_Info* ptr_frame_info)
 {
f0103bab:	55                   	push   %ebp
f0103bac:	89 e5                	mov    %esp,%ebp
f0103bae:	83 ec 08             	sub    $0x8,%esp
	 if (--(ptr_frame_info->references) == 0)
f0103bb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bb4:	8b 40 08             	mov    0x8(%eax),%eax
f0103bb7:	48                   	dec    %eax
f0103bb8:	8b 55 08             	mov    0x8(%ebp),%edx
f0103bbb:	66 89 42 08          	mov    %ax,0x8(%edx)
f0103bbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bc2:	8b 40 08             	mov    0x8(%eax),%eax
f0103bc5:	66 85 c0             	test   %ax,%ax
f0103bc8:	75 0e                	jne    f0103bd8 <decrement_references+0x2d>
		 free_frame(ptr_frame_info);
f0103bca:	83 ec 0c             	sub    $0xc,%esp
f0103bcd:	ff 75 08             	pushl  0x8(%ebp)
f0103bd0:	e8 79 ff ff ff       	call   f0103b4e <free_frame>
f0103bd5:	83 c4 10             	add    $0x10,%esp
 }
f0103bd8:	90                   	nop
f0103bd9:	c9                   	leave  
f0103bda:	c3                   	ret    

f0103bdb <get_page_table>:
 //  TABLE_IN_MEMORY : if page table exists in main memory
 //	TABLE_NOT_EXIST : if page table doesn't exist,
 //

 int get_page_table(uint32* ptr_page_directory, const void* virtual_address, uint32** ptr_page_table)
 {
f0103bdb:	55                   	push   %ebp
f0103bdc:	89 e5                	mov    %esp,%ebp
f0103bde:	83 ec 28             	sub    $0x28,%esp
	 //	cprintf("gpt .05\n");
	 uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103be1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103be4:	c1 e8 16             	shr    $0x16,%eax
f0103be7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103bee:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bf1:	01 d0                	add    %edx,%eax
f0103bf3:	8b 00                	mov    (%eax),%eax
f0103bf5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	 //	cprintf("gpt .07, page_directory_entry= %x \n",page_directory_entry);
	 if (USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103bfb:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103c00:	77 1d                	ja     f0103c1f <get_page_table+0x44>
	 {
		 *ptr_page_table = (void*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry));
f0103c02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c05:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c0a:	83 ec 0c             	sub    $0xc,%esp
f0103c0d:	50                   	push   %eax
f0103c0e:	e8 df 93 00 00       	call   f010cff2 <kheap_virtual_address>
f0103c13:	83 c4 10             	add    $0x10,%esp
f0103c16:	89 c2                	mov    %eax,%edx
f0103c18:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c1b:	89 10                	mov    %edx,(%eax)
f0103c1d:	eb 44                	jmp    f0103c63 <get_page_table+0x88>
	 }
	 else
	 {
		 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry));
f0103c1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c22:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c2d:	c1 e8 0c             	shr    $0xc,%eax
f0103c30:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103c33:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0103c38:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103c3b:	72 17                	jb     f0103c54 <get_page_table+0x79>
f0103c3d:	ff 75 f0             	pushl  -0x10(%ebp)
f0103c40:	68 fc f2 11 f0       	push   $0xf011f2fc
f0103c45:	68 f0 01 00 00       	push   $0x1f0
f0103c4a:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0103c4f:	e8 5b c5 ff ff       	call   f01001af <_panic>
f0103c54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103c57:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c5c:	89 c2                	mov    %eax,%edx
f0103c5e:	8b 45 10             	mov    0x10(%ebp),%eax
f0103c61:	89 10                	mov    %edx,(%eax)
	 }

	 if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0103c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103c66:	83 e0 01             	and    $0x1,%eax
f0103c69:	85 c0                	test   %eax,%eax
f0103c6b:	74 0a                	je     f0103c77 <get_page_table+0x9c>
	 {
		 return TABLE_IN_MEMORY;
f0103c6d:	b8 00 00 00 00       	mov    $0x0,%eax
f0103c72:	e9 ba 00 00 00       	jmp    f0103d31 <get_page_table+0x156>
	 }
	 else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0103c77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103c7b:	0f 84 a2 00 00 00    	je     f0103d23 <get_page_table+0x148>
	 {
		 // Put the faulted address in CR2 and then
		 // Call the fault_handler() to load the table in memory for us ...
		 //		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		 lcr2((uint32)virtual_address);
f0103c81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c84:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f0103c87:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103c8a:	0f 22 d0             	mov    %eax,%cr2

		 //		cprintf("gpt .12\n");
		 fault_handler(NULL);
f0103c8d:	83 ec 0c             	sub    $0xc,%esp
f0103c90:	6a 00                	push   $0x0
f0103c92:	e8 0b 4c 00 00       	call   f01088a2 <fault_handler>
f0103c97:	83 c4 10             	add    $0x10,%esp

		 //		cprintf("gpt .15\n");
		 // now the page_fault_handler() should have returned successfully and updated the
		 // directory with the new table frame number in memory
		 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103c9d:	c1 e8 16             	shr    $0x16,%eax
f0103ca0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103ca7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103caa:	01 d0                	add    %edx,%eax
f0103cac:	8b 00                	mov    (%eax),%eax
f0103cae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 if (USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cb4:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103cb9:	77 1d                	ja     f0103cd8 <get_page_table+0xfd>
		 {
			 *ptr_page_table = (void*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry));
f0103cbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cbe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103cc3:	83 ec 0c             	sub    $0xc,%esp
f0103cc6:	50                   	push   %eax
f0103cc7:	e8 26 93 00 00       	call   f010cff2 <kheap_virtual_address>
f0103ccc:	83 c4 10             	add    $0x10,%esp
f0103ccf:	89 c2                	mov    %eax,%edx
f0103cd1:	8b 45 10             	mov    0x10(%ebp),%eax
f0103cd4:	89 10                	mov    %edx,(%eax)
f0103cd6:	eb 44                	jmp    f0103d1c <get_page_table+0x141>
		 }
		 else
		 {
			 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry));
f0103cd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103cdb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103ce0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103ce3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103ce6:	c1 e8 0c             	shr    $0xc,%eax
f0103ce9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103cec:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0103cf1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0103cf4:	72 17                	jb     f0103d0d <get_page_table+0x132>
f0103cf6:	ff 75 e8             	pushl  -0x18(%ebp)
f0103cf9:	68 fc f2 11 f0       	push   $0xf011f2fc
f0103cfe:	68 0b 02 00 00       	push   $0x20b
f0103d03:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0103d08:	e8 a2 c4 ff ff       	call   f01001af <_panic>
f0103d0d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d10:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d15:	89 c2                	mov    %eax,%edx
f0103d17:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d1a:	89 10                	mov    %edx,(%eax)
		 }

		 return TABLE_IN_MEMORY;
f0103d1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0103d21:	eb 0e                	jmp    f0103d31 <get_page_table+0x156>
	 }
	 else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	 {
		 //		cprintf("gpt .2\n");
		 *ptr_page_table = 0;
f0103d23:	8b 45 10             	mov    0x10(%ebp),%eax
f0103d26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		 return TABLE_NOT_EXIST;
f0103d2c:	b8 01 00 00 00       	mov    $0x1,%eax
	 }
 }
f0103d31:	c9                   	leave  
f0103d32:	c3                   	ret    

f0103d33 <create_page_table>:

 void* create_page_table(uint32* ptr_page_directory, const uint32 virtual_address)
 {
f0103d33:	55                   	push   %ebp
f0103d34:	89 e5                	mov    %esp,%ebp
f0103d36:	53                   	push   %ebx
f0103d37:	83 ec 14             	sub    $0x14,%esp
	 //CREATE_PAGE_TABLE IS IMPLEMENTED FOR 23'PRO
	 uint32* ptr_page_table = kmalloc(PAGE_SIZE);
f0103d3a:	83 ec 0c             	sub    $0xc,%esp
f0103d3d:	68 00 10 00 00       	push   $0x1000
f0103d42:	e8 4e 91 00 00       	call   f010ce95 <kmalloc>
f0103d47:	83 c4 10             	add    $0x10,%esp
f0103d4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 if (ptr_page_table == NULL)
f0103d4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d51:	75 17                	jne    f0103d6a <create_page_table+0x37>
	 {
		 panic("NOT ENOUGH KERNEL HEAP SPACE");
f0103d53:	83 ec 04             	sub    $0x4,%esp
f0103d56:	68 79 f3 11 f0       	push   $0xf011f379
f0103d5b:	68 1e 02 00 00       	push   $0x21e
f0103d60:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0103d65:	e8 45 c4 ff ff       	call   f01001af <_panic>
	 }
	 ptr_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f0103d6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d6d:	c1 e8 16             	shr    $0x16,%eax
f0103d70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103d77:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d7a:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f0103d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d80:	83 ec 0c             	sub    $0xc,%esp
f0103d83:	50                   	push   %eax
f0103d84:	e8 c9 92 00 00       	call   f010d052 <kheap_physical_address>
f0103d89:	83 c4 10             	add    $0x10,%esp
f0103d8c:	83 c8 07             	or     $0x7,%eax
f0103d8f:	89 03                	mov    %eax,(%ebx)
		 kheap_physical_address((unsigned int)ptr_page_table)
		 , PERM_PRESENT | PERM_USER | PERM_WRITEABLE);

	 //================
	 memset(ptr_page_table, 0, PAGE_SIZE);
f0103d91:	83 ec 04             	sub    $0x4,%esp
f0103d94:	68 00 10 00 00       	push   $0x1000
f0103d99:	6a 00                	push   $0x0
f0103d9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0103d9e:	e8 c8 91 01 00       	call   f011cf6b <memset>
f0103da3:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0103da6:	0f 20 d8             	mov    %cr3,%eax
f0103da9:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0103dac:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103daf:	0f 22 d8             	mov    %eax,%cr3
	 tlbflush();


	 return ptr_page_table;
f0103db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
f0103db5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103db8:	c9                   	leave  
f0103db9:	c3                   	ret    

f0103dba <__static_cpt>:



 void __static_cpt(uint32* ptr_page_directory, const uint32 virtual_address, uint32** ptr_page_table)
 {
f0103dba:	55                   	push   %ebp
f0103dbb:	89 e5                	mov    %esp,%ebp
f0103dbd:	83 ec 08             	sub    $0x8,%esp
	 panic("this function is not required...!!");
f0103dc0:	83 ec 04             	sub    $0x4,%esp
f0103dc3:	68 98 f3 11 f0       	push   $0xf011f398
f0103dc8:	68 30 02 00 00       	push   $0x230
f0103dcd:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0103dd2:	e8 d8 c3 ff ff       	call   f01001af <_panic>

f0103dd7 <map_frame>:
 //   0 on success
 //
 // Hint: implement using get_page_table() and unmap_frame().
 //
 int map_frame(uint32* ptr_page_directory, struct Frame_Info* ptr_frame_info, void* virtual_address, int perm)
 {
f0103dd7:	55                   	push   %ebp
f0103dd8:	89 e5                	mov    %esp,%ebp
f0103dda:	83 ec 18             	sub    $0x18,%esp
	 // Fill this function in
	 uint32 physical_address = to_physical_address(ptr_frame_info);
f0103ddd:	ff 75 0c             	pushl  0xc(%ebp)
f0103de0:	e8 78 f4 ff ff       	call   f010325d <to_physical_address>
f0103de5:	83 c4 04             	add    $0x4,%esp
f0103de8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 uint32* ptr_page_table;
	 if (get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0103deb:	83 ec 04             	sub    $0x4,%esp
f0103dee:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0103df1:	50                   	push   %eax
f0103df2:	ff 75 10             	pushl  0x10(%ebp)
f0103df5:	ff 75 08             	pushl  0x8(%ebp)
f0103df8:	e8 de fd ff ff       	call   f0103bdb <get_page_table>
f0103dfd:	83 c4 10             	add    $0x10,%esp
f0103e00:	83 f8 01             	cmp    $0x1,%eax
f0103e03:	75 15                	jne    f0103e1a <map_frame+0x43>
		 //page_directory_entry = ptr_page_directory[PDX(virtual_address)];
		 //ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
		 =============================================================================================*/
		 if (USE_KHEAP)
		 {
			 ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0103e05:	8b 45 10             	mov    0x10(%ebp),%eax
f0103e08:	83 ec 08             	sub    $0x8,%esp
f0103e0b:	50                   	push   %eax
f0103e0c:	ff 75 08             	pushl  0x8(%ebp)
f0103e0f:	e8 1f ff ff ff       	call   f0103d33 <create_page_table>
f0103e14:	83 c4 10             	add    $0x10,%esp
f0103e17:	89 45 ec             	mov    %eax,-0x14(%ebp)
			 __static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		 }

	 }

	 uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0103e1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e1d:	8b 55 10             	mov    0x10(%ebp),%edx
f0103e20:	c1 ea 0c             	shr    $0xc,%edx
f0103e23:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e29:	c1 e2 02             	shl    $0x2,%edx
f0103e2c:	01 d0                	add    %edx,%eax
f0103e2e:	8b 00                	mov    (%eax),%eax
f0103e30:	89 45 f0             	mov    %eax,-0x10(%ebp)

	 }*/

	 /*NEW'15 CORRECT SOLUTION*/
	 //If already mapped
	 if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0103e33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e36:	83 e0 01             	and    $0x1,%eax
f0103e39:	85 c0                	test   %eax,%eax
f0103e3b:	74 25                	je     f0103e62 <map_frame+0x8b>
	 {
		 //on this pa, then do nothing
		 if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0103e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e40:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103e45:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103e48:	75 07                	jne    f0103e51 <map_frame+0x7a>
			 return 0;
f0103e4a:	b8 00 00 00 00       	mov    $0x0,%eax
f0103e4f:	eb 43                	jmp    f0103e94 <map_frame+0xbd>
		 //on another pa, then unmap it
		 else
			 unmap_frame(ptr_page_directory, virtual_address);
f0103e51:	83 ec 08             	sub    $0x8,%esp
f0103e54:	ff 75 10             	pushl  0x10(%ebp)
f0103e57:	ff 75 08             	pushl  0x8(%ebp)
f0103e5a:	e8 a7 00 00 00       	call   f0103f06 <unmap_frame>
f0103e5f:	83 c4 10             	add    $0x10,%esp
	 }
	 ptr_frame_info->references++;
f0103e62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103e65:	8b 40 08             	mov    0x8(%eax),%eax
f0103e68:	40                   	inc    %eax
f0103e69:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e6c:	66 89 42 08          	mov    %ax,0x8(%edx)
	 ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT);
f0103e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103e73:	8b 55 10             	mov    0x10(%ebp),%edx
f0103e76:	c1 ea 0c             	shr    $0xc,%edx
f0103e79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103e7f:	c1 e2 02             	shl    $0x2,%edx
f0103e82:	01 c2                	add    %eax,%edx
f0103e84:	8b 45 14             	mov    0x14(%ebp),%eax
f0103e87:	0b 45 f4             	or     -0xc(%ebp),%eax
f0103e8a:	83 c8 01             	or     $0x1,%eax
f0103e8d:	89 02                	mov    %eax,(%edx)

	 return 0;
f0103e8f:	b8 00 00 00 00       	mov    $0x0,%eax
 }
f0103e94:	c9                   	leave  
f0103e95:	c3                   	ret    

f0103e96 <get_frame_info>:
 // Return 0 if there is no frame mapped at virtual_address.
 //
 // Hint: implement using get_page_table() and get_frame_info().
 //
 struct Frame_Info* get_frame_info(uint32* ptr_page_directory, void* virtual_address, uint32** ptr_page_table)
 {
f0103e96:	55                   	push   %ebp
f0103e97:	89 e5                	mov    %esp,%ebp
f0103e99:	83 ec 18             	sub    $0x18,%esp
	 // Fill this function in
	 //cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	 uint32 ret = get_page_table(ptr_page_directory, virtual_address, ptr_page_table);
f0103e9c:	83 ec 04             	sub    $0x4,%esp
f0103e9f:	ff 75 10             	pushl  0x10(%ebp)
f0103ea2:	ff 75 0c             	pushl  0xc(%ebp)
f0103ea5:	ff 75 08             	pushl  0x8(%ebp)
f0103ea8:	e8 2e fd ff ff       	call   f0103bdb <get_page_table>
f0103ead:	83 c4 10             	add    $0x10,%esp
f0103eb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 //cprintf(".gfi .15\n");
	 if ((*ptr_page_table) != 0)
f0103eb3:	8b 45 10             	mov    0x10(%ebp),%eax
f0103eb6:	8b 00                	mov    (%eax),%eax
f0103eb8:	85 c0                	test   %eax,%eax
f0103eba:	74 43                	je     f0103eff <get_frame_info+0x69>
	 {
		 uint32 index_page_table = PTX(virtual_address);
f0103ebc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ebf:	c1 e8 0c             	shr    $0xc,%eax
f0103ec2:	25 ff 03 00 00       	and    $0x3ff,%eax
f0103ec7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 //cprintf(".gfi .2\n");
		 uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0103eca:	8b 45 10             	mov    0x10(%ebp),%eax
f0103ecd:	8b 00                	mov    (%eax),%eax
f0103ecf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103ed2:	c1 e2 02             	shl    $0x2,%edx
f0103ed5:	01 d0                	add    %edx,%eax
f0103ed7:	8b 00                	mov    (%eax),%eax
f0103ed9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		 if (page_table_entry != 0)
f0103edc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0103ee0:	74 16                	je     f0103ef8 <get_frame_info+0x62>
		 {
			 //cprintf(".gfi .3\n");
			 return to_frame_info(EXTRACT_ADDRESS(page_table_entry));
f0103ee2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103ee5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103eea:	83 ec 0c             	sub    $0xc,%esp
f0103eed:	50                   	push   %eax
f0103eee:	e8 7d f3 ff ff       	call   f0103270 <to_frame_info>
f0103ef3:	83 c4 10             	add    $0x10,%esp
f0103ef6:	eb 0c                	jmp    f0103f04 <get_frame_info+0x6e>
		 }
		 return 0;
f0103ef8:	b8 00 00 00 00       	mov    $0x0,%eax
f0103efd:	eb 05                	jmp    f0103f04 <get_frame_info+0x6e>
	 }
	 return 0;
f0103eff:	b8 00 00 00 00       	mov    $0x0,%eax
 }
f0103f04:	c9                   	leave  
f0103f05:	c3                   	ret    

f0103f06 <unmap_frame>:
 //
 // Hint: implement using get_frame_info(),
 // 	tlb_invalidate(), and decrement_references().
 //
 void unmap_frame(uint32* ptr_page_directory, void* virtual_address)
 {
f0103f06:	55                   	push   %ebp
f0103f07:	89 e5                	mov    %esp,%ebp
f0103f09:	83 ec 18             	sub    $0x18,%esp
	 // Fill this function in
	 uint32* ptr_page_table;
	 struct Frame_Info* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0103f0c:	83 ec 04             	sub    $0x4,%esp
f0103f0f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103f12:	50                   	push   %eax
f0103f13:	ff 75 0c             	pushl  0xc(%ebp)
f0103f16:	ff 75 08             	pushl  0x8(%ebp)
f0103f19:	e8 78 ff ff ff       	call   f0103e96 <get_frame_info>
f0103f1e:	83 c4 10             	add    $0x10,%esp
f0103f21:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 if (ptr_frame_info != 0)
f0103f24:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f28:	74 60                	je     f0103f8a <unmap_frame+0x84>
	 {
		 if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0103f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f2d:	8a 40 14             	mov    0x14(%eax),%al
f0103f30:	84 c0                	test   %al,%al
f0103f32:	74 1d                	je     f0103f51 <unmap_frame+0x4b>
f0103f34:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103f37:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103f3c:	77 13                	ja     f0103f51 <unmap_frame+0x4b>
			 cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address);
f0103f3e:	83 ec 08             	sub    $0x8,%esp
f0103f41:	ff 75 0c             	pushl  0xc(%ebp)
f0103f44:	68 bc f3 11 f0       	push   $0xf011f3bc
f0103f49:	e8 b6 32 00 00       	call   f0107204 <cprintf>
f0103f4e:	83 c4 10             	add    $0x10,%esp
		 decrement_references(ptr_frame_info);
f0103f51:	83 ec 0c             	sub    $0xc,%esp
f0103f54:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f57:	e8 4f fc ff ff       	call   f0103bab <decrement_references>
f0103f5c:	83 c4 10             	add    $0x10,%esp
		 ptr_page_table[PTX(virtual_address)] = 0;
f0103f5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f62:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f65:	c1 ea 0c             	shr    $0xc,%edx
f0103f68:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103f6e:	c1 e2 02             	shl    $0x2,%edx
f0103f71:	01 d0                	add    %edx,%eax
f0103f73:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		 tlb_invalidate(ptr_page_directory, virtual_address);
f0103f79:	83 ec 08             	sub    $0x8,%esp
f0103f7c:	ff 75 0c             	pushl  0xc(%ebp)
f0103f7f:	ff 75 08             	pushl  0x8(%ebp)
f0103f82:	e8 51 f0 ff ff       	call   f0102fd8 <tlb_invalidate>
f0103f87:	83 c4 10             	add    $0x10,%esp
	 }
 }
f0103f8a:	90                   	nop
f0103f8b:	c9                   	leave  
f0103f8c:	c3                   	ret    

f0103f8d <loadtime_map_frame>:
  // RETURNS:
  //   0 on success
  //
  //
 int loadtime_map_frame(uint32* ptr_page_directory, struct Frame_Info* ptr_frame_info, void* virtual_address, int perm)
 {
f0103f8d:	55                   	push   %ebp
f0103f8e:	89 e5                	mov    %esp,%ebp
f0103f90:	83 ec 28             	sub    $0x28,%esp
	 uint32 physical_address = to_physical_address(ptr_frame_info);
f0103f93:	ff 75 0c             	pushl  0xc(%ebp)
f0103f96:	e8 c2 f2 ff ff       	call   f010325d <to_physical_address>
f0103f9b:	83 c4 04             	add    $0x4,%esp
f0103f9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 uint32* ptr_page_table;

	 uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0103fa1:	8b 45 10             	mov    0x10(%ebp),%eax
f0103fa4:	c1 e8 16             	shr    $0x16,%eax
f0103fa7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103fae:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb1:	01 d0                	add    %edx,%eax
f0103fb3:	8b 00                	mov    (%eax),%eax
f0103fb5:	89 45 f0             	mov    %eax,-0x10(%ebp)

	 if (USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0103fb8:	8b 45 10             	mov    0x10(%ebp),%eax
f0103fbb:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f0103fc0:	77 19                	ja     f0103fdb <loadtime_map_frame+0x4e>
	 {
		 ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry));
f0103fc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fc5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103fca:	83 ec 0c             	sub    $0xc,%esp
f0103fcd:	50                   	push   %eax
f0103fce:	e8 1f 90 00 00       	call   f010cff2 <kheap_virtual_address>
f0103fd3:	83 c4 10             	add    $0x10,%esp
f0103fd6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103fd9:	eb 40                	jmp    f010401b <loadtime_map_frame+0x8e>
	 }
	 else
	 {
		 ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry));
f0103fdb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103fde:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103fe3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103fe6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103fe9:	c1 e8 0c             	shr    $0xc,%eax
f0103fec:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0103fef:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0103ff4:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0103ff7:	72 17                	jb     f0104010 <loadtime_map_frame+0x83>
f0103ff9:	ff 75 ec             	pushl  -0x14(%ebp)
f0103ffc:	68 fc f2 11 f0       	push   $0xf011f2fc
f0104001:	68 dc 02 00 00       	push   $0x2dc
f0104006:	68 d5 f2 11 f0       	push   $0xf011f2d5
f010400b:	e8 9f c1 ff ff       	call   f01001af <_panic>
f0104010:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104013:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104018:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	 }

	 //if page table not exist, create it in memory and link it with the directory
	 if (page_directory_entry == 0)
f010401b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010401f:	75 15                	jne    f0104036 <loadtime_map_frame+0xa9>
	 {
		 if (USE_KHEAP)
		 {
			 ptr_page_table = create_page_table(ptr_page_directory, (uint32)virtual_address);
f0104021:	8b 45 10             	mov    0x10(%ebp),%eax
f0104024:	83 ec 08             	sub    $0x8,%esp
f0104027:	50                   	push   %eax
f0104028:	ff 75 08             	pushl  0x8(%ebp)
f010402b:	e8 03 fd ff ff       	call   f0103d33 <create_page_table>
f0104030:	83 c4 10             	add    $0x10,%esp
f0104033:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		 {
			 __static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
		 }
	 }

	 ptr_frame_info->references++;
f0104036:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104039:	8b 40 08             	mov    0x8(%eax),%eax
f010403c:	40                   	inc    %eax
f010403d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104040:	66 89 42 08          	mov    %ax,0x8(%edx)
	 ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT);
f0104044:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104047:	8b 55 10             	mov    0x10(%ebp),%edx
f010404a:	c1 ea 0c             	shr    $0xc,%edx
f010404d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104053:	c1 e2 02             	shl    $0x2,%edx
f0104056:	01 c2                	add    %eax,%edx
f0104058:	8b 45 14             	mov    0x14(%ebp),%eax
f010405b:	0b 45 f4             	or     -0xc(%ebp),%eax
f010405e:	83 c8 01             	or     $0x1,%eax
f0104061:	89 02                	mov    %eax,(%edx)

	 return 0;
f0104063:	b8 00 00 00 00       	mov    $0x0,%eax
 }
f0104068:	c9                   	leave  
f0104069:	c3                   	ret    

f010406a <allocateMem>:
 //======================================================
 /// functions used for malloc() and freeHeap()
 //======================================================

// // [1] allocateMem
void allocateMem(struct Env* e, uint32 va, uint32 szInBytes) {
f010406a:	55                   	push   %ebp
f010406b:	89 e5                	mov    %esp,%ebp
f010406d:	83 ec 18             	sub    $0x18,%esp
      int szInPages = szInBytes / PAGE_SIZE;
f0104070:	8b 45 10             	mov    0x10(%ebp),%eax
f0104073:	c1 e8 0c             	shr    $0xc,%eax
f0104076:	89 45 f0             	mov    %eax,-0x10(%ebp)

      // input validfation
      if (va < USER_HEAP_START || va + szInBytes > USER_HEAP_MAX) { // This will never happen bs mashy
f0104079:	8b 45 0c             	mov    0xc(%ebp),%eax
f010407c:	85 c0                	test   %eax,%eax
f010407e:	79 0f                	jns    f010408f <allocateMem+0x25>
f0104080:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104083:	8b 45 10             	mov    0x10(%ebp),%eax
f0104086:	01 d0                	add    %edx,%eax
f0104088:	3d 00 00 00 a0       	cmp    $0xa0000000,%eax
f010408d:	76 17                	jbe    f01040a6 <allocateMem+0x3c>
          panic("allocateMem: invalid virtual address range");
f010408f:	83 ec 04             	sub    $0x4,%esp
f0104092:	68 e0 f3 11 f0       	push   $0xf011f3e0
f0104097:	68 02 03 00 00       	push   $0x302
f010409c:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01040a1:	e8 09 c1 ff ff       	call   f01001af <_panic>
      }

      for (int i = 0; i < szInPages; ++i) {
f01040a6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01040ad:	eb 3d                	jmp    f01040ec <allocateMem+0x82>
          // allocate page in pf
          int allocationStatus = pf_add_empty_env_page(e, va, 0);
f01040af:	83 ec 04             	sub    $0x4,%esp
f01040b2:	6a 00                	push   $0x0
f01040b4:	ff 75 0c             	pushl  0xc(%ebp)
f01040b7:	ff 75 08             	pushl  0x8(%ebp)
f01040ba:	e8 aa 7a 00 00       	call   f010bb69 <pf_add_empty_env_page>
f01040bf:	83 c4 10             	add    $0x10,%esp
f01040c2:	89 45 ec             	mov    %eax,-0x14(%ebp)
          if (allocationStatus != 0) {
f01040c5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01040c9:	74 17                	je     f01040e2 <allocateMem+0x78>
              panic("allocateMem: failed to allocate page in page file");
f01040cb:	83 ec 04             	sub    $0x4,%esp
f01040ce:	68 0c f4 11 f0       	push   $0xf011f40c
f01040d3:	68 09 03 00 00       	push   $0x309
f01040d8:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01040dd:	e8 cd c0 ff ff       	call   f01001af <_panic>
          }
          va += PAGE_SIZE;
f01040e2:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
      // input validfation
      if (va < USER_HEAP_START || va + szInBytes > USER_HEAP_MAX) { // This will never happen bs mashy
          panic("allocateMem: invalid virtual address range");
      }

      for (int i = 0; i < szInPages; ++i) {
f01040e9:	ff 45 f4             	incl   -0xc(%ebp)
f01040ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01040ef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01040f2:	7c bb                	jl     f01040af <allocateMem+0x45>
          if (allocationStatus != 0) {
              panic("allocateMem: failed to allocate page in page file");
          }
          va += PAGE_SIZE;
      }
 }
f01040f4:	90                   	nop
f01040f5:	c9                   	leave  
f01040f6:	c3                   	ret    

f01040f7 <freeMem>:


 // [2] freeMem

 void freeMem(struct Env* e, uint32 virtual_address, uint32 size)
 {
f01040f7:	55                   	push   %ebp
f01040f8:	89 e5                	mov    %esp,%ebp
f01040fa:	83 ec 08             	sub    $0x8,%esp
	 panic("This function is not required");
f01040fd:	83 ec 04             	sub    $0x4,%esp
f0104100:	68 3e f4 11 f0       	push   $0xf011f43e
f0104105:	68 14 03 00 00       	push   $0x314
f010410a:	68 d5 f2 11 f0       	push   $0xf011f2d5
f010410f:	e8 9b c0 ff ff       	call   f01001af <_panic>

f0104114 <__freeMem_with_buffering>:
 }

void __freeMem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f0104114:	55                   	push   %ebp
f0104115:	89 e5                	mov    %esp,%ebp
f0104117:	83 ec 48             	sub    $0x48,%esp
    uint32 va = ROUNDDOWN(virtual_address, PAGE_SIZE);
f010411a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010411d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0104120:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104123:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104128:	89 45 d8             	mov    %eax,-0x28(%ebp)
    uint32 end_va = ROUNDUP(virtual_address + size, PAGE_SIZE);
f010412b:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0104132:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104135:	8b 45 10             	mov    0x10(%ebp),%eax
f0104138:	01 c2                	add    %eax,%edx
f010413a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010413d:	01 d0                	add    %edx,%eax
f010413f:	48                   	dec    %eax
f0104140:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0104143:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0104146:	ba 00 00 00 00       	mov    $0x0,%edx
f010414b:	f7 75 d4             	divl   -0x2c(%ebp)
f010414e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0104151:	29 d0                	sub    %edx,%eax
f0104153:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Step 2: Loop again for memory and working set cleanup
    for (uint32 curr_va = va; curr_va < end_va; curr_va += PAGE_SIZE)
f0104156:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104159:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010415c:	e9 63 01 00 00       	jmp    f01042c4 <__freeMem_with_buffering+0x1b0>
    {
        uint32* ptr_page_table = NULL;
f0104161:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
        struct Frame_Info* frame_info = get_frame_info(e->env_page_directory, (void*)curr_va, &ptr_page_table);
f0104168:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010416b:	8b 45 08             	mov    0x8(%ebp),%eax
f010416e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104171:	83 ec 04             	sub    $0x4,%esp
f0104174:	8d 4d bc             	lea    -0x44(%ebp),%ecx
f0104177:	51                   	push   %ecx
f0104178:	52                   	push   %edx
f0104179:	50                   	push   %eax
f010417a:	e8 17 fd ff ff       	call   f0103e96 <get_frame_info>
f010417f:	83 c4 10             	add    $0x10,%esp
f0104182:	89 45 c8             	mov    %eax,-0x38(%ebp)

        if (frame_info != NULL)
f0104185:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0104189:	0f 84 2e 01 00 00    	je     f01042bd <__freeMem_with_buffering+0x1a9>
        {
            // Step 2.1: If the page is buffered
            if (frame_info->isBuffered)
f010418f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104192:	8a 40 14             	mov    0x14(%eax),%al
f0104195:	84 c0                	test   %al,%al
f0104197:	0f 84 0a 01 00 00    	je     f01042a7 <__freeMem_with_buffering+0x193>
            {
                if ((ptr_page_table[PTX(curr_va)] & PERM_MODIFIED) != 0)
f010419d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01041a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01041a3:	c1 ea 0c             	shr    $0xc,%edx
f01041a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041ac:	c1 e2 02             	shl    $0x2,%edx
f01041af:	01 d0                	add    %edx,%eax
f01041b1:	8b 00                	mov    (%eax),%eax
f01041b3:	83 e0 40             	and    $0x40,%eax
f01041b6:	85 c0                	test   %eax,%eax
f01041b8:	74 67                	je     f0104221 <__freeMem_with_buffering+0x10d>
                {
                    LIST_REMOVE(&modified_frame_list, frame_info);
f01041ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01041bd:	8b 00                	mov    (%eax),%eax
f01041bf:	85 c0                	test   %eax,%eax
f01041c1:	74 10                	je     f01041d3 <__freeMem_with_buffering+0xbf>
f01041c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01041c6:	8b 00                	mov    (%eax),%eax
f01041c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01041cb:	8b 52 04             	mov    0x4(%edx),%edx
f01041ce:	89 50 04             	mov    %edx,0x4(%eax)
f01041d1:	eb 0b                	jmp    f01041de <__freeMem_with_buffering+0xca>
f01041d3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01041d6:	8b 40 04             	mov    0x4(%eax),%eax
f01041d9:	a3 04 0d 80 f0       	mov    %eax,0xf0800d04
f01041de:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01041e1:	8b 40 04             	mov    0x4(%eax),%eax
f01041e4:	85 c0                	test   %eax,%eax
f01041e6:	74 0f                	je     f01041f7 <__freeMem_with_buffering+0xe3>
f01041e8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01041eb:	8b 40 04             	mov    0x4(%eax),%eax
f01041ee:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01041f1:	8b 12                	mov    (%edx),%edx
f01041f3:	89 10                	mov    %edx,(%eax)
f01041f5:	eb 0a                	jmp    f0104201 <__freeMem_with_buffering+0xed>
f01041f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01041fa:	8b 00                	mov    (%eax),%eax
f01041fc:	a3 00 0d 80 f0       	mov    %eax,0xf0800d00
f0104201:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010420a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010420d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104214:	a1 0c 0d 80 f0       	mov    0xf0800d0c,%eax
f0104219:	48                   	dec    %eax
f010421a:	a3 0c 0d 80 f0       	mov    %eax,0xf0800d0c
f010421f:	eb 65                	jmp    f0104286 <__freeMem_with_buffering+0x172>
                }
                else
                {
                    LIST_REMOVE(&free_frame_list, frame_info);
f0104221:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104224:	8b 00                	mov    (%eax),%eax
f0104226:	85 c0                	test   %eax,%eax
f0104228:	74 10                	je     f010423a <__freeMem_with_buffering+0x126>
f010422a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010422d:	8b 00                	mov    (%eax),%eax
f010422f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0104232:	8b 52 04             	mov    0x4(%edx),%edx
f0104235:	89 50 04             	mov    %edx,0x4(%eax)
f0104238:	eb 0b                	jmp    f0104245 <__freeMem_with_buffering+0x131>
f010423a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010423d:	8b 40 04             	mov    0x4(%eax),%eax
f0104240:	a3 18 0d 80 f0       	mov    %eax,0xf0800d18
f0104245:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104248:	8b 40 04             	mov    0x4(%eax),%eax
f010424b:	85 c0                	test   %eax,%eax
f010424d:	74 0f                	je     f010425e <__freeMem_with_buffering+0x14a>
f010424f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104252:	8b 40 04             	mov    0x4(%eax),%eax
f0104255:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0104258:	8b 12                	mov    (%edx),%edx
f010425a:	89 10                	mov    %edx,(%eax)
f010425c:	eb 0a                	jmp    f0104268 <__freeMem_with_buffering+0x154>
f010425e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104261:	8b 00                	mov    (%eax),%eax
f0104263:	a3 14 0d 80 f0       	mov    %eax,0xf0800d14
f0104268:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010426b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104271:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104274:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010427b:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f0104280:	48                   	dec    %eax
f0104281:	a3 20 0d 80 f0       	mov    %eax,0xf0800d20
                }

                frame_info->isBuffered = 0;
f0104286:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104289:	c6 40 14 00          	movb   $0x0,0x14(%eax)
                frame_info->environment = NULL;
f010428d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0104290:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

                // Add to head of free frame list
                free_frame(frame_info);
f0104297:	83 ec 0c             	sub    $0xc,%esp
f010429a:	ff 75 c8             	pushl  -0x38(%ebp)
f010429d:	e8 ac f8 ff ff       	call   f0103b4e <free_frame>
f01042a2:	83 c4 10             	add    $0x10,%esp
f01042a5:	eb 16                	jmp    f01042bd <__freeMem_with_buffering+0x1a9>
            }
            else
            {
                // Page is in working set: unmap it
                unmap_frame(e->env_page_directory, (void*)curr_va);
f01042a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01042ad:	8b 40 5c             	mov    0x5c(%eax),%eax
f01042b0:	83 ec 08             	sub    $0x8,%esp
f01042b3:	52                   	push   %edx
f01042b4:	50                   	push   %eax
f01042b5:	e8 4c fc ff ff       	call   f0103f06 <unmap_frame>
f01042ba:	83 c4 10             	add    $0x10,%esp
{
    uint32 va = ROUNDDOWN(virtual_address, PAGE_SIZE);
    uint32 end_va = ROUNDUP(virtual_address + size, PAGE_SIZE);

    // Step 2: Loop again for memory and working set cleanup
    for (uint32 curr_va = va; curr_va < end_va; curr_va += PAGE_SIZE)
f01042bd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01042c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01042c7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01042ca:	0f 82 91 fe ff ff    	jb     f0104161 <__freeMem_with_buffering+0x4d>
            }
        }
    }

    // Step 3: Clear working set entries
    for (int i = 0; i < e->page_WS_max_size; i++)
f01042d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01042d7:	eb 5f                	jmp    f0104338 <__freeMem_with_buffering+0x224>
        {
            if (!env_page_ws_is_entry_empty(e, i))
f01042d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042dc:	83 ec 08             	sub    $0x8,%esp
f01042df:	50                   	push   %eax
f01042e0:	ff 75 08             	pushl  0x8(%ebp)
f01042e3:	e8 44 05 00 00       	call   f010482c <env_page_ws_is_entry_empty>
f01042e8:	83 c4 10             	add    $0x10,%esp
f01042eb:	85 c0                	test   %eax,%eax
f01042ed:	75 46                	jne    f0104335 <__freeMem_with_buffering+0x221>
            {
                uint32 ws_va = ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address, PAGE_SIZE);
f01042ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01042f2:	8b 48 78             	mov    0x78(%eax),%ecx
f01042f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01042f8:	89 d0                	mov    %edx,%eax
f01042fa:	01 c0                	add    %eax,%eax
f01042fc:	01 d0                	add    %edx,%eax
f01042fe:	c1 e0 02             	shl    $0x2,%eax
f0104301:	01 c8                	add    %ecx,%eax
f0104303:	8b 00                	mov    (%eax),%eax
f0104305:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0104308:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010430b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104310:	89 45 c0             	mov    %eax,-0x40(%ebp)
                if (ws_va >= va && ws_va < end_va)
f0104313:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0104316:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0104319:	72 1a                	jb     f0104335 <__freeMem_with_buffering+0x221>
f010431b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010431e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0104321:	73 12                	jae    f0104335 <__freeMem_with_buffering+0x221>
                {
                    env_page_ws_clear_entry(e, i);
f0104323:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104326:	83 ec 08             	sub    $0x8,%esp
f0104329:	50                   	push   %eax
f010432a:	ff 75 08             	pushl  0x8(%ebp)
f010432d:	e8 f0 03 00 00       	call   f0104722 <env_page_ws_clear_entry>
f0104332:	83 c4 10             	add    $0x10,%esp
            }
        }
    }

    // Step 3: Clear working set entries
    for (int i = 0; i < e->page_WS_max_size; i++)
f0104335:	ff 45 f0             	incl   -0x10(%ebp)
f0104338:	8b 45 08             	mov    0x8(%ebp),%eax
f010433b:	8b 50 74             	mov    0x74(%eax),%edx
f010433e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104341:	39 c2                	cmp    %eax,%edx
f0104343:	77 94                	ja     f01042d9 <__freeMem_with_buffering+0x1c5>
        }



    // Step 4: Remove empty page tables
    for (uint32 curr_va = va; curr_va < end_va; curr_va += PAGE_SIZE)
f0104345:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104348:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010434b:	e9 92 00 00 00       	jmp    f01043e2 <__freeMem_with_buffering+0x2ce>
    {
        uint32* ptr_page_table = NULL;
f0104350:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
        if (get_page_table(e->env_page_directory, (void*)curr_va, &ptr_page_table) != TABLE_NOT_EXIST)
f0104357:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010435a:	8b 45 08             	mov    0x8(%ebp),%eax
f010435d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104360:	83 ec 04             	sub    $0x4,%esp
f0104363:	8d 4d b8             	lea    -0x48(%ebp),%ecx
f0104366:	51                   	push   %ecx
f0104367:	52                   	push   %edx
f0104368:	50                   	push   %eax
f0104369:	e8 6d f8 ff ff       	call   f0103bdb <get_page_table>
f010436e:	83 c4 10             	add    $0x10,%esp
f0104371:	83 f8 01             	cmp    $0x1,%eax
f0104374:	74 65                	je     f01043db <__freeMem_with_buffering+0x2c7>
        {
            // Check if the table is empty
            int is_empty = 1;
f0104376:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
            for (int i = 0; i < 1024; i++)
f010437d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0104384:	eb 20                	jmp    f01043a6 <__freeMem_with_buffering+0x292>
            {
                if (ptr_page_table[i] & PERM_PRESENT)
f0104386:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0104389:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010438c:	c1 e2 02             	shl    $0x2,%edx
f010438f:	01 d0                	add    %edx,%eax
f0104391:	8b 00                	mov    (%eax),%eax
f0104393:	83 e0 01             	and    $0x1,%eax
f0104396:	85 c0                	test   %eax,%eax
f0104398:	74 09                	je     f01043a3 <__freeMem_with_buffering+0x28f>
                {
                    is_empty = 0;
f010439a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
                    break;
f01043a1:	eb 0c                	jmp    f01043af <__freeMem_with_buffering+0x29b>
        uint32* ptr_page_table = NULL;
        if (get_page_table(e->env_page_directory, (void*)curr_va, &ptr_page_table) != TABLE_NOT_EXIST)
        {
            // Check if the table is empty
            int is_empty = 1;
            for (int i = 0; i < 1024; i++)
f01043a3:	ff 45 e4             	incl   -0x1c(%ebp)
f01043a6:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f01043ad:	7e d7                	jle    f0104386 <__freeMem_with_buffering+0x272>
                    is_empty = 0;
                    break;
                }
            }

            if (is_empty)
f01043af:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01043b3:	74 26                	je     f01043db <__freeMem_with_buffering+0x2c7>
            {
                kfree((void*)ptr_page_table);
f01043b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01043b8:	83 ec 0c             	sub    $0xc,%esp
f01043bb:	50                   	push   %eax
f01043bc:	e8 1f 8b 00 00       	call   f010cee0 <kfree>
f01043c1:	83 c4 10             	add    $0x10,%esp
                e->env_page_directory[PDX(curr_va)] = 0;
f01043c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01043ca:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01043cd:	c1 ea 16             	shr    $0x16,%edx
f01043d0:	c1 e2 02             	shl    $0x2,%edx
f01043d3:	01 d0                	add    %edx,%eax
f01043d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }



    // Step 4: Remove empty page tables
    for (uint32 curr_va = va; curr_va < end_va; curr_va += PAGE_SIZE)
f01043db:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f01043e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01043e5:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01043e8:	0f 82 62 ff ff ff    	jb     f0104350 <__freeMem_with_buffering+0x23c>
            }
        }
    }

    // Step 4: Remove all pages in the range from the page file
    for (uint32 curr_va = va; curr_va < end_va; curr_va += PAGE_SIZE)
f01043ee:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01043f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01043f4:	eb 18                	jmp    f010440e <__freeMem_with_buffering+0x2fa>
    {
        pf_remove_env_page(e, curr_va);
f01043f6:	83 ec 08             	sub    $0x8,%esp
f01043f9:	ff 75 e0             	pushl  -0x20(%ebp)
f01043fc:	ff 75 08             	pushl  0x8(%ebp)
f01043ff:	e8 a4 7a 00 00       	call   f010bea8 <pf_remove_env_page>
f0104404:	83 c4 10             	add    $0x10,%esp
            }
        }
    }

    // Step 4: Remove all pages in the range from the page file
    for (uint32 curr_va = va; curr_va < end_va; curr_va += PAGE_SIZE)
f0104407:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f010440e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0104411:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0104414:	72 e0                	jb     f01043f6 <__freeMem_with_buffering+0x2e2>
    {
        pf_remove_env_page(e, curr_va);
    }

}
f0104416:	90                   	nop
f0104417:	c9                   	leave  
f0104418:	c3                   	ret    

f0104419 <moveMem>:

 //================= [BONUS] =====================
 // [3] moveMem

 void moveMem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
 {
f0104419:	55                   	push   %ebp
f010441a:	89 e5                	mov    %esp,%ebp
f010441c:	83 ec 08             	sub    $0x8,%esp
	 //your code is here, remove the panic and write your code
	 panic("moveMem() is not required ...!!");
f010441f:	83 ec 04             	sub    $0x4,%esp
f0104422:	68 5c f4 11 f0       	push   $0xf011f45c
f0104427:	68 75 03 00 00       	push   $0x375
f010442c:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104431:	e8 79 bd ff ff       	call   f01001af <_panic>

f0104436 <calculate_required_frames>:
 // calculate_required_frames:
 // calculates the new allocatino size required for given address+size,
 // we are not interested in knowing if pages or tables actually exist in memory or the page file,
 // we are interested in knowing whether they are allocated or not.
 uint32 calculate_required_frames(uint32* ptr_page_directory, uint32 start_virtual_address, uint32 size)
 {
f0104436:	55                   	push   %ebp
f0104437:	89 e5                	mov    %esp,%ebp
f0104439:	83 ec 28             	sub    $0x28,%esp
	 LOG_STATMENT(cprintf("calculate_required_frames: Starting at address %x", start_virtual_address));
	 //calculate the required page tables
	 uint32 number_of_tables = 0;
f010443c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	 long i = 0;
f0104443:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	 uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE * 1024);
f010444a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010444d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104450:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104453:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104458:	89 45 f0             	mov    %eax,-0x10(%ebp)

	 for (; current_virtual_address < (start_virtual_address + size); current_virtual_address += PAGE_SIZE * 1024)
f010445b:	eb 27                	jmp    f0104484 <calculate_required_frames+0x4e>
	 {
		 uint32* ptr_page_table;
		 get_page_table(ptr_page_directory, (void*)current_virtual_address, &ptr_page_table);
f010445d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104460:	83 ec 04             	sub    $0x4,%esp
f0104463:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0104466:	52                   	push   %edx
f0104467:	50                   	push   %eax
f0104468:	ff 75 08             	pushl  0x8(%ebp)
f010446b:	e8 6b f7 ff ff       	call   f0103bdb <get_page_table>
f0104470:	83 c4 10             	add    $0x10,%esp

		 if (ptr_page_table == 0)
f0104473:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0104476:	85 c0                	test   %eax,%eax
f0104478:	75 03                	jne    f010447d <calculate_required_frames+0x47>
		 {
			 (number_of_tables)++;
f010447a:	ff 45 f4             	incl   -0xc(%ebp)
	 uint32 number_of_tables = 0;

	 long i = 0;
	 uint32 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE * 1024);

	 for (; current_virtual_address < (start_virtual_address + size); current_virtual_address += PAGE_SIZE * 1024)
f010447d:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0104484:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104487:	8b 45 10             	mov    0x10(%ebp),%eax
f010448a:	01 d0                	add    %edx,%eax
f010448c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010448f:	77 cc                	ja     f010445d <calculate_required_frames+0x27>
			 (number_of_tables)++;
		 }
	 }

	 //calc the required page frames
	 uint32 number_of_pages = 0;
f0104491:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);
f0104498:	8b 45 0c             	mov    0xc(%ebp),%eax
f010449b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010449e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01044a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01044a6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	 for (; current_virtual_address < (start_virtual_address + size); current_virtual_address += PAGE_SIZE)
f01044a9:	eb 24                	jmp    f01044cf <calculate_required_frames+0x99>
	 {
		 uint32* ptr_page_table;
		 if (get_frame_info(ptr_page_directory, (void*)current_virtual_address, &ptr_page_table) == 0)
f01044ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044ae:	83 ec 04             	sub    $0x4,%esp
f01044b1:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01044b4:	52                   	push   %edx
f01044b5:	50                   	push   %eax
f01044b6:	ff 75 08             	pushl  0x8(%ebp)
f01044b9:	e8 d8 f9 ff ff       	call   f0103e96 <get_frame_info>
f01044be:	83 c4 10             	add    $0x10,%esp
f01044c1:	85 c0                	test   %eax,%eax
f01044c3:	75 03                	jne    f01044c8 <calculate_required_frames+0x92>
		 {
			 (number_of_pages)++;
f01044c5:	ff 45 ec             	incl   -0x14(%ebp)

	 //calc the required page frames
	 uint32 number_of_pages = 0;
	 current_virtual_address = ROUNDDOWN(start_virtual_address, PAGE_SIZE);

	 for (; current_virtual_address < (start_virtual_address + size); current_virtual_address += PAGE_SIZE)
f01044c8:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f01044cf:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044d2:	8b 45 10             	mov    0x10(%ebp),%eax
f01044d5:	01 d0                	add    %edx,%eax
f01044d7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01044da:	77 cf                	ja     f01044ab <calculate_required_frames+0x75>
		 }
	 }

	 //return total number of frames
	 LOG_STATMENT(cprintf("calculate_required_frames: Done!"));
	 return number_of_tables + number_of_pages;
f01044dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01044e2:	01 d0                	add    %edx,%eax
 }
f01044e4:	c9                   	leave  
f01044e5:	c3                   	ret    

f01044e6 <calculate_available_frames>:



 // calculate_available_frames:
 struct freeFramesCounters calculate_available_frames()
 {
f01044e6:	55                   	push   %ebp
f01044e7:	89 e5                	mov    %esp,%ebp
f01044e9:	57                   	push   %edi
f01044ea:	56                   	push   %esi
f01044eb:	53                   	push   %ebx
f01044ec:	83 ec 20             	sub    $0x20,%esp
	 }
	 cprintf("finished loop detction\n");
	  */
	  //calculate the free frames from the free frame list
	 struct Frame_Info* ptr;
	 uint32 totalFreeUnBuffered = 0;
f01044ef:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	 uint32 totalFreeBuffered = 0;
f01044f6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	 uint32 totalModified = 0;
f01044fd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)


	 LIST_FOREACH(ptr, &free_frame_list)
f0104504:	a1 14 0d 80 f0       	mov    0xf0800d14,%eax
f0104509:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010450c:	eb 1a                	jmp    f0104528 <calculate_available_frames+0x42>
	 {
		 if (ptr->isBuffered)
f010450e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104511:	8a 40 14             	mov    0x14(%eax),%al
f0104514:	84 c0                	test   %al,%al
f0104516:	74 05                	je     f010451d <calculate_available_frames+0x37>
			 totalFreeBuffered++;
f0104518:	ff 45 e8             	incl   -0x18(%ebp)
f010451b:	eb 03                	jmp    f0104520 <calculate_available_frames+0x3a>
		 else
			 totalFreeUnBuffered++;
f010451d:	ff 45 ec             	incl   -0x14(%ebp)
	 uint32 totalFreeUnBuffered = 0;
	 uint32 totalFreeBuffered = 0;
	 uint32 totalModified = 0;


	 LIST_FOREACH(ptr, &free_frame_list)
f0104520:	a1 1c 0d 80 f0       	mov    0xf0800d1c,%eax
f0104525:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104528:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010452c:	74 07                	je     f0104535 <calculate_available_frames+0x4f>
f010452e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104531:	8b 00                	mov    (%eax),%eax
f0104533:	eb 05                	jmp    f010453a <calculate_available_frames+0x54>
f0104535:	b8 00 00 00 00       	mov    $0x0,%eax
f010453a:	a3 1c 0d 80 f0       	mov    %eax,0xf0800d1c
f010453f:	a1 1c 0d 80 f0       	mov    0xf0800d1c,%eax
f0104544:	85 c0                	test   %eax,%eax
f0104546:	75 c6                	jne    f010450e <calculate_available_frames+0x28>
f0104548:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010454c:	75 c0                	jne    f010450e <calculate_available_frames+0x28>
			 totalFreeUnBuffered++;
	 }



	 LIST_FOREACH(ptr, &modified_frame_list)
f010454e:	a1 00 0d 80 f0       	mov    0xf0800d00,%eax
f0104553:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104556:	eb 0b                	jmp    f0104563 <calculate_available_frames+0x7d>
	 {
		 totalModified++;
f0104558:	ff 45 e4             	incl   -0x1c(%ebp)
			 totalFreeUnBuffered++;
	 }



	 LIST_FOREACH(ptr, &modified_frame_list)
f010455b:	a1 08 0d 80 f0       	mov    0xf0800d08,%eax
f0104560:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104563:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104567:	74 07                	je     f0104570 <calculate_available_frames+0x8a>
f0104569:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010456c:	8b 00                	mov    (%eax),%eax
f010456e:	eb 05                	jmp    f0104575 <calculate_available_frames+0x8f>
f0104570:	b8 00 00 00 00       	mov    $0x0,%eax
f0104575:	a3 08 0d 80 f0       	mov    %eax,0xf0800d08
f010457a:	a1 08 0d 80 f0       	mov    0xf0800d08,%eax
f010457f:	85 c0                	test   %eax,%eax
f0104581:	75 d5                	jne    f0104558 <calculate_available_frames+0x72>
f0104583:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104587:	75 cf                	jne    f0104558 <calculate_available_frames+0x72>
		 totalModified++;
	 }


	 struct freeFramesCounters counters;
	 counters.freeBuffered = totalFreeBuffered;
f0104589:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010458c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	 counters.freeNotBuffered = totalFreeUnBuffered;
f010458f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104592:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 counters.modified = totalModified;
f0104595:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104598:	89 45 e0             	mov    %eax,-0x20(%ebp)
	 return counters;
f010459b:	8b 45 08             	mov    0x8(%ebp),%eax
f010459e:	89 c3                	mov    %eax,%ebx
f01045a0:	8d 45 d8             	lea    -0x28(%ebp),%eax
f01045a3:	ba 03 00 00 00       	mov    $0x3,%edx
f01045a8:	89 df                	mov    %ebx,%edi
f01045aa:	89 c6                	mov    %eax,%esi
f01045ac:	89 d1                	mov    %edx,%ecx
f01045ae:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
 }
f01045b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045b3:	83 c4 20             	add    $0x20,%esp
f01045b6:	5b                   	pop    %ebx
f01045b7:	5e                   	pop    %esi
f01045b8:	5f                   	pop    %edi
f01045b9:	5d                   	pop    %ebp
f01045ba:	c2 04 00             	ret    $0x4

f01045bd <calculate_free_frames>:

 //2018
 // calculate_free_frames:
 uint32 calculate_free_frames()
 {
f01045bd:	55                   	push   %ebp
f01045be:	89 e5                	mov    %esp,%ebp
	 return LIST_SIZE(&free_frame_list);
f01045c0:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
 }
f01045c5:	5d                   	pop    %ebp
f01045c6:	c3                   	ret    

f01045c7 <env_page_ws_get_size>:

 ///============================================================================================
 /// Dealing with environment working set

 inline uint32 env_page_ws_get_size(struct Env* e)
 {
f01045c7:	55                   	push   %ebp
f01045c8:	89 e5                	mov    %esp,%ebp
f01045ca:	83 ec 10             	sub    $0x10,%esp
	 int i = 0, counter = 0;
f01045cd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01045d4:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	 for (; i < e->page_WS_max_size; i++) if (e->ptr_pageWorkingSet[i].empty == 0) counter++;
f01045db:	eb 21                	jmp    f01045fe <env_page_ws_get_size+0x37>
f01045dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01045e0:	8b 48 78             	mov    0x78(%eax),%ecx
f01045e3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01045e6:	89 d0                	mov    %edx,%eax
f01045e8:	01 c0                	add    %eax,%eax
f01045ea:	01 d0                	add    %edx,%eax
f01045ec:	c1 e0 02             	shl    $0x2,%eax
f01045ef:	01 c8                	add    %ecx,%eax
f01045f1:	8a 40 04             	mov    0x4(%eax),%al
f01045f4:	84 c0                	test   %al,%al
f01045f6:	75 03                	jne    f01045fb <env_page_ws_get_size+0x34>
f01045f8:	ff 45 f8             	incl   -0x8(%ebp)
f01045fb:	ff 45 fc             	incl   -0x4(%ebp)
f01045fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0104601:	8b 50 74             	mov    0x74(%eax),%edx
f0104604:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104607:	39 c2                	cmp    %eax,%edx
f0104609:	77 d2                	ja     f01045dd <env_page_ws_get_size+0x16>
	 return counter;
f010460b:	8b 45 f8             	mov    -0x8(%ebp),%eax
 }
f010460e:	c9                   	leave  
f010460f:	c3                   	ret    

f0104610 <env_page_ws_invalidate>:

 inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
 {
f0104610:	55                   	push   %ebp
f0104611:	89 e5                	mov    %esp,%ebp
f0104613:	83 ec 18             	sub    $0x18,%esp
	 int i = 0;
f0104616:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 for (; i < e->page_WS_max_size; i++)
f010461d:	eb 4c                	jmp    f010466b <env_page_ws_invalidate+0x5b>
	 {
		 if (ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address, PAGE_SIZE) == ROUNDDOWN(virtual_address, PAGE_SIZE))
f010461f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104622:	8b 48 78             	mov    0x78(%eax),%ecx
f0104625:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104628:	89 d0                	mov    %edx,%eax
f010462a:	01 c0                	add    %eax,%eax
f010462c:	01 d0                	add    %edx,%eax
f010462e:	c1 e0 02             	shl    $0x2,%eax
f0104631:	01 c8                	add    %ecx,%eax
f0104633:	8b 00                	mov    (%eax),%eax
f0104635:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104638:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010463b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104640:	89 c2                	mov    %eax,%edx
f0104642:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104645:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104648:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010464b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104650:	39 c2                	cmp    %eax,%edx
f0104652:	75 14                	jne    f0104668 <env_page_ws_invalidate+0x58>
		 {
			 env_page_ws_clear_entry(e, i);
f0104654:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104657:	83 ec 08             	sub    $0x8,%esp
f010465a:	50                   	push   %eax
f010465b:	ff 75 08             	pushl  0x8(%ebp)
f010465e:	e8 bf 00 00 00       	call   f0104722 <env_page_ws_clear_entry>
f0104663:	83 c4 10             	add    $0x10,%esp
			 break;
f0104666:	eb 10                	jmp    f0104678 <env_page_ws_invalidate+0x68>
 }

 inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
 {
	 int i = 0;
	 for (; i < e->page_WS_max_size; i++)
f0104668:	ff 45 f4             	incl   -0xc(%ebp)
f010466b:	8b 45 08             	mov    0x8(%ebp),%eax
f010466e:	8b 50 74             	mov    0x74(%eax),%edx
f0104671:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104674:	39 c2                	cmp    %eax,%edx
f0104676:	77 a7                	ja     f010461f <env_page_ws_invalidate+0xf>
		 {
			 env_page_ws_clear_entry(e, i);
			 break;
		 }
	 }
 }
f0104678:	90                   	nop
f0104679:	c9                   	leave  
f010467a:	c3                   	ret    

f010467b <env_page_ws_set_entry>:

 inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
 {
f010467b:	55                   	push   %ebp
f010467c:	89 e5                	mov    %esp,%ebp
f010467e:	83 ec 18             	sub    $0x18,%esp
	 assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0104681:	8b 45 08             	mov    0x8(%ebp),%eax
f0104684:	8b 40 74             	mov    0x74(%eax),%eax
f0104687:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010468a:	77 19                	ja     f01046a5 <env_page_ws_set_entry+0x2a>
f010468c:	68 7c f4 11 f0       	push   $0xf011f47c
f0104691:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104696:	68 0c 04 00 00       	push   $0x40c
f010469b:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01046a0:	e8 0a bb ff ff       	call   f01001af <_panic>
	 assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01046a5:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01046ac:	76 19                	jbe    f01046c7 <env_page_ws_set_entry+0x4c>
f01046ae:	68 c8 f4 11 f0       	push   $0xf011f4c8
f01046b3:	68 b2 f4 11 f0       	push   $0xf011f4b2
f01046b8:	68 0d 04 00 00       	push   $0x40d
f01046bd:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01046c2:	e8 e8 ba ff ff       	call   f01001af <_panic>
	 e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01046c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01046ca:	8b 48 78             	mov    0x78(%eax),%ecx
f01046cd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01046d0:	89 d0                	mov    %edx,%eax
f01046d2:	01 c0                	add    %eax,%eax
f01046d4:	01 d0                	add    %edx,%eax
f01046d6:	c1 e0 02             	shl    $0x2,%eax
f01046d9:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01046dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01046df:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01046ea:	89 02                	mov    %eax,(%edx)
	 e->ptr_pageWorkingSet[entry_index].empty = 0;
f01046ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01046ef:	8b 48 78             	mov    0x78(%eax),%ecx
f01046f2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01046f5:	89 d0                	mov    %edx,%eax
f01046f7:	01 c0                	add    %eax,%eax
f01046f9:	01 d0                	add    %edx,%eax
f01046fb:	c1 e0 02             	shl    $0x2,%eax
f01046fe:	01 c8                	add    %ecx,%eax
f0104700:	c6 40 04 00          	movb   $0x0,0x4(%eax)

	 e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0104704:	8b 45 08             	mov    0x8(%ebp),%eax
f0104707:	8b 48 78             	mov    0x78(%eax),%ecx
f010470a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010470d:	89 d0                	mov    %edx,%eax
f010470f:	01 c0                	add    %eax,%eax
f0104711:	01 d0                	add    %edx,%eax
f0104713:	c1 e0 02             	shl    $0x2,%eax
f0104716:	01 c8                	add    %ecx,%eax
f0104718:	c7 40 08 00 00 00 80 	movl   $0x80000000,0x8(%eax)
	 //e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	 return;
f010471f:	90                   	nop
 }
f0104720:	c9                   	leave  
f0104721:	c3                   	ret    

f0104722 <env_page_ws_clear_entry>:

 inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
 {
f0104722:	55                   	push   %ebp
f0104723:	89 e5                	mov    %esp,%ebp
f0104725:	83 ec 08             	sub    $0x8,%esp
	 assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0104728:	8b 45 08             	mov    0x8(%ebp),%eax
f010472b:	8b 40 74             	mov    0x74(%eax),%eax
f010472e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104731:	77 19                	ja     f010474c <env_page_ws_clear_entry+0x2a>
f0104733:	68 fc f4 11 f0       	push   $0xf011f4fc
f0104738:	68 b2 f4 11 f0       	push   $0xf011f4b2
f010473d:	68 18 04 00 00       	push   $0x418
f0104742:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104747:	e8 63 ba ff ff       	call   f01001af <_panic>
	 e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f010474c:	8b 45 08             	mov    0x8(%ebp),%eax
f010474f:	8b 48 78             	mov    0x78(%eax),%ecx
f0104752:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104755:	89 d0                	mov    %edx,%eax
f0104757:	01 c0                	add    %eax,%eax
f0104759:	01 d0                	add    %edx,%eax
f010475b:	c1 e0 02             	shl    $0x2,%eax
f010475e:	01 c8                	add    %ecx,%eax
f0104760:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	 e->ptr_pageWorkingSet[entry_index].empty = 1;
f0104766:	8b 45 08             	mov    0x8(%ebp),%eax
f0104769:	8b 48 78             	mov    0x78(%eax),%ecx
f010476c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010476f:	89 d0                	mov    %edx,%eax
f0104771:	01 c0                	add    %eax,%eax
f0104773:	01 d0                	add    %edx,%eax
f0104775:	c1 e0 02             	shl    $0x2,%eax
f0104778:	01 c8                	add    %ecx,%eax
f010477a:	c6 40 04 01          	movb   $0x1,0x4(%eax)
	 e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f010477e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104781:	8b 48 78             	mov    0x78(%eax),%ecx
f0104784:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104787:	89 d0                	mov    %edx,%eax
f0104789:	01 c0                	add    %eax,%eax
f010478b:	01 d0                	add    %edx,%eax
f010478d:	c1 e0 02             	shl    $0x2,%eax
f0104790:	01 c8                	add    %ecx,%eax
f0104792:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
f0104799:	90                   	nop
f010479a:	c9                   	leave  
f010479b:	c3                   	ret    

f010479c <env_page_ws_get_virtual_address>:

 inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
 {
f010479c:	55                   	push   %ebp
f010479d:	89 e5                	mov    %esp,%ebp
f010479f:	83 ec 18             	sub    $0x18,%esp
	 assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01047a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a5:	8b 40 74             	mov    0x74(%eax),%eax
f01047a8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01047ab:	77 19                	ja     f01047c6 <env_page_ws_get_virtual_address+0x2a>
f01047ad:	68 fc f4 11 f0       	push   $0xf011f4fc
f01047b2:	68 b2 f4 11 f0       	push   $0xf011f4b2
f01047b7:	68 20 04 00 00       	push   $0x420
f01047bc:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01047c1:	e8 e9 b9 ff ff       	call   f01001af <_panic>
	 return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address, PAGE_SIZE);
f01047c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01047c9:	8b 48 78             	mov    0x78(%eax),%ecx
f01047cc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01047cf:	89 d0                	mov    %edx,%eax
f01047d1:	01 c0                	add    %eax,%eax
f01047d3:	01 d0                	add    %edx,%eax
f01047d5:	c1 e0 02             	shl    $0x2,%eax
f01047d8:	01 c8                	add    %ecx,%eax
f01047da:	8b 00                	mov    (%eax),%eax
f01047dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01047df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01047e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
 }
f01047e7:	c9                   	leave  
f01047e8:	c3                   	ret    

f01047e9 <env_page_ws_get_time_stamp>:

 inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
 {
f01047e9:	55                   	push   %ebp
f01047ea:	89 e5                	mov    %esp,%ebp
f01047ec:	83 ec 08             	sub    $0x8,%esp
	 assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01047ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01047f2:	8b 40 74             	mov    0x74(%eax),%eax
f01047f5:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01047f8:	77 19                	ja     f0104813 <env_page_ws_get_time_stamp+0x2a>
f01047fa:	68 fc f4 11 f0       	push   $0xf011f4fc
f01047ff:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104804:	68 26 04 00 00       	push   $0x426
f0104809:	68 d5 f2 11 f0       	push   $0xf011f2d5
f010480e:	e8 9c b9 ff ff       	call   f01001af <_panic>
	 return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0104813:	8b 45 08             	mov    0x8(%ebp),%eax
f0104816:	8b 48 78             	mov    0x78(%eax),%ecx
f0104819:	8b 55 0c             	mov    0xc(%ebp),%edx
f010481c:	89 d0                	mov    %edx,%eax
f010481e:	01 c0                	add    %eax,%eax
f0104820:	01 d0                	add    %edx,%eax
f0104822:	c1 e0 02             	shl    $0x2,%eax
f0104825:	01 c8                	add    %ecx,%eax
f0104827:	8b 40 08             	mov    0x8(%eax),%eax
 }
f010482a:	c9                   	leave  
f010482b:	c3                   	ret    

f010482c <env_page_ws_is_entry_empty>:

 inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
 {
f010482c:	55                   	push   %ebp
f010482d:	89 e5                	mov    %esp,%ebp
	 return e->ptr_pageWorkingSet[entry_index].empty;
f010482f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104832:	8b 48 78             	mov    0x78(%eax),%ecx
f0104835:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104838:	89 d0                	mov    %edx,%eax
f010483a:	01 c0                	add    %eax,%eax
f010483c:	01 d0                	add    %edx,%eax
f010483e:	c1 e0 02             	shl    $0x2,%eax
f0104841:	01 c8                	add    %ecx,%eax
f0104843:	8a 40 04             	mov    0x4(%eax),%al
f0104846:	0f b6 c0             	movzbl %al,%eax
 }
f0104849:	5d                   	pop    %ebp
f010484a:	c3                   	ret    

f010484b <env_page_ws_print>:

 void env_page_ws_print(struct Env* curenv)
 {
f010484b:	55                   	push   %ebp
f010484c:	89 e5                	mov    %esp,%ebp
f010484e:	83 ec 28             	sub    $0x28,%esp
	 uint32 i;
	 cprintf("PAGE WS:\n");
f0104851:	83 ec 0c             	sub    $0xc,%esp
f0104854:	68 34 f5 11 f0       	push   $0xf011f534
f0104859:	e8 a6 29 00 00       	call   f0107204 <cprintf>
f010485e:	83 c4 10             	add    $0x10,%esp
	 for (i = 0; i < (curenv->page_WS_max_size); i++)
f0104861:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104868:	e9 4e 01 00 00       	jmp    f01049bb <env_page_ws_print+0x170>
	 {
		 if (curenv->ptr_pageWorkingSet[i].empty)
f010486d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104870:	8b 48 78             	mov    0x78(%eax),%ecx
f0104873:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104876:	89 d0                	mov    %edx,%eax
f0104878:	01 c0                	add    %eax,%eax
f010487a:	01 d0                	add    %edx,%eax
f010487c:	c1 e0 02             	shl    $0x2,%eax
f010487f:	01 c8                	add    %ecx,%eax
f0104881:	8a 40 04             	mov    0x4(%eax),%al
f0104884:	84 c0                	test   %al,%al
f0104886:	74 43                	je     f01048cb <env_page_ws_print+0x80>
		 {
			 cprintf("EMPTY LOCATION");
f0104888:	83 ec 0c             	sub    $0xc,%esp
f010488b:	68 3e f5 11 f0       	push   $0xf011f53e
f0104890:	e8 6f 29 00 00       	call   f0107204 <cprintf>
f0104895:	83 c4 10             	add    $0x10,%esp
			 if (i == curenv->page_last_WS_index)
f0104898:	8b 45 08             	mov    0x8(%ebp),%eax
f010489b:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f01048a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048a4:	75 10                	jne    f01048b6 <env_page_ws_print+0x6b>
			 {
				 cprintf("		<--");
f01048a6:	83 ec 0c             	sub    $0xc,%esp
f01048a9:	68 4d f5 11 f0       	push   $0xf011f54d
f01048ae:	e8 51 29 00 00       	call   f0107204 <cprintf>
f01048b3:	83 c4 10             	add    $0x10,%esp
			 }
			 cprintf("\n");
f01048b6:	83 ec 0c             	sub    $0xc,%esp
f01048b9:	68 53 f5 11 f0       	push   $0xf011f553
f01048be:	e8 41 29 00 00       	call   f0107204 <cprintf>
f01048c3:	83 c4 10             	add    $0x10,%esp
			 continue;
f01048c6:	e9 ed 00 00 00       	jmp    f01049b8 <env_page_ws_print+0x16d>
		 }
		 uint32 virtual_address = curenv->ptr_pageWorkingSet[i].virtual_address;
f01048cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ce:	8b 48 78             	mov    0x78(%eax),%ecx
f01048d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048d4:	89 d0                	mov    %edx,%eax
f01048d6:	01 c0                	add    %eax,%eax
f01048d8:	01 d0                	add    %edx,%eax
f01048da:	c1 e0 02             	shl    $0x2,%eax
f01048dd:	01 c8                	add    %ecx,%eax
f01048df:	8b 00                	mov    (%eax),%eax
f01048e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 uint32 time_stamp = curenv->ptr_pageWorkingSet[i].time_stamp;
f01048e4:	8b 45 08             	mov    0x8(%ebp),%eax
f01048e7:	8b 48 78             	mov    0x78(%eax),%ecx
f01048ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01048ed:	89 d0                	mov    %edx,%eax
f01048ef:	01 c0                	add    %eax,%eax
f01048f1:	01 d0                	add    %edx,%eax
f01048f3:	c1 e0 02             	shl    $0x2,%eax
f01048f6:	01 c8                	add    %ecx,%eax
f01048f8:	8b 40 08             	mov    0x8(%eax),%eax
f01048fb:	89 45 ec             	mov    %eax,-0x14(%ebp)

		 uint32 perm = pt_get_page_permissions(curenv, virtual_address);
f01048fe:	83 ec 08             	sub    $0x8,%esp
f0104901:	ff 75 f0             	pushl  -0x10(%ebp)
f0104904:	ff 75 08             	pushl  0x8(%ebp)
f0104907:	e8 e3 09 00 00       	call   f01052ef <pt_get_page_permissions>
f010490c:	83 c4 10             	add    $0x10,%esp
f010490f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		 char isModified = ((perm & PERM_MODIFIED) ? 1 : 0);
f0104912:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104915:	83 e0 40             	and    $0x40,%eax
f0104918:	85 c0                	test   %eax,%eax
f010491a:	0f 95 c0             	setne  %al
f010491d:	88 45 e7             	mov    %al,-0x19(%ebp)
		 char isUsed = ((perm & PERM_USED) ? 1 : 0);
f0104920:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104923:	83 e0 20             	and    $0x20,%eax
f0104926:	85 c0                	test   %eax,%eax
f0104928:	0f 95 c0             	setne  %al
f010492b:	88 45 e6             	mov    %al,-0x1a(%ebp)
		 char isBuffered = ((perm & PERM_BUFFERED) ? 1 : 0);
f010492e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104931:	25 00 02 00 00       	and    $0x200,%eax
f0104936:	85 c0                	test   %eax,%eax
f0104938:	0f 95 c0             	setne  %al
f010493b:	88 45 e5             	mov    %al,-0x1b(%ebp)


		 cprintf("address @ %d = %x", i, curenv->ptr_pageWorkingSet[i].virtual_address);
f010493e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104941:	8b 48 78             	mov    0x78(%eax),%ecx
f0104944:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104947:	89 d0                	mov    %edx,%eax
f0104949:	01 c0                	add    %eax,%eax
f010494b:	01 d0                	add    %edx,%eax
f010494d:	c1 e0 02             	shl    $0x2,%eax
f0104950:	01 c8                	add    %ecx,%eax
f0104952:	8b 00                	mov    (%eax),%eax
f0104954:	83 ec 04             	sub    $0x4,%esp
f0104957:	50                   	push   %eax
f0104958:	ff 75 f4             	pushl  -0xc(%ebp)
f010495b:	68 55 f5 11 f0       	push   $0xf011f555
f0104960:	e8 9f 28 00 00       	call   f0107204 <cprintf>
f0104965:	83 c4 10             	add    $0x10,%esp

		 cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x", isUsed, isModified, isBuffered, time_stamp);
f0104968:	0f be 4d e5          	movsbl -0x1b(%ebp),%ecx
f010496c:	0f be 55 e7          	movsbl -0x19(%ebp),%edx
f0104970:	0f be 45 e6          	movsbl -0x1a(%ebp),%eax
f0104974:	83 ec 0c             	sub    $0xc,%esp
f0104977:	ff 75 ec             	pushl  -0x14(%ebp)
f010497a:	51                   	push   %ecx
f010497b:	52                   	push   %edx
f010497c:	50                   	push   %eax
f010497d:	68 68 f5 11 f0       	push   $0xf011f568
f0104982:	e8 7d 28 00 00       	call   f0107204 <cprintf>
f0104987:	83 c4 20             	add    $0x20,%esp

		 if (i == curenv->page_last_WS_index)
f010498a:	8b 45 08             	mov    0x8(%ebp),%eax
f010498d:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0104993:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104996:	75 10                	jne    f01049a8 <env_page_ws_print+0x15d>
		 {
			 cprintf(" <--");
f0104998:	83 ec 0c             	sub    $0xc,%esp
f010499b:	68 9f f5 11 f0       	push   $0xf011f59f
f01049a0:	e8 5f 28 00 00       	call   f0107204 <cprintf>
f01049a5:	83 c4 10             	add    $0x10,%esp
		 }
		 cprintf("\n");
f01049a8:	83 ec 0c             	sub    $0xc,%esp
f01049ab:	68 53 f5 11 f0       	push   $0xf011f553
f01049b0:	e8 4f 28 00 00       	call   f0107204 <cprintf>
f01049b5:	83 c4 10             	add    $0x10,%esp

 void env_page_ws_print(struct Env* curenv)
 {
	 uint32 i;
	 cprintf("PAGE WS:\n");
	 for (i = 0; i < (curenv->page_WS_max_size); i++)
f01049b8:	ff 45 f4             	incl   -0xc(%ebp)
f01049bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01049be:	8b 40 74             	mov    0x74(%eax),%eax
f01049c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01049c4:	0f 87 a3 fe ff ff    	ja     f010486d <env_page_ws_print+0x22>
		 {
			 cprintf(" <--");
		 }
		 cprintf("\n");
	 }
 }
f01049ca:	90                   	nop
f01049cb:	c9                   	leave  
f01049cc:	c3                   	ret    

f01049cd <env_table_ws_print>:

 // Table Working Set =========================================================

 void env_table_ws_print(struct Env* curenv)
 {
f01049cd:	55                   	push   %ebp
f01049ce:	89 e5                	mov    %esp,%ebp
f01049d0:	53                   	push   %ebx
f01049d1:	83 ec 14             	sub    $0x14,%esp
	 uint32 i;
	 cprintf("---------------------------------------------------\n");
f01049d4:	83 ec 0c             	sub    $0xc,%esp
f01049d7:	68 a4 f5 11 f0       	push   $0xf011f5a4
f01049dc:	e8 23 28 00 00       	call   f0107204 <cprintf>
f01049e1:	83 c4 10             	add    $0x10,%esp
	 cprintf("TABLE WS:\n");
f01049e4:	83 ec 0c             	sub    $0xc,%esp
f01049e7:	68 d9 f5 11 f0       	push   $0xf011f5d9
f01049ec:	e8 13 28 00 00       	call   f0107204 <cprintf>
f01049f1:	83 c4 10             	add    $0x10,%esp
	 for (i = 0; i < __TWS_MAX_SIZE; i++)
f01049f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01049fb:	e9 0c 01 00 00       	jmp    f0104b0c <env_table_ws_print+0x13f>
	 {
		 if (curenv->__ptr_tws[i].empty)
f0104a00:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a03:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a06:	89 d0                	mov    %edx,%eax
f0104a08:	01 c0                	add    %eax,%eax
f0104a0a:	01 d0                	add    %edx,%eax
f0104a0c:	c1 e0 02             	shl    $0x2,%eax
f0104a0f:	01 c8                	add    %ecx,%eax
f0104a11:	83 e8 80             	sub    $0xffffff80,%eax
f0104a14:	8a 00                	mov    (%eax),%al
f0104a16:	84 c0                	test   %al,%al
f0104a18:	74 43                	je     f0104a5d <env_table_ws_print+0x90>
		 {
			 cprintf("EMPTY LOCATION");
f0104a1a:	83 ec 0c             	sub    $0xc,%esp
f0104a1d:	68 3e f5 11 f0       	push   $0xf011f53e
f0104a22:	e8 dd 27 00 00       	call   f0107204 <cprintf>
f0104a27:	83 c4 10             	add    $0x10,%esp
			 if (i == curenv->table_last_WS_index)
f0104a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a2d:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104a33:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104a36:	75 10                	jne    f0104a48 <env_table_ws_print+0x7b>
			 {
				 cprintf("		<--");
f0104a38:	83 ec 0c             	sub    $0xc,%esp
f0104a3b:	68 4d f5 11 f0       	push   $0xf011f54d
f0104a40:	e8 bf 27 00 00       	call   f0107204 <cprintf>
f0104a45:	83 c4 10             	add    $0x10,%esp
			 }
			 cprintf("\n");
f0104a48:	83 ec 0c             	sub    $0xc,%esp
f0104a4b:	68 53 f5 11 f0       	push   $0xf011f553
f0104a50:	e8 af 27 00 00       	call   f0107204 <cprintf>
f0104a55:	83 c4 10             	add    $0x10,%esp
			 continue;
f0104a58:	e9 ac 00 00 00       	jmp    f0104b09 <env_table_ws_print+0x13c>
		 }
		 uint32 virtual_address = curenv->__ptr_tws[i].virtual_address;
f0104a5d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a63:	89 d0                	mov    %edx,%eax
f0104a65:	01 c0                	add    %eax,%eax
f0104a67:	01 d0                	add    %edx,%eax
f0104a69:	c1 e0 02             	shl    $0x2,%eax
f0104a6c:	01 c8                	add    %ecx,%eax
f0104a6e:	83 c0 7c             	add    $0x7c,%eax
f0104a71:	8b 00                	mov    (%eax),%eax
f0104a73:	89 45 f0             	mov    %eax,-0x10(%ebp)
		 cprintf("env address at %d = %x", i, curenv->__ptr_tws[i].virtual_address);
f0104a76:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104a79:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a7c:	89 d0                	mov    %edx,%eax
f0104a7e:	01 c0                	add    %eax,%eax
f0104a80:	01 d0                	add    %edx,%eax
f0104a82:	c1 e0 02             	shl    $0x2,%eax
f0104a85:	01 c8                	add    %ecx,%eax
f0104a87:	83 c0 7c             	add    $0x7c,%eax
f0104a8a:	8b 00                	mov    (%eax),%eax
f0104a8c:	83 ec 04             	sub    $0x4,%esp
f0104a8f:	50                   	push   %eax
f0104a90:	ff 75 f4             	pushl  -0xc(%ebp)
f0104a93:	68 e4 f5 11 f0       	push   $0xf011f5e4
f0104a98:	e8 67 27 00 00       	call   f0107204 <cprintf>
f0104a9d:	83 c4 10             	add    $0x10,%esp

		 cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(curenv, virtual_address), curenv->__ptr_tws[i].time_stamp);
f0104aa0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104aa3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104aa6:	89 d0                	mov    %edx,%eax
f0104aa8:	01 c0                	add    %eax,%eax
f0104aaa:	01 d0                	add    %edx,%eax
f0104aac:	c1 e0 02             	shl    $0x2,%eax
f0104aaf:	01 c8                	add    %ecx,%eax
f0104ab1:	05 84 00 00 00       	add    $0x84,%eax
f0104ab6:	8b 18                	mov    (%eax),%ebx
f0104ab8:	83 ec 08             	sub    $0x8,%esp
f0104abb:	ff 75 f0             	pushl  -0x10(%ebp)
f0104abe:	ff 75 08             	pushl  0x8(%ebp)
f0104ac1:	e8 29 04 00 00       	call   f0104eef <pd_is_table_used>
f0104ac6:	83 c4 10             	add    $0x10,%esp
f0104ac9:	83 ec 04             	sub    $0x4,%esp
f0104acc:	53                   	push   %ebx
f0104acd:	50                   	push   %eax
f0104ace:	68 fc f5 11 f0       	push   $0xf011f5fc
f0104ad3:	e8 2c 27 00 00       	call   f0107204 <cprintf>
f0104ad8:	83 c4 10             	add    $0x10,%esp
		 if (i == curenv->table_last_WS_index)
f0104adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ade:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104ae4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0104ae7:	75 10                	jne    f0104af9 <env_table_ws_print+0x12c>
		 {
			 cprintf(" <--");
f0104ae9:	83 ec 0c             	sub    $0xc,%esp
f0104aec:	68 9f f5 11 f0       	push   $0xf011f59f
f0104af1:	e8 0e 27 00 00       	call   f0107204 <cprintf>
f0104af6:	83 c4 10             	add    $0x10,%esp
		 }
		 cprintf("\n");
f0104af9:	83 ec 0c             	sub    $0xc,%esp
f0104afc:	68 53 f5 11 f0       	push   $0xf011f553
f0104b01:	e8 fe 26 00 00       	call   f0107204 <cprintf>
f0104b06:	83 c4 10             	add    $0x10,%esp
 void env_table_ws_print(struct Env* curenv)
 {
	 uint32 i;
	 cprintf("---------------------------------------------------\n");
	 cprintf("TABLE WS:\n");
	 for (i = 0; i < __TWS_MAX_SIZE; i++)
f0104b09:	ff 45 f4             	incl   -0xc(%ebp)
f0104b0c:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0104b10:	0f 86 ea fe ff ff    	jbe    f0104a00 <env_table_ws_print+0x33>
		 {
			 cprintf(" <--");
		 }
		 cprintf("\n");
	 }
 }
f0104b16:	90                   	nop
f0104b17:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104b1a:	c9                   	leave  
f0104b1b:	c3                   	ret    

f0104b1c <env_table_ws_get_size>:

 inline uint32 env_table_ws_get_size(struct Env* e)
 {
f0104b1c:	55                   	push   %ebp
f0104b1d:	89 e5                	mov    %esp,%ebp
f0104b1f:	83 ec 10             	sub    $0x10,%esp
	 int i = 0, counter = 0;
f0104b22:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0104b29:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	 for (; i < __TWS_MAX_SIZE; i++) if (e->__ptr_tws[i].empty == 0) counter++;
f0104b30:	eb 20                	jmp    f0104b52 <env_table_ws_get_size+0x36>
f0104b32:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104b35:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104b38:	89 d0                	mov    %edx,%eax
f0104b3a:	01 c0                	add    %eax,%eax
f0104b3c:	01 d0                	add    %edx,%eax
f0104b3e:	c1 e0 02             	shl    $0x2,%eax
f0104b41:	01 c8                	add    %ecx,%eax
f0104b43:	83 e8 80             	sub    $0xffffff80,%eax
f0104b46:	8a 00                	mov    (%eax),%al
f0104b48:	84 c0                	test   %al,%al
f0104b4a:	75 03                	jne    f0104b4f <env_table_ws_get_size+0x33>
f0104b4c:	ff 45 f8             	incl   -0x8(%ebp)
f0104b4f:	ff 45 fc             	incl   -0x4(%ebp)
f0104b52:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0104b56:	7e da                	jle    f0104b32 <env_table_ws_get_size+0x16>
	 return counter;
f0104b58:	8b 45 f8             	mov    -0x8(%ebp),%eax
 }
f0104b5b:	c9                   	leave  
f0104b5c:	c3                   	ret    

f0104b5d <env_table_ws_invalidate>:

 inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
 {
f0104b5d:	55                   	push   %ebp
f0104b5e:	89 e5                	mov    %esp,%ebp
f0104b60:	83 ec 18             	sub    $0x18,%esp
	 int i = 0;
f0104b63:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	 for (; i < __TWS_MAX_SIZE; i++)
f0104b6a:	eb 4c                	jmp    f0104bb8 <env_table_ws_invalidate+0x5b>
	 {
		 if (ROUNDDOWN(e->__ptr_tws[i].virtual_address, PAGE_SIZE * 1024) == ROUNDDOWN(virtual_address, PAGE_SIZE * 1024))
f0104b6c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104b72:	89 d0                	mov    %edx,%eax
f0104b74:	01 c0                	add    %eax,%eax
f0104b76:	01 d0                	add    %edx,%eax
f0104b78:	c1 e0 02             	shl    $0x2,%eax
f0104b7b:	01 c8                	add    %ecx,%eax
f0104b7d:	83 c0 7c             	add    $0x7c,%eax
f0104b80:	8b 00                	mov    (%eax),%eax
f0104b82:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104b85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b88:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104b8d:	89 c2                	mov    %eax,%edx
f0104b8f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104b92:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104b95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104b98:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104b9d:	39 c2                	cmp    %eax,%edx
f0104b9f:	75 14                	jne    f0104bb5 <env_table_ws_invalidate+0x58>
		 {
			 env_table_ws_clear_entry(e, i);
f0104ba1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ba4:	83 ec 08             	sub    $0x8,%esp
f0104ba7:	50                   	push   %eax
f0104ba8:	ff 75 08             	pushl  0x8(%ebp)
f0104bab:	e8 b8 00 00 00       	call   f0104c68 <env_table_ws_clear_entry>
f0104bb0:	83 c4 10             	add    $0x10,%esp
			 break;
f0104bb3:	eb 09                	jmp    f0104bbe <env_table_ws_invalidate+0x61>
 }

 inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
 {
	 int i = 0;
	 for (; i < __TWS_MAX_SIZE; i++)
f0104bb5:	ff 45 f4             	incl   -0xc(%ebp)
f0104bb8:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0104bbc:	7e ae                	jle    f0104b6c <env_table_ws_invalidate+0xf>
		 {
			 env_table_ws_clear_entry(e, i);
			 break;
		 }
	 }
 }
f0104bbe:	90                   	nop
f0104bbf:	c9                   	leave  
f0104bc0:	c3                   	ret    

f0104bc1 <env_table_ws_set_entry>:

 inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
 {
f0104bc1:	55                   	push   %ebp
f0104bc2:	89 e5                	mov    %esp,%ebp
f0104bc4:	53                   	push   %ebx
f0104bc5:	83 ec 14             	sub    $0x14,%esp
	 assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104bc8:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104bcc:	76 19                	jbe    f0104be7 <env_table_ws_set_entry+0x26>
f0104bce:	68 20 f6 11 f0       	push   $0xf011f620
f0104bd3:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104bd8:	68 89 04 00 00       	push   $0x489
f0104bdd:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104be2:	e8 c8 b5 ff ff       	call   f01001af <_panic>
	 assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0104be7:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0104bee:	76 19                	jbe    f0104c09 <env_table_ws_set_entry+0x48>
f0104bf0:	68 c8 f4 11 f0       	push   $0xf011f4c8
f0104bf5:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104bfa:	68 8a 04 00 00       	push   $0x48a
f0104bff:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104c04:	e8 a6 b5 ff ff       	call   f01001af <_panic>
	 e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE * 1024);
f0104c09:	8b 45 10             	mov    0x10(%ebp),%eax
f0104c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c12:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104c17:	89 c1                	mov    %eax,%ecx
f0104c19:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0104c1c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c1f:	89 d0                	mov    %edx,%eax
f0104c21:	01 c0                	add    %eax,%eax
f0104c23:	01 d0                	add    %edx,%eax
f0104c25:	c1 e0 02             	shl    $0x2,%eax
f0104c28:	01 d8                	add    %ebx,%eax
f0104c2a:	83 c0 7c             	add    $0x7c,%eax
f0104c2d:	89 08                	mov    %ecx,(%eax)
	 e->__ptr_tws[entry_index].empty = 0;
f0104c2f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104c32:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c35:	89 d0                	mov    %edx,%eax
f0104c37:	01 c0                	add    %eax,%eax
f0104c39:	01 d0                	add    %edx,%eax
f0104c3b:	c1 e0 02             	shl    $0x2,%eax
f0104c3e:	01 c8                	add    %ecx,%eax
f0104c40:	83 e8 80             	sub    $0xffffff80,%eax
f0104c43:	c6 00 00             	movb   $0x0,(%eax)

	 //e->__ptr_tws[entry_index].time_stamp = time;
	 e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0104c46:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104c49:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c4c:	89 d0                	mov    %edx,%eax
f0104c4e:	01 c0                	add    %eax,%eax
f0104c50:	01 d0                	add    %edx,%eax
f0104c52:	c1 e0 02             	shl    $0x2,%eax
f0104c55:	01 c8                	add    %ecx,%eax
f0104c57:	05 84 00 00 00       	add    $0x84,%eax
f0104c5c:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	 return;
f0104c62:	90                   	nop
 }
f0104c63:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104c66:	c9                   	leave  
f0104c67:	c3                   	ret    

f0104c68 <env_table_ws_clear_entry>:

 inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
 {
f0104c68:	55                   	push   %ebp
f0104c69:	89 e5                	mov    %esp,%ebp
f0104c6b:	83 ec 08             	sub    $0x8,%esp
	 assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104c6e:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104c72:	76 19                	jbe    f0104c8d <env_table_ws_clear_entry+0x25>
f0104c74:	68 20 f6 11 f0       	push   $0xf011f620
f0104c79:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104c7e:	68 95 04 00 00       	push   $0x495
f0104c83:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104c88:	e8 22 b5 ff ff       	call   f01001af <_panic>
	 e->__ptr_tws[entry_index].virtual_address = 0;
f0104c8d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104c90:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104c93:	89 d0                	mov    %edx,%eax
f0104c95:	01 c0                	add    %eax,%eax
f0104c97:	01 d0                	add    %edx,%eax
f0104c99:	c1 e0 02             	shl    $0x2,%eax
f0104c9c:	01 c8                	add    %ecx,%eax
f0104c9e:	83 c0 7c             	add    $0x7c,%eax
f0104ca1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	 e->__ptr_tws[entry_index].empty = 1;
f0104ca7:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104caa:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104cad:	89 d0                	mov    %edx,%eax
f0104caf:	01 c0                	add    %eax,%eax
f0104cb1:	01 d0                	add    %edx,%eax
f0104cb3:	c1 e0 02             	shl    $0x2,%eax
f0104cb6:	01 c8                	add    %ecx,%eax
f0104cb8:	83 e8 80             	sub    $0xffffff80,%eax
f0104cbb:	c6 00 01             	movb   $0x1,(%eax)
	 e->__ptr_tws[entry_index].time_stamp = 0;
f0104cbe:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104cc1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104cc4:	89 d0                	mov    %edx,%eax
f0104cc6:	01 c0                	add    %eax,%eax
f0104cc8:	01 d0                	add    %edx,%eax
f0104cca:	c1 e0 02             	shl    $0x2,%eax
f0104ccd:	01 c8                	add    %ecx,%eax
f0104ccf:	05 84 00 00 00       	add    $0x84,%eax
f0104cd4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 }
f0104cda:	90                   	nop
f0104cdb:	c9                   	leave  
f0104cdc:	c3                   	ret    

f0104cdd <env_table_ws_get_virtual_address>:

 inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
 {
f0104cdd:	55                   	push   %ebp
f0104cde:	89 e5                	mov    %esp,%ebp
f0104ce0:	83 ec 18             	sub    $0x18,%esp
	 assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104ce3:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104ce7:	76 19                	jbe    f0104d02 <env_table_ws_get_virtual_address+0x25>
f0104ce9:	68 20 f6 11 f0       	push   $0xf011f620
f0104cee:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104cf3:	68 9d 04 00 00       	push   $0x49d
f0104cf8:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104cfd:	e8 ad b4 ff ff       	call   f01001af <_panic>
	 return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address, PAGE_SIZE * 1024);
f0104d02:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104d05:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104d08:	89 d0                	mov    %edx,%eax
f0104d0a:	01 c0                	add    %eax,%eax
f0104d0c:	01 d0                	add    %edx,%eax
f0104d0e:	c1 e0 02             	shl    $0x2,%eax
f0104d11:	01 c8                	add    %ecx,%eax
f0104d13:	83 c0 7c             	add    $0x7c,%eax
f0104d16:	8b 00                	mov    (%eax),%eax
f0104d18:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d1e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
 }
f0104d23:	c9                   	leave  
f0104d24:	c3                   	ret    

f0104d25 <env_table_ws_get_time_stamp>:


 inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
 {
f0104d25:	55                   	push   %ebp
f0104d26:	89 e5                	mov    %esp,%ebp
f0104d28:	83 ec 08             	sub    $0x8,%esp
	 assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0104d2b:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0104d2f:	76 19                	jbe    f0104d4a <env_table_ws_get_time_stamp+0x25>
f0104d31:	68 20 f6 11 f0       	push   $0xf011f620
f0104d36:	68 b2 f4 11 f0       	push   $0xf011f4b2
f0104d3b:	68 a4 04 00 00       	push   $0x4a4
f0104d40:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0104d45:	e8 65 b4 ff ff       	call   f01001af <_panic>
	 return e->__ptr_tws[entry_index].time_stamp;
f0104d4a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104d4d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104d50:	89 d0                	mov    %edx,%eax
f0104d52:	01 c0                	add    %eax,%eax
f0104d54:	01 d0                	add    %edx,%eax
f0104d56:	c1 e0 02             	shl    $0x2,%eax
f0104d59:	01 c8                	add    %ecx,%eax
f0104d5b:	05 84 00 00 00       	add    $0x84,%eax
f0104d60:	8b 00                	mov    (%eax),%eax
 }
f0104d62:	c9                   	leave  
f0104d63:	c3                   	ret    

f0104d64 <env_table_ws_is_entry_empty>:

 inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
 {
f0104d64:	55                   	push   %ebp
f0104d65:	89 e5                	mov    %esp,%ebp
	 return e->__ptr_tws[entry_index].empty;
f0104d67:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104d6a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104d6d:	89 d0                	mov    %edx,%eax
f0104d6f:	01 c0                	add    %eax,%eax
f0104d71:	01 d0                	add    %edx,%eax
f0104d73:	c1 e0 02             	shl    $0x2,%eax
f0104d76:	01 c8                	add    %ecx,%eax
f0104d78:	83 e8 80             	sub    $0xffffff80,%eax
f0104d7b:	8a 00                	mov    (%eax),%al
f0104d7d:	0f b6 c0             	movzbl %al,%eax
 }
f0104d80:	5d                   	pop    %ebp
f0104d81:	c3                   	ret    

f0104d82 <addTableToTableWorkingSet>:

 void addTableToTableWorkingSet(struct Env* e, uint32 tableAddress)
 {
f0104d82:	55                   	push   %ebp
f0104d83:	89 e5                	mov    %esp,%ebp
f0104d85:	83 ec 10             	sub    $0x10,%esp
	 tableAddress = ROUNDDOWN(tableAddress, PAGE_SIZE * 1024);
f0104d88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104d8b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0104d8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104d91:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0104d96:	89 45 0c             	mov    %eax,0xc(%ebp)
	 e->__ptr_tws[e->table_last_WS_index].virtual_address = tableAddress;
f0104d99:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d9c:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104da2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104da5:	89 d0                	mov    %edx,%eax
f0104da7:	01 c0                	add    %eax,%eax
f0104da9:	01 d0                	add    %edx,%eax
f0104dab:	c1 e0 02             	shl    $0x2,%eax
f0104dae:	01 c8                	add    %ecx,%eax
f0104db0:	8d 50 7c             	lea    0x7c(%eax),%edx
f0104db3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104db6:	89 02                	mov    %eax,(%edx)
	 e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0104db8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dbb:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104dc1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104dc4:	89 d0                	mov    %edx,%eax
f0104dc6:	01 c0                	add    %eax,%eax
f0104dc8:	01 d0                	add    %edx,%eax
f0104dca:	c1 e0 02             	shl    $0x2,%eax
f0104dcd:	01 c8                	add    %ecx,%eax
f0104dcf:	83 e8 80             	sub    $0xffffff80,%eax
f0104dd2:	c6 00 00             	movb   $0x0,(%eax)
	 e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0104dd5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dd8:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
f0104dde:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0104de1:	89 d0                	mov    %edx,%eax
f0104de3:	01 c0                	add    %eax,%eax
f0104de5:	01 d0                	add    %edx,%eax
f0104de7:	c1 e0 02             	shl    $0x2,%eax
f0104dea:	01 c8                	add    %ecx,%eax
f0104dec:	05 84 00 00 00       	add    $0x84,%eax
f0104df1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	 //e->__ptr_tws[e->table_last_WS_index].time_stamp = time;

	 e->table_last_WS_index++;
f0104df7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104dfa:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104e00:	8d 50 01             	lea    0x1(%eax),%edx
f0104e03:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e06:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	 e->table_last_WS_index %= __TWS_MAX_SIZE;
f0104e0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e0f:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0104e15:	b9 32 00 00 00       	mov    $0x32,%ecx
f0104e1a:	ba 00 00 00 00       	mov    $0x0,%edx
f0104e1f:	f7 f1                	div    %ecx
f0104e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e24:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
 }
f0104e2a:	90                   	nop
f0104e2b:	c9                   	leave  
f0104e2c:	c3                   	ret    

f0104e2d <bufferList_add_page>:
 ///****************************************************************************************///
 ///******************************* PAGE BUFFERING FUNCTIONS ******************************///
 ///****************************************************************************************///

 void bufferList_add_page(struct Linked_List* bufferList, struct Frame_Info* ptr_frame_info)
 {
f0104e2d:	55                   	push   %ebp
f0104e2e:	89 e5                	mov    %esp,%ebp
			 }
		 }

	 }
	  */
	 LIST_INSERT_TAIL(bufferList, ptr_frame_info);
f0104e30:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e33:	8b 50 04             	mov    0x4(%eax),%edx
f0104e36:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e39:	89 50 04             	mov    %edx,0x4(%eax)
f0104e3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e3f:	8b 40 04             	mov    0x4(%eax),%eax
f0104e42:	85 c0                	test   %eax,%eax
f0104e44:	74 0d                	je     f0104e53 <bufferList_add_page+0x26>
f0104e46:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e49:	8b 40 04             	mov    0x4(%eax),%eax
f0104e4c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e4f:	89 10                	mov    %edx,(%eax)
f0104e51:	eb 08                	jmp    f0104e5b <bufferList_add_page+0x2e>
f0104e53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e56:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e59:	89 10                	mov    %edx,(%eax)
f0104e5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e5e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e61:	89 50 04             	mov    %edx,0x4(%eax)
f0104e64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e67:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104e6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e70:	8b 40 0c             	mov    0xc(%eax),%eax
f0104e73:	8d 50 01             	lea    0x1(%eax),%edx
f0104e76:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e79:	89 50 0c             	mov    %edx,0xc(%eax)
 }
f0104e7c:	90                   	nop
f0104e7d:	5d                   	pop    %ebp
f0104e7e:	c3                   	ret    

f0104e7f <bufferlist_remove_page>:
 void bufferlist_remove_page(struct Linked_List* bufferList, struct Frame_Info* ptr_frame_info)
 {
f0104e7f:	55                   	push   %ebp
f0104e80:	89 e5                	mov    %esp,%ebp
	 LIST_REMOVE(bufferList, ptr_frame_info);
f0104e82:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e85:	8b 00                	mov    (%eax),%eax
f0104e87:	85 c0                	test   %eax,%eax
f0104e89:	74 10                	je     f0104e9b <bufferlist_remove_page+0x1c>
f0104e8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e8e:	8b 00                	mov    (%eax),%eax
f0104e90:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104e93:	8b 52 04             	mov    0x4(%edx),%edx
f0104e96:	89 50 04             	mov    %edx,0x4(%eax)
f0104e99:	eb 0c                	jmp    f0104ea7 <bufferlist_remove_page+0x28>
f0104e9b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104e9e:	8b 50 04             	mov    0x4(%eax),%edx
f0104ea1:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ea4:	89 50 04             	mov    %edx,0x4(%eax)
f0104ea7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104eaa:	8b 40 04             	mov    0x4(%eax),%eax
f0104ead:	85 c0                	test   %eax,%eax
f0104eaf:	74 0f                	je     f0104ec0 <bufferlist_remove_page+0x41>
f0104eb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104eb4:	8b 40 04             	mov    0x4(%eax),%eax
f0104eb7:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104eba:	8b 12                	mov    (%edx),%edx
f0104ebc:	89 10                	mov    %edx,(%eax)
f0104ebe:	eb 0a                	jmp    f0104eca <bufferlist_remove_page+0x4b>
f0104ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ec3:	8b 10                	mov    (%eax),%edx
f0104ec5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ec8:	89 10                	mov    %edx,(%eax)
f0104eca:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ecd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ed6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104edd:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee0:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ee3:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104ee6:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ee9:	89 50 0c             	mov    %edx,0xc(%eax)
 }
f0104eec:	90                   	nop
f0104eed:	5d                   	pop    %ebp
f0104eee:	c3                   	ret    

f0104eef <pd_is_table_used>:

 ///============================================================================================
 /// Dealing with page and page table entry flags

 inline uint32 pd_is_table_used(struct Env* ptr_env, uint32 virtual_address)
 {
f0104eef:	55                   	push   %ebp
f0104ef0:	89 e5                	mov    %esp,%ebp
	 return ((ptr_env->env_page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0104ef2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ef5:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104ef8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104efb:	c1 ea 16             	shr    $0x16,%edx
f0104efe:	c1 e2 02             	shl    $0x2,%edx
f0104f01:	01 d0                	add    %edx,%eax
f0104f03:	8b 00                	mov    (%eax),%eax
f0104f05:	83 e0 20             	and    $0x20,%eax
f0104f08:	85 c0                	test   %eax,%eax
f0104f0a:	0f 95 c0             	setne  %al
f0104f0d:	0f b6 c0             	movzbl %al,%eax
 }
f0104f10:	5d                   	pop    %ebp
f0104f11:	c3                   	ret    

f0104f12 <pd_set_table_unused>:

 inline void pd_set_table_unused(struct Env* ptr_env, uint32 virtual_address)
 {
f0104f12:	55                   	push   %ebp
f0104f13:	89 e5                	mov    %esp,%ebp
f0104f15:	83 ec 08             	sub    $0x8,%esp
	 ptr_env->env_page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0104f18:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f1b:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104f1e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104f21:	c1 ea 16             	shr    $0x16,%edx
f0104f24:	c1 e2 02             	shl    $0x2,%edx
f0104f27:	01 c2                	add    %eax,%edx
f0104f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f2c:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104f2f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0104f32:	c1 e9 16             	shr    $0x16,%ecx
f0104f35:	c1 e1 02             	shl    $0x2,%ecx
f0104f38:	01 c8                	add    %ecx,%eax
f0104f3a:	8b 00                	mov    (%eax),%eax
f0104f3c:	83 e0 df             	and    $0xffffffdf,%eax
f0104f3f:	89 02                	mov    %eax,(%edx)
	 tlb_invalidate((void*)NULL, (void*)virtual_address);
f0104f41:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f44:	83 ec 08             	sub    $0x8,%esp
f0104f47:	50                   	push   %eax
f0104f48:	6a 00                	push   $0x0
f0104f4a:	e8 89 e0 ff ff       	call   f0102fd8 <tlb_invalidate>
f0104f4f:	83 c4 10             	add    $0x10,%esp
 }
f0104f52:	90                   	nop
f0104f53:	c9                   	leave  
f0104f54:	c3                   	ret    

f0104f55 <pd_clear_page_dir_entry>:

 void pd_clear_page_dir_entry(struct Env* ptr_env, uint32 virtual_address)
 {
f0104f55:	55                   	push   %ebp
f0104f56:	89 e5                	mov    %esp,%ebp
f0104f58:	83 ec 10             	sub    $0x10,%esp
	 uint32* ptr_pgdir = ptr_env->env_page_directory;
f0104f5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f5e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104f61:	89 45 fc             	mov    %eax,-0x4(%ebp)
	 ptr_pgdir[PDX(virtual_address)] = 0;
f0104f64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f67:	c1 e8 16             	shr    $0x16,%eax
f0104f6a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104f71:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104f74:	01 d0                	add    %edx,%eax
f0104f76:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0104f7c:	0f 20 d8             	mov    %cr3,%eax
f0104f7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0104f82:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104f85:	0f 22 d8             	mov    %eax,%cr3
	 tlbflush();
 }
f0104f88:	90                   	nop
f0104f89:	c9                   	leave  
f0104f8a:	c3                   	ret    

f0104f8b <pt_set_page_permissions>:

 extern int __pf_write_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);
 extern int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress);

 inline void pt_set_page_permissions(struct Env* ptr_env, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
 {
f0104f8b:	55                   	push   %ebp
f0104f8c:	89 e5                	mov    %esp,%ebp
f0104f8e:	83 ec 28             	sub    $0x28,%esp
	 uint32* ptr_pgdir = ptr_env->env_page_directory;
f0104f91:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f94:	8b 40 5c             	mov    0x5c(%eax),%eax
f0104f97:	89 45 f0             	mov    %eax,-0x10(%ebp)
	 uint32* ptr_page_table;
	 //if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	 //	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	 uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)];
f0104f9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104f9d:	c1 e8 16             	shr    $0x16,%eax
f0104fa0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104fa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104faa:	01 d0                	add    %edx,%eax
f0104fac:	8b 00                	mov    (%eax),%eax
f0104fae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	 if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0104fb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104fb4:	83 e0 01             	and    $0x1,%eax
f0104fb7:	85 c0                	test   %eax,%eax
f0104fb9:	0f 84 d6 00 00 00    	je     f0105095 <pt_set_page_permissions+0x10a>
	 {
		 if (USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f0104fbf:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0104fc6:	77 19                	ja     f0104fe1 <pt_set_page_permissions+0x56>
		 {
			 ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry));
f0104fc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104fcb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104fd0:	83 ec 0c             	sub    $0xc,%esp
f0104fd3:	50                   	push   %eax
f0104fd4:	e8 19 80 00 00       	call   f010cff2 <kheap_virtual_address>
f0104fd9:	83 c4 10             	add    $0x10,%esp
f0104fdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fdf:	eb 40                	jmp    f0105021 <pt_set_page_permissions+0x96>
		 }
		 else
		 {
			 ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry));
f0104fe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104fe4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0104fe9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104fec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104fef:	c1 e8 0c             	shr    $0xc,%eax
f0104ff2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104ff5:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0104ffa:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104ffd:	72 17                	jb     f0105016 <pt_set_page_permissions+0x8b>
f0104fff:	ff 75 e8             	pushl  -0x18(%ebp)
f0105002:	68 fc f2 11 f0       	push   $0xf011f2fc
f0105007:	68 23 05 00 00       	push   $0x523
f010500c:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0105011:	e8 99 b1 ff ff       	call   f01001af <_panic>
f0105016:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105019:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010501e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 }
		 ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0105021:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105024:	c1 e8 0c             	shr    $0xc,%eax
f0105027:	25 ff 03 00 00       	and    $0x3ff,%eax
f010502c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105036:	01 c2                	add    %eax,%edx
f0105038:	8b 45 0c             	mov    0xc(%ebp),%eax
f010503b:	c1 e8 0c             	shr    $0xc,%eax
f010503e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105043:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010504a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504d:	01 c8                	add    %ecx,%eax
f010504f:	8b 00                	mov    (%eax),%eax
f0105051:	0b 45 10             	or     0x10(%ebp),%eax
f0105054:	89 02                	mov    %eax,(%edx)
		 ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0105056:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105059:	c1 e8 0c             	shr    $0xc,%eax
f010505c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105061:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105068:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506b:	01 d0                	add    %edx,%eax
f010506d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105070:	c1 ea 0c             	shr    $0xc,%edx
f0105073:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105079:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0105080:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105083:	01 ca                	add    %ecx,%edx
f0105085:	8b 12                	mov    (%edx),%edx
f0105087:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010508a:	f7 d1                	not    %ecx
f010508c:	21 ca                	and    %ecx,%edx
f010508e:	89 10                	mov    %edx,(%eax)
f0105090:	e9 e8 00 00 00       	jmp    f010517d <pt_set_page_permissions+0x1f2>

	 }
	 else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0105095:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105099:	0f 84 c7 00 00 00    	je     f0105166 <pt_set_page_permissions+0x1db>
	 {
		 //cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		 //Temporary read the table from page file into main memory
		 int success = __pf_read_env_table(ptr_env, virtual_address, (void*)ptr_temp_page);
f010509f:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f01050a4:	83 ec 04             	sub    $0x4,%esp
f01050a7:	50                   	push   %eax
f01050a8:	ff 75 0c             	pushl  0xc(%ebp)
f01050ab:	ff 75 08             	pushl  0x8(%ebp)
f01050ae:	e8 32 72 00 00       	call   f010c2e5 <__pf_read_env_table>
f01050b3:	83 c4 10             	add    $0x10,%esp
f01050b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		 ptr_page_table = (uint32*)ptr_temp_page;
f01050b9:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f01050be:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 if (success == E_TABLE_NOT_EXIST_IN_PF)
f01050c1:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f01050c5:	75 17                	jne    f01050de <pt_set_page_permissions+0x153>
			 panic("pt_set_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f01050c7:	83 ec 04             	sub    $0x4,%esp
f01050ca:	68 54 f6 11 f0       	push   $0xf011f654
f01050cf:	68 31 05 00 00       	push   $0x531
f01050d4:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01050d9:	e8 d1 b0 ff ff       	call   f01001af <_panic>
			 handling code");

		 ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f01050de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01050e1:	c1 e8 0c             	shr    $0xc,%eax
f01050e4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01050e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01050f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f3:	01 c2                	add    %eax,%edx
f01050f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01050f8:	c1 e8 0c             	shr    $0xc,%eax
f01050fb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105100:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0105107:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010510a:	01 c8                	add    %ecx,%eax
f010510c:	8b 00                	mov    (%eax),%eax
f010510e:	0b 45 10             	or     0x10(%ebp),%eax
f0105111:	89 02                	mov    %eax,(%edx)
		 ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0105113:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105116:	c1 e8 0c             	shr    $0xc,%eax
f0105119:	25 ff 03 00 00       	and    $0x3ff,%eax
f010511e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105125:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105128:	01 d0                	add    %edx,%eax
f010512a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010512d:	c1 ea 0c             	shr    $0xc,%edx
f0105130:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105136:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f010513d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105140:	01 ca                	add    %ecx,%edx
f0105142:	8b 12                	mov    (%edx),%edx
f0105144:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0105147:	f7 d1                	not    %ecx
f0105149:	21 ca                	and    %ecx,%edx
f010514b:	89 10                	mov    %edx,(%eax)

		 __pf_write_env_table(ptr_env, virtual_address, (void*)ptr_temp_page);
f010514d:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f0105152:	83 ec 04             	sub    $0x4,%esp
f0105155:	50                   	push   %eax
f0105156:	ff 75 0c             	pushl  0xc(%ebp)
f0105159:	ff 75 08             	pushl  0x8(%ebp)
f010515c:	e8 df 70 00 00       	call   f010c240 <__pf_write_env_table>
f0105161:	83 c4 10             	add    $0x10,%esp
f0105164:	eb 17                	jmp    f010517d <pt_set_page_permissions+0x1f2>
	 }
	 else
	 {
		 //cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		 panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n");
f0105166:	83 ec 04             	sub    $0x4,%esp
f0105169:	68 d0 f6 11 f0       	push   $0xf011f6d0
f010516e:	68 3b 05 00 00       	push   $0x53b
f0105173:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0105178:	e8 32 b0 ff ff       	call   f01001af <_panic>
	 }

	 tlb_invalidate((void*)NULL, (void*)virtual_address);
f010517d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105180:	83 ec 08             	sub    $0x8,%esp
f0105183:	50                   	push   %eax
f0105184:	6a 00                	push   $0x0
f0105186:	e8 4d de ff ff       	call   f0102fd8 <tlb_invalidate>
f010518b:	83 c4 10             	add    $0x10,%esp
 }
f010518e:	90                   	nop
f010518f:	c9                   	leave  
f0105190:	c3                   	ret    

f0105191 <pt_clear_page_table_entry>:

 inline void pt_clear_page_table_entry(struct Env* ptr_env, uint32 virtual_address)
 {
f0105191:	55                   	push   %ebp
f0105192:	89 e5                	mov    %esp,%ebp
f0105194:	83 ec 28             	sub    $0x28,%esp
	 uint32* ptr_pgdir = ptr_env->env_page_directory;
f0105197:	8b 45 08             	mov    0x8(%ebp),%eax
f010519a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010519d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	 uint32* ptr_page_table;
	 //if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	 //	panic("function pt_set_page_unmodified() called with invalid virtual address\n") ;

	 uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)];
f01051a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01051a3:	c1 e8 16             	shr    $0x16,%eax
f01051a6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01051ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01051b0:	01 d0                	add    %edx,%eax
f01051b2:	8b 00                	mov    (%eax),%eax
f01051b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	 if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f01051b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051ba:	83 e0 01             	and    $0x1,%eax
f01051bd:	85 c0                	test   %eax,%eax
f01051bf:	0f 84 84 00 00 00    	je     f0105249 <pt_clear_page_table_entry+0xb8>
	 {
		 if (USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f01051c5:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f01051cc:	77 19                	ja     f01051e7 <pt_clear_page_table_entry+0x56>
		 {
			 ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry));
f01051ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01051d6:	83 ec 0c             	sub    $0xc,%esp
f01051d9:	50                   	push   %eax
f01051da:	e8 13 7e 00 00       	call   f010cff2 <kheap_virtual_address>
f01051df:	83 c4 10             	add    $0x10,%esp
f01051e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051e5:	eb 40                	jmp    f0105227 <pt_clear_page_table_entry+0x96>
		 }
		 else
		 {
			 ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry));
f01051e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01051ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01051f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01051f5:	c1 e8 0c             	shr    $0xc,%eax
f01051f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01051fb:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f0105200:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105203:	72 17                	jb     f010521c <pt_clear_page_table_entry+0x8b>
f0105205:	ff 75 e8             	pushl  -0x18(%ebp)
f0105208:	68 fc f2 11 f0       	push   $0xf011f2fc
f010520d:	68 51 05 00 00       	push   $0x551
f0105212:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0105217:	e8 93 af ff ff       	call   f01001af <_panic>
f010521c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010521f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105224:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 }

		 ptr_page_table[PTX(virtual_address)] = 0;
f0105227:	8b 45 0c             	mov    0xc(%ebp),%eax
f010522a:	c1 e8 0c             	shr    $0xc,%eax
f010522d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105232:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105239:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523c:	01 d0                	add    %edx,%eax
f010523e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0105244:	e9 92 00 00 00       	jmp    f01052db <pt_clear_page_table_entry+0x14a>
	 }
	 else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0105249:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010524d:	74 75                	je     f01052c4 <pt_clear_page_table_entry+0x133>
	 {
		 //cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		 //Temporary read the table from page file into main memory

		 int success = __pf_read_env_table(ptr_env, virtual_address, (void*)ptr_temp_page);
f010524f:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f0105254:	83 ec 04             	sub    $0x4,%esp
f0105257:	50                   	push   %eax
f0105258:	ff 75 0c             	pushl  0xc(%ebp)
f010525b:	ff 75 08             	pushl  0x8(%ebp)
f010525e:	e8 82 70 00 00       	call   f010c2e5 <__pf_read_env_table>
f0105263:	83 c4 10             	add    $0x10,%esp
f0105266:	89 45 e0             	mov    %eax,-0x20(%ebp)
		 ptr_page_table = (uint32*)ptr_temp_page;
f0105269:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f010526e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 if (success == E_TABLE_NOT_EXIST_IN_PF)
f0105271:	83 7d e0 f6          	cmpl   $0xfffffff6,-0x20(%ebp)
f0105275:	75 17                	jne    f010528e <pt_clear_page_table_entry+0xfd>
			 panic("pt_clear_page_table_entry: table not found in PF when expected to find one !. please revise your table fault\
f0105277:	83 ec 04             	sub    $0x4,%esp
f010527a:	68 44 f7 11 f0       	push   $0xf011f744
f010527f:	68 5f 05 00 00       	push   $0x55f
f0105284:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0105289:	e8 21 af ff ff       	call   f01001af <_panic>
			 handling code");

		 ptr_page_table[PTX(virtual_address)] = 0;
f010528e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105291:	c1 e8 0c             	shr    $0xc,%eax
f0105294:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105299:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01052a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052a3:	01 d0                	add    %edx,%eax
f01052a5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		 __pf_write_env_table(ptr_env, virtual_address, (void*)ptr_temp_page);
f01052ab:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f01052b0:	83 ec 04             	sub    $0x4,%esp
f01052b3:	50                   	push   %eax
f01052b4:	ff 75 0c             	pushl  0xc(%ebp)
f01052b7:	ff 75 08             	pushl  0x8(%ebp)
f01052ba:	e8 81 6f 00 00       	call   f010c240 <__pf_write_env_table>
f01052bf:	83 c4 10             	add    $0x10,%esp
f01052c2:	eb 17                	jmp    f01052db <pt_clear_page_table_entry+0x14a>
	 }
	 else
		 panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n");
f01052c4:	83 ec 04             	sub    $0x4,%esp
f01052c7:	68 c4 f7 11 f0       	push   $0xf011f7c4
f01052cc:	68 66 05 00 00       	push   $0x566
f01052d1:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01052d6:	e8 d4 ae ff ff       	call   f01001af <_panic>


	 tlb_invalidate((void*)NULL, (void*)virtual_address);
f01052db:	8b 45 0c             	mov    0xc(%ebp),%eax
f01052de:	83 ec 08             	sub    $0x8,%esp
f01052e1:	50                   	push   %eax
f01052e2:	6a 00                	push   $0x0
f01052e4:	e8 ef dc ff ff       	call   f0102fd8 <tlb_invalidate>
f01052e9:	83 c4 10             	add    $0x10,%esp
 }
f01052ec:	90                   	nop
f01052ed:	c9                   	leave  
f01052ee:	c3                   	ret    

f01052ef <pt_get_page_permissions>:

 inline uint32 pt_get_page_permissions(struct Env* ptr_env, uint32 virtual_address)
 {
f01052ef:	55                   	push   %ebp
f01052f0:	89 e5                	mov    %esp,%ebp
f01052f2:	83 ec 28             	sub    $0x28,%esp
	 uint32* ptr_pgdir = ptr_env->env_page_directory;
f01052f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01052f8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01052fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	 uint32* ptr_page_table;

	 uint32 	page_directory_entry = ptr_pgdir[PDX(virtual_address)];
f01052fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105301:	c1 e8 16             	shr    $0x16,%eax
f0105304:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010530b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010530e:	01 d0                	add    %edx,%eax
f0105310:	8b 00                	mov    (%eax),%eax
f0105312:	89 45 ec             	mov    %eax,-0x14(%ebp)
	 if ((page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f0105315:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105318:	83 e0 01             	and    $0x1,%eax
f010531b:	85 c0                	test   %eax,%eax
f010531d:	74 67                	je     f0105386 <pt_get_page_permissions+0x97>
	 {
		 if (USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010531f:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0105326:	77 1c                	ja     f0105344 <pt_get_page_permissions+0x55>
		 {
			 ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry));
f0105328:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010532b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105330:	83 ec 0c             	sub    $0xc,%esp
f0105333:	50                   	push   %eax
f0105334:	e8 b9 7c 00 00       	call   f010cff2 <kheap_virtual_address>
f0105339:	83 c4 10             	add    $0x10,%esp
f010533c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010533f:	e9 8e 00 00 00       	jmp    f01053d2 <pt_get_page_permissions+0xe3>
		 }
		 else
		 {
			 ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry));
f0105344:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105347:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010534c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010534f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105352:	c1 e8 0c             	shr    $0xc,%eax
f0105355:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0105358:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f010535d:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0105360:	72 17                	jb     f0105379 <pt_get_page_permissions+0x8a>
f0105362:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105365:	68 fc f2 11 f0       	push   $0xf011f2fc
f010536a:	68 7a 05 00 00       	push   $0x57a
f010536f:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0105374:	e8 36 ae ff ff       	call   f01001af <_panic>
f0105379:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010537c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105381:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105384:	eb 4c                	jmp    f01053d2 <pt_get_page_permissions+0xe3>
		 }
	 }
	 else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0105386:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010538a:	74 3f                	je     f01053cb <pt_get_page_permissions+0xdc>
	 {
		 //cprintf("Warning %d: pt_is_page_modified() is called while the page table is on disk!!\n", ++cnt);
		 //Temporary read the table from page file into main memory
		 int success = __pf_read_env_table(ptr_env, virtual_address, (void*)ptr_temp_page);
f010538c:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f0105391:	83 ec 04             	sub    $0x4,%esp
f0105394:	50                   	push   %eax
f0105395:	ff 75 0c             	pushl  0xc(%ebp)
f0105398:	ff 75 08             	pushl  0x8(%ebp)
f010539b:	e8 45 6f 00 00       	call   f010c2e5 <__pf_read_env_table>
f01053a0:	83 c4 10             	add    $0x10,%esp
f01053a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		 ptr_page_table = (uint32*)ptr_temp_page;
f01053a6:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f01053ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
		 if (success == E_TABLE_NOT_EXIST_IN_PF)
f01053ae:	83 7d e8 f6          	cmpl   $0xfffffff6,-0x18(%ebp)
f01053b2:	75 1e                	jne    f01053d2 <pt_get_page_permissions+0xe3>
			 panic("pt_get_page_permissions: table not found in PF when expected to find one !. please revise your table fault\
f01053b4:	83 ec 04             	sub    $0x4,%esp
f01053b7:	68 3c f8 11 f0       	push   $0xf011f83c
f01053bc:	68 85 05 00 00       	push   $0x585
f01053c1:	68 d5 f2 11 f0       	push   $0xf011f2d5
f01053c6:	e8 e4 ad ff ff       	call   f01001af <_panic>
			 handling code");
	 }
	 else
		 return 0;
f01053cb:	b8 00 00 00 00       	mov    $0x0,%eax
f01053d0:	eb 1e                	jmp    f01053f0 <pt_get_page_permissions+0x101>
	 //panic("function pt_get_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;

	 //	if(get_page_table(ptr_pgdir, (void *)virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
	 //		panic("function pt_is_page_modified() called with invalid virtual address\n") ;

	 return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f01053d2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01053d5:	c1 e8 0c             	shr    $0xc,%eax
f01053d8:	25 ff 03 00 00       	and    $0x3ff,%eax
f01053dd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01053e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e7:	01 d0                	add    %edx,%eax
f01053e9:	8b 00                	mov    (%eax),%eax
f01053eb:	25 ff 0f 00 00       	and    $0xfff,%eax
 }
f01053f0:	c9                   	leave  
f01053f1:	c3                   	ret    

f01053f2 <create_frames_storage>:
 //=============================================================
 // 2014 - edited in 2017
 //=============================================================
 // [1] if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
 inline uint32* create_frames_storage()
 {
f01053f2:	55                   	push   %ebp
f01053f3:	89 e5                	mov    %esp,%ebp
f01053f5:	83 ec 18             	sub    $0x18,%esp
	 uint32* frames_storage = (void*)kmalloc(PAGE_SIZE);
f01053f8:	83 ec 0c             	sub    $0xc,%esp
f01053fb:	68 00 10 00 00       	push   $0x1000
f0105400:	e8 90 7a 00 00       	call   f010ce95 <kmalloc>
f0105405:	83 c4 10             	add    $0x10,%esp
f0105408:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 if (frames_storage == NULL)
f010540b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010540f:	75 17                	jne    f0105428 <create_frames_storage+0x36>
	 {
		 panic("NOT ENOUGH KERNEL HEAP SPACE");
f0105411:	83 ec 04             	sub    $0x4,%esp
f0105414:	68 79 f3 11 f0       	push   $0xf011f379
f0105419:	68 9b 05 00 00       	push   $0x59b
f010541e:	68 d5 f2 11 f0       	push   $0xf011f2d5
f0105423:	e8 87 ad ff ff       	call   f01001af <_panic>
	 }
	 return frames_storage;
f0105428:	8b 45 f4             	mov    -0xc(%ebp),%eax
 }
f010542b:	c9                   	leave  
f010542c:	c3                   	ret    

f010542d <add_frame_to_storage>:
 // [2] Add a frame info to the storage of frames at the given index
 inline void add_frame_to_storage(uint32* frames_storage, struct Frame_Info* ptr_frame_info, uint32 index)
 {
f010542d:	55                   	push   %ebp
f010542e:	89 e5                	mov    %esp,%ebp
f0105430:	53                   	push   %ebx
f0105431:	83 ec 14             	sub    $0x14,%esp
	 uint32 va = index * PAGE_SIZE;
f0105434:	8b 45 10             	mov    0x10(%ebp),%eax
f0105437:	c1 e0 0c             	shl    $0xc,%eax
f010543a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 uint32* ptr_page_table;
	 int r = get_page_table(frames_storage, (void*)va, &ptr_page_table);
f010543d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105440:	83 ec 04             	sub    $0x4,%esp
f0105443:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0105446:	52                   	push   %edx
f0105447:	50                   	push   %eax
f0105448:	ff 75 08             	pushl  0x8(%ebp)
f010544b:	e8 8b e7 ff ff       	call   f0103bdb <get_page_table>
f0105450:	83 c4 10             	add    $0x10,%esp
f0105453:	89 45 f0             	mov    %eax,-0x10(%ebp)
	 if (r == TABLE_NOT_EXIST)
f0105456:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010545a:	75 14                	jne    f0105470 <add_frame_to_storage+0x43>
	 {
		 if (USE_KHEAP)
		 {
			 ptr_page_table = create_page_table(frames_storage, (uint32)va);
f010545c:	83 ec 08             	sub    $0x8,%esp
f010545f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105462:	ff 75 08             	pushl  0x8(%ebp)
f0105465:	e8 c9 e8 ff ff       	call   f0103d33 <create_page_table>
f010546a:	83 c4 10             	add    $0x10,%esp
f010546d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		 {
			 __static_cpt(frames_storage, (uint32)va, &ptr_page_table);
		 }

	 }
	 ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0105470:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105473:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105476:	c1 ea 0c             	shr    $0xc,%edx
f0105479:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010547f:	c1 e2 02             	shl    $0x2,%edx
f0105482:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0105485:	83 ec 0c             	sub    $0xc,%esp
f0105488:	ff 75 0c             	pushl  0xc(%ebp)
f010548b:	e8 cd dd ff ff       	call   f010325d <to_physical_address>
f0105490:	83 c4 10             	add    $0x10,%esp
f0105493:	83 c8 01             	or     $0x1,%eax
f0105496:	89 03                	mov    %eax,(%ebx)
 }
f0105498:	90                   	nop
f0105499:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010549c:	c9                   	leave  
f010549d:	c3                   	ret    

f010549e <get_frame_from_storage>:

 // [3] Get a frame info from the storage of frames at the given index
 inline struct Frame_Info* get_frame_from_storage(uint32* frames_storage, uint32 index)
 {
f010549e:	55                   	push   %ebp
f010549f:	89 e5                	mov    %esp,%ebp
f01054a1:	83 ec 18             	sub    $0x18,%esp
	 struct Frame_Info* ptr_frame_info;
	 uint32* ptr_page_table;
	 uint32 va = index * PAGE_SIZE;
f01054a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01054a7:	c1 e0 0c             	shl    $0xc,%eax
f01054aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	 ptr_frame_info = get_frame_info(frames_storage, (void*)va, &ptr_page_table);
f01054ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054b0:	83 ec 04             	sub    $0x4,%esp
f01054b3:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01054b6:	52                   	push   %edx
f01054b7:	50                   	push   %eax
f01054b8:	ff 75 08             	pushl  0x8(%ebp)
f01054bb:	e8 d6 e9 ff ff       	call   f0103e96 <get_frame_info>
f01054c0:	83 c4 10             	add    $0x10,%esp
f01054c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	 return ptr_frame_info;
f01054c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
 }
f01054c9:	c9                   	leave  
f01054ca:	c3                   	ret    

f01054cb <clear_frames_storage>:

 // [4] Clear the storage of frames
 inline void clear_frames_storage(uint32* frames_storage)
 {
f01054cb:	55                   	push   %ebp
f01054cc:	89 e5                	mov    %esp,%ebp
f01054ce:	83 ec 18             	sub    $0x18,%esp
	 int fourMega = 1024 * PAGE_SIZE;
f01054d1:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	 int i;
	 for (i = 0; i < 1024; i++)
f01054d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01054df:	eb 5b                	jmp    f010553c <clear_frames_storage+0x71>
	 {
		 if (frames_storage[i] != 0)
f01054e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01054eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01054ee:	01 d0                	add    %edx,%eax
f01054f0:	8b 00                	mov    (%eax),%eax
f01054f2:	85 c0                	test   %eax,%eax
f01054f4:	74 43                	je     f0105539 <clear_frames_storage+0x6e>
		 {
			 if (USE_KHEAP)
			 {
				 kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
f01054f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105500:	8b 45 08             	mov    0x8(%ebp),%eax
f0105503:	01 d0                	add    %edx,%eax
f0105505:	8b 00                	mov    (%eax),%eax
f0105507:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010550c:	83 ec 0c             	sub    $0xc,%esp
f010550f:	50                   	push   %eax
f0105510:	e8 dd 7a 00 00       	call   f010cff2 <kheap_virtual_address>
f0105515:	83 c4 10             	add    $0x10,%esp
f0105518:	83 ec 0c             	sub    $0xc,%esp
f010551b:	50                   	push   %eax
f010551c:	e8 bf 79 00 00       	call   f010cee0 <kfree>
f0105521:	83 c4 10             	add    $0x10,%esp
			 }
			 else
			 {
				 free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			 }
			 frames_storage[i] = 0;
f0105524:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105527:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010552e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105531:	01 d0                	add    %edx,%eax
f0105533:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 // [4] Clear the storage of frames
 inline void clear_frames_storage(uint32* frames_storage)
 {
	 int fourMega = 1024 * PAGE_SIZE;
	 int i;
	 for (i = 0; i < 1024; i++)
f0105539:	ff 45 f4             	incl   -0xc(%ebp)
f010553c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105543:	7e 9c                	jle    f01054e1 <clear_frames_storage+0x16>
				 free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
			 }
			 frames_storage[i] = 0;
		 }
	 }
 }
f0105545:	90                   	nop
f0105546:	c9                   	leave  
f0105547:	c3                   	ret    

f0105548 <setUHeapPlacementStrategyFIRSTFIT>:
 //********************************************************************************//
 /*2015*/
 void setUHeapPlacementStrategyFIRSTFIT() { _UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT; }
f0105548:	55                   	push   %ebp
f0105549:	89 e5                	mov    %esp,%ebp
f010554b:	c7 05 88 28 7e f0 01 	movl   $0x1,0xf07e2888
f0105552:	00 00 00 
f0105555:	90                   	nop
f0105556:	5d                   	pop    %ebp
f0105557:	c3                   	ret    

f0105558 <setUHeapPlacementStrategyBESTFIT>:
 void setUHeapPlacementStrategyBESTFIT() { _UHeapPlacementStrategy = UHP_PLACE_BESTFIT; }
f0105558:	55                   	push   %ebp
f0105559:	89 e5                	mov    %esp,%ebp
f010555b:	c7 05 88 28 7e f0 02 	movl   $0x2,0xf07e2888
f0105562:	00 00 00 
f0105565:	90                   	nop
f0105566:	5d                   	pop    %ebp
f0105567:	c3                   	ret    

f0105568 <setUHeapPlacementStrategyNEXTFIT>:
 void setUHeapPlacementStrategyNEXTFIT() { _UHeapPlacementStrategy = UHP_PLACE_NEXTFIT; }
f0105568:	55                   	push   %ebp
f0105569:	89 e5                	mov    %esp,%ebp
f010556b:	c7 05 88 28 7e f0 03 	movl   $0x3,0xf07e2888
f0105572:	00 00 00 
f0105575:	90                   	nop
f0105576:	5d                   	pop    %ebp
f0105577:	c3                   	ret    

f0105578 <setUHeapPlacementStrategyWORSTFIT>:
 void setUHeapPlacementStrategyWORSTFIT() { _UHeapPlacementStrategy = UHP_PLACE_WORSTFIT; }
f0105578:	55                   	push   %ebp
f0105579:	89 e5                	mov    %esp,%ebp
f010557b:	c7 05 88 28 7e f0 04 	movl   $0x4,0xf07e2888
f0105582:	00 00 00 
f0105585:	90                   	nop
f0105586:	5d                   	pop    %ebp
f0105587:	c3                   	ret    

f0105588 <isUHeapPlacementStrategyFIRSTFIT>:

 uint32 isUHeapPlacementStrategyFIRSTFIT() { if (_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0; }
f0105588:	55                   	push   %ebp
f0105589:	89 e5                	mov    %esp,%ebp
f010558b:	a1 88 28 7e f0       	mov    0xf07e2888,%eax
f0105590:	83 f8 01             	cmp    $0x1,%eax
f0105593:	75 07                	jne    f010559c <isUHeapPlacementStrategyFIRSTFIT+0x14>
f0105595:	b8 01 00 00 00       	mov    $0x1,%eax
f010559a:	eb 05                	jmp    f01055a1 <isUHeapPlacementStrategyFIRSTFIT+0x19>
f010559c:	b8 00 00 00 00       	mov    $0x0,%eax
f01055a1:	5d                   	pop    %ebp
f01055a2:	c3                   	ret    

f01055a3 <isUHeapPlacementStrategyBESTFIT>:
 uint32 isUHeapPlacementStrategyBESTFIT() { if (_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0; }
f01055a3:	55                   	push   %ebp
f01055a4:	89 e5                	mov    %esp,%ebp
f01055a6:	a1 88 28 7e f0       	mov    0xf07e2888,%eax
f01055ab:	83 f8 02             	cmp    $0x2,%eax
f01055ae:	75 07                	jne    f01055b7 <isUHeapPlacementStrategyBESTFIT+0x14>
f01055b0:	b8 01 00 00 00       	mov    $0x1,%eax
f01055b5:	eb 05                	jmp    f01055bc <isUHeapPlacementStrategyBESTFIT+0x19>
f01055b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01055bc:	5d                   	pop    %ebp
f01055bd:	c3                   	ret    

f01055be <isUHeapPlacementStrategyNEXTFIT>:
 uint32 isUHeapPlacementStrategyNEXTFIT() { if (_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0; }
f01055be:	55                   	push   %ebp
f01055bf:	89 e5                	mov    %esp,%ebp
f01055c1:	a1 88 28 7e f0       	mov    0xf07e2888,%eax
f01055c6:	83 f8 03             	cmp    $0x3,%eax
f01055c9:	75 07                	jne    f01055d2 <isUHeapPlacementStrategyNEXTFIT+0x14>
f01055cb:	b8 01 00 00 00       	mov    $0x1,%eax
f01055d0:	eb 05                	jmp    f01055d7 <isUHeapPlacementStrategyNEXTFIT+0x19>
f01055d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01055d7:	5d                   	pop    %ebp
f01055d8:	c3                   	ret    

f01055d9 <isUHeapPlacementStrategyWORSTFIT>:
 uint32 isUHeapPlacementStrategyWORSTFIT() { if (_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0; }
f01055d9:	55                   	push   %ebp
f01055da:	89 e5                	mov    %esp,%ebp
f01055dc:	a1 88 28 7e f0       	mov    0xf07e2888,%eax
f01055e1:	83 f8 04             	cmp    $0x4,%eax
f01055e4:	75 07                	jne    f01055ed <isUHeapPlacementStrategyWORSTFIT+0x14>
f01055e6:	b8 01 00 00 00       	mov    $0x1,%eax
f01055eb:	eb 05                	jmp    f01055f2 <isUHeapPlacementStrategyWORSTFIT+0x19>
f01055ed:	b8 00 00 00 00       	mov    $0x0,%eax
f01055f2:	5d                   	pop    %ebp
f01055f3:	c3                   	ret    

f01055f4 <setKHeapPlacementStrategyCONTALLOC>:

 //********************************************************************************//
 /*2017*/
 void setKHeapPlacementStrategyCONTALLOC() { _KHeapPlacementStrategy = KHP_PLACE_CONTALLOC; }
f01055f4:	55                   	push   %ebp
f01055f5:	89 e5                	mov    %esp,%ebp
f01055f7:	c7 05 b0 28 7e f0 00 	movl   $0x0,0xf07e28b0
f01055fe:	00 00 00 
f0105601:	90                   	nop
f0105602:	5d                   	pop    %ebp
f0105603:	c3                   	ret    

f0105604 <setKHeapPlacementStrategyFIRSTFIT>:
 void setKHeapPlacementStrategyFIRSTFIT() { _KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT; }
f0105604:	55                   	push   %ebp
f0105605:	89 e5                	mov    %esp,%ebp
f0105607:	c7 05 b0 28 7e f0 01 	movl   $0x1,0xf07e28b0
f010560e:	00 00 00 
f0105611:	90                   	nop
f0105612:	5d                   	pop    %ebp
f0105613:	c3                   	ret    

f0105614 <setKHeapPlacementStrategyBESTFIT>:
 void setKHeapPlacementStrategyBESTFIT() { _KHeapPlacementStrategy = KHP_PLACE_BESTFIT; }
f0105614:	55                   	push   %ebp
f0105615:	89 e5                	mov    %esp,%ebp
f0105617:	c7 05 b0 28 7e f0 02 	movl   $0x2,0xf07e28b0
f010561e:	00 00 00 
f0105621:	90                   	nop
f0105622:	5d                   	pop    %ebp
f0105623:	c3                   	ret    

f0105624 <setKHeapPlacementStrategyNEXTFIT>:
 void setKHeapPlacementStrategyNEXTFIT() { _KHeapPlacementStrategy = KHP_PLACE_NEXTFIT; }
f0105624:	55                   	push   %ebp
f0105625:	89 e5                	mov    %esp,%ebp
f0105627:	c7 05 b0 28 7e f0 03 	movl   $0x3,0xf07e28b0
f010562e:	00 00 00 
f0105631:	90                   	nop
f0105632:	5d                   	pop    %ebp
f0105633:	c3                   	ret    

f0105634 <setKHeapPlacementStrategyWORSTFIT>:
 void setKHeapPlacementStrategyWORSTFIT() { _KHeapPlacementStrategy = KHP_PLACE_WORSTFIT; }
f0105634:	55                   	push   %ebp
f0105635:	89 e5                	mov    %esp,%ebp
f0105637:	c7 05 b0 28 7e f0 04 	movl   $0x4,0xf07e28b0
f010563e:	00 00 00 
f0105641:	90                   	nop
f0105642:	5d                   	pop    %ebp
f0105643:	c3                   	ret    

f0105644 <isKHeapPlacementStrategyCONTALLOC>:

 uint32 isKHeapPlacementStrategyCONTALLOC() { if (_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0; }
f0105644:	55                   	push   %ebp
f0105645:	89 e5                	mov    %esp,%ebp
f0105647:	a1 b0 28 7e f0       	mov    0xf07e28b0,%eax
f010564c:	85 c0                	test   %eax,%eax
f010564e:	75 07                	jne    f0105657 <isKHeapPlacementStrategyCONTALLOC+0x13>
f0105650:	b8 01 00 00 00       	mov    $0x1,%eax
f0105655:	eb 05                	jmp    f010565c <isKHeapPlacementStrategyCONTALLOC+0x18>
f0105657:	b8 00 00 00 00       	mov    $0x0,%eax
f010565c:	5d                   	pop    %ebp
f010565d:	c3                   	ret    

f010565e <isKHeapPlacementStrategyFIRSTFIT>:
 uint32 isKHeapPlacementStrategyFIRSTFIT() { if (_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0; }
f010565e:	55                   	push   %ebp
f010565f:	89 e5                	mov    %esp,%ebp
f0105661:	a1 b0 28 7e f0       	mov    0xf07e28b0,%eax
f0105666:	83 f8 01             	cmp    $0x1,%eax
f0105669:	75 07                	jne    f0105672 <isKHeapPlacementStrategyFIRSTFIT+0x14>
f010566b:	b8 01 00 00 00       	mov    $0x1,%eax
f0105670:	eb 05                	jmp    f0105677 <isKHeapPlacementStrategyFIRSTFIT+0x19>
f0105672:	b8 00 00 00 00       	mov    $0x0,%eax
f0105677:	5d                   	pop    %ebp
f0105678:	c3                   	ret    

f0105679 <isKHeapPlacementStrategyBESTFIT>:
 uint32 isKHeapPlacementStrategyBESTFIT() { if (_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0; }
f0105679:	55                   	push   %ebp
f010567a:	89 e5                	mov    %esp,%ebp
f010567c:	a1 b0 28 7e f0       	mov    0xf07e28b0,%eax
f0105681:	83 f8 02             	cmp    $0x2,%eax
f0105684:	75 07                	jne    f010568d <isKHeapPlacementStrategyBESTFIT+0x14>
f0105686:	b8 01 00 00 00       	mov    $0x1,%eax
f010568b:	eb 05                	jmp    f0105692 <isKHeapPlacementStrategyBESTFIT+0x19>
f010568d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105692:	5d                   	pop    %ebp
f0105693:	c3                   	ret    

f0105694 <isKHeapPlacementStrategyNEXTFIT>:
 uint32 isKHeapPlacementStrategyNEXTFIT() { if (_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0; }
f0105694:	55                   	push   %ebp
f0105695:	89 e5                	mov    %esp,%ebp
f0105697:	a1 b0 28 7e f0       	mov    0xf07e28b0,%eax
f010569c:	83 f8 03             	cmp    $0x3,%eax
f010569f:	75 07                	jne    f01056a8 <isKHeapPlacementStrategyNEXTFIT+0x14>
f01056a1:	b8 01 00 00 00       	mov    $0x1,%eax
f01056a6:	eb 05                	jmp    f01056ad <isKHeapPlacementStrategyNEXTFIT+0x19>
f01056a8:	b8 00 00 00 00       	mov    $0x0,%eax
f01056ad:	5d                   	pop    %ebp
f01056ae:	c3                   	ret    

f01056af <isKHeapPlacementStrategyWORSTFIT>:
 uint32 isKHeapPlacementStrategyWORSTFIT() { if (_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0; }
f01056af:	55                   	push   %ebp
f01056b0:	89 e5                	mov    %esp,%ebp
f01056b2:	a1 b0 28 7e f0       	mov    0xf07e28b0,%eax
f01056b7:	83 f8 04             	cmp    $0x4,%eax
f01056ba:	75 07                	jne    f01056c3 <isKHeapPlacementStrategyWORSTFIT+0x14>
f01056bc:	b8 01 00 00 00       	mov    $0x1,%eax
f01056c1:	eb 05                	jmp    f01056c8 <isKHeapPlacementStrategyWORSTFIT+0x19>
f01056c3:	b8 00 00 00 00       	mov    $0x0,%eax
f01056c8:	5d                   	pop    %ebp
f01056c9:	c3                   	ret    

f01056ca <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f01056ca:	55                   	push   %ebp
f01056cb:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f01056cd:	8b 15 94 1f 7e f0    	mov    0xf07e1f94,%edx
f01056d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01056d6:	89 10                	mov    %edx,(%eax)
f01056d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01056db:	8b 00                	mov    (%eax),%eax
f01056dd:	85 c0                	test   %eax,%eax
f01056df:	75 07                	jne    f01056e8 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f01056e1:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f01056e6:	eb 11                	jmp    f01056f9 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f01056e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01056eb:	8b 00                	mov    (%eax),%eax
f01056ed:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f01056f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01056f9:	5d                   	pop    %ebp
f01056fa:	c3                   	ret    

f01056fb <free_environment>:

// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f01056fb:	55                   	push   %ebp
f01056fc:	89 e5                	mov    %esp,%ebp
f01056fe:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0105701:	83 ec 04             	sub    $0x4,%esp
f0105704:	68 40 03 00 00       	push   $0x340
f0105709:	6a 00                	push   $0x0
f010570b:	ff 75 08             	pushl  0x8(%ebp)
f010570e:	e8 58 78 01 00       	call   f011cf6b <memset>
f0105713:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0105716:	8b 45 08             	mov    0x8(%ebp),%eax
f0105719:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0105720:	8b 15 94 1f 7e f0    	mov    0xf07e1f94,%edx
f0105726:	8b 45 08             	mov    0x8(%ebp),%eax
f0105729:	89 50 44             	mov    %edx,0x44(%eax)
f010572c:	8b 45 08             	mov    0x8(%ebp),%eax
f010572f:	8b 40 44             	mov    0x44(%eax),%eax
f0105732:	85 c0                	test   %eax,%eax
f0105734:	74 0d                	je     f0105743 <free_environment+0x48>
f0105736:	a1 94 1f 7e f0       	mov    0xf07e1f94,%eax
f010573b:	8b 55 08             	mov    0x8(%ebp),%edx
f010573e:	89 50 48             	mov    %edx,0x48(%eax)
f0105741:	eb 08                	jmp    f010574b <free_environment+0x50>
f0105743:	8b 45 08             	mov    0x8(%ebp),%eax
f0105746:	a3 98 1f 7e f0       	mov    %eax,0xf07e1f98
f010574b:	8b 45 08             	mov    0x8(%ebp),%eax
f010574e:	a3 94 1f 7e f0       	mov    %eax,0xf07e1f94
f0105753:	8b 45 08             	mov    0x8(%ebp),%eax
f0105756:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010575d:	a1 a0 1f 7e f0       	mov    0xf07e1fa0,%eax
f0105762:	40                   	inc    %eax
f0105763:	a3 a0 1f 7e f0       	mov    %eax,0xf07e1fa0
}
f0105768:	90                   	nop
f0105769:	c9                   	leave  
f010576a:	c3                   	ret    

f010576b <create_user_page_WS>:


void * create_user_page_WS(unsigned int numOfElements)
{
f010576b:	55                   	push   %ebp
f010576c:	89 e5                	mov    %esp,%ebp
f010576e:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new space for a working set with numOfElements elements
	uint32 nBytes = sizeof(struct WorkingSetElement) * numOfElements;
f0105771:	8b 55 08             	mov    0x8(%ebp),%edx
f0105774:	89 d0                	mov    %edx,%eax
f0105776:	01 c0                	add    %eax,%eax
f0105778:	01 d0                	add    %edx,%eax
f010577a:	c1 e0 02             	shl    $0x2,%eax
f010577d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return kmalloc(nBytes);
f0105780:	83 ec 0c             	sub    $0xc,%esp
f0105783:	ff 75 f4             	pushl  -0xc(%ebp)
f0105786:	e8 0a 77 00 00       	call   f010ce95 <kmalloc>
f010578b:	83 c4 10             	add    $0x10,%esp
}
f010578e:	c9                   	leave  
f010578f:	c3                   	ret    

f0105790 <create_user_directory>:


void * create_user_directory()
{
f0105790:	55                   	push   %ebp
f0105791:	89 e5                	mov    %esp,%ebp
f0105793:	83 ec 18             	sub    $0x18,%esp
	//Use kmalloc() to allocate a new directory
	uint32* ptr_user_page_directory = (void *)kmalloc(PAGE_SIZE);
f0105796:	83 ec 0c             	sub    $0xc,%esp
f0105799:	68 00 10 00 00       	push   $0x1000
f010579e:	e8 f2 76 00 00       	call   f010ce95 <kmalloc>
f01057a3:	83 c4 10             	add    $0x10,%esp
f01057a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f01057a9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057ad:	75 17                	jne    f01057c6 <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f01057af:	83 ec 04             	sub    $0x4,%esp
f01057b2:	68 49 0a 12 f0       	push   $0xf0120a49
f01057b7:	68 f1 01 00 00       	push   $0x1f1
f01057bc:	68 66 0a 12 f0       	push   $0xf0120a66
f01057c1:	e8 e9 a9 ff ff       	call   f01001af <_panic>
	}
	return ptr_user_page_directory;
f01057c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01057c9:	c9                   	leave  
f01057ca:	c3                   	ret    

f01057cb <ShareWSAtUserSpace>:

void ShareWSAtUserSpace(struct Env* e)
{
f01057cb:	55                   	push   %ebp
f01057cc:	89 e5                	mov    %esp,%ebp
f01057ce:	83 ec 28             	sub    $0x28,%esp
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
f01057d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01057d4:	c7 80 34 03 00 00 00 	movl   $0xa0000000,0x334(%eax)
f01057db:	00 00 a0 
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
f01057de:	8b 45 08             	mov    0x8(%ebp),%eax
f01057e1:	8b 40 74             	mov    0x74(%eax),%eax
f01057e4:	83 ec 0c             	sub    $0xc,%esp
f01057e7:	50                   	push   %eax
f01057e8:	e8 7e ff ff ff       	call   f010576b <create_user_page_WS>
f01057ed:	83 c4 10             	add    $0x10,%esp
f01057f0:	89 c2                	mov    %eax,%edx
f01057f2:	8b 45 08             	mov    0x8(%ebp),%eax
f01057f5:	89 50 78             	mov    %edx,0x78(%eax)
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
f01057f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01057fb:	8b 40 78             	mov    0x78(%eax),%eax
f01057fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f0105801:	8b 45 08             	mov    0x8(%ebp),%eax
f0105804:	8b 50 74             	mov    0x74(%eax),%edx
f0105807:	89 d0                	mov    %edx,%eax
f0105809:	01 c0                	add    %eax,%eax
f010580b:	01 d0                	add    %edx,%eax
f010580d:	c1 e0 02             	shl    $0x2,%eax
f0105810:	89 45 ec             	mov    %eax,-0x14(%ebp)
	unsigned int dva = (unsigned int) (e->__uptr_pws);
f0105813:	8b 45 08             	mov    0x8(%ebp),%eax
f0105816:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f010581c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010581f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105822:	8b 40 78             	mov    0x78(%eax),%eax
f0105825:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105828:	eb 72                	jmp    f010589c <ShareWSAtUserSpace+0xd1>
	{
		//2017: Copy the table entries instead of mapping (to avoid increasing the number of references of corresponding frames)
		//unsigned int pa = kheap_physical_address(sva);
		//map_frame(e->env_page_directory, to_frame_info(pa), (void*)dva, PERM_USER);
		uint32 pa = kheap_physical_address(sva);
f010582a:	83 ec 0c             	sub    $0xc,%esp
f010582d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105830:	e8 1d 78 00 00       	call   f010d052 <kheap_physical_address>
f0105835:	83 c4 10             	add    $0x10,%esp
f0105838:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32* ptr_page_table;
		if (get_page_table(e->env_page_directory, (void*) dva, &ptr_page_table) == TABLE_NOT_EXIST)
f010583b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010583e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105841:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105844:	83 ec 04             	sub    $0x4,%esp
f0105847:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f010584a:	51                   	push   %ecx
f010584b:	52                   	push   %edx
f010584c:	50                   	push   %eax
f010584d:	e8 89 e3 ff ff       	call   f0103bdb <get_page_table>
f0105852:	83 c4 10             	add    $0x10,%esp
f0105855:	83 f8 01             	cmp    $0x1,%eax
f0105858:	75 18                	jne    f0105872 <ShareWSAtUserSpace+0xa7>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
f010585a:	8b 45 08             	mov    0x8(%ebp),%eax
f010585d:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105860:	83 ec 08             	sub    $0x8,%esp
f0105863:	ff 75 f0             	pushl  -0x10(%ebp)
f0105866:	50                   	push   %eax
f0105867:	e8 c7 e4 ff ff       	call   f0103d33 <create_page_table>
f010586c:	83 c4 10             	add    $0x10,%esp
f010586f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
f0105872:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105875:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105878:	c1 ea 0c             	shr    $0xc,%edx
f010587b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0105881:	c1 e2 02             	shl    $0x2,%edx
f0105884:	01 d0                	add    %edx,%eax
f0105886:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105889:	83 ca 05             	or     $0x5,%edx
f010588c:	89 10                	mov    %edx,(%eax)
	e->__uptr_pws = (struct WorkingSetElement*) USER_PAGES_WS_START;
	e->ptr_pageWorkingSet = create_user_page_WS(e->page_WS_max_size);
	unsigned int sva = (unsigned int) e->ptr_pageWorkingSet;
	uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
	unsigned int dva = (unsigned int) (e->__uptr_pws);
	for (sva = (uint32) (e->ptr_pageWorkingSet); sva < ((uint32) (e->ptr_pageWorkingSet) + nBytes); sva += PAGE_SIZE, dva += PAGE_SIZE)
f010588e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105895:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f010589c:	8b 45 08             	mov    0x8(%ebp),%eax
f010589f:	8b 40 78             	mov    0x78(%eax),%eax
f01058a2:	89 c2                	mov    %eax,%edx
f01058a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01058a7:	01 d0                	add    %edx,%eax
f01058a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01058ac:	0f 87 78 ff ff ff    	ja     f010582a <ShareWSAtUserSpace+0x5f>
		{
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
}
f01058b2:	90                   	nop
f01058b3:	c9                   	leave  
f01058b4:	c3                   	ret    

f01058b5 <initialize_environment>:
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory
		, unsigned int phys_user_page_directory)
{
f01058b5:	55                   	push   %ebp
f01058b6:	89 e5                	mov    %esp,%ebp
f01058b8:	83 ec 18             	sub    $0x18,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f01058bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01058be:	8b 55 0c             	mov    0xc(%ebp),%edx
f01058c1:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f01058c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01058c7:	8b 55 10             	mov    0x10(%ebp),%edx
f01058ca:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f01058cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058d4:	eb 17                	jmp    f01058ed <initialize_environment+0x38>
	{
		e->env_page_directory[i] = 0 ;
f01058d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01058d9:	8b 40 5c             	mov    0x5c(%eax),%eax
f01058dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058df:	c1 e2 02             	shl    $0x2,%edx
f01058e2:	01 d0                	add    %edx,%eax
f01058e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f01058ea:	ff 45 f4             	incl   -0xc(%ebp)
f01058ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058f0:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01058f5:	76 df                	jbe    f01058d6 <initialize_environment+0x21>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f01058f7:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f01058fe:	eb 22                	jmp    f0105922 <initialize_environment+0x6d>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0105900:	8b 45 08             	mov    0x8(%ebp),%eax
f0105903:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105906:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105909:	c1 e2 02             	shl    $0x2,%edx
f010590c:	01 c2                	add    %eax,%edx
f010590e:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0105913:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105916:	c1 e1 02             	shl    $0x2,%ecx
f0105919:	01 c8                	add    %ecx,%eax
f010591b:	8b 00                	mov    (%eax),%eax
f010591d:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010591f:	ff 45 f4             	incl   -0xc(%ebp)
f0105922:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0105929:	7e d5                	jle    f0105900 <initialize_environment+0x4b>
	}

	// Allocate the page working set for both kernel and user
#if USE_KHEAP == 1
	{
		ShareWSAtUserSpace(e);
f010592b:	83 ec 0c             	sub    $0xc,%esp
f010592e:	ff 75 08             	pushl  0x8(%ebp)
f0105931:	e8 95 fe ff ff       	call   f01057cb <ShareWSAtUserSpace>
f0105936:	83 c4 10             	add    $0x10,%esp
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0105939:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105940:	eb 50                	jmp    f0105992 <initialize_environment+0xdd>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0105942:	8b 45 08             	mov    0x8(%ebp),%eax
f0105945:	8b 48 78             	mov    0x78(%eax),%ecx
f0105948:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010594b:	89 d0                	mov    %edx,%eax
f010594d:	01 c0                	add    %eax,%eax
f010594f:	01 d0                	add    %edx,%eax
f0105951:	c1 e0 02             	shl    $0x2,%eax
f0105954:	01 c8                	add    %ecx,%eax
f0105956:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010595c:	8b 45 08             	mov    0x8(%ebp),%eax
f010595f:	8b 48 78             	mov    0x78(%eax),%ecx
f0105962:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105965:	89 d0                	mov    %edx,%eax
f0105967:	01 c0                	add    %eax,%eax
f0105969:	01 d0                	add    %edx,%eax
f010596b:	c1 e0 02             	shl    $0x2,%eax
f010596e:	01 c8                	add    %ecx,%eax
f0105970:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0105974:	8b 45 08             	mov    0x8(%ebp),%eax
f0105977:	8b 48 78             	mov    0x78(%eax),%ecx
f010597a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010597d:	89 d0                	mov    %edx,%eax
f010597f:	01 c0                	add    %eax,%eax
f0105981:	01 d0                	add    %edx,%eax
f0105983:	c1 e0 02             	shl    $0x2,%eax
f0105986:	01 c8                	add    %ecx,%eax
f0105988:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
						( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
	}
#endif

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f010598f:	ff 45 f4             	incl   -0xc(%ebp)
f0105992:	8b 45 08             	mov    0x8(%ebp),%eax
f0105995:	8b 50 74             	mov    0x74(%eax),%edx
f0105998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010599b:	39 c2                	cmp    %eax,%edx
f010599d:	77 a3                	ja     f0105942 <initialize_environment+0x8d>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010599f:	8b 45 08             	mov    0x8(%ebp),%eax
f01059a2:	c7 80 d4 02 00 00 00 	movl   $0x0,0x2d4(%eax)
f01059a9:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f01059ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01059b3:	eb 50                	jmp    f0105a05 <initialize_environment+0x150>
	{
		e->__ptr_tws[i].virtual_address = 0;
f01059b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01059b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059bb:	89 d0                	mov    %edx,%eax
f01059bd:	01 c0                	add    %eax,%eax
f01059bf:	01 d0                	add    %edx,%eax
f01059c1:	c1 e0 02             	shl    $0x2,%eax
f01059c4:	01 c8                	add    %ecx,%eax
f01059c6:	83 c0 7c             	add    $0x7c,%eax
f01059c9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f01059cf:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01059d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059d5:	89 d0                	mov    %edx,%eax
f01059d7:	01 c0                	add    %eax,%eax
f01059d9:	01 d0                	add    %edx,%eax
f01059db:	c1 e0 02             	shl    $0x2,%eax
f01059de:	01 c8                	add    %ecx,%eax
f01059e0:	83 e8 80             	sub    $0xffffff80,%eax
f01059e3:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f01059e6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01059e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01059ec:	89 d0                	mov    %edx,%eax
f01059ee:	01 c0                	add    %eax,%eax
f01059f0:	01 d0                	add    %edx,%eax
f01059f2:	c1 e0 02             	shl    $0x2,%eax
f01059f5:	01 c8                	add    %ecx,%eax
f01059f7:	05 84 00 00 00       	add    $0x84,%eax
f01059fc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0105a02:	ff 45 f4             	incl   -0xc(%ebp)
f0105a05:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0105a09:	7e aa                	jle    f01059b5 <initialize_environment+0x100>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0105a0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a0e:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
f0105a15:	00 00 00 

	e->pageFaultsCounter=0;
f0105a18:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a1b:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
f0105a22:	00 00 00 
	e->tableFaultsCounter=0;
f0105a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a28:	c7 80 e0 02 00 00 00 	movl   $0x0,0x2e0(%eax)
f0105a2f:	00 00 00 

	e->freeingFullWSCounter = 0;
f0105a32:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a35:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
f0105a3c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f0105a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a42:	c7 80 e8 02 00 00 00 	movl   $0x0,0x2e8(%eax)
f0105a49:	00 00 00 

	e->nModifiedPages=0;
f0105a4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a4f:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
f0105a56:	00 00 00 
	e->nNotModifiedPages=0;
f0105a59:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a5c:	c7 80 f0 02 00 00 00 	movl   $0x0,0x2f0(%eax)
f0105a63:	00 00 00 

	e->nClocks = 0;
f0105a66:	8b 45 08             	mov    0x8(%ebp),%eax
f0105a69:	c7 80 3c 03 00 00 00 	movl   $0x0,0x33c(%eax)
f0105a70:	00 00 00 
	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0105a73:	83 ec 0c             	sub    $0xc,%esp
f0105a76:	ff 75 08             	pushl  0x8(%ebp)
f0105a79:	e8 ec 0b 00 00       	call   f010666a <complete_environment_initialization>
f0105a7e:	83 c4 10             	add    $0x10,%esp
}
f0105a81:	90                   	nop
f0105a82:	c9                   	leave  
f0105a83:	c3                   	ret    

f0105a84 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0105a84:	55                   	push   %ebp
f0105a85:	89 e5                	mov    %esp,%ebp
f0105a87:	83 ec 48             	sub    $0x48,%esp
	void *vaddr = seg->virtual_address;
f0105a8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105a8d:	8b 40 0c             	mov    0xc(%eax),%eax
f0105a90:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0105a93:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105a96:	8b 40 08             	mov    0x8(%eax),%eax
f0105a99:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f0105a9c:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0105aa3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105aa6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105aa9:	01 c2                	add    %eax,%edx
f0105aab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0105aae:	01 d0                	add    %edx,%eax
f0105ab0:	48                   	dec    %eax
f0105ab1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105ab4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ab7:	ba 00 00 00 00       	mov    $0x0,%edx
f0105abc:	f7 75 dc             	divl   -0x24(%ebp)
f0105abf:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ac2:	29 d0                	sub    %edx,%eax
f0105ac4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0105ac7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105aca:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0105acd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105ad0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0105ad8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info *p = NULL;
f0105adf:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0105ae6:	8b 45 10             	mov    0x10(%ebp),%eax
f0105ae9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0105aef:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0105af6:	0f 85 67 01 00 00    	jne    f0105c63 <program_segment_alloc_map_copy_workingset+0x1df>
f0105afc:	8b 45 08             	mov    0x8(%ebp),%eax
f0105aff:	05 f4 02 00 00       	add    $0x2f4,%eax
f0105b04:	83 ec 08             	sub    $0x8,%esp
f0105b07:	68 58 f9 11 f0       	push   $0xf011f958
f0105b0c:	50                   	push   %eax
f0105b0d:	e8 77 73 01 00       	call   f011ce89 <strcmp>
f0105b12:	83 c4 10             	add    $0x10,%esp
f0105b15:	85 c0                	test   %eax,%eax
f0105b17:	0f 84 46 01 00 00    	je     f0105c63 <program_segment_alloc_map_copy_workingset+0x1df>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f0105b1d:	8b 45 14             	mov    0x14(%ebp),%eax
f0105b20:	83 f8 06             	cmp    $0x6,%eax
f0105b23:	76 05                	jbe    f0105b2a <program_segment_alloc_map_copy_workingset+0xa6>
f0105b25:	b8 06 00 00 00       	mov    $0x6,%eax
f0105b2a:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105b2d:	e9 31 01 00 00       	jmp    f0105c63 <program_segment_alloc_map_copy_workingset+0x1df>
	{
		// Allocate a page
		allocate_frame(&p) ;
f0105b32:	83 ec 0c             	sub    $0xc,%esp
f0105b35:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0105b38:	50                   	push   %eax
f0105b39:	e8 1e df ff ff       	call   f0103a5c <allocate_frame>
f0105b3e:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, (void *)iVA, PERM_USER | PERM_WRITEABLE);
f0105b41:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0105b44:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105b47:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b4a:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105b4d:	6a 06                	push   $0x6
f0105b4f:	51                   	push   %ecx
f0105b50:	52                   	push   %edx
f0105b51:	50                   	push   %eax
f0105b52:	e8 36 e4 ff ff       	call   f0103f8d <loadtime_map_frame>
f0105b57:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f0105b5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b5d:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b60:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b63:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0105b69:	89 d0                	mov    %edx,%eax
f0105b6b:	01 c0                	add    %eax,%eax
f0105b6d:	01 d0                	add    %edx,%eax
f0105b6f:	c1 e0 02             	shl    $0x2,%eax
f0105b72:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0105b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b78:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f0105b7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b7d:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b80:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b83:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0105b89:	89 d0                	mov    %edx,%eax
f0105b8b:	01 c0                	add    %eax,%eax
f0105b8d:	01 d0                	add    %edx,%eax
f0105b8f:	c1 e0 02             	shl    $0x2,%eax
f0105b92:	01 c8                	add    %ecx,%eax
f0105b94:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0105b98:	8b 45 08             	mov    0x8(%ebp),%eax
f0105b9b:	8b 48 78             	mov    0x78(%eax),%ecx
f0105b9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105ba1:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0105ba7:	89 d0                	mov    %edx,%eax
f0105ba9:	01 c0                	add    %eax,%eax
f0105bab:	01 d0                	add    %edx,%eax
f0105bad:	c1 e0 02             	shl    $0x2,%eax
f0105bb0:	01 c8                	add    %ecx,%eax
f0105bb2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)

		e->page_last_WS_index ++;
f0105bb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bbc:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0105bc2:	8d 50 01             	lea    0x1(%eax),%edx
f0105bc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bc8:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0105bce:	8b 45 08             	mov    0x8(%ebp),%eax
f0105bd1:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0105bd7:	8b 55 08             	mov    0x8(%ebp),%edx
f0105bda:	8b 4a 74             	mov    0x74(%edx),%ecx
f0105bdd:	ba 00 00 00 00       	mov    $0x0,%edx
f0105be2:	f7 f1                	div    %ecx
f0105be4:	8b 45 08             	mov    0x8(%ebp),%eax
f0105be7:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0105bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bf0:	c1 e8 16             	shr    $0x16,%eax
f0105bf3:	89 c2                	mov    %eax,%edx
f0105bf5:	8b 45 18             	mov    0x18(%ebp),%eax
f0105bf8:	8b 00                	mov    (%eax),%eax
f0105bfa:	39 c2                	cmp    %eax,%edx
f0105bfc:	74 4e                	je     f0105c4c <program_segment_alloc_map_copy_workingset+0x1c8>
		{
			addTableToTableWorkingSet(e, ROUNDDOWN(iVA, PAGE_SIZE*1024));
f0105bfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c01:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105c04:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105c07:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0105c0c:	83 ec 08             	sub    $0x8,%esp
f0105c0f:	50                   	push   %eax
f0105c10:	ff 75 08             	pushl  0x8(%ebp)
f0105c13:	e8 6a f1 ff ff       	call   f0104d82 <addTableToTableWorkingSet>
f0105c18:	83 c4 10             	add    $0x10,%esp
			if (e->table_last_WS_index == 0)
f0105c1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0105c1e:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
f0105c24:	85 c0                	test   %eax,%eax
f0105c26:	75 17                	jne    f0105c3f <program_segment_alloc_map_copy_workingset+0x1bb>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0105c28:	83 ec 04             	sub    $0x4,%esp
f0105c2b:	68 80 0a 12 f0       	push   $0xf0120a80
f0105c30:	68 87 02 00 00       	push   $0x287
f0105c35:	68 66 0a 12 f0       	push   $0xf0120a66
f0105c3a:	e8 70 a5 ff ff       	call   f01001af <_panic>
			(*lastTableNumber) = PDX(iVA);
f0105c3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c42:	c1 e8 16             	shr    $0x16,%eax
f0105c45:	89 c2                	mov    %eax,%edx
f0105c47:	8b 45 18             	mov    0x18(%ebp),%eax
f0105c4a:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0105c4c:	8b 45 10             	mov    0x10(%ebp),%eax
f0105c4f:	8b 00                	mov    (%eax),%eax
f0105c51:	8d 50 01             	lea    0x1(%eax),%edx
f0105c54:	8b 45 10             	mov    0x10(%ebp),%eax
f0105c57:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0105c59:	ff 45 f0             	incl   -0x10(%ebp)
f0105c5c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c66:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0105c69:	73 0c                	jae    f0105c77 <program_segment_alloc_map_copy_workingset+0x1f3>
f0105c6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105c6e:	3b 45 14             	cmp    0x14(%ebp),%eax
f0105c71:	0f 82 bb fe ff ff    	jb     f0105b32 <program_segment_alloc_map_copy_workingset+0xae>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0105c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105c7a:	8b 00                	mov    (%eax),%eax
f0105c7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f0105c7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105c82:	8b 40 0c             	mov    0xc(%eax),%eax
f0105c85:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105c88:	eb 10                	jmp    f0105c9a <program_segment_alloc_map_copy_workingset+0x216>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0105c8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c8d:	8a 10                	mov    (%eax),%dl
f0105c8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c92:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0105c94:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f0105c97:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105c9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105c9d:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0105ca0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0105ca3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105ca8:	89 c2                	mov    %eax,%edx
f0105caa:	8b 45 10             	mov    0x10(%ebp),%eax
f0105cad:	8b 00                	mov    (%eax),%eax
f0105caf:	c1 e0 0c             	shl    $0xc,%eax
f0105cb2:	01 c2                	add    %eax,%edx
f0105cb4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105cb7:	39 c2                	cmp    %eax,%edx
f0105cb9:	76 1d                	jbe    f0105cd8 <program_segment_alloc_map_copy_workingset+0x254>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0105cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105cbe:	8b 50 04             	mov    0x4(%eax),%edx
f0105cc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cc4:	01 c2                	add    %eax,%edx
f0105cc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0105cc9:	39 c2                	cmp    %eax,%edx
f0105ccb:	77 bd                	ja     f0105c8a <program_segment_alloc_map_copy_workingset+0x206>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105ccd:	eb 09                	jmp    f0105cd8 <program_segment_alloc_map_copy_workingset+0x254>
	{
		*dst_ptr = 0;
f0105ccf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105cd2:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0105cd5:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0105cd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cdb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0105cde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0105ce1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105ce6:	89 c2                	mov    %eax,%edx
f0105ce8:	8b 45 10             	mov    0x10(%ebp),%eax
f0105ceb:	8b 00                	mov    (%eax),%eax
f0105ced:	c1 e0 0c             	shl    $0xc,%eax
f0105cf0:	01 c2                	add    %eax,%edx
f0105cf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105cf5:	39 c2                	cmp    %eax,%edx
f0105cf7:	77 d6                	ja     f0105ccf <program_segment_alloc_map_copy_workingset+0x24b>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, (void *)iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0105cf9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0105cfe:	c9                   	leave  
f0105cff:	c3                   	ret    

f0105d00 <env_create>:

// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f0105d00:	55                   	push   %ebp
f0105d01:	89 e5                	mov    %esp,%ebp
f0105d03:	57                   	push   %edi
f0105d04:	56                   	push   %esi
f0105d05:	53                   	push   %ebx
f0105d06:	81 ec ec 00 00 00    	sub    $0xec,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0105d0c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0105d13:	83 ec 0c             	sub    $0xc,%esp
f0105d16:	ff 75 08             	pushl  0x8(%ebp)
f0105d19:	e8 2f 0d 00 00       	call   f0106a4d <get_user_program_info>
f0105d1e:	83 c4 10             	add    $0x10,%esp
f0105d21:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f0105d24:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
f0105d28:	75 0a                	jne    f0105d34 <env_create+0x34>
f0105d2a:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d2f:	e9 84 06 00 00       	jmp    f01063b8 <env_create+0x6b8>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0105d34:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105d37:	8b 40 08             	mov    0x8(%eax),%eax
f0105d3a:	89 45 bc             	mov    %eax,-0x44(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0105d3d:	c7 85 50 ff ff ff 00 	movl   $0x0,-0xb0(%ebp)
f0105d44:	00 00 00 
	if(allocate_environment(&e) < 0)
f0105d47:	83 ec 0c             	sub    $0xc,%esp
f0105d4a:	8d 85 50 ff ff ff    	lea    -0xb0(%ebp),%eax
f0105d50:	50                   	push   %eax
f0105d51:	e8 74 f9 ff ff       	call   f01056ca <allocate_environment>
f0105d56:	83 c4 10             	add    $0x10,%esp
f0105d59:	85 c0                	test   %eax,%eax
f0105d5b:	79 0a                	jns    f0105d67 <env_create+0x67>
	{
		return 0;
f0105d5d:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d62:	e9 51 06 00 00       	jmp    f01063b8 <env_create+0x6b8>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0105d67:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105d6a:	8b 00                	mov    (%eax),%eax
f0105d6c:	83 ec 0c             	sub    $0xc,%esp
f0105d6f:	50                   	push   %eax
f0105d70:	e8 08 70 01 00       	call   f011cd7d <strlen>
f0105d75:	83 c4 10             	add    $0x10,%esp
f0105d78:	83 f8 3f             	cmp    $0x3f,%eax
f0105d7b:	7f 20                	jg     f0105d9d <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0105d7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105d80:	8b 00                	mov    (%eax),%eax
f0105d82:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105d88:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105d8e:	83 ec 08             	sub    $0x8,%esp
f0105d91:	50                   	push   %eax
f0105d92:	52                   	push   %edx
f0105d93:	e8 34 70 01 00       	call   f011cdcc <strcpy>
f0105d98:	83 c4 10             	add    $0x10,%esp
f0105d9b:	eb 20                	jmp    f0105dbd <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0105d9d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0105da0:	8b 00                	mov    (%eax),%eax
f0105da2:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0105da8:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0105dae:	83 ec 04             	sub    $0x4,%esp
f0105db1:	6a 3f                	push   $0x3f
f0105db3:	50                   	push   %eax
f0105db4:	52                   	push   %edx
f0105db5:	e8 40 70 01 00       	call   f011cdfa <strncpy>
f0105dba:	83 c4 10             	add    $0x10,%esp
	//REMEMBER: "allocate_frame" should always return a free frame
	uint32* ptr_user_page_directory;
	unsigned int phys_user_page_directory;
	if(USE_KHEAP)
	{
		ptr_user_page_directory = create_user_directory();
f0105dbd:	e8 ce f9 ff ff       	call   f0105790 <create_user_directory>
f0105dc2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
f0105dc5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0105dc8:	83 ec 0c             	sub    $0xc,%esp
f0105dcb:	50                   	push   %eax
f0105dcc:	e8 81 72 00 00       	call   f010d052 <kheap_physical_address>
f0105dd1:	83 c4 10             	add    $0x10,%esp
f0105dd4:	89 45 b0             	mov    %eax,-0x50(%ebp)

	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0105dd7:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105ddd:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105de0:	89 50 74             	mov    %edx,0x74(%eax)

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0105de3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105de7:	75 12                	jne    f0105dfb <env_create+0xfb>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0105de9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105def:	c7 80 38 03 00 00 0a 	movl   $0xa,0x338(%eax)
f0105df6:	00 00 00 
f0105df9:	eb 0f                	jmp    f0105e0a <env_create+0x10a>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0105dfb:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e01:	8b 55 10             	mov    0x10(%ebp),%edx
f0105e04:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0105e0a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e10:	83 ec 04             	sub    $0x4,%esp
f0105e13:	ff 75 b0             	pushl  -0x50(%ebp)
f0105e16:	ff 75 b4             	pushl  -0x4c(%ebp)
f0105e19:	50                   	push   %eax
f0105e1a:	e8 96 fa ff ff       	call   f01058b5 <initialize_environment>
f0105e1f:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0105e22:	0f 20 d8             	mov    %cr3,%eax
f0105e25:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	return val;
f0105e28:	8b 45 a4             	mov    -0x5c(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f0105e2b:	89 45 a8             	mov    %eax,-0x58(%ebp)
	lcr3(e->env_cr3) ;
f0105e2e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e34:	8b 40 60             	mov    0x60(%eax),%eax
f0105e37:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0105e3d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0105e43:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0105e46:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0105e4d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0105e54:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105e5a:	8b 40 74             	mov    0x74(%eax),%eax
f0105e5d:	48                   	dec    %eax
f0105e5e:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0105e61:	c7 85 4c ff ff ff ff 	movl   $0xffffffff,-0xb4(%ebp)
f0105e68:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0105e6b:	8d 85 08 ff ff ff    	lea    -0xf8(%ebp),%eax
f0105e71:	83 ec 08             	sub    $0x8,%esp
f0105e74:	ff 75 bc             	pushl  -0x44(%ebp)
f0105e77:	50                   	push   %eax
f0105e78:	e8 b7 0a 00 00       	call   f0106934 <PROGRAM_SEGMENT_FIRST>
f0105e7d:	83 c4 0c             	add    $0xc,%esp
f0105e80:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105e86:	8d 95 08 ff ff ff    	lea    -0xf8(%ebp),%edx
f0105e8c:	b9 05 00 00 00       	mov    $0x5,%ecx
f0105e91:	89 c7                	mov    %eax,%edi
f0105e93:	89 d6                	mov    %edx,%esi
f0105e95:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0105e97:	8d 85 38 ff ff ff    	lea    -0xc8(%ebp),%eax
f0105e9d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0105ea0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105ea3:	8b 40 10             	mov    0x10(%eax),%eax
f0105ea6:	83 f8 ff             	cmp    $0xffffffff,%eax
f0105ea9:	75 07                	jne    f0105eb2 <env_create+0x1b2>
f0105eab:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0105eb2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105eb5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105eb8:	e9 0f 03 00 00       	jmp    f01061cc <env_create+0x4cc>
	{
		segment_counter++;
f0105ebd:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f0105ec0:	c7 85 30 ff ff ff 00 	movl   $0x0,-0xd0(%ebp)
f0105ec7:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0105eca:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105ed0:	83 ec 0c             	sub    $0xc,%esp
f0105ed3:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f0105ed9:	52                   	push   %edx
f0105eda:	ff 75 dc             	pushl  -0x24(%ebp)
f0105edd:	8d 95 30 ff ff ff    	lea    -0xd0(%ebp),%edx
f0105ee3:	52                   	push   %edx
f0105ee4:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105ee7:	50                   	push   %eax
f0105ee8:	e8 97 fb ff ff       	call   f0105a84 <program_segment_alloc_map_copy_workingset>
f0105eed:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0105ef0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0105ef6:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f0105ef9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105efc:	8b 00                	mov    (%eax),%eax
f0105efe:	89 45 a0             	mov    %eax,-0x60(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0105f01:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105f04:	8b 40 0c             	mov    0xc(%eax),%eax
f0105f07:	89 45 9c             	mov    %eax,-0x64(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0105f0a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105f0d:	89 45 98             	mov    %eax,-0x68(%ebp)
f0105f10:	8b 45 98             	mov    -0x68(%ebp),%eax
f0105f13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105f18:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0105f1b:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0105f22:	8b 55 9c             	mov    -0x64(%ebp),%edx
f0105f25:	8b 45 90             	mov    -0x70(%ebp),%eax
f0105f28:	01 d0                	add    %edx,%eax
f0105f2a:	48                   	dec    %eax
f0105f2b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0105f2e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105f31:	ba 00 00 00 00       	mov    $0x0,%edx
f0105f36:	f7 75 90             	divl   -0x70(%ebp)
f0105f39:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0105f3c:	29 d0                	sub    %edx,%eax
f0105f3e:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0105f41:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105f44:	2b 45 94             	sub    -0x6c(%ebp),%eax
f0105f47:	89 45 84             	mov    %eax,-0x7c(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0105f4a:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f0105f4f:	83 ec 04             	sub    $0x4,%esp
f0105f52:	68 00 10 00 00       	push   $0x1000
f0105f57:	6a 00                	push   $0x0
f0105f59:	50                   	push   %eax
f0105f5a:	e8 0c 70 01 00       	call   f011cf6b <memset>
f0105f5f:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f0105f62:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0105f65:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0105f68:	8b 15 34 0d 80 f0    	mov    0xf0800d34,%edx
f0105f6e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0105f71:	01 d0                	add    %edx,%eax
f0105f73:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105f76:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105f79:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0105f7c:	eb 13                	jmp    f0105f91 <env_create+0x291>
		{
			*dst_ptr = *src_ptr ;
f0105f7e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105f81:	8a 10                	mov    (%eax),%dl
f0105f83:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0105f86:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0105f88:	ff 45 cc             	incl   -0x34(%ebp)
f0105f8b:	ff 45 d4             	incl   -0x2c(%ebp)
f0105f8e:	ff 45 d0             	incl   -0x30(%ebp)
f0105f91:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0105f94:	3b 45 88             	cmp    -0x78(%ebp),%eax
f0105f97:	72 e5                	jb     f0105f7e <env_create+0x27e>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0105f99:	8b 15 34 0d 80 f0    	mov    0xf0800d34,%edx
f0105f9f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0105fa5:	83 ec 04             	sub    $0x4,%esp
f0105fa8:	52                   	push   %edx
f0105fa9:	ff 75 94             	pushl  -0x6c(%ebp)
f0105fac:	50                   	push   %eax
f0105fad:	e8 90 5c 00 00       	call   f010bc42 <pf_add_env_page>
f0105fb2:	83 c4 10             	add    $0x10,%esp
f0105fb5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0105fb8:	75 17                	jne    f0105fd1 <env_create+0x2d1>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0105fba:	83 ec 04             	sub    $0x4,%esp
f0105fbd:	68 24 0b 12 f0       	push   $0xf0120b24
f0105fc2:	68 35 03 00 00       	push   $0x335
f0105fc7:	68 66 0a 12 f0       	push   $0xf0120a66
f0105fcc:	e8 de a1 ff ff       	call   f01001af <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0105fd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105fd4:	8b 50 04             	mov    0x4(%eax),%edx
f0105fd7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105fda:	01 d0                	add    %edx,%eax
f0105fdc:	89 45 80             	mov    %eax,-0x80(%ebp)
f0105fdf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0105fe2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105fe7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0105fed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105ff0:	8b 50 04             	mov    0x4(%eax),%edx
f0105ff3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0105ff6:	01 d0                	add    %edx,%eax
f0105ff8:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0105ffe:	8b 45 88             	mov    -0x78(%ebp),%eax
f0106001:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0106004:	eb 43                	jmp    f0106049 <env_create+0x349>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0106006:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106009:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010600f:	83 ec 04             	sub    $0x4,%esp
f0106012:	ff 75 d4             	pushl  -0x2c(%ebp)
f0106015:	52                   	push   %edx
f0106016:	50                   	push   %eax
f0106017:	e8 26 5c 00 00       	call   f010bc42 <pf_add_env_page>
f010601c:	83 c4 10             	add    $0x10,%esp
f010601f:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0106022:	75 17                	jne    f010603b <env_create+0x33b>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0106024:	83 ec 04             	sub    $0x4,%esp
f0106027:	68 24 0b 12 f0       	push   $0xf0120b24
f010602c:	68 42 03 00 00       	push   $0x342
f0106031:	68 66 0a 12 f0       	push   $0xf0120a66
f0106036:	e8 74 a1 ff ff       	call   f01001af <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f010603b:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0106042:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0106049:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010604c:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0106052:	72 b2                	jb     f0106006 <env_create+0x306>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f0106054:	a1 34 0d 80 f0       	mov    0xf0800d34,%eax
f0106059:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f010605c:	83 ec 04             	sub    $0x4,%esp
f010605f:	68 00 10 00 00       	push   $0x1000
f0106064:	6a 00                	push   $0x0
f0106066:	ff 75 d0             	pushl  -0x30(%ebp)
f0106069:	e8 fd 6e 01 00       	call   f011cf6b <memset>
f010606e:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0106071:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0106077:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010607a:	eb 13                	jmp    f010608f <env_create+0x38f>
		{
			*dst_ptr = *src_ptr;
f010607c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010607f:	8a 10                	mov    (%eax),%dl
f0106081:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0106084:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0106086:	ff 45 cc             	incl   -0x34(%ebp)
f0106089:	ff 45 d4             	incl   -0x2c(%ebp)
f010608c:	ff 45 d0             	incl   -0x30(%ebp)
f010608f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0106092:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f0106098:	72 e2                	jb     f010607c <env_create+0x37c>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f010609a:	8b 15 34 0d 80 f0    	mov    0xf0800d34,%edx
f01060a0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01060a6:	83 ec 04             	sub    $0x4,%esp
f01060a9:	52                   	push   %edx
f01060aa:	ff b5 7c ff ff ff    	pushl  -0x84(%ebp)
f01060b0:	50                   	push   %eax
f01060b1:	e8 8c 5b 00 00       	call   f010bc42 <pf_add_env_page>
f01060b6:	83 c4 10             	add    $0x10,%esp
f01060b9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01060bc:	75 17                	jne    f01060d5 <env_create+0x3d5>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01060be:	83 ec 04             	sub    $0x4,%esp
f01060c1:	68 24 0b 12 f0       	push   $0xf0120b24
f01060c6:	68 51 03 00 00       	push   $0x351
f01060cb:	68 66 0a 12 f0       	push   $0xf0120a66
f01060d0:	e8 da a0 ff ff       	call   f01001af <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f01060d5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01060dc:	10 00 00 
f01060df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060e2:	8b 50 04             	mov    0x4(%eax),%edx
f01060e5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01060e8:	01 c2                	add    %eax,%edx
f01060ea:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01060f0:	01 d0                	add    %edx,%eax
f01060f2:	48                   	dec    %eax
f01060f3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01060f9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01060ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0106104:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010610a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0106110:	29 d0                	sub    %edx,%eax
f0106112:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0106115:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106118:	8b 50 08             	mov    0x8(%eax),%edx
f010611b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010611e:	01 d0                	add    %edx,%eax
f0106120:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0106123:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0106129:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0106130:	eb 41                	jmp    f0106173 <env_create+0x473>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0106132:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106138:	83 ec 04             	sub    $0x4,%esp
f010613b:	6a 01                	push   $0x1
f010613d:	ff 75 c8             	pushl  -0x38(%ebp)
f0106140:	50                   	push   %eax
f0106141:	e8 23 5a 00 00       	call   f010bb69 <pf_add_empty_env_page>
f0106146:	83 c4 10             	add    $0x10,%esp
f0106149:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010614c:	75 17                	jne    f0106165 <env_create+0x465>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010614e:	83 ec 04             	sub    $0x4,%esp
f0106151:	68 24 0b 12 f0       	push   $0xf0120b24
f0106156:	68 5e 03 00 00       	push   $0x35e
f010615b:	68 66 0a 12 f0       	push   $0xf0120a66
f0106160:	e8 4a a0 ff ff       	call   f01001af <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0106165:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010616c:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0106173:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010617a:	10 00 00 
f010617d:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
f0106183:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0106189:	01 d0                	add    %edx,%eax
f010618b:	48                   	dec    %eax
f010618c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0106192:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0106198:	ba 00 00 00 00       	mov    $0x0,%edx
f010619d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01061a3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01061a9:	29 d0                	sub    %edx,%eax
f01061ab:	89 c2                	mov    %eax,%edx
f01061ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01061b0:	39 c2                	cmp    %eax,%edx
f01061b2:	0f 87 7a ff ff ff    	ja     f0106132 <env_create+0x432>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01061b8:	83 ec 08             	sub    $0x8,%esp
f01061bb:	ff 75 bc             	pushl  -0x44(%ebp)
f01061be:	ff 75 e4             	pushl  -0x1c(%ebp)
f01061c1:	e8 63 06 00 00       	call   f0106829 <PROGRAM_SEGMENT_NEXT>
f01061c6:	83 c4 10             	add    $0x10,%esp
f01061c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01061cc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01061d0:	0f 85 e7 fc ff ff    	jne    f0105ebd <env_create+0x1bd>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f01061d6:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f01061dd:	e9 9e 00 00 00       	jmp    f0106280 <env_create+0x580>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f01061e2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01061e8:	8b 48 78             	mov    0x78(%eax),%ecx
f01061eb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01061ee:	89 d0                	mov    %edx,%eax
f01061f0:	01 c0                	add    %eax,%eax
f01061f2:	01 d0                	add    %edx,%eax
f01061f4:	c1 e0 02             	shl    $0x2,%eax
f01061f7:	01 c8                	add    %ecx,%eax
f01061f9:	8a 40 04             	mov    0x4(%eax),%al
f01061fc:	84 c0                	test   %al,%al
f01061fe:	75 7d                	jne    f010627d <env_create+0x57d>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0106200:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106206:	8b 48 78             	mov    0x78(%eax),%ecx
f0106209:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010620c:	89 d0                	mov    %edx,%eax
f010620e:	01 c0                	add    %eax,%eax
f0106210:	01 d0                	add    %edx,%eax
f0106212:	c1 e0 02             	shl    $0x2,%eax
f0106215:	01 c8                	add    %ecx,%eax
f0106217:	8b 00                	mov    (%eax),%eax
f0106219:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, (void *)virtual_address, &ptr_page_table);
f010621f:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0106225:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010622b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010622e:	83 ec 04             	sub    $0x4,%esp
f0106231:	8d 8d 2c ff ff ff    	lea    -0xd4(%ebp),%ecx
f0106237:	51                   	push   %ecx
f0106238:	52                   	push   %edx
f0106239:	50                   	push   %eax
f010623a:	e8 9c d9 ff ff       	call   f0103bdb <get_page_table>
f010623f:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0106242:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0106248:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f010624e:	c1 ea 0c             	shr    $0xc,%edx
f0106251:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106257:	c1 e2 02             	shl    $0x2,%edx
f010625a:	01 d0                	add    %edx,%eax
f010625c:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f0106262:	8b 8d 60 ff ff ff    	mov    -0xa0(%ebp),%ecx
f0106268:	c1 e9 0c             	shr    $0xc,%ecx
f010626b:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0106271:	c1 e1 02             	shl    $0x2,%ecx
f0106274:	01 ca                	add    %ecx,%edx
f0106276:	8b 12                	mov    (%edx),%edx
f0106278:	83 e2 bf             	and    $0xffffffbf,%edx
f010627b:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f010627d:	ff 45 c4             	incl   -0x3c(%ebp)
f0106280:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106286:	8b 50 74             	mov    0x74(%eax),%edx
f0106289:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010628c:	39 c2                	cmp    %eax,%edx
f010628e:	0f 87 4e ff ff ff    	ja     f01061e2 <env_create+0x4e2>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f0106294:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0106297:	8b 50 08             	mov    0x8(%eax),%edx
f010629a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01062a0:	83 ec 08             	sub    $0x8,%esp
f01062a3:	52                   	push   %edx
f01062a4:	50                   	push   %eax
f01062a5:	e8 9f 08 00 00       	call   f0106b49 <set_environment_entry_point>
f01062aa:	83 c4 10             	add    $0x10,%esp
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set


	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01062ad:	c7 85 5c ff ff ff 00 	movl   $0xeebfd000,-0xa4(%ebp)
f01062b4:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01062b7:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f01062be:	e9 d4 00 00 00       	jmp    f0106397 <env_create+0x697>
	{
		struct Frame_Info *pp = NULL;
f01062c3:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f01062ca:	00 00 00 
		allocate_frame(&pp);
f01062cd:	83 ec 0c             	sub    $0xc,%esp
f01062d0:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f01062d6:	50                   	push   %eax
f01062d7:	e8 80 d7 ff ff       	call   f0103a5c <allocate_frame>
f01062dc:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, (void*)stackVa, PERM_USER | PERM_WRITEABLE);
f01062df:	8b 4d c0             	mov    -0x40(%ebp),%ecx
f01062e2:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f01062e8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01062ee:	8b 40 5c             	mov    0x5c(%eax),%eax
f01062f1:	6a 06                	push   $0x6
f01062f3:	51                   	push   %ecx
f01062f4:	52                   	push   %edx
f01062f5:	50                   	push   %eax
f01062f6:	e8 92 dc ff ff       	call   f0103f8d <loadtime_map_frame>
f01062fb:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f01062fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0106301:	83 ec 04             	sub    $0x4,%esp
f0106304:	68 00 10 00 00       	push   $0x1000
f0106309:	6a 00                	push   $0x0
f010630b:	50                   	push   %eax
f010630c:	e8 5a 6c 01 00       	call   f011cf6b <memset>
f0106311:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0106314:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010631a:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106320:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106326:	83 ec 04             	sub    $0x4,%esp
f0106329:	ff 75 c0             	pushl  -0x40(%ebp)
f010632c:	52                   	push   %edx
f010632d:	50                   	push   %eax
f010632e:	e8 48 e3 ff ff       	call   f010467b <env_page_ws_set_entry>
f0106333:	83 c4 10             	add    $0x10,%esp
			e->page_last_WS_index ++;
f0106336:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010633c:	8b 90 d4 02 00 00    	mov    0x2d4(%eax),%edx
f0106342:	42                   	inc    %edx
f0106343:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0106349:	8b 8d 50 ff ff ff    	mov    -0xb0(%ebp),%ecx
f010634f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106355:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f010635b:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
f0106361:	8b 5a 74             	mov    0x74(%edx),%ebx
f0106364:	ba 00 00 00 00       	mov    $0x0,%edx
f0106369:	f7 f3                	div    %ebx
f010636b:	89 d0                	mov    %edx,%eax
f010636d:	89 81 d4 02 00 00    	mov    %eax,0x2d4(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0106373:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0106379:	83 ec 04             	sub    $0x4,%esp
f010637c:	6a 01                	push   $0x1
f010637e:	ff 75 c0             	pushl  -0x40(%ebp)
f0106381:	50                   	push   %eax
f0106382:	e8 e2 57 00 00       	call   f010bb69 <pf_add_empty_env_page>
f0106387:	83 c4 10             	add    $0x10,%esp
f010638a:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0106390:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0106397:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010639a:	3b 85 5c ff ff ff    	cmp    -0xa4(%ebp),%eax
f01063a0:	0f 83 1d ff ff ff    	jae    f01062c3 <env_create+0x5c3>
f01063a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01063a9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01063ac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01063af:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f01063b2:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
}
f01063b8:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01063bb:	5b                   	pop    %ebx
f01063bc:	5e                   	pop    %esi
f01063bd:	5f                   	pop    %edi
f01063be:	5d                   	pop    %ebp
f01063bf:	c3                   	ret    

f01063c0 <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f01063c0:	55                   	push   %ebp
f01063c1:	89 e5                	mov    %esp,%ebp
f01063c3:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f01063c6:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01063cb:	3b 45 08             	cmp    0x8(%ebp),%eax
f01063ce:	74 25                	je     f01063f5 <env_run+0x35>
	{
		curenv = e ;
f01063d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01063d3:	a3 90 1f 7e f0       	mov    %eax,0xf07e1f90
		curenv->env_runs++ ;
f01063d8:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01063dd:	8b 50 58             	mov    0x58(%eax),%edx
f01063e0:	42                   	inc    %edx
f01063e1:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f01063e4:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01063e9:	8b 40 60             	mov    0x60(%eax),%eax
f01063ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063f2:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f01063f5:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01063fa:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0106401:	e8 c7 09 00 00       	call   f0106dcd <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0106406:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010640b:	83 ec 0c             	sub    $0xc,%esp
f010640e:	50                   	push   %eax
f010640f:	e8 5b 08 00 00       	call   f0106c6f <env_pop_tf>

f0106414 <__remove_pws_user_pages>:
}

void __remove_pws_user_pages(struct Env *e)
{
f0106414:	55                   	push   %ebp
f0106415:	89 e5                	mov    %esp,%ebp
f0106417:	83 ec 28             	sub    $0x28,%esp
	if(USE_KHEAP)
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
f010641a:	8b 45 08             	mov    0x8(%ebp),%eax
f010641d:	8b 50 74             	mov    0x74(%eax),%edx
f0106420:	89 d0                	mov    %edx,%eax
f0106422:	01 c0                	add    %eax,%eax
f0106424:	01 d0                	add    %edx,%eax
f0106426:	c1 e0 02             	shl    $0x2,%eax
f0106429:	89 45 ec             	mov    %eax,-0x14(%ebp)
		unsigned int sva = (unsigned int) e->__uptr_pws;
f010642c:	8b 45 08             	mov    0x8(%ebp),%eax
f010642f:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f0106435:	89 45 f4             	mov    %eax,-0xc(%ebp)
		for(; sva < ((unsigned int) (e->__uptr_pws) + nBytes) ; sva+=PAGE_SIZE)
f0106438:	eb 1d                	jmp    f0106457 <__remove_pws_user_pages+0x43>
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, (void*)sva);
f010643a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010643d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106440:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106443:	83 ec 08             	sub    $0x8,%esp
f0106446:	52                   	push   %edx
f0106447:	50                   	push   %eax
f0106448:	e8 b9 da ff ff       	call   f0103f06 <unmap_frame>
f010644d:	83 c4 10             	add    $0x10,%esp
{
	if(USE_KHEAP)
	{
		uint32 nBytes = sizeof(struct WorkingSetElement) * e->page_WS_max_size;
		unsigned int sva = (unsigned int) e->__uptr_pws;
		for(; sva < ((unsigned int) (e->__uptr_pws) + nBytes) ; sva+=PAGE_SIZE)
f0106450:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0106457:	8b 45 08             	mov    0x8(%ebp),%eax
f010645a:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f0106460:	89 c2                	mov    %eax,%edx
f0106462:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106465:	01 d0                	add    %edx,%eax
f0106467:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010646a:	77 ce                	ja     f010643a <__remove_pws_user_pages+0x26>
		{
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, (void*)sva);
		}
		//cprintf("after free pages\n");
		unsigned int tsva = (unsigned int) e->__uptr_pws;
f010646c:	8b 45 08             	mov    0x8(%ebp),%eax
f010646f:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f0106475:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f0106478:	eb 47                	jmp    f01064c1 <__remove_pws_user_pages+0xad>
		{
			unsigned int * uws_table;
			get_page_table(e->env_page_directory, (void*)tsva, &uws_table );
f010647a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010647d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106480:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106483:	83 ec 04             	sub    $0x4,%esp
f0106486:	8d 4d e4             	lea    -0x1c(%ebp),%ecx
f0106489:	51                   	push   %ecx
f010648a:	52                   	push   %edx
f010648b:	50                   	push   %eax
f010648c:	e8 4a d7 ff ff       	call   f0103bdb <get_page_table>
f0106491:	83 c4 10             	add    $0x10,%esp
			kfree(uws_table);
f0106494:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106497:	83 ec 0c             	sub    $0xc,%esp
f010649a:	50                   	push   %eax
f010649b:	e8 40 6a 00 00       	call   f010cee0 <kfree>
f01064a0:	83 c4 10             	add    $0x10,%esp
			e->env_page_directory[PDX(tsva)] = 0;
f01064a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01064a6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01064a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01064ac:	c1 ea 16             	shr    $0x16,%edx
f01064af:	c1 e2 02             	shl    $0x2,%edx
f01064b2:	01 d0                	add    %edx,%eax
f01064b4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			//unsigned int pa = kheap_physical_address(sva);
			unmap_frame(e->env_page_directory, (void*)sva);
		}
		//cprintf("after free pages\n");
		unsigned int tsva = (unsigned int) e->__uptr_pws;
		for(; tsva < ((unsigned int) (e->__uptr_pws) + nBytes) ; tsva+=PTSIZE)
f01064ba:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f01064c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01064c4:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
f01064ca:	89 c2                	mov    %eax,%edx
f01064cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064cf:	01 d0                	add    %edx,%eax
f01064d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01064d4:	77 a4                	ja     f010647a <__remove_pws_user_pages+0x66>

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01064d6:	0f 20 d8             	mov    %cr3,%eax
f01064d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01064dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01064df:	0f 22 d8             	mov    %eax,%cr3
			kfree(uws_table);
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
}
f01064e2:	90                   	nop
f01064e3:	c9                   	leave  
f01064e4:	c3                   	ret    

f01064e5 <start_env_free>:
extern uint32 isBufferingEnabled();
void __env_free_with_buffering(struct Env *e);
void env_free(struct Env *e);

void start_env_free(struct Env *e)
{
f01064e5:	55                   	push   %ebp
f01064e6:	89 e5                	mov    %esp,%ebp
f01064e8:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f01064eb:	e8 04 23 00 00       	call   f01087f4 <isBufferingEnabled>
f01064f0:	85 c0                	test   %eax,%eax
f01064f2:	74 10                	je     f0106504 <start_env_free+0x1f>
	{
		__env_free_with_buffering(e);
f01064f4:	83 ec 0c             	sub    $0xc,%esp
f01064f7:	ff 75 08             	pushl  0x8(%ebp)
f01064fa:	e8 33 00 00 00       	call   f0106532 <__env_free_with_buffering>
f01064ff:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		env_free(e);
	}
}
f0106502:	eb 0e                	jmp    f0106512 <start_env_free+0x2d>
	{
		__env_free_with_buffering(e);
	}
	else
	{
		env_free(e);
f0106504:	83 ec 0c             	sub    $0xc,%esp
f0106507:	ff 75 08             	pushl  0x8(%ebp)
f010650a:	e8 06 00 00 00       	call   f0106515 <env_free>
f010650f:	83 c4 10             	add    $0x10,%esp
	}
}
f0106512:	90                   	nop
f0106513:	c9                   	leave  
f0106514:	c3                   	ret    

f0106515 <env_free>:

void env_free(struct Env *e)
{
f0106515:	55                   	push   %ebp
f0106516:	89 e5                	mov    %esp,%ebp
f0106518:	83 ec 08             	sub    $0x8,%esp
	panic("This function is not required.");
f010651b:	83 ec 04             	sub    $0x4,%esp
f010651e:	68 6c 0b 12 f0       	push   $0xf0120b6c
f0106523:	68 ee 03 00 00       	push   $0x3ee
f0106528:	68 66 0a 12 f0       	push   $0xf0120a66
f010652d:	e8 7d 9c ff ff       	call   f01001af <_panic>

f0106532 <__env_free_with_buffering>:
}

void __env_free_with_buffering(struct Env *e)
{
f0106532:	55                   	push   %ebp
f0106533:	89 e5                	mov    %esp,%ebp
f0106535:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT 2025 - MS2 - [3] Exit] __env_free_with_buffering()

	//YOUR CODE STARTS HERE, remove the panic and write your code ----
	panic("__env_free_with_buffering() is not implemented yet...!!");
f0106538:	83 ec 04             	sub    $0x4,%esp
f010653b:	68 8c 0b 12 f0       	push   $0xf0120b8c
f0106540:	68 f6 03 00 00       	push   $0x3f6
f0106545:	68 66 0a 12 f0       	push   $0xf0120a66
f010654a:	e8 60 9c ff ff       	call   f01001af <_panic>

f010654f <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f010654f:	55                   	push   %ebp
f0106550:	89 e5                	mov    %esp,%ebp
f0106552:	53                   	push   %ebx
f0106553:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f0106556:	c7 45 f8 eb 04 00 00 	movl   $0x4eb,-0x8(%ebp)
	for(; iEnv >= 0; iEnv--)
f010655d:	e9 f7 00 00 00       	jmp    f0106659 <env_init+0x10a>
	{
		envs[iEnv].env_status = ENV_FREE;
f0106562:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f0106568:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010656b:	89 d0                	mov    %edx,%eax
f010656d:	01 c0                	add    %eax,%eax
f010656f:	01 d0                	add    %edx,%eax
f0106571:	c1 e0 02             	shl    $0x2,%eax
f0106574:	01 d0                	add    %edx,%eax
f0106576:	c1 e0 06             	shl    $0x6,%eax
f0106579:	01 c8                	add    %ecx,%eax
f010657b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f0106582:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f0106588:	8b 55 f8             	mov    -0x8(%ebp),%edx
f010658b:	89 d0                	mov    %edx,%eax
f010658d:	01 c0                	add    %eax,%eax
f010658f:	01 d0                	add    %edx,%eax
f0106591:	c1 e0 02             	shl    $0x2,%eax
f0106594:	01 d0                	add    %edx,%eax
f0106596:	c1 e0 06             	shl    $0x6,%eax
f0106599:	01 c8                	add    %ecx,%eax
f010659b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01065a2:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f01065a8:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01065ab:	89 d0                	mov    %edx,%eax
f01065ad:	01 c0                	add    %eax,%eax
f01065af:	01 d0                	add    %edx,%eax
f01065b1:	c1 e0 02             	shl    $0x2,%eax
f01065b4:	01 d0                	add    %edx,%eax
f01065b6:	c1 e0 06             	shl    $0x6,%eax
f01065b9:	01 c8                	add    %ecx,%eax
f01065bb:	8b 15 94 1f 7e f0    	mov    0xf07e1f94,%edx
f01065c1:	89 50 44             	mov    %edx,0x44(%eax)
f01065c4:	8b 40 44             	mov    0x44(%eax),%eax
f01065c7:	85 c0                	test   %eax,%eax
f01065c9:	74 24                	je     f01065ef <env_init+0xa0>
f01065cb:	8b 0d 94 1f 7e f0    	mov    0xf07e1f94,%ecx
f01065d1:	8b 1d 8c 1f 7e f0    	mov    0xf07e1f8c,%ebx
f01065d7:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01065da:	89 d0                	mov    %edx,%eax
f01065dc:	01 c0                	add    %eax,%eax
f01065de:	01 d0                	add    %edx,%eax
f01065e0:	c1 e0 02             	shl    $0x2,%eax
f01065e3:	01 d0                	add    %edx,%eax
f01065e5:	c1 e0 06             	shl    $0x6,%eax
f01065e8:	01 d8                	add    %ebx,%eax
f01065ea:	89 41 48             	mov    %eax,0x48(%ecx)
f01065ed:	eb 1e                	jmp    f010660d <env_init+0xbe>
f01065ef:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f01065f5:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01065f8:	89 d0                	mov    %edx,%eax
f01065fa:	01 c0                	add    %eax,%eax
f01065fc:	01 d0                	add    %edx,%eax
f01065fe:	c1 e0 02             	shl    $0x2,%eax
f0106601:	01 d0                	add    %edx,%eax
f0106603:	c1 e0 06             	shl    $0x6,%eax
f0106606:	01 c8                	add    %ecx,%eax
f0106608:	a3 98 1f 7e f0       	mov    %eax,0xf07e1f98
f010660d:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f0106613:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106616:	89 d0                	mov    %edx,%eax
f0106618:	01 c0                	add    %eax,%eax
f010661a:	01 d0                	add    %edx,%eax
f010661c:	c1 e0 02             	shl    $0x2,%eax
f010661f:	01 d0                	add    %edx,%eax
f0106621:	c1 e0 06             	shl    $0x6,%eax
f0106624:	01 c8                	add    %ecx,%eax
f0106626:	a3 94 1f 7e f0       	mov    %eax,0xf07e1f94
f010662b:	8b 0d 8c 1f 7e f0    	mov    0xf07e1f8c,%ecx
f0106631:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106634:	89 d0                	mov    %edx,%eax
f0106636:	01 c0                	add    %eax,%eax
f0106638:	01 d0                	add    %edx,%eax
f010663a:	c1 e0 02             	shl    $0x2,%eax
f010663d:	01 d0                	add    %edx,%eax
f010663f:	c1 e0 06             	shl    $0x6,%eax
f0106642:	01 c8                	add    %ecx,%eax
f0106644:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010664b:	a1 a0 1f 7e f0       	mov    0xf07e1fa0,%eax
f0106650:	40                   	inc    %eax
f0106651:	a3 a0 1f 7e f0       	mov    %eax,0xf07e1fa0
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0106656:	ff 4d f8             	decl   -0x8(%ebp)
f0106659:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010665d:	0f 89 ff fe ff ff    	jns    f0106562 <env_init+0x13>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0106663:	90                   	nop
f0106664:	83 c4 10             	add    $0x10,%esp
f0106667:	5b                   	pop    %ebx
f0106668:	5d                   	pop    %ebp
f0106669:	c3                   	ret    

f010666a <complete_environment_initialization>:

void complete_environment_initialization(struct Env* e)
{
f010666a:	55                   	push   %ebp
f010666b:	89 e5                	mov    %esp,%ebp
f010666d:	83 ec 18             	sub    $0x18,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0106670:	8b 45 08             	mov    0x8(%ebp),%eax
f0106673:	8b 40 5c             	mov    0x5c(%eax),%eax
f0106676:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010667c:	8b 45 08             	mov    0x8(%ebp),%eax
f010667f:	8b 40 60             	mov    0x60(%eax),%eax
f0106682:	83 c8 03             	or     $0x3,%eax
f0106685:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f0106687:	8b 45 08             	mov    0x8(%ebp),%eax
f010668a:	8b 40 5c             	mov    0x5c(%eax),%eax
f010668d:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106693:	8b 45 08             	mov    0x8(%ebp),%eax
f0106696:	8b 40 60             	mov    0x60(%eax),%eax
f0106699:	83 c8 05             	or     $0x5,%eax
f010669c:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010669e:	8b 45 08             	mov    0x8(%ebp),%eax
f01066a1:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f01066a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01066ab:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f01066b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01066b5:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f01066bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01066bf:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
f01066c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01066c9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01066cc:	05 00 10 00 00       	add    $0x1000,%eax
f01066d1:	25 14 fb ff ff       	and    $0xfffffb14,%eax
f01066d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f01066d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01066dd:	7f 07                	jg     f01066e6 <complete_environment_initialization+0x7c>
		generation = 1 << ENVGENSHIFT;
f01066df:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f01066e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01066e9:	8b 15 8c 1f 7e f0    	mov    0xf07e1f8c,%edx
f01066ef:	29 d0                	sub    %edx,%eax
f01066f1:	c1 f8 06             	sar    $0x6,%eax
f01066f4:	89 c1                	mov    %eax,%ecx
f01066f6:	89 ca                	mov    %ecx,%edx
f01066f8:	c1 e2 02             	shl    $0x2,%edx
f01066fb:	01 ca                	add    %ecx,%edx
f01066fd:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0106704:	01 c2                	add    %eax,%edx
f0106706:	89 d0                	mov    %edx,%eax
f0106708:	c1 e0 06             	shl    $0x6,%eax
f010670b:	29 d0                	sub    %edx,%eax
f010670d:	89 c2                	mov    %eax,%edx
f010670f:	c1 e2 0c             	shl    $0xc,%edx
f0106712:	01 d0                	add    %edx,%eax
f0106714:	c1 e0 02             	shl    $0x2,%eax
f0106717:	01 c8                	add    %ecx,%eax
f0106719:	01 c0                	add    %eax,%eax
f010671b:	01 c8                	add    %ecx,%eax
f010671d:	c1 e0 04             	shl    $0x4,%eax
f0106720:	01 c8                	add    %ecx,%eax
f0106722:	c1 e0 02             	shl    $0x2,%eax
f0106725:	01 c8                	add    %ecx,%eax
f0106727:	0b 45 f4             	or     -0xc(%ebp),%eax
f010672a:	89 c2                	mov    %eax,%edx
f010672c:	8b 45 08             	mov    0x8(%ebp),%eax
f010672f:	89 50 4c             	mov    %edx,0x4c(%eax)

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f0106732:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0106737:	85 c0                	test   %eax,%eax
f0106739:	75 0c                	jne    f0106747 <complete_environment_initialization+0xdd>
		e->env_parent_id = 0;//no parent;
f010673b:	8b 45 08             	mov    0x8(%ebp),%eax
f010673e:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f0106745:	eb 0e                	jmp    f0106755 <complete_environment_initialization+0xeb>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f0106747:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010674c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010674f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106752:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f0106755:	8b 45 08             	mov    0x8(%ebp),%eax
f0106758:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010675f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106762:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f0106769:	8b 45 08             	mov    0x8(%ebp),%eax
f010676c:	83 ec 04             	sub    $0x4,%esp
f010676f:	6a 44                	push   $0x44
f0106771:	6a 00                	push   $0x0
f0106773:	50                   	push   %eax
f0106774:	e8 f2 67 01 00       	call   f011cf6b <memset>
f0106779:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010677c:	8b 45 08             	mov    0x8(%ebp),%eax
f010677f:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f0106785:	8b 45 08             	mov    0x8(%ebp),%eax
f0106788:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010678e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106791:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f0106797:	8b 45 08             	mov    0x8(%ebp),%eax
f010679a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f01067a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01067a4:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f01067aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01067ad:	8b 40 38             	mov    0x38(%eax),%eax
f01067b0:	80 cc 02             	or     $0x2,%ah
f01067b3:	89 c2                	mov    %eax,%edx
f01067b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01067b8:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f01067bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01067be:	8b 40 44             	mov    0x44(%eax),%eax
f01067c1:	85 c0                	test   %eax,%eax
f01067c3:	74 11                	je     f01067d6 <complete_environment_initialization+0x16c>
f01067c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c8:	8b 40 44             	mov    0x44(%eax),%eax
f01067cb:	8b 55 08             	mov    0x8(%ebp),%edx
f01067ce:	8b 52 48             	mov    0x48(%edx),%edx
f01067d1:	89 50 48             	mov    %edx,0x48(%eax)
f01067d4:	eb 0b                	jmp    f01067e1 <complete_environment_initialization+0x177>
f01067d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01067d9:	8b 40 48             	mov    0x48(%eax),%eax
f01067dc:	a3 98 1f 7e f0       	mov    %eax,0xf07e1f98
f01067e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01067e4:	8b 40 48             	mov    0x48(%eax),%eax
f01067e7:	85 c0                	test   %eax,%eax
f01067e9:	74 11                	je     f01067fc <complete_environment_initialization+0x192>
f01067eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01067ee:	8b 40 48             	mov    0x48(%eax),%eax
f01067f1:	8b 55 08             	mov    0x8(%ebp),%edx
f01067f4:	8b 52 44             	mov    0x44(%edx),%edx
f01067f7:	89 50 44             	mov    %edx,0x44(%eax)
f01067fa:	eb 0b                	jmp    f0106807 <complete_environment_initialization+0x19d>
f01067fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01067ff:	8b 40 44             	mov    0x44(%eax),%eax
f0106802:	a3 94 1f 7e f0       	mov    %eax,0xf07e1f94
f0106807:	8b 45 08             	mov    0x8(%ebp),%eax
f010680a:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0106811:	8b 45 08             	mov    0x8(%ebp),%eax
f0106814:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010681b:	a1 a0 1f 7e f0       	mov    0xf07e1fa0,%eax
f0106820:	48                   	dec    %eax
f0106821:	a3 a0 1f 7e f0       	mov    %eax,0xf07e1fa0
	return ;
f0106826:	90                   	nop
}
f0106827:	c9                   	leave  
f0106828:	c3                   	ret    

f0106829 <PROGRAM_SEGMENT_NEXT>:

struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f0106829:	55                   	push   %ebp
f010682a:	89 e5                	mov    %esp,%ebp
f010682c:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010682f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106832:	8b 40 10             	mov    0x10(%eax),%eax
f0106835:	8d 48 01             	lea    0x1(%eax),%ecx
f0106838:	8b 55 08             	mov    0x8(%ebp),%edx
f010683b:	89 4a 10             	mov    %ecx,0x10(%edx)
f010683e:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106841:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106844:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106847:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010684a:	8b 00                	mov    (%eax),%eax
f010684c:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106851:	74 17                	je     f010686a <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f0106853:	83 ec 04             	sub    $0x4,%esp
f0106856:	68 c4 0b 12 f0       	push   $0xf0120bc4
f010685b:	68 61 04 00 00       	push   $0x461
f0106860:	68 66 0a 12 f0       	push   $0xf0120a66
f0106865:	e8 45 99 ff ff       	call   f01001af <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010686a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010686d:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106870:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106873:	01 d0                	add    %edx,%eax
f0106875:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f0106878:	eb 0f                	jmp    f0106889 <PROGRAM_SEGMENT_NEXT+0x60>
f010687a:	8b 45 08             	mov    0x8(%ebp),%eax
f010687d:	8b 40 10             	mov    0x10(%eax),%eax
f0106880:	8d 50 01             	lea    0x1(%eax),%edx
f0106883:	8b 45 08             	mov    0x8(%ebp),%eax
f0106886:	89 50 10             	mov    %edx,0x10(%eax)
f0106889:	8b 45 08             	mov    0x8(%ebp),%eax
f010688c:	8b 40 10             	mov    0x10(%eax),%eax
f010688f:	c1 e0 05             	shl    $0x5,%eax
f0106892:	89 c2                	mov    %eax,%edx
f0106894:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106897:	01 d0                	add    %edx,%eax
f0106899:	8b 00                	mov    (%eax),%eax
f010689b:	83 f8 01             	cmp    $0x1,%eax
f010689e:	74 13                	je     f01068b3 <PROGRAM_SEGMENT_NEXT+0x8a>
f01068a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01068a3:	8b 50 10             	mov    0x10(%eax),%edx
f01068a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01068a9:	8b 40 2c             	mov    0x2c(%eax),%eax
f01068ac:	0f b7 c0             	movzwl %ax,%eax
f01068af:	39 c2                	cmp    %eax,%edx
f01068b1:	72 c7                	jb     f010687a <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f01068b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01068b6:	8b 40 10             	mov    0x10(%eax),%eax
f01068b9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f01068bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01068bf:	8b 40 2c             	mov    0x2c(%eax),%eax
f01068c2:	0f b7 c0             	movzwl %ax,%eax
f01068c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01068c8:	7e 63                	jle    f010692d <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f01068ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068cd:	c1 e0 05             	shl    $0x5,%eax
f01068d0:	89 c2                	mov    %eax,%edx
f01068d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01068d5:	01 d0                	add    %edx,%eax
f01068d7:	8b 50 04             	mov    0x4(%eax),%edx
f01068da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01068dd:	01 c2                	add    %eax,%edx
f01068df:	8b 45 08             	mov    0x8(%ebp),%eax
f01068e2:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f01068e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068e7:	c1 e0 05             	shl    $0x5,%eax
f01068ea:	89 c2                	mov    %eax,%edx
f01068ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01068ef:	01 d0                	add    %edx,%eax
f01068f1:	8b 50 14             	mov    0x14(%eax),%edx
f01068f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01068f7:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f01068fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01068fd:	c1 e0 05             	shl    $0x5,%eax
f0106900:	89 c2                	mov    %eax,%edx
f0106902:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106905:	01 d0                	add    %edx,%eax
f0106907:	8b 50 10             	mov    0x10(%eax),%edx
f010690a:	8b 45 08             	mov    0x8(%ebp),%eax
f010690d:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f0106910:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106913:	c1 e0 05             	shl    $0x5,%eax
f0106916:	89 c2                	mov    %eax,%edx
f0106918:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010691b:	01 d0                	add    %edx,%eax
f010691d:	8b 40 08             	mov    0x8(%eax),%eax
f0106920:	89 c2                	mov    %eax,%edx
f0106922:	8b 45 08             	mov    0x8(%ebp),%eax
f0106925:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f0106928:	8b 45 08             	mov    0x8(%ebp),%eax
f010692b:	eb 05                	jmp    f0106932 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010692d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106932:	c9                   	leave  
f0106933:	c3                   	ret    

f0106934 <PROGRAM_SEGMENT_FIRST>:

struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f0106934:	55                   	push   %ebp
f0106935:	89 e5                	mov    %esp,%ebp
f0106937:	57                   	push   %edi
f0106938:	56                   	push   %esi
f0106939:	53                   	push   %ebx
f010693a:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010693d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106944:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106947:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010694a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010694d:	8b 00                	mov    (%eax),%eax
f010694f:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106954:	74 17                	je     f010696d <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f0106956:	83 ec 04             	sub    $0x4,%esp
f0106959:	68 c4 0b 12 f0       	push   $0xf0120bc4
f010695e:	68 7a 04 00 00       	push   $0x47a
f0106963:	68 66 0a 12 f0       	push   $0xf0120a66
f0106968:	e8 42 98 ff ff       	call   f01001af <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010696d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106970:	8b 50 1c             	mov    0x1c(%eax),%edx
f0106973:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106976:	01 d0                	add    %edx,%eax
f0106978:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010697b:	eb 07                	jmp    f0106984 <PROGRAM_SEGMENT_FIRST+0x50>
f010697d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106980:	40                   	inc    %eax
f0106981:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0106984:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0106987:	c1 e0 05             	shl    $0x5,%eax
f010698a:	89 c2                	mov    %eax,%edx
f010698c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010698f:	01 d0                	add    %edx,%eax
f0106991:	8b 00                	mov    (%eax),%eax
f0106993:	83 f8 01             	cmp    $0x1,%eax
f0106996:	74 10                	je     f01069a8 <PROGRAM_SEGMENT_FIRST+0x74>
f0106998:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010699b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010699e:	8b 40 2c             	mov    0x2c(%eax),%eax
f01069a1:	0f b7 c0             	movzwl %ax,%eax
f01069a4:	39 c2                	cmp    %eax,%edx
f01069a6:	72 d5                	jb     f010697d <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f01069a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01069ab:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f01069ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01069b1:	8b 40 2c             	mov    0x2c(%eax),%eax
f01069b4:	0f b7 c0             	movzwl %ax,%eax
f01069b7:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01069ba:	7e 68                	jle    f0106a24 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f01069bc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01069bf:	c1 e0 05             	shl    $0x5,%eax
f01069c2:	89 c2                	mov    %eax,%edx
f01069c4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069c7:	01 d0                	add    %edx,%eax
f01069c9:	8b 50 04             	mov    0x4(%eax),%edx
f01069cc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069cf:	01 d0                	add    %edx,%eax
f01069d1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f01069d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01069d7:	c1 e0 05             	shl    $0x5,%eax
f01069da:	89 c2                	mov    %eax,%edx
f01069dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069df:	01 d0                	add    %edx,%eax
f01069e1:	8b 40 14             	mov    0x14(%eax),%eax
f01069e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f01069e7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01069ea:	c1 e0 05             	shl    $0x5,%eax
f01069ed:	89 c2                	mov    %eax,%edx
f01069ef:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069f2:	01 d0                	add    %edx,%eax
f01069f4:	8b 40 10             	mov    0x10(%eax),%eax
f01069f7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f01069fa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01069fd:	c1 e0 05             	shl    $0x5,%eax
f0106a00:	89 c2                	mov    %eax,%edx
f0106a02:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106a05:	01 d0                	add    %edx,%eax
f0106a07:	8b 40 08             	mov    0x8(%eax),%eax
f0106a0a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f0106a0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a10:	89 c3                	mov    %eax,%ebx
f0106a12:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106a15:	ba 05 00 00 00       	mov    $0x5,%edx
f0106a1a:	89 df                	mov    %ebx,%edi
f0106a1c:	89 c6                	mov    %eax,%esi
f0106a1e:	89 d1                	mov    %edx,%ecx
f0106a20:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0106a22:	eb 1c                	jmp    f0106a40 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f0106a24:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f0106a2b:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a2e:	89 c3                	mov    %eax,%ebx
f0106a30:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0106a33:	ba 05 00 00 00       	mov    $0x5,%edx
f0106a38:	89 df                	mov    %ebx,%edi
f0106a3a:	89 c6                	mov    %eax,%esi
f0106a3c:	89 d1                	mov    %edx,%ecx
f0106a3e:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106a40:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a43:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0106a46:	5b                   	pop    %ebx
f0106a47:	5e                   	pop    %esi
f0106a48:	5f                   	pop    %edi
f0106a49:	5d                   	pop    %ebp
f0106a4a:	c2 04 00             	ret    $0x4

f0106a4d <get_user_program_info>:

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f0106a4d:	55                   	push   %ebp
f0106a4e:	89 e5                	mov    %esp,%ebp
f0106a50:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106a53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106a5a:	eb 29                	jmp    f0106a85 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f0106a5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106a5f:	89 d0                	mov    %edx,%eax
f0106a61:	01 c0                	add    %eax,%eax
f0106a63:	01 d0                	add    %edx,%eax
f0106a65:	c1 e0 02             	shl    $0x2,%eax
f0106a68:	05 e0 c7 15 f0       	add    $0xf015c7e0,%eax
f0106a6d:	8b 00                	mov    (%eax),%eax
f0106a6f:	83 ec 08             	sub    $0x8,%esp
f0106a72:	50                   	push   %eax
f0106a73:	ff 75 08             	pushl  0x8(%ebp)
f0106a76:	e8 0e 64 01 00       	call   f011ce89 <strcmp>
f0106a7b:	83 c4 10             	add    $0x10,%esp
f0106a7e:	85 c0                	test   %eax,%eax
f0106a80:	74 0f                	je     f0106a91 <get_user_program_info+0x44>
}

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106a82:	ff 45 f4             	incl   -0xc(%ebp)
f0106a85:	a1 7c cc 15 f0       	mov    0xf015cc7c,%eax
f0106a8a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106a8d:	7c cd                	jl     f0106a5c <get_user_program_info+0xf>
f0106a8f:	eb 01                	jmp    f0106a92 <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f0106a91:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106a92:	a1 7c cc 15 f0       	mov    0xf015cc7c,%eax
f0106a97:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106a9a:	75 1a                	jne    f0106ab6 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f0106a9c:	83 ec 08             	sub    $0x8,%esp
f0106a9f:	ff 75 08             	pushl  0x8(%ebp)
f0106aa2:	68 da 0b 12 f0       	push   $0xf0120bda
f0106aa7:	e8 58 07 00 00       	call   f0107204 <cprintf>
f0106aac:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106aaf:	b8 00 00 00 00       	mov    $0x0,%eax
f0106ab4:	eb 11                	jmp    f0106ac7 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f0106ab6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106ab9:	89 d0                	mov    %edx,%eax
f0106abb:	01 c0                	add    %eax,%eax
f0106abd:	01 d0                	add    %edx,%eax
f0106abf:	c1 e0 02             	shl    $0x2,%eax
f0106ac2:	05 e0 c7 15 f0       	add    $0xf015c7e0,%eax
}
f0106ac7:	c9                   	leave  
f0106ac8:	c3                   	ret    

f0106ac9 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f0106ac9:	55                   	push   %ebp
f0106aca:	89 e5                	mov    %esp,%ebp
f0106acc:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106acf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106ad6:	eb 30                	jmp    f0106b08 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f0106ad8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106adb:	89 d0                	mov    %edx,%eax
f0106add:	01 c0                	add    %eax,%eax
f0106adf:	01 d0                	add    %edx,%eax
f0106ae1:	c1 e0 02             	shl    $0x2,%eax
f0106ae4:	05 e0 c7 15 f0       	add    $0xf015c7e0,%eax
f0106ae9:	8b 00                	mov    (%eax),%eax
f0106aeb:	8b 55 08             	mov    0x8(%ebp),%edx
f0106aee:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f0106af4:	83 ec 08             	sub    $0x8,%esp
f0106af7:	50                   	push   %eax
f0106af8:	52                   	push   %edx
f0106af9:	e8 8b 63 01 00       	call   f011ce89 <strcmp>
f0106afe:	83 c4 10             	add    $0x10,%esp
f0106b01:	85 c0                	test   %eax,%eax
f0106b03:	74 0f                	je     f0106b14 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f0106b05:	ff 45 f4             	incl   -0xc(%ebp)
f0106b08:	a1 7c cc 15 f0       	mov    0xf015cc7c,%eax
f0106b0d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106b10:	7c c6                	jl     f0106ad8 <get_user_program_info_by_env+0xf>
f0106b12:	eb 01                	jmp    f0106b15 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f0106b14:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f0106b15:	a1 7c cc 15 f0       	mov    0xf015cc7c,%eax
f0106b1a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0106b1d:	75 17                	jne    f0106b36 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f0106b1f:	83 ec 0c             	sub    $0xc,%esp
f0106b22:	68 f5 0b 12 f0       	push   $0xf0120bf5
f0106b27:	e8 d8 06 00 00       	call   f0107204 <cprintf>
f0106b2c:	83 c4 10             	add    $0x10,%esp
		return 0;
f0106b2f:	b8 00 00 00 00       	mov    $0x0,%eax
f0106b34:	eb 11                	jmp    f0106b47 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f0106b36:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106b39:	89 d0                	mov    %edx,%eax
f0106b3b:	01 c0                	add    %eax,%eax
f0106b3d:	01 d0                	add    %edx,%eax
f0106b3f:	c1 e0 02             	shl    $0x2,%eax
f0106b42:	05 e0 c7 15 f0       	add    $0xf015c7e0,%eax
}
f0106b47:	c9                   	leave  
f0106b48:	c3                   	ret    

f0106b49 <set_environment_entry_point>:

void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f0106b49:	55                   	push   %ebp
f0106b4a:	89 e5                	mov    %esp,%ebp
f0106b4c:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f0106b4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f0106b55:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b58:	8b 00                	mov    (%eax),%eax
f0106b5a:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f0106b5f:	74 17                	je     f0106b78 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f0106b61:	83 ec 04             	sub    $0x4,%esp
f0106b64:	68 c4 0b 12 f0       	push   $0xf0120bc4
f0106b69:	68 af 04 00 00       	push   $0x4af
f0106b6e:	68 66 0a 12 f0       	push   $0xf0120a66
f0106b73:	e8 37 96 ff ff       	call   f01001af <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f0106b78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106b7b:	8b 40 18             	mov    0x18(%eax),%eax
f0106b7e:	89 c2                	mov    %eax,%edx
f0106b80:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b83:	89 50 30             	mov    %edx,0x30(%eax)
}
f0106b86:	90                   	nop
f0106b87:	c9                   	leave  
f0106b88:	c3                   	ret    

f0106b89 <env_exit>:



/*2015*///it add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f0106b89:	55                   	push   %ebp
f0106b8a:	89 e5                	mov    %esp,%ebp
f0106b8c:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f0106b8f:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0106b94:	8b 40 4c             	mov    0x4c(%eax),%eax
f0106b97:	83 ec 0c             	sub    $0xc,%esp
f0106b9a:	50                   	push   %eax
f0106b9b:	e8 64 32 00 00       	call   f0109e04 <sched_exit_env>
f0106ba0:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f0106ba3:	e8 b2 27 00 00       	call   f010935a <fos_scheduler>

f0106ba8 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
/*2015*///obsolete! we run on a scheduler!!
void env_destroy(struct Env *e)
{
f0106ba8:	55                   	push   %ebp
f0106ba9:	89 e5                	mov    %esp,%ebp
f0106bab:	83 ec 08             	sub    $0x8,%esp
	panic("env_destroy() is obsoleted since 2015!");
f0106bae:	83 ec 04             	sub    $0x4,%esp
f0106bb1:	68 0c 0c 12 f0       	push   $0xf0120c0c
f0106bb6:	68 c5 04 00 00       	push   $0x4c5
f0106bbb:	68 66 0a 12 f0       	push   $0xf0120a66
f0106bc0:	e8 ea 95 ff ff       	call   f01001af <_panic>

f0106bc5 <cleanup_buffers>:
		run_command_prompt();
	 */
}

void cleanup_buffers(struct Env* e)
{
f0106bc5:	55                   	push   %ebp
f0106bc6:	89 e5                	mov    %esp,%ebp
f0106bc8:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct Frame_Info *ptr_fi=NULL ;
f0106bcb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0106bd2:	a1 00 0d 80 f0       	mov    0xf0800d00,%eax
f0106bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106bda:	eb 4d                	jmp    f0106c29 <cleanup_buffers+0x64>
	{
		if(ptr_fi->environment == e)
f0106bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bdf:	8b 40 10             	mov    0x10(%eax),%eax
f0106be2:	3b 45 08             	cmp    0x8(%ebp),%eax
f0106be5:	75 3a                	jne    f0106c21 <cleanup_buffers+0x5c>
		{
			pt_clear_page_table_entry(ptr_fi->environment,ptr_fi->va);
f0106be7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bea:	8b 50 0c             	mov    0xc(%eax),%edx
f0106bed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106bf0:	8b 40 10             	mov    0x10(%eax),%eax
f0106bf3:	83 ec 08             	sub    $0x8,%esp
f0106bf6:	52                   	push   %edx
f0106bf7:	50                   	push   %eax
f0106bf8:	e8 94 e5 ff ff       	call   f0105191 <pt_clear_page_table_entry>
f0106bfd:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			bufferlist_remove_page(&modified_frame_list, ptr_fi);
f0106c00:	83 ec 08             	sub    $0x8,%esp
f0106c03:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c06:	68 00 0d 80 f0       	push   $0xf0800d00
f0106c0b:	e8 6f e2 ff ff       	call   f0104e7f <bufferlist_remove_page>
f0106c10:	83 c4 10             	add    $0x10,%esp

			free_frame(ptr_fi);
f0106c13:	83 ec 0c             	sub    $0xc,%esp
f0106c16:	ff 75 f4             	pushl  -0xc(%ebp)
f0106c19:	e8 30 cf ff ff       	call   f0103b4e <free_frame>
f0106c1e:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f0106c21:	a1 08 0d 80 f0       	mov    0xf0800d08,%eax
f0106c26:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106c29:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c2d:	74 07                	je     f0106c36 <cleanup_buffers+0x71>
f0106c2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c32:	8b 00                	mov    (%eax),%eax
f0106c34:	eb 05                	jmp    f0106c3b <cleanup_buffers+0x76>
f0106c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c3b:	a3 08 0d 80 f0       	mov    %eax,0xf0800d08
f0106c40:	a1 08 0d 80 f0       	mov    0xf0800d08,%eax
f0106c45:	85 c0                	test   %eax,%eax
f0106c47:	75 93                	jne    f0106bdc <cleanup_buffers+0x17>
f0106c49:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c4d:	75 8d                	jne    f0106bdc <cleanup_buffers+0x17>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f0106c4f:	90                   	nop
f0106c50:	c9                   	leave  
f0106c51:	c3                   	ret    

f0106c52 <env_run_cmd_prmpt>:


/*2015*///obsolete! use env_exit() instead! it add the exited env to the EXIT list, then reinvoke the scheduler
void env_run_cmd_prmpt()
{
f0106c52:	55                   	push   %ebp
f0106c53:	89 e5                	mov    %esp,%ebp
f0106c55:	83 ec 08             	sub    $0x8,%esp
	panic("env_run_cmd_prmpt() is obsoleted since 2015! use env_exit() instead");
f0106c58:	83 ec 04             	sub    $0x4,%esp
f0106c5b:	68 34 0c 12 f0       	push   $0xf0120c34
f0106c60:	68 f2 04 00 00       	push   $0x4f2
f0106c65:	68 66 0a 12 f0       	push   $0xf0120a66
f0106c6a:	e8 40 95 ff ff       	call   f01001af <_panic>

f0106c6f <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f0106c6f:	55                   	push   %ebp
f0106c70:	89 e5                	mov    %esp,%ebp
f0106c72:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f0106c75:	8b 65 08             	mov    0x8(%ebp),%esp
f0106c78:	61                   	popa   
f0106c79:	07                   	pop    %es
f0106c7a:	1f                   	pop    %ds
f0106c7b:	83 c4 08             	add    $0x8,%esp
f0106c7e:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f0106c7f:	83 ec 04             	sub    $0x4,%esp
f0106c82:	68 78 0c 12 f0       	push   $0xf0120c78
f0106c87:	68 4b 05 00 00       	push   $0x54b
f0106c8c:	68 66 0a 12 f0       	push   $0xf0120a66
f0106c91:	e8 19 95 ff ff       	call   f01001af <_panic>

f0106c96 <mc146818_read>:
#include <inc/assert.h>
#include <inc/lib.h>

unsigned
mc146818_read(unsigned reg)
{
f0106c96:	55                   	push   %ebp
f0106c97:	89 e5                	mov    %esp,%ebp
f0106c99:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0106c9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0106c9f:	0f b6 c0             	movzbl %al,%eax
f0106ca2:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106ca9:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106cac:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106caf:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106cb2:	ee                   	out    %al,(%dx)
f0106cb3:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106cba:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106cbd:	89 c2                	mov    %eax,%edx
f0106cbf:	ec                   	in     (%dx),%al
f0106cc0:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0106cc3:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0106cc6:	0f b6 c0             	movzbl %al,%eax
}
f0106cc9:	c9                   	leave  
f0106cca:	c3                   	ret    

f0106ccb <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0106ccb:	55                   	push   %ebp
f0106ccc:	89 e5                	mov    %esp,%ebp
f0106cce:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0106cd1:	8b 45 08             	mov    0x8(%ebp),%eax
f0106cd4:	0f b6 c0             	movzbl %al,%eax
f0106cd7:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0106cde:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106ce1:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106ce4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106ce7:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0106ce8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106ceb:	0f b6 c0             	movzbl %al,%eax
f0106cee:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0106cf5:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106cf8:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106cfb:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106cfe:	ee                   	out    %al,(%dx)
}
f0106cff:	90                   	nop
f0106d00:	c9                   	leave  
f0106d01:	c3                   	ret    

f0106d02 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0106d02:	55                   	push   %ebp
f0106d03:	89 e5                	mov    %esp,%ebp
f0106d05:	53                   	push   %ebx
f0106d06:	83 ec 24             	sub    $0x24,%esp
f0106d09:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d0c:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0106d0f:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106d16:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106d1a:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106d1d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d20:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0106d21:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0106d25:	77 48                	ja     f0106d6f <kclock_start+0x6d>
f0106d27:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106d2e:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0106d32:	8a 45 ee             	mov    -0x12(%ebp),%al
f0106d35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106d38:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0106d39:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0106d3d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0106d42:	99                   	cltd   
f0106d43:	f7 fb                	idiv   %ebx
f0106d45:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0106d4b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0106d4f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0106d54:	99                   	cltd   
f0106d55:	f7 fb                	idiv   %ebx
f0106d57:	89 c3                	mov    %eax,%ebx
f0106d59:	89 c8                	mov    %ecx,%eax
f0106d5b:	99                   	cltd   
f0106d5c:	f7 fb                	idiv   %ebx
f0106d5e:	0f b7 c0             	movzwl %ax,%eax
f0106d61:	83 ec 0c             	sub    $0xc,%esp
f0106d64:	50                   	push   %eax
f0106d65:	e8 b8 01 00 00       	call   f0106f22 <kclock_write_cnt0_LSB_first>
f0106d6a:	83 c4 10             	add    $0x10,%esp
f0106d6d:	eb 13                	jmp    f0106d82 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0106d6f:	6a 35                	push   $0x35
f0106d71:	68 84 0c 12 f0       	push   $0xf0120c84
f0106d76:	6a 32                	push   $0x32
f0106d78:	68 e0 0c 12 f0       	push   $0xf0120ce0
f0106d7d:	e8 2d 94 ff ff       	call   f01001af <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106d82:	66 a1 80 cc 15 f0    	mov    0xf015cc80,%ax
f0106d88:	0f b7 c0             	movzwl %ax,%eax
f0106d8b:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106d90:	83 ec 0c             	sub    $0xc,%esp
f0106d93:	50                   	push   %eax
f0106d94:	e8 cc 03 00 00       	call   f0107165 <irq_setmask_8259A>
f0106d99:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0106d9c:	90                   	nop
f0106d9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106da0:	c9                   	leave  
f0106da1:	c3                   	ret    

f0106da2 <kclock_stop>:

void
kclock_stop(void)
{
f0106da2:	55                   	push   %ebp
f0106da3:	89 e5                	mov    %esp,%ebp
f0106da5:	83 ec 18             	sub    $0x18,%esp
f0106da8:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106daf:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0106db3:	8a 45 f3             	mov    -0xd(%ebp),%al
f0106db6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106db9:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f0106dba:	83 ec 0c             	sub    $0xc,%esp
f0106dbd:	68 ff ff 00 00       	push   $0xffff
f0106dc2:	e8 9e 03 00 00       	call   f0107165 <irq_setmask_8259A>
f0106dc7:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0106dca:	90                   	nop
f0106dcb:	c9                   	leave  
f0106dcc:	c3                   	ret    

f0106dcd <kclock_resume>:

void
kclock_resume(void)
{
f0106dcd:	55                   	push   %ebp
f0106dce:	89 e5                	mov    %esp,%ebp
f0106dd0:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f0106dd3:	e8 8c 01 00 00       	call   f0106f64 <kclock_read_cnt0>
f0106dd8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0106ddc:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0106de1:	77 06                	ja     f0106de9 <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0106de3:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0106de9:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0106ded:	83 e0 01             	and    $0x1,%eax
f0106df0:	66 85 c0             	test   %ax,%ax
f0106df3:	74 09                	je     f0106dfe <kclock_resume+0x31>
		cnt0++;
f0106df5:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0106df9:	40                   	inc    %eax
f0106dfa:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0106dfe:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106e05:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106e09:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106e0c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e0f:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0106e10:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106e14:	83 ec 0c             	sub    $0xc,%esp
f0106e17:	50                   	push   %eax
f0106e18:	e8 05 01 00 00       	call   f0106f22 <kclock_write_cnt0_LSB_first>
f0106e1d:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106e20:	66 a1 80 cc 15 f0    	mov    0xf015cc80,%ax
f0106e26:	0f b7 c0             	movzwl %ax,%eax
f0106e29:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106e2e:	83 ec 0c             	sub    $0xc,%esp
f0106e31:	50                   	push   %eax
f0106e32:	e8 2e 03 00 00       	call   f0107165 <irq_setmask_8259A>
f0106e37:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0106e3a:	90                   	nop
f0106e3b:	c9                   	leave  
f0106e3c:	c3                   	ret    

f0106e3d <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0106e3d:	55                   	push   %ebp
f0106e3e:	89 e5                	mov    %esp,%ebp
f0106e40:	83 ec 28             	sub    $0x28,%esp
f0106e43:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e46:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0106e49:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106e50:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0106e54:	8a 45 f3             	mov    -0xd(%ebp),%al
f0106e57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e5a:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0106e5b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0106e5f:	83 ec 0c             	sub    $0xc,%esp
f0106e62:	50                   	push   %eax
f0106e63:	e8 ba 00 00 00       	call   f0106f22 <kclock_write_cnt0_LSB_first>
f0106e68:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0106e6b:	66 a1 80 cc 15 f0    	mov    0xf015cc80,%ax
f0106e71:	0f b7 c0             	movzwl %ax,%eax
f0106e74:	25 fe ff 00 00       	and    $0xfffe,%eax
f0106e79:	83 ec 0c             	sub    $0xc,%esp
f0106e7c:	50                   	push   %eax
f0106e7d:	e8 e3 02 00 00       	call   f0107165 <irq_setmask_8259A>
f0106e82:	83 c4 10             	add    $0x10,%esp

}
f0106e85:	90                   	nop
f0106e86:	c9                   	leave  
f0106e87:	c3                   	ret    

f0106e88 <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0106e88:	55                   	push   %ebp
f0106e89:	89 e5                	mov    %esp,%ebp
f0106e8b:	53                   	push   %ebx
f0106e8c:	83 ec 24             	sub    $0x24,%esp
f0106e8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e92:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0106e95:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0106e99:	77 6c                	ja     f0106f07 <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f0106e9b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0106e9f:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0106ea4:	99                   	cltd   
f0106ea5:	f7 fb                	idiv   %ebx
f0106ea7:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0106ead:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0106eb1:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0106eb6:	99                   	cltd   
f0106eb7:	f7 fb                	idiv   %ebx
f0106eb9:	89 c3                	mov    %eax,%ebx
f0106ebb:	89 c8                	mov    %ecx,%eax
f0106ebd:	99                   	cltd   
f0106ebe:	f7 fb                	idiv   %ebx
f0106ec0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f0106ec3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ec6:	25 01 00 00 80       	and    $0x80000001,%eax
f0106ecb:	85 c0                	test   %eax,%eax
f0106ecd:	79 05                	jns    f0106ed4 <kclock_set_quantum+0x4c>
f0106ecf:	48                   	dec    %eax
f0106ed0:	83 c8 fe             	or     $0xfffffffe,%eax
f0106ed3:	40                   	inc    %eax
f0106ed4:	83 f8 01             	cmp    $0x1,%eax
f0106ed7:	75 03                	jne    f0106edc <kclock_set_quantum+0x54>
			cnt++;
f0106ed9:	ff 45 f4             	incl   -0xc(%ebp)
f0106edc:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0106ee3:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0106ee7:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106eea:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106eed:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0106eee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ef1:	0f b7 c0             	movzwl %ax,%eax
f0106ef4:	83 ec 0c             	sub    $0xc,%esp
f0106ef7:	50                   	push   %eax
f0106ef8:	e8 25 00 00 00       	call   f0106f22 <kclock_write_cnt0_LSB_first>
f0106efd:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0106f00:	e8 9d fe ff ff       	call   f0106da2 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0106f05:	eb 16                	jmp    f0106f1d <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0106f07:	6a 35                	push   $0x35
f0106f09:	68 84 0c 12 f0       	push   $0xf0120c84
f0106f0e:	68 c8 00 00 00       	push   $0xc8
f0106f13:	68 e0 0c 12 f0       	push   $0xf0120ce0
f0106f18:	e8 92 92 ff ff       	call   f01001af <_panic>
	}
}
f0106f1d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106f20:	c9                   	leave  
f0106f21:	c3                   	ret    

f0106f22 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0106f22:	55                   	push   %ebp
f0106f23:	89 e5                	mov    %esp,%ebp
f0106f25:	83 ec 14             	sub    $0x14,%esp
f0106f28:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f2b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0106f2f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f32:	0f b6 c0             	movzbl %al,%eax
f0106f35:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0106f3c:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106f3f:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106f42:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106f45:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0106f46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f49:	66 c1 e8 08          	shr    $0x8,%ax
f0106f4d:	0f b6 c0             	movzbl %al,%eax
f0106f50:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f0106f57:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106f5a:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106f5d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106f60:	ee                   	out    %al,(%dx)
}
f0106f61:	90                   	nop
f0106f62:	c9                   	leave  
f0106f63:	c3                   	ret    

f0106f64 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0106f64:	55                   	push   %ebp
f0106f65:	89 e5                	mov    %esp,%ebp
f0106f67:	83 ec 20             	sub    $0x20,%esp
f0106f6a:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106f71:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106f74:	89 c2                	mov    %eax,%edx
f0106f76:	ec                   	in     (%dx),%al
f0106f77:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106f7a:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106f7d:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106f80:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106f8a:	89 c2                	mov    %eax,%edx
f0106f8c:	ec                   	in     (%dx),%al
f0106f8d:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0106f90:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0106f93:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0106f96:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0106f9a:	c1 e0 08             	shl    $0x8,%eax
f0106f9d:	89 c2                	mov    %eax,%edx
f0106f9f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0106fa3:	09 d0                	or     %edx,%eax
f0106fa5:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f0106fa9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106fac:	c9                   	leave  
f0106fad:	c3                   	ret    

f0106fae <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f0106fae:	55                   	push   %ebp
f0106faf:	89 e5                	mov    %esp,%ebp
f0106fb1:	83 ec 30             	sub    $0x30,%esp
f0106fb4:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106fbb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0106fbe:	89 c2                	mov    %eax,%edx
f0106fc0:	ec                   	in     (%dx),%al
f0106fc1:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0106fc4:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0106fc7:	88 45 ff             	mov    %al,-0x1(%ebp)
f0106fca:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0106fd1:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106fd5:	8a 45 dc             	mov    -0x24(%ebp),%al
f0106fd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106fdb:	ee                   	out    %al,(%dx)
f0106fdc:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106fe3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106fe6:	89 c2                	mov    %eax,%edx
f0106fe8:	ec                   	in     (%dx),%al
f0106fe9:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0106fec:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0106fef:	88 45 f3             	mov    %al,-0xd(%ebp)
f0106ff2:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106ff9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106ffc:	89 c2                	mov    %eax,%edx
f0106ffe:	ec                   	in     (%dx),%al
f0106fff:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0107002:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0107005:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0107008:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f010700c:	c1 e0 08             	shl    $0x8,%eax
f010700f:	89 c2                	mov    %eax,%edx
f0107011:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0107015:	09 d0                	or     %edx,%eax
f0107017:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010701b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f010701f:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0107026:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0107029:	8a 45 df             	mov    -0x21(%ebp),%al
f010702c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010702f:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0107030:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0107033:	c9                   	leave  
f0107034:	c3                   	ret    

f0107035 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0107035:	55                   	push   %ebp
f0107036:	89 e5                	mov    %esp,%ebp
f0107038:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f010703b:	c7 05 a4 1f 7e f0 01 	movl   $0x1,0xf07e1fa4
f0107042:	00 00 00 
f0107045:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f010704c:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
f0107050:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0107053:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107056:	ee                   	out    %al,(%dx)
f0107057:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f010705e:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0107062:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0107065:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107068:	ee                   	out    %al,(%dx)
f0107069:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0107070:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0107074:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0107077:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010707a:	ee                   	out    %al,(%dx)
f010707b:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0107082:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0107086:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0107089:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010708c:	ee                   	out    %al,(%dx)
f010708d:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0107094:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0107098:	8a 45 b6             	mov    -0x4a(%ebp),%al
f010709b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010709e:	ee                   	out    %al,(%dx)
f010709f:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f01070a6:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f01070aa:	8a 45 b7             	mov    -0x49(%ebp),%al
f01070ad:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01070b0:	ee                   	out    %al,(%dx)
f01070b1:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f01070b8:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f01070bc:	8a 45 b8             	mov    -0x48(%ebp),%al
f01070bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01070c2:	ee                   	out    %al,(%dx)
f01070c3:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f01070ca:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f01070ce:	8a 45 b9             	mov    -0x47(%ebp),%al
f01070d1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01070d4:	ee                   	out    %al,(%dx)
f01070d5:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f01070dc:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f01070e0:	8a 45 ba             	mov    -0x46(%ebp),%al
f01070e3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01070e6:	ee                   	out    %al,(%dx)
f01070e7:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f01070ee:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f01070f2:	8a 45 bb             	mov    -0x45(%ebp),%al
f01070f5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01070f8:	ee                   	out    %al,(%dx)
f01070f9:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0107100:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0107104:	8a 45 bc             	mov    -0x44(%ebp),%al
f0107107:	8b 55 cc             	mov    -0x34(%ebp),%edx
f010710a:	ee                   	out    %al,(%dx)
f010710b:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0107112:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0107116:	8a 45 bd             	mov    -0x43(%ebp),%al
f0107119:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010711c:	ee                   	out    %al,(%dx)
f010711d:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0107124:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0107128:	8a 45 be             	mov    -0x42(%ebp),%al
f010712b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010712e:	ee                   	out    %al,(%dx)
f010712f:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0107136:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f010713a:	8a 45 bf             	mov    -0x41(%ebp),%al
f010713d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0107140:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0107141:	66 a1 80 cc 15 f0    	mov    0xf015cc80,%ax
f0107147:	66 83 f8 ff          	cmp    $0xffff,%ax
f010714b:	74 15                	je     f0107162 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f010714d:	66 a1 80 cc 15 f0    	mov    0xf015cc80,%ax
f0107153:	0f b7 c0             	movzwl %ax,%eax
f0107156:	83 ec 0c             	sub    $0xc,%esp
f0107159:	50                   	push   %eax
f010715a:	e8 06 00 00 00       	call   f0107165 <irq_setmask_8259A>
f010715f:	83 c4 10             	add    $0x10,%esp
}
f0107162:	90                   	nop
f0107163:	c9                   	leave  
f0107164:	c3                   	ret    

f0107165 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0107165:	55                   	push   %ebp
f0107166:	89 e5                	mov    %esp,%ebp
f0107168:	83 ec 14             	sub    $0x14,%esp
f010716b:	8b 45 08             	mov    0x8(%ebp),%eax
f010716e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0107172:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107175:	66 a3 80 cc 15 f0    	mov    %ax,0xf015cc80
	if (!didinit)
f010717b:	a1 a4 1f 7e f0       	mov    0xf07e1fa4,%eax
f0107180:	85 c0                	test   %eax,%eax
f0107182:	74 34                	je     f01071b8 <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0107184:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107187:	0f b6 c0             	movzbl %al,%eax
f010718a:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0107191:	88 45 f6             	mov    %al,-0xa(%ebp)
f0107194:	8a 45 f6             	mov    -0xa(%ebp),%al
f0107197:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010719a:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f010719b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010719e:	66 c1 e8 08          	shr    $0x8,%ax
f01071a2:	0f b6 c0             	movzbl %al,%eax
f01071a5:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f01071ac:	88 45 f7             	mov    %al,-0x9(%ebp)
f01071af:	8a 45 f7             	mov    -0x9(%ebp),%al
f01071b2:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01071b5:	ee                   	out    %al,(%dx)
f01071b6:	eb 01                	jmp    f01071b9 <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f01071b8:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f01071b9:	c9                   	leave  
f01071ba:	c3                   	ret    

f01071bb <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f01071bb:	55                   	push   %ebp
f01071bc:	89 e5                	mov    %esp,%ebp
f01071be:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f01071c1:	83 ec 0c             	sub    $0xc,%esp
f01071c4:	ff 75 08             	pushl  0x8(%ebp)
f01071c7:	e8 5b 9b ff ff       	call   f0100d27 <cputchar>
f01071cc:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f01071cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01071d2:	83 c0 04             	add    $0x4,%eax
f01071d5:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f01071d8:	90                   	nop
f01071d9:	c9                   	leave  
f01071da:	c3                   	ret    

f01071db <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f01071db:	55                   	push   %ebp
f01071dc:	89 e5                	mov    %esp,%ebp
f01071de:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f01071e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f01071e8:	ff 75 0c             	pushl  0xc(%ebp)
f01071eb:	ff 75 08             	pushl  0x8(%ebp)
f01071ee:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01071f1:	50                   	push   %eax
f01071f2:	68 bb 71 10 f0       	push   $0xf01071bb
f01071f7:	e8 d3 54 01 00       	call   f011c6cf <vprintfmt>
f01071fc:	83 c4 10             	add    $0x10,%esp
	return cnt;
f01071ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0107202:	c9                   	leave  
f0107203:	c3                   	ret    

f0107204 <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0107204:	55                   	push   %ebp
f0107205:	89 e5                	mov    %esp,%ebp
f0107207:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f010720a:	8d 45 0c             	lea    0xc(%ebp),%eax
f010720d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0107210:	8b 45 08             	mov    0x8(%ebp),%eax
f0107213:	83 ec 08             	sub    $0x8,%esp
f0107216:	ff 75 f4             	pushl  -0xc(%ebp)
f0107219:	50                   	push   %eax
f010721a:	e8 bc ff ff ff       	call   f01071db <vcprintf>
f010721f:	83 c4 10             	add    $0x10,%esp
f0107222:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0107225:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0107228:	c9                   	leave  
f0107229:	c3                   	ret    

f010722a <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010722a:	55                   	push   %ebp
f010722b:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010722d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107230:	83 f8 13             	cmp    $0x13,%eax
f0107233:	77 0c                	ja     f0107241 <trapname+0x17>
		return excnames[trapno];
f0107235:	8b 45 08             	mov    0x8(%ebp),%eax
f0107238:	8b 04 85 60 11 12 f0 	mov    -0xfedeea0(,%eax,4),%eax
f010723f:	eb 12                	jmp    f0107253 <trapname+0x29>
	if (trapno == T_SYSCALL)
f0107241:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f0107245:	75 07                	jne    f010724e <trapname+0x24>
		return "System call";
f0107247:	b8 00 0d 12 f0       	mov    $0xf0120d00,%eax
f010724c:	eb 05                	jmp    f0107253 <trapname+0x29>
	return "(unknown trap)";
f010724e:	b8 0c 0d 12 f0       	mov    $0xf0120d0c,%eax
}
f0107253:	5d                   	pop    %ebp
f0107254:	c3                   	ret    

f0107255 <idt_init>:


void
idt_init(void)
{
f0107255:	55                   	push   %ebp
f0107256:	89 e5                	mov    %esp,%ebp
f0107258:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010725b:	b8 c6 8f 10 f0       	mov    $0xf0108fc6,%eax
f0107260:	66 a3 50 20 7e f0    	mov    %ax,0xf07e2050
f0107266:	66 c7 05 52 20 7e f0 	movw   $0x8,0xf07e2052
f010726d:	08 00 
f010726f:	a0 54 20 7e f0       	mov    0xf07e2054,%al
f0107274:	83 e0 e0             	and    $0xffffffe0,%eax
f0107277:	a2 54 20 7e f0       	mov    %al,0xf07e2054
f010727c:	a0 54 20 7e f0       	mov    0xf07e2054,%al
f0107281:	83 e0 1f             	and    $0x1f,%eax
f0107284:	a2 54 20 7e f0       	mov    %al,0xf07e2054
f0107289:	a0 55 20 7e f0       	mov    0xf07e2055,%al
f010728e:	83 e0 f0             	and    $0xfffffff0,%eax
f0107291:	83 c8 0e             	or     $0xe,%eax
f0107294:	a2 55 20 7e f0       	mov    %al,0xf07e2055
f0107299:	a0 55 20 7e f0       	mov    0xf07e2055,%al
f010729e:	83 e0 ef             	and    $0xffffffef,%eax
f01072a1:	a2 55 20 7e f0       	mov    %al,0xf07e2055
f01072a6:	a0 55 20 7e f0       	mov    0xf07e2055,%al
f01072ab:	83 e0 9f             	and    $0xffffff9f,%eax
f01072ae:	a2 55 20 7e f0       	mov    %al,0xf07e2055
f01072b3:	a0 55 20 7e f0       	mov    0xf07e2055,%al
f01072b8:	83 c8 80             	or     $0xffffff80,%eax
f01072bb:	a2 55 20 7e f0       	mov    %al,0xf07e2055
f01072c0:	b8 c6 8f 10 f0       	mov    $0xf0108fc6,%eax
f01072c5:	c1 e8 10             	shr    $0x10,%eax
f01072c8:	66 a3 56 20 7e f0    	mov    %ax,0xf07e2056
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f01072ce:	b8 ce 8f 10 f0       	mov    $0xf0108fce,%eax
f01072d3:	66 a3 60 21 7e f0    	mov    %ax,0xf07e2160
f01072d9:	66 c7 05 62 21 7e f0 	movw   $0x8,0xf07e2162
f01072e0:	08 00 
f01072e2:	a0 64 21 7e f0       	mov    0xf07e2164,%al
f01072e7:	83 e0 e0             	and    $0xffffffe0,%eax
f01072ea:	a2 64 21 7e f0       	mov    %al,0xf07e2164
f01072ef:	a0 64 21 7e f0       	mov    0xf07e2164,%al
f01072f4:	83 e0 1f             	and    $0x1f,%eax
f01072f7:	a2 64 21 7e f0       	mov    %al,0xf07e2164
f01072fc:	a0 65 21 7e f0       	mov    0xf07e2165,%al
f0107301:	83 e0 f0             	and    $0xfffffff0,%eax
f0107304:	83 c8 0e             	or     $0xe,%eax
f0107307:	a2 65 21 7e f0       	mov    %al,0xf07e2165
f010730c:	a0 65 21 7e f0       	mov    0xf07e2165,%al
f0107311:	83 e0 ef             	and    $0xffffffef,%eax
f0107314:	a2 65 21 7e f0       	mov    %al,0xf07e2165
f0107319:	a0 65 21 7e f0       	mov    0xf07e2165,%al
f010731e:	83 c8 60             	or     $0x60,%eax
f0107321:	a2 65 21 7e f0       	mov    %al,0xf07e2165
f0107326:	a0 65 21 7e f0       	mov    0xf07e2165,%al
f010732b:	83 c8 80             	or     $0xffffff80,%eax
f010732e:	a2 65 21 7e f0       	mov    %al,0xf07e2165
f0107333:	b8 ce 8f 10 f0       	mov    $0xf0108fce,%eax
f0107338:	c1 e8 10             	shr    $0x10,%eax
f010733b:	66 a3 66 21 7e f0    	mov    %ax,0xf07e2166
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f0107341:	b8 d8 8f 10 f0       	mov    $0xf0108fd8,%eax
f0107346:	66 a3 20 20 7e f0    	mov    %ax,0xf07e2020
f010734c:	66 c7 05 22 20 7e f0 	movw   $0x8,0xf07e2022
f0107353:	08 00 
f0107355:	a0 24 20 7e f0       	mov    0xf07e2024,%al
f010735a:	83 e0 e0             	and    $0xffffffe0,%eax
f010735d:	a2 24 20 7e f0       	mov    %al,0xf07e2024
f0107362:	a0 24 20 7e f0       	mov    0xf07e2024,%al
f0107367:	83 e0 1f             	and    $0x1f,%eax
f010736a:	a2 24 20 7e f0       	mov    %al,0xf07e2024
f010736f:	a0 25 20 7e f0       	mov    0xf07e2025,%al
f0107374:	83 e0 f0             	and    $0xfffffff0,%eax
f0107377:	83 c8 0e             	or     $0xe,%eax
f010737a:	a2 25 20 7e f0       	mov    %al,0xf07e2025
f010737f:	a0 25 20 7e f0       	mov    0xf07e2025,%al
f0107384:	83 e0 ef             	and    $0xffffffef,%eax
f0107387:	a2 25 20 7e f0       	mov    %al,0xf07e2025
f010738c:	a0 25 20 7e f0       	mov    0xf07e2025,%al
f0107391:	83 e0 9f             	and    $0xffffff9f,%eax
f0107394:	a2 25 20 7e f0       	mov    %al,0xf07e2025
f0107399:	a0 25 20 7e f0       	mov    0xf07e2025,%al
f010739e:	83 c8 80             	or     $0xffffff80,%eax
f01073a1:	a2 25 20 7e f0       	mov    %al,0xf07e2025
f01073a6:	b8 d8 8f 10 f0       	mov    $0xf0108fd8,%eax
f01073ab:	c1 e8 10             	shr    $0x10,%eax
f01073ae:	66 a3 26 20 7e f0    	mov    %ax,0xf07e2026


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f01073b4:	b8 e0 8f 10 f0       	mov    $0xf0108fe0,%eax
f01073b9:	66 a3 e0 1f 7e f0    	mov    %ax,0xf07e1fe0
f01073bf:	66 c7 05 e2 1f 7e f0 	movw   $0x8,0xf07e1fe2
f01073c6:	08 00 
f01073c8:	a0 e4 1f 7e f0       	mov    0xf07e1fe4,%al
f01073cd:	83 e0 e0             	and    $0xffffffe0,%eax
f01073d0:	a2 e4 1f 7e f0       	mov    %al,0xf07e1fe4
f01073d5:	a0 e4 1f 7e f0       	mov    0xf07e1fe4,%al
f01073da:	83 e0 1f             	and    $0x1f,%eax
f01073dd:	a2 e4 1f 7e f0       	mov    %al,0xf07e1fe4
f01073e2:	a0 e5 1f 7e f0       	mov    0xf07e1fe5,%al
f01073e7:	83 e0 f0             	and    $0xfffffff0,%eax
f01073ea:	83 c8 0e             	or     $0xe,%eax
f01073ed:	a2 e5 1f 7e f0       	mov    %al,0xf07e1fe5
f01073f2:	a0 e5 1f 7e f0       	mov    0xf07e1fe5,%al
f01073f7:	83 e0 ef             	and    $0xffffffef,%eax
f01073fa:	a2 e5 1f 7e f0       	mov    %al,0xf07e1fe5
f01073ff:	a0 e5 1f 7e f0       	mov    0xf07e1fe5,%al
f0107404:	83 c8 60             	or     $0x60,%eax
f0107407:	a2 e5 1f 7e f0       	mov    %al,0xf07e1fe5
f010740c:	a0 e5 1f 7e f0       	mov    0xf07e1fe5,%al
f0107411:	83 c8 80             	or     $0xffffff80,%eax
f0107414:	a2 e5 1f 7e f0       	mov    %al,0xf07e1fe5
f0107419:	b8 e0 8f 10 f0       	mov    $0xf0108fe0,%eax
f010741e:	c1 e8 10             	shr    $0x10,%eax
f0107421:	66 a3 e6 1f 7e f0    	mov    %ax,0xf07e1fe6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f0107427:	b8 ea 8f 10 f0       	mov    $0xf0108fea,%eax
f010742c:	66 a3 e8 1f 7e f0    	mov    %ax,0xf07e1fe8
f0107432:	66 c7 05 ea 1f 7e f0 	movw   $0x8,0xf07e1fea
f0107439:	08 00 
f010743b:	a0 ec 1f 7e f0       	mov    0xf07e1fec,%al
f0107440:	83 e0 e0             	and    $0xffffffe0,%eax
f0107443:	a2 ec 1f 7e f0       	mov    %al,0xf07e1fec
f0107448:	a0 ec 1f 7e f0       	mov    0xf07e1fec,%al
f010744d:	83 e0 1f             	and    $0x1f,%eax
f0107450:	a2 ec 1f 7e f0       	mov    %al,0xf07e1fec
f0107455:	a0 ed 1f 7e f0       	mov    0xf07e1fed,%al
f010745a:	83 c8 0f             	or     $0xf,%eax
f010745d:	a2 ed 1f 7e f0       	mov    %al,0xf07e1fed
f0107462:	a0 ed 1f 7e f0       	mov    0xf07e1fed,%al
f0107467:	83 e0 ef             	and    $0xffffffef,%eax
f010746a:	a2 ed 1f 7e f0       	mov    %al,0xf07e1fed
f010746f:	a0 ed 1f 7e f0       	mov    0xf07e1fed,%al
f0107474:	83 c8 60             	or     $0x60,%eax
f0107477:	a2 ed 1f 7e f0       	mov    %al,0xf07e1fed
f010747c:	a0 ed 1f 7e f0       	mov    0xf07e1fed,%al
f0107481:	83 c8 80             	or     $0xffffff80,%eax
f0107484:	a2 ed 1f 7e f0       	mov    %al,0xf07e1fed
f0107489:	b8 ea 8f 10 f0       	mov    $0xf0108fea,%eax
f010748e:	c1 e8 10             	shr    $0x10,%eax
f0107491:	66 a3 ee 1f 7e f0    	mov    %ax,0xf07e1fee
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f0107497:	b8 f4 8f 10 f0       	mov    $0xf0108ff4,%eax
f010749c:	66 a3 f0 1f 7e f0    	mov    %ax,0xf07e1ff0
f01074a2:	66 c7 05 f2 1f 7e f0 	movw   $0x8,0xf07e1ff2
f01074a9:	08 00 
f01074ab:	a0 f4 1f 7e f0       	mov    0xf07e1ff4,%al
f01074b0:	83 e0 e0             	and    $0xffffffe0,%eax
f01074b3:	a2 f4 1f 7e f0       	mov    %al,0xf07e1ff4
f01074b8:	a0 f4 1f 7e f0       	mov    0xf07e1ff4,%al
f01074bd:	83 e0 1f             	and    $0x1f,%eax
f01074c0:	a2 f4 1f 7e f0       	mov    %al,0xf07e1ff4
f01074c5:	a0 f5 1f 7e f0       	mov    0xf07e1ff5,%al
f01074ca:	83 e0 f0             	and    $0xfffffff0,%eax
f01074cd:	83 c8 0e             	or     $0xe,%eax
f01074d0:	a2 f5 1f 7e f0       	mov    %al,0xf07e1ff5
f01074d5:	a0 f5 1f 7e f0       	mov    0xf07e1ff5,%al
f01074da:	83 e0 ef             	and    $0xffffffef,%eax
f01074dd:	a2 f5 1f 7e f0       	mov    %al,0xf07e1ff5
f01074e2:	a0 f5 1f 7e f0       	mov    0xf07e1ff5,%al
f01074e7:	83 c8 60             	or     $0x60,%eax
f01074ea:	a2 f5 1f 7e f0       	mov    %al,0xf07e1ff5
f01074ef:	a0 f5 1f 7e f0       	mov    0xf07e1ff5,%al
f01074f4:	83 c8 80             	or     $0xffffff80,%eax
f01074f7:	a2 f5 1f 7e f0       	mov    %al,0xf07e1ff5
f01074fc:	b8 f4 8f 10 f0       	mov    $0xf0108ff4,%eax
f0107501:	c1 e8 10             	shr    $0x10,%eax
f0107504:	66 a3 f6 1f 7e f0    	mov    %ax,0xf07e1ff6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010750a:	b8 fe 8f 10 f0       	mov    $0xf0108ffe,%eax
f010750f:	66 a3 f8 1f 7e f0    	mov    %ax,0xf07e1ff8
f0107515:	66 c7 05 fa 1f 7e f0 	movw   $0x8,0xf07e1ffa
f010751c:	08 00 
f010751e:	a0 fc 1f 7e f0       	mov    0xf07e1ffc,%al
f0107523:	83 e0 e0             	and    $0xffffffe0,%eax
f0107526:	a2 fc 1f 7e f0       	mov    %al,0xf07e1ffc
f010752b:	a0 fc 1f 7e f0       	mov    0xf07e1ffc,%al
f0107530:	83 e0 1f             	and    $0x1f,%eax
f0107533:	a2 fc 1f 7e f0       	mov    %al,0xf07e1ffc
f0107538:	a0 fd 1f 7e f0       	mov    0xf07e1ffd,%al
f010753d:	83 c8 0f             	or     $0xf,%eax
f0107540:	a2 fd 1f 7e f0       	mov    %al,0xf07e1ffd
f0107545:	a0 fd 1f 7e f0       	mov    0xf07e1ffd,%al
f010754a:	83 e0 ef             	and    $0xffffffef,%eax
f010754d:	a2 fd 1f 7e f0       	mov    %al,0xf07e1ffd
f0107552:	a0 fd 1f 7e f0       	mov    0xf07e1ffd,%al
f0107557:	83 c8 60             	or     $0x60,%eax
f010755a:	a2 fd 1f 7e f0       	mov    %al,0xf07e1ffd
f010755f:	a0 fd 1f 7e f0       	mov    0xf07e1ffd,%al
f0107564:	83 c8 80             	or     $0xffffff80,%eax
f0107567:	a2 fd 1f 7e f0       	mov    %al,0xf07e1ffd
f010756c:	b8 fe 8f 10 f0       	mov    $0xf0108ffe,%eax
f0107571:	c1 e8 10             	shr    $0x10,%eax
f0107574:	66 a3 fe 1f 7e f0    	mov    %ax,0xf07e1ffe
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010757a:	b8 08 90 10 f0       	mov    $0xf0109008,%eax
f010757f:	66 a3 00 20 7e f0    	mov    %ax,0xf07e2000
f0107585:	66 c7 05 02 20 7e f0 	movw   $0x8,0xf07e2002
f010758c:	08 00 
f010758e:	a0 04 20 7e f0       	mov    0xf07e2004,%al
f0107593:	83 e0 e0             	and    $0xffffffe0,%eax
f0107596:	a2 04 20 7e f0       	mov    %al,0xf07e2004
f010759b:	a0 04 20 7e f0       	mov    0xf07e2004,%al
f01075a0:	83 e0 1f             	and    $0x1f,%eax
f01075a3:	a2 04 20 7e f0       	mov    %al,0xf07e2004
f01075a8:	a0 05 20 7e f0       	mov    0xf07e2005,%al
f01075ad:	83 c8 0f             	or     $0xf,%eax
f01075b0:	a2 05 20 7e f0       	mov    %al,0xf07e2005
f01075b5:	a0 05 20 7e f0       	mov    0xf07e2005,%al
f01075ba:	83 e0 ef             	and    $0xffffffef,%eax
f01075bd:	a2 05 20 7e f0       	mov    %al,0xf07e2005
f01075c2:	a0 05 20 7e f0       	mov    0xf07e2005,%al
f01075c7:	83 c8 60             	or     $0x60,%eax
f01075ca:	a2 05 20 7e f0       	mov    %al,0xf07e2005
f01075cf:	a0 05 20 7e f0       	mov    0xf07e2005,%al
f01075d4:	83 c8 80             	or     $0xffffff80,%eax
f01075d7:	a2 05 20 7e f0       	mov    %al,0xf07e2005
f01075dc:	b8 08 90 10 f0       	mov    $0xf0109008,%eax
f01075e1:	c1 e8 10             	shr    $0x10,%eax
f01075e4:	66 a3 06 20 7e f0    	mov    %ax,0xf07e2006
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f01075ea:	b8 12 90 10 f0       	mov    $0xf0109012,%eax
f01075ef:	66 a3 08 20 7e f0    	mov    %ax,0xf07e2008
f01075f5:	66 c7 05 0a 20 7e f0 	movw   $0x8,0xf07e200a
f01075fc:	08 00 
f01075fe:	a0 0c 20 7e f0       	mov    0xf07e200c,%al
f0107603:	83 e0 e0             	and    $0xffffffe0,%eax
f0107606:	a2 0c 20 7e f0       	mov    %al,0xf07e200c
f010760b:	a0 0c 20 7e f0       	mov    0xf07e200c,%al
f0107610:	83 e0 1f             	and    $0x1f,%eax
f0107613:	a2 0c 20 7e f0       	mov    %al,0xf07e200c
f0107618:	a0 0d 20 7e f0       	mov    0xf07e200d,%al
f010761d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107620:	83 c8 0e             	or     $0xe,%eax
f0107623:	a2 0d 20 7e f0       	mov    %al,0xf07e200d
f0107628:	a0 0d 20 7e f0       	mov    0xf07e200d,%al
f010762d:	83 e0 ef             	and    $0xffffffef,%eax
f0107630:	a2 0d 20 7e f0       	mov    %al,0xf07e200d
f0107635:	a0 0d 20 7e f0       	mov    0xf07e200d,%al
f010763a:	83 c8 60             	or     $0x60,%eax
f010763d:	a2 0d 20 7e f0       	mov    %al,0xf07e200d
f0107642:	a0 0d 20 7e f0       	mov    0xf07e200d,%al
f0107647:	83 c8 80             	or     $0xffffff80,%eax
f010764a:	a2 0d 20 7e f0       	mov    %al,0xf07e200d
f010764f:	b8 12 90 10 f0       	mov    $0xf0109012,%eax
f0107654:	c1 e8 10             	shr    $0x10,%eax
f0107657:	66 a3 0e 20 7e f0    	mov    %ax,0xf07e200e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010765d:	b8 1c 90 10 f0       	mov    $0xf010901c,%eax
f0107662:	66 a3 10 20 7e f0    	mov    %ax,0xf07e2010
f0107668:	66 c7 05 12 20 7e f0 	movw   $0x8,0xf07e2012
f010766f:	08 00 
f0107671:	a0 14 20 7e f0       	mov    0xf07e2014,%al
f0107676:	83 e0 e0             	and    $0xffffffe0,%eax
f0107679:	a2 14 20 7e f0       	mov    %al,0xf07e2014
f010767e:	a0 14 20 7e f0       	mov    0xf07e2014,%al
f0107683:	83 e0 1f             	and    $0x1f,%eax
f0107686:	a2 14 20 7e f0       	mov    %al,0xf07e2014
f010768b:	a0 15 20 7e f0       	mov    0xf07e2015,%al
f0107690:	83 e0 f0             	and    $0xfffffff0,%eax
f0107693:	83 c8 0e             	or     $0xe,%eax
f0107696:	a2 15 20 7e f0       	mov    %al,0xf07e2015
f010769b:	a0 15 20 7e f0       	mov    0xf07e2015,%al
f01076a0:	83 e0 ef             	and    $0xffffffef,%eax
f01076a3:	a2 15 20 7e f0       	mov    %al,0xf07e2015
f01076a8:	a0 15 20 7e f0       	mov    0xf07e2015,%al
f01076ad:	83 c8 60             	or     $0x60,%eax
f01076b0:	a2 15 20 7e f0       	mov    %al,0xf07e2015
f01076b5:	a0 15 20 7e f0       	mov    0xf07e2015,%al
f01076ba:	83 c8 80             	or     $0xffffff80,%eax
f01076bd:	a2 15 20 7e f0       	mov    %al,0xf07e2015
f01076c2:	b8 1c 90 10 f0       	mov    $0xf010901c,%eax
f01076c7:	c1 e8 10             	shr    $0x10,%eax
f01076ca:	66 a3 16 20 7e f0    	mov    %ax,0xf07e2016
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f01076d0:	b8 26 90 10 f0       	mov    $0xf0109026,%eax
f01076d5:	66 a3 18 20 7e f0    	mov    %ax,0xf07e2018
f01076db:	66 c7 05 1a 20 7e f0 	movw   $0x8,0xf07e201a
f01076e2:	08 00 
f01076e4:	a0 1c 20 7e f0       	mov    0xf07e201c,%al
f01076e9:	83 e0 e0             	and    $0xffffffe0,%eax
f01076ec:	a2 1c 20 7e f0       	mov    %al,0xf07e201c
f01076f1:	a0 1c 20 7e f0       	mov    0xf07e201c,%al
f01076f6:	83 e0 1f             	and    $0x1f,%eax
f01076f9:	a2 1c 20 7e f0       	mov    %al,0xf07e201c
f01076fe:	a0 1d 20 7e f0       	mov    0xf07e201d,%al
f0107703:	83 e0 f0             	and    $0xfffffff0,%eax
f0107706:	83 c8 0e             	or     $0xe,%eax
f0107709:	a2 1d 20 7e f0       	mov    %al,0xf07e201d
f010770e:	a0 1d 20 7e f0       	mov    0xf07e201d,%al
f0107713:	83 e0 ef             	and    $0xffffffef,%eax
f0107716:	a2 1d 20 7e f0       	mov    %al,0xf07e201d
f010771b:	a0 1d 20 7e f0       	mov    0xf07e201d,%al
f0107720:	83 c8 60             	or     $0x60,%eax
f0107723:	a2 1d 20 7e f0       	mov    %al,0xf07e201d
f0107728:	a0 1d 20 7e f0       	mov    0xf07e201d,%al
f010772d:	83 c8 80             	or     $0xffffff80,%eax
f0107730:	a2 1d 20 7e f0       	mov    %al,0xf07e201d
f0107735:	b8 26 90 10 f0       	mov    $0xf0109026,%eax
f010773a:	c1 e8 10             	shr    $0x10,%eax
f010773d:	66 a3 1e 20 7e f0    	mov    %ax,0xf07e201e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f0107743:	b8 30 90 10 f0       	mov    $0xf0109030,%eax
f0107748:	66 a3 30 20 7e f0    	mov    %ax,0xf07e2030
f010774e:	66 c7 05 32 20 7e f0 	movw   $0x8,0xf07e2032
f0107755:	08 00 
f0107757:	a0 34 20 7e f0       	mov    0xf07e2034,%al
f010775c:	83 e0 e0             	and    $0xffffffe0,%eax
f010775f:	a2 34 20 7e f0       	mov    %al,0xf07e2034
f0107764:	a0 34 20 7e f0       	mov    0xf07e2034,%al
f0107769:	83 e0 1f             	and    $0x1f,%eax
f010776c:	a2 34 20 7e f0       	mov    %al,0xf07e2034
f0107771:	a0 35 20 7e f0       	mov    0xf07e2035,%al
f0107776:	83 e0 f0             	and    $0xfffffff0,%eax
f0107779:	83 c8 0e             	or     $0xe,%eax
f010777c:	a2 35 20 7e f0       	mov    %al,0xf07e2035
f0107781:	a0 35 20 7e f0       	mov    0xf07e2035,%al
f0107786:	83 e0 ef             	and    $0xffffffef,%eax
f0107789:	a2 35 20 7e f0       	mov    %al,0xf07e2035
f010778e:	a0 35 20 7e f0       	mov    0xf07e2035,%al
f0107793:	83 c8 60             	or     $0x60,%eax
f0107796:	a2 35 20 7e f0       	mov    %al,0xf07e2035
f010779b:	a0 35 20 7e f0       	mov    0xf07e2035,%al
f01077a0:	83 c8 80             	or     $0xffffff80,%eax
f01077a3:	a2 35 20 7e f0       	mov    %al,0xf07e2035
f01077a8:	b8 30 90 10 f0       	mov    $0xf0109030,%eax
f01077ad:	c1 e8 10             	shr    $0x10,%eax
f01077b0:	66 a3 36 20 7e f0    	mov    %ax,0xf07e2036
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f01077b6:	b8 38 90 10 f0       	mov    $0xf0109038,%eax
f01077bb:	66 a3 38 20 7e f0    	mov    %ax,0xf07e2038
f01077c1:	66 c7 05 3a 20 7e f0 	movw   $0x8,0xf07e203a
f01077c8:	08 00 
f01077ca:	a0 3c 20 7e f0       	mov    0xf07e203c,%al
f01077cf:	83 e0 e0             	and    $0xffffffe0,%eax
f01077d2:	a2 3c 20 7e f0       	mov    %al,0xf07e203c
f01077d7:	a0 3c 20 7e f0       	mov    0xf07e203c,%al
f01077dc:	83 e0 1f             	and    $0x1f,%eax
f01077df:	a2 3c 20 7e f0       	mov    %al,0xf07e203c
f01077e4:	a0 3d 20 7e f0       	mov    0xf07e203d,%al
f01077e9:	83 e0 f0             	and    $0xfffffff0,%eax
f01077ec:	83 c8 0e             	or     $0xe,%eax
f01077ef:	a2 3d 20 7e f0       	mov    %al,0xf07e203d
f01077f4:	a0 3d 20 7e f0       	mov    0xf07e203d,%al
f01077f9:	83 e0 ef             	and    $0xffffffef,%eax
f01077fc:	a2 3d 20 7e f0       	mov    %al,0xf07e203d
f0107801:	a0 3d 20 7e f0       	mov    0xf07e203d,%al
f0107806:	83 c8 60             	or     $0x60,%eax
f0107809:	a2 3d 20 7e f0       	mov    %al,0xf07e203d
f010780e:	a0 3d 20 7e f0       	mov    0xf07e203d,%al
f0107813:	83 c8 80             	or     $0xffffff80,%eax
f0107816:	a2 3d 20 7e f0       	mov    %al,0xf07e203d
f010781b:	b8 38 90 10 f0       	mov    $0xf0109038,%eax
f0107820:	c1 e8 10             	shr    $0x10,%eax
f0107823:	66 a3 3e 20 7e f0    	mov    %ax,0xf07e203e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f0107829:	b8 3c 90 10 f0       	mov    $0xf010903c,%eax
f010782e:	66 a3 40 20 7e f0    	mov    %ax,0xf07e2040
f0107834:	66 c7 05 42 20 7e f0 	movw   $0x8,0xf07e2042
f010783b:	08 00 
f010783d:	a0 44 20 7e f0       	mov    0xf07e2044,%al
f0107842:	83 e0 e0             	and    $0xffffffe0,%eax
f0107845:	a2 44 20 7e f0       	mov    %al,0xf07e2044
f010784a:	a0 44 20 7e f0       	mov    0xf07e2044,%al
f010784f:	83 e0 1f             	and    $0x1f,%eax
f0107852:	a2 44 20 7e f0       	mov    %al,0xf07e2044
f0107857:	a0 45 20 7e f0       	mov    0xf07e2045,%al
f010785c:	83 e0 f0             	and    $0xfffffff0,%eax
f010785f:	83 c8 0e             	or     $0xe,%eax
f0107862:	a2 45 20 7e f0       	mov    %al,0xf07e2045
f0107867:	a0 45 20 7e f0       	mov    0xf07e2045,%al
f010786c:	83 e0 ef             	and    $0xffffffef,%eax
f010786f:	a2 45 20 7e f0       	mov    %al,0xf07e2045
f0107874:	a0 45 20 7e f0       	mov    0xf07e2045,%al
f0107879:	83 c8 60             	or     $0x60,%eax
f010787c:	a2 45 20 7e f0       	mov    %al,0xf07e2045
f0107881:	a0 45 20 7e f0       	mov    0xf07e2045,%al
f0107886:	83 c8 80             	or     $0xffffff80,%eax
f0107889:	a2 45 20 7e f0       	mov    %al,0xf07e2045
f010788e:	b8 3c 90 10 f0       	mov    $0xf010903c,%eax
f0107893:	c1 e8 10             	shr    $0x10,%eax
f0107896:	66 a3 46 20 7e f0    	mov    %ax,0xf07e2046
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010789c:	b8 40 90 10 f0       	mov    $0xf0109040,%eax
f01078a1:	66 a3 48 20 7e f0    	mov    %ax,0xf07e2048
f01078a7:	66 c7 05 4a 20 7e f0 	movw   $0x8,0xf07e204a
f01078ae:	08 00 
f01078b0:	a0 4c 20 7e f0       	mov    0xf07e204c,%al
f01078b5:	83 e0 e0             	and    $0xffffffe0,%eax
f01078b8:	a2 4c 20 7e f0       	mov    %al,0xf07e204c
f01078bd:	a0 4c 20 7e f0       	mov    0xf07e204c,%al
f01078c2:	83 e0 1f             	and    $0x1f,%eax
f01078c5:	a2 4c 20 7e f0       	mov    %al,0xf07e204c
f01078ca:	a0 4d 20 7e f0       	mov    0xf07e204d,%al
f01078cf:	83 e0 f0             	and    $0xfffffff0,%eax
f01078d2:	83 c8 0e             	or     $0xe,%eax
f01078d5:	a2 4d 20 7e f0       	mov    %al,0xf07e204d
f01078da:	a0 4d 20 7e f0       	mov    0xf07e204d,%al
f01078df:	83 e0 ef             	and    $0xffffffef,%eax
f01078e2:	a2 4d 20 7e f0       	mov    %al,0xf07e204d
f01078e7:	a0 4d 20 7e f0       	mov    0xf07e204d,%al
f01078ec:	83 c8 60             	or     $0x60,%eax
f01078ef:	a2 4d 20 7e f0       	mov    %al,0xf07e204d
f01078f4:	a0 4d 20 7e f0       	mov    0xf07e204d,%al
f01078f9:	83 c8 80             	or     $0xffffff80,%eax
f01078fc:	a2 4d 20 7e f0       	mov    %al,0xf07e204d
f0107901:	b8 40 90 10 f0       	mov    $0xf0109040,%eax
f0107906:	c1 e8 10             	shr    $0x10,%eax
f0107909:	66 a3 4e 20 7e f0    	mov    %ax,0xf07e204e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010790f:	b8 44 90 10 f0       	mov    $0xf0109044,%eax
f0107914:	66 a3 60 20 7e f0    	mov    %ax,0xf07e2060
f010791a:	66 c7 05 62 20 7e f0 	movw   $0x8,0xf07e2062
f0107921:	08 00 
f0107923:	a0 64 20 7e f0       	mov    0xf07e2064,%al
f0107928:	83 e0 e0             	and    $0xffffffe0,%eax
f010792b:	a2 64 20 7e f0       	mov    %al,0xf07e2064
f0107930:	a0 64 20 7e f0       	mov    0xf07e2064,%al
f0107935:	83 e0 1f             	and    $0x1f,%eax
f0107938:	a2 64 20 7e f0       	mov    %al,0xf07e2064
f010793d:	a0 65 20 7e f0       	mov    0xf07e2065,%al
f0107942:	83 e0 f0             	and    $0xfffffff0,%eax
f0107945:	83 c8 0e             	or     $0xe,%eax
f0107948:	a2 65 20 7e f0       	mov    %al,0xf07e2065
f010794d:	a0 65 20 7e f0       	mov    0xf07e2065,%al
f0107952:	83 e0 ef             	and    $0xffffffef,%eax
f0107955:	a2 65 20 7e f0       	mov    %al,0xf07e2065
f010795a:	a0 65 20 7e f0       	mov    0xf07e2065,%al
f010795f:	83 c8 60             	or     $0x60,%eax
f0107962:	a2 65 20 7e f0       	mov    %al,0xf07e2065
f0107967:	a0 65 20 7e f0       	mov    0xf07e2065,%al
f010796c:	83 c8 80             	or     $0xffffff80,%eax
f010796f:	a2 65 20 7e f0       	mov    %al,0xf07e2065
f0107974:	b8 44 90 10 f0       	mov    $0xf0109044,%eax
f0107979:	c1 e8 10             	shr    $0x10,%eax
f010797c:	66 a3 66 20 7e f0    	mov    %ax,0xf07e2066
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f0107982:	b8 4a 90 10 f0       	mov    $0xf010904a,%eax
f0107987:	66 a3 68 20 7e f0    	mov    %ax,0xf07e2068
f010798d:	66 c7 05 6a 20 7e f0 	movw   $0x8,0xf07e206a
f0107994:	08 00 
f0107996:	a0 6c 20 7e f0       	mov    0xf07e206c,%al
f010799b:	83 e0 e0             	and    $0xffffffe0,%eax
f010799e:	a2 6c 20 7e f0       	mov    %al,0xf07e206c
f01079a3:	a0 6c 20 7e f0       	mov    0xf07e206c,%al
f01079a8:	83 e0 1f             	and    $0x1f,%eax
f01079ab:	a2 6c 20 7e f0       	mov    %al,0xf07e206c
f01079b0:	a0 6d 20 7e f0       	mov    0xf07e206d,%al
f01079b5:	83 e0 f0             	and    $0xfffffff0,%eax
f01079b8:	83 c8 0e             	or     $0xe,%eax
f01079bb:	a2 6d 20 7e f0       	mov    %al,0xf07e206d
f01079c0:	a0 6d 20 7e f0       	mov    0xf07e206d,%al
f01079c5:	83 e0 ef             	and    $0xffffffef,%eax
f01079c8:	a2 6d 20 7e f0       	mov    %al,0xf07e206d
f01079cd:	a0 6d 20 7e f0       	mov    0xf07e206d,%al
f01079d2:	83 c8 60             	or     $0x60,%eax
f01079d5:	a2 6d 20 7e f0       	mov    %al,0xf07e206d
f01079da:	a0 6d 20 7e f0       	mov    0xf07e206d,%al
f01079df:	83 c8 80             	or     $0xffffff80,%eax
f01079e2:	a2 6d 20 7e f0       	mov    %al,0xf07e206d
f01079e7:	b8 4a 90 10 f0       	mov    $0xf010904a,%eax
f01079ec:	c1 e8 10             	shr    $0x10,%eax
f01079ef:	66 a3 6e 20 7e f0    	mov    %ax,0xf07e206e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f01079f5:	b8 4e 90 10 f0       	mov    $0xf010904e,%eax
f01079fa:	66 a3 70 20 7e f0    	mov    %ax,0xf07e2070
f0107a00:	66 c7 05 72 20 7e f0 	movw   $0x8,0xf07e2072
f0107a07:	08 00 
f0107a09:	a0 74 20 7e f0       	mov    0xf07e2074,%al
f0107a0e:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a11:	a2 74 20 7e f0       	mov    %al,0xf07e2074
f0107a16:	a0 74 20 7e f0       	mov    0xf07e2074,%al
f0107a1b:	83 e0 1f             	and    $0x1f,%eax
f0107a1e:	a2 74 20 7e f0       	mov    %al,0xf07e2074
f0107a23:	a0 75 20 7e f0       	mov    0xf07e2075,%al
f0107a28:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a2b:	83 c8 0e             	or     $0xe,%eax
f0107a2e:	a2 75 20 7e f0       	mov    %al,0xf07e2075
f0107a33:	a0 75 20 7e f0       	mov    0xf07e2075,%al
f0107a38:	83 e0 ef             	and    $0xffffffef,%eax
f0107a3b:	a2 75 20 7e f0       	mov    %al,0xf07e2075
f0107a40:	a0 75 20 7e f0       	mov    0xf07e2075,%al
f0107a45:	83 c8 60             	or     $0x60,%eax
f0107a48:	a2 75 20 7e f0       	mov    %al,0xf07e2075
f0107a4d:	a0 75 20 7e f0       	mov    0xf07e2075,%al
f0107a52:	83 c8 80             	or     $0xffffff80,%eax
f0107a55:	a2 75 20 7e f0       	mov    %al,0xf07e2075
f0107a5a:	b8 4e 90 10 f0       	mov    $0xf010904e,%eax
f0107a5f:	c1 e8 10             	shr    $0x10,%eax
f0107a62:	66 a3 76 20 7e f0    	mov    %ax,0xf07e2076
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f0107a68:	b8 54 90 10 f0       	mov    $0xf0109054,%eax
f0107a6d:	66 a3 78 20 7e f0    	mov    %ax,0xf07e2078
f0107a73:	66 c7 05 7a 20 7e f0 	movw   $0x8,0xf07e207a
f0107a7a:	08 00 
f0107a7c:	a0 7c 20 7e f0       	mov    0xf07e207c,%al
f0107a81:	83 e0 e0             	and    $0xffffffe0,%eax
f0107a84:	a2 7c 20 7e f0       	mov    %al,0xf07e207c
f0107a89:	a0 7c 20 7e f0       	mov    0xf07e207c,%al
f0107a8e:	83 e0 1f             	and    $0x1f,%eax
f0107a91:	a2 7c 20 7e f0       	mov    %al,0xf07e207c
f0107a96:	a0 7d 20 7e f0       	mov    0xf07e207d,%al
f0107a9b:	83 e0 f0             	and    $0xfffffff0,%eax
f0107a9e:	83 c8 0e             	or     $0xe,%eax
f0107aa1:	a2 7d 20 7e f0       	mov    %al,0xf07e207d
f0107aa6:	a0 7d 20 7e f0       	mov    0xf07e207d,%al
f0107aab:	83 e0 ef             	and    $0xffffffef,%eax
f0107aae:	a2 7d 20 7e f0       	mov    %al,0xf07e207d
f0107ab3:	a0 7d 20 7e f0       	mov    0xf07e207d,%al
f0107ab8:	83 c8 60             	or     $0x60,%eax
f0107abb:	a2 7d 20 7e f0       	mov    %al,0xf07e207d
f0107ac0:	a0 7d 20 7e f0       	mov    0xf07e207d,%al
f0107ac5:	83 c8 80             	or     $0xffffff80,%eax
f0107ac8:	a2 7d 20 7e f0       	mov    %al,0xf07e207d
f0107acd:	b8 54 90 10 f0       	mov    $0xf0109054,%eax
f0107ad2:	c1 e8 10             	shr    $0x10,%eax
f0107ad5:	66 a3 7e 20 7e f0    	mov    %ax,0xf07e207e


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f0107adb:	b8 5a 90 10 f0       	mov    $0xf010905a,%eax
f0107ae0:	66 a3 e0 20 7e f0    	mov    %ax,0xf07e20e0
f0107ae6:	66 c7 05 e2 20 7e f0 	movw   $0x8,0xf07e20e2
f0107aed:	08 00 
f0107aef:	a0 e4 20 7e f0       	mov    0xf07e20e4,%al
f0107af4:	83 e0 e0             	and    $0xffffffe0,%eax
f0107af7:	a2 e4 20 7e f0       	mov    %al,0xf07e20e4
f0107afc:	a0 e4 20 7e f0       	mov    0xf07e20e4,%al
f0107b01:	83 e0 1f             	and    $0x1f,%eax
f0107b04:	a2 e4 20 7e f0       	mov    %al,0xf07e20e4
f0107b09:	a0 e5 20 7e f0       	mov    0xf07e20e5,%al
f0107b0e:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b11:	83 c8 0e             	or     $0xe,%eax
f0107b14:	a2 e5 20 7e f0       	mov    %al,0xf07e20e5
f0107b19:	a0 e5 20 7e f0       	mov    0xf07e20e5,%al
f0107b1e:	83 e0 ef             	and    $0xffffffef,%eax
f0107b21:	a2 e5 20 7e f0       	mov    %al,0xf07e20e5
f0107b26:	a0 e5 20 7e f0       	mov    0xf07e20e5,%al
f0107b2b:	83 c8 60             	or     $0x60,%eax
f0107b2e:	a2 e5 20 7e f0       	mov    %al,0xf07e20e5
f0107b33:	a0 e5 20 7e f0       	mov    0xf07e20e5,%al
f0107b38:	83 c8 80             	or     $0xffffff80,%eax
f0107b3b:	a2 e5 20 7e f0       	mov    %al,0xf07e20e5
f0107b40:	b8 5a 90 10 f0       	mov    $0xf010905a,%eax
f0107b45:	c1 e8 10             	shr    $0x10,%eax
f0107b48:	66 a3 e6 20 7e f0    	mov    %ax,0xf07e20e6
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f0107b4e:	b8 60 90 10 f0       	mov    $0xf0109060,%eax
f0107b53:	66 a3 e8 20 7e f0    	mov    %ax,0xf07e20e8
f0107b59:	66 c7 05 ea 20 7e f0 	movw   $0x8,0xf07e20ea
f0107b60:	08 00 
f0107b62:	a0 ec 20 7e f0       	mov    0xf07e20ec,%al
f0107b67:	83 e0 e0             	and    $0xffffffe0,%eax
f0107b6a:	a2 ec 20 7e f0       	mov    %al,0xf07e20ec
f0107b6f:	a0 ec 20 7e f0       	mov    0xf07e20ec,%al
f0107b74:	83 e0 1f             	and    $0x1f,%eax
f0107b77:	a2 ec 20 7e f0       	mov    %al,0xf07e20ec
f0107b7c:	a0 ed 20 7e f0       	mov    0xf07e20ed,%al
f0107b81:	83 e0 f0             	and    $0xfffffff0,%eax
f0107b84:	83 c8 0e             	or     $0xe,%eax
f0107b87:	a2 ed 20 7e f0       	mov    %al,0xf07e20ed
f0107b8c:	a0 ed 20 7e f0       	mov    0xf07e20ed,%al
f0107b91:	83 e0 ef             	and    $0xffffffef,%eax
f0107b94:	a2 ed 20 7e f0       	mov    %al,0xf07e20ed
f0107b99:	a0 ed 20 7e f0       	mov    0xf07e20ed,%al
f0107b9e:	83 c8 60             	or     $0x60,%eax
f0107ba1:	a2 ed 20 7e f0       	mov    %al,0xf07e20ed
f0107ba6:	a0 ed 20 7e f0       	mov    0xf07e20ed,%al
f0107bab:	83 c8 80             	or     $0xffffff80,%eax
f0107bae:	a2 ed 20 7e f0       	mov    %al,0xf07e20ed
f0107bb3:	b8 60 90 10 f0       	mov    $0xf0109060,%eax
f0107bb8:	c1 e8 10             	shr    $0x10,%eax
f0107bbb:	66 a3 ee 20 7e f0    	mov    %ax,0xf07e20ee
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f0107bc1:	b8 66 90 10 f0       	mov    $0xf0109066,%eax
f0107bc6:	66 a3 f0 20 7e f0    	mov    %ax,0xf07e20f0
f0107bcc:	66 c7 05 f2 20 7e f0 	movw   $0x8,0xf07e20f2
f0107bd3:	08 00 
f0107bd5:	a0 f4 20 7e f0       	mov    0xf07e20f4,%al
f0107bda:	83 e0 e0             	and    $0xffffffe0,%eax
f0107bdd:	a2 f4 20 7e f0       	mov    %al,0xf07e20f4
f0107be2:	a0 f4 20 7e f0       	mov    0xf07e20f4,%al
f0107be7:	83 e0 1f             	and    $0x1f,%eax
f0107bea:	a2 f4 20 7e f0       	mov    %al,0xf07e20f4
f0107bef:	a0 f5 20 7e f0       	mov    0xf07e20f5,%al
f0107bf4:	83 e0 f0             	and    $0xfffffff0,%eax
f0107bf7:	83 c8 0e             	or     $0xe,%eax
f0107bfa:	a2 f5 20 7e f0       	mov    %al,0xf07e20f5
f0107bff:	a0 f5 20 7e f0       	mov    0xf07e20f5,%al
f0107c04:	83 e0 ef             	and    $0xffffffef,%eax
f0107c07:	a2 f5 20 7e f0       	mov    %al,0xf07e20f5
f0107c0c:	a0 f5 20 7e f0       	mov    0xf07e20f5,%al
f0107c11:	83 c8 60             	or     $0x60,%eax
f0107c14:	a2 f5 20 7e f0       	mov    %al,0xf07e20f5
f0107c19:	a0 f5 20 7e f0       	mov    0xf07e20f5,%al
f0107c1e:	83 c8 80             	or     $0xffffff80,%eax
f0107c21:	a2 f5 20 7e f0       	mov    %al,0xf07e20f5
f0107c26:	b8 66 90 10 f0       	mov    $0xf0109066,%eax
f0107c2b:	c1 e8 10             	shr    $0x10,%eax
f0107c2e:	66 a3 f6 20 7e f0    	mov    %ax,0xf07e20f6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f0107c34:	b8 6c 90 10 f0       	mov    $0xf010906c,%eax
f0107c39:	66 a3 f8 20 7e f0    	mov    %ax,0xf07e20f8
f0107c3f:	66 c7 05 fa 20 7e f0 	movw   $0x8,0xf07e20fa
f0107c46:	08 00 
f0107c48:	a0 fc 20 7e f0       	mov    0xf07e20fc,%al
f0107c4d:	83 e0 e0             	and    $0xffffffe0,%eax
f0107c50:	a2 fc 20 7e f0       	mov    %al,0xf07e20fc
f0107c55:	a0 fc 20 7e f0       	mov    0xf07e20fc,%al
f0107c5a:	83 e0 1f             	and    $0x1f,%eax
f0107c5d:	a2 fc 20 7e f0       	mov    %al,0xf07e20fc
f0107c62:	a0 fd 20 7e f0       	mov    0xf07e20fd,%al
f0107c67:	83 e0 f0             	and    $0xfffffff0,%eax
f0107c6a:	83 c8 0e             	or     $0xe,%eax
f0107c6d:	a2 fd 20 7e f0       	mov    %al,0xf07e20fd
f0107c72:	a0 fd 20 7e f0       	mov    0xf07e20fd,%al
f0107c77:	83 e0 ef             	and    $0xffffffef,%eax
f0107c7a:	a2 fd 20 7e f0       	mov    %al,0xf07e20fd
f0107c7f:	a0 fd 20 7e f0       	mov    0xf07e20fd,%al
f0107c84:	83 c8 60             	or     $0x60,%eax
f0107c87:	a2 fd 20 7e f0       	mov    %al,0xf07e20fd
f0107c8c:	a0 fd 20 7e f0       	mov    0xf07e20fd,%al
f0107c91:	83 c8 80             	or     $0xffffff80,%eax
f0107c94:	a2 fd 20 7e f0       	mov    %al,0xf07e20fd
f0107c99:	b8 6c 90 10 f0       	mov    $0xf010906c,%eax
f0107c9e:	c1 e8 10             	shr    $0x10,%eax
f0107ca1:	66 a3 fe 20 7e f0    	mov    %ax,0xf07e20fe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f0107ca7:	b8 72 90 10 f0       	mov    $0xf0109072,%eax
f0107cac:	66 a3 00 21 7e f0    	mov    %ax,0xf07e2100
f0107cb2:	66 c7 05 02 21 7e f0 	movw   $0x8,0xf07e2102
f0107cb9:	08 00 
f0107cbb:	a0 04 21 7e f0       	mov    0xf07e2104,%al
f0107cc0:	83 e0 e0             	and    $0xffffffe0,%eax
f0107cc3:	a2 04 21 7e f0       	mov    %al,0xf07e2104
f0107cc8:	a0 04 21 7e f0       	mov    0xf07e2104,%al
f0107ccd:	83 e0 1f             	and    $0x1f,%eax
f0107cd0:	a2 04 21 7e f0       	mov    %al,0xf07e2104
f0107cd5:	a0 05 21 7e f0       	mov    0xf07e2105,%al
f0107cda:	83 e0 f0             	and    $0xfffffff0,%eax
f0107cdd:	83 c8 0e             	or     $0xe,%eax
f0107ce0:	a2 05 21 7e f0       	mov    %al,0xf07e2105
f0107ce5:	a0 05 21 7e f0       	mov    0xf07e2105,%al
f0107cea:	83 e0 ef             	and    $0xffffffef,%eax
f0107ced:	a2 05 21 7e f0       	mov    %al,0xf07e2105
f0107cf2:	a0 05 21 7e f0       	mov    0xf07e2105,%al
f0107cf7:	83 c8 60             	or     $0x60,%eax
f0107cfa:	a2 05 21 7e f0       	mov    %al,0xf07e2105
f0107cff:	a0 05 21 7e f0       	mov    0xf07e2105,%al
f0107d04:	83 c8 80             	or     $0xffffff80,%eax
f0107d07:	a2 05 21 7e f0       	mov    %al,0xf07e2105
f0107d0c:	b8 72 90 10 f0       	mov    $0xf0109072,%eax
f0107d11:	c1 e8 10             	shr    $0x10,%eax
f0107d14:	66 a3 06 21 7e f0    	mov    %ax,0xf07e2106
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f0107d1a:	b8 78 90 10 f0       	mov    $0xf0109078,%eax
f0107d1f:	66 a3 08 21 7e f0    	mov    %ax,0xf07e2108
f0107d25:	66 c7 05 0a 21 7e f0 	movw   $0x8,0xf07e210a
f0107d2c:	08 00 
f0107d2e:	a0 0c 21 7e f0       	mov    0xf07e210c,%al
f0107d33:	83 e0 e0             	and    $0xffffffe0,%eax
f0107d36:	a2 0c 21 7e f0       	mov    %al,0xf07e210c
f0107d3b:	a0 0c 21 7e f0       	mov    0xf07e210c,%al
f0107d40:	83 e0 1f             	and    $0x1f,%eax
f0107d43:	a2 0c 21 7e f0       	mov    %al,0xf07e210c
f0107d48:	a0 0d 21 7e f0       	mov    0xf07e210d,%al
f0107d4d:	83 e0 f0             	and    $0xfffffff0,%eax
f0107d50:	83 c8 0e             	or     $0xe,%eax
f0107d53:	a2 0d 21 7e f0       	mov    %al,0xf07e210d
f0107d58:	a0 0d 21 7e f0       	mov    0xf07e210d,%al
f0107d5d:	83 e0 ef             	and    $0xffffffef,%eax
f0107d60:	a2 0d 21 7e f0       	mov    %al,0xf07e210d
f0107d65:	a0 0d 21 7e f0       	mov    0xf07e210d,%al
f0107d6a:	83 c8 60             	or     $0x60,%eax
f0107d6d:	a2 0d 21 7e f0       	mov    %al,0xf07e210d
f0107d72:	a0 0d 21 7e f0       	mov    0xf07e210d,%al
f0107d77:	83 c8 80             	or     $0xffffff80,%eax
f0107d7a:	a2 0d 21 7e f0       	mov    %al,0xf07e210d
f0107d7f:	b8 78 90 10 f0       	mov    $0xf0109078,%eax
f0107d84:	c1 e8 10             	shr    $0x10,%eax
f0107d87:	66 a3 0e 21 7e f0    	mov    %ax,0xf07e210e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f0107d8d:	b8 7e 90 10 f0       	mov    $0xf010907e,%eax
f0107d92:	66 a3 10 21 7e f0    	mov    %ax,0xf07e2110
f0107d98:	66 c7 05 12 21 7e f0 	movw   $0x8,0xf07e2112
f0107d9f:	08 00 
f0107da1:	a0 14 21 7e f0       	mov    0xf07e2114,%al
f0107da6:	83 e0 e0             	and    $0xffffffe0,%eax
f0107da9:	a2 14 21 7e f0       	mov    %al,0xf07e2114
f0107dae:	a0 14 21 7e f0       	mov    0xf07e2114,%al
f0107db3:	83 e0 1f             	and    $0x1f,%eax
f0107db6:	a2 14 21 7e f0       	mov    %al,0xf07e2114
f0107dbb:	a0 15 21 7e f0       	mov    0xf07e2115,%al
f0107dc0:	83 e0 f0             	and    $0xfffffff0,%eax
f0107dc3:	83 c8 0e             	or     $0xe,%eax
f0107dc6:	a2 15 21 7e f0       	mov    %al,0xf07e2115
f0107dcb:	a0 15 21 7e f0       	mov    0xf07e2115,%al
f0107dd0:	83 e0 ef             	and    $0xffffffef,%eax
f0107dd3:	a2 15 21 7e f0       	mov    %al,0xf07e2115
f0107dd8:	a0 15 21 7e f0       	mov    0xf07e2115,%al
f0107ddd:	83 c8 60             	or     $0x60,%eax
f0107de0:	a2 15 21 7e f0       	mov    %al,0xf07e2115
f0107de5:	a0 15 21 7e f0       	mov    0xf07e2115,%al
f0107dea:	83 c8 80             	or     $0xffffff80,%eax
f0107ded:	a2 15 21 7e f0       	mov    %al,0xf07e2115
f0107df2:	b8 7e 90 10 f0       	mov    $0xf010907e,%eax
f0107df7:	c1 e8 10             	shr    $0x10,%eax
f0107dfa:	66 a3 16 21 7e f0    	mov    %ax,0xf07e2116
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f0107e00:	b8 84 90 10 f0       	mov    $0xf0109084,%eax
f0107e05:	66 a3 18 21 7e f0    	mov    %ax,0xf07e2118
f0107e0b:	66 c7 05 1a 21 7e f0 	movw   $0x8,0xf07e211a
f0107e12:	08 00 
f0107e14:	a0 1c 21 7e f0       	mov    0xf07e211c,%al
f0107e19:	83 e0 e0             	and    $0xffffffe0,%eax
f0107e1c:	a2 1c 21 7e f0       	mov    %al,0xf07e211c
f0107e21:	a0 1c 21 7e f0       	mov    0xf07e211c,%al
f0107e26:	83 e0 1f             	and    $0x1f,%eax
f0107e29:	a2 1c 21 7e f0       	mov    %al,0xf07e211c
f0107e2e:	a0 1d 21 7e f0       	mov    0xf07e211d,%al
f0107e33:	83 e0 f0             	and    $0xfffffff0,%eax
f0107e36:	83 c8 0e             	or     $0xe,%eax
f0107e39:	a2 1d 21 7e f0       	mov    %al,0xf07e211d
f0107e3e:	a0 1d 21 7e f0       	mov    0xf07e211d,%al
f0107e43:	83 e0 ef             	and    $0xffffffef,%eax
f0107e46:	a2 1d 21 7e f0       	mov    %al,0xf07e211d
f0107e4b:	a0 1d 21 7e f0       	mov    0xf07e211d,%al
f0107e50:	83 c8 60             	or     $0x60,%eax
f0107e53:	a2 1d 21 7e f0       	mov    %al,0xf07e211d
f0107e58:	a0 1d 21 7e f0       	mov    0xf07e211d,%al
f0107e5d:	83 c8 80             	or     $0xffffff80,%eax
f0107e60:	a2 1d 21 7e f0       	mov    %al,0xf07e211d
f0107e65:	b8 84 90 10 f0       	mov    $0xf0109084,%eax
f0107e6a:	c1 e8 10             	shr    $0x10,%eax
f0107e6d:	66 a3 1e 21 7e f0    	mov    %ax,0xf07e211e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f0107e73:	b8 8a 90 10 f0       	mov    $0xf010908a,%eax
f0107e78:	66 a3 20 21 7e f0    	mov    %ax,0xf07e2120
f0107e7e:	66 c7 05 22 21 7e f0 	movw   $0x8,0xf07e2122
f0107e85:	08 00 
f0107e87:	a0 24 21 7e f0       	mov    0xf07e2124,%al
f0107e8c:	83 e0 e0             	and    $0xffffffe0,%eax
f0107e8f:	a2 24 21 7e f0       	mov    %al,0xf07e2124
f0107e94:	a0 24 21 7e f0       	mov    0xf07e2124,%al
f0107e99:	83 e0 1f             	and    $0x1f,%eax
f0107e9c:	a2 24 21 7e f0       	mov    %al,0xf07e2124
f0107ea1:	a0 25 21 7e f0       	mov    0xf07e2125,%al
f0107ea6:	83 e0 f0             	and    $0xfffffff0,%eax
f0107ea9:	83 c8 0e             	or     $0xe,%eax
f0107eac:	a2 25 21 7e f0       	mov    %al,0xf07e2125
f0107eb1:	a0 25 21 7e f0       	mov    0xf07e2125,%al
f0107eb6:	83 e0 ef             	and    $0xffffffef,%eax
f0107eb9:	a2 25 21 7e f0       	mov    %al,0xf07e2125
f0107ebe:	a0 25 21 7e f0       	mov    0xf07e2125,%al
f0107ec3:	83 c8 60             	or     $0x60,%eax
f0107ec6:	a2 25 21 7e f0       	mov    %al,0xf07e2125
f0107ecb:	a0 25 21 7e f0       	mov    0xf07e2125,%al
f0107ed0:	83 c8 80             	or     $0xffffff80,%eax
f0107ed3:	a2 25 21 7e f0       	mov    %al,0xf07e2125
f0107ed8:	b8 8a 90 10 f0       	mov    $0xf010908a,%eax
f0107edd:	c1 e8 10             	shr    $0x10,%eax
f0107ee0:	66 a3 26 21 7e f0    	mov    %ax,0xf07e2126
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f0107ee6:	b8 90 90 10 f0       	mov    $0xf0109090,%eax
f0107eeb:	66 a3 28 21 7e f0    	mov    %ax,0xf07e2128
f0107ef1:	66 c7 05 2a 21 7e f0 	movw   $0x8,0xf07e212a
f0107ef8:	08 00 
f0107efa:	a0 2c 21 7e f0       	mov    0xf07e212c,%al
f0107eff:	83 e0 e0             	and    $0xffffffe0,%eax
f0107f02:	a2 2c 21 7e f0       	mov    %al,0xf07e212c
f0107f07:	a0 2c 21 7e f0       	mov    0xf07e212c,%al
f0107f0c:	83 e0 1f             	and    $0x1f,%eax
f0107f0f:	a2 2c 21 7e f0       	mov    %al,0xf07e212c
f0107f14:	a0 2d 21 7e f0       	mov    0xf07e212d,%al
f0107f19:	83 e0 f0             	and    $0xfffffff0,%eax
f0107f1c:	83 c8 0e             	or     $0xe,%eax
f0107f1f:	a2 2d 21 7e f0       	mov    %al,0xf07e212d
f0107f24:	a0 2d 21 7e f0       	mov    0xf07e212d,%al
f0107f29:	83 e0 ef             	and    $0xffffffef,%eax
f0107f2c:	a2 2d 21 7e f0       	mov    %al,0xf07e212d
f0107f31:	a0 2d 21 7e f0       	mov    0xf07e212d,%al
f0107f36:	83 c8 60             	or     $0x60,%eax
f0107f39:	a2 2d 21 7e f0       	mov    %al,0xf07e212d
f0107f3e:	a0 2d 21 7e f0       	mov    0xf07e212d,%al
f0107f43:	83 c8 80             	or     $0xffffff80,%eax
f0107f46:	a2 2d 21 7e f0       	mov    %al,0xf07e212d
f0107f4b:	b8 90 90 10 f0       	mov    $0xf0109090,%eax
f0107f50:	c1 e8 10             	shr    $0x10,%eax
f0107f53:	66 a3 2e 21 7e f0    	mov    %ax,0xf07e212e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f0107f59:	b8 96 90 10 f0       	mov    $0xf0109096,%eax
f0107f5e:	66 a3 30 21 7e f0    	mov    %ax,0xf07e2130
f0107f64:	66 c7 05 32 21 7e f0 	movw   $0x8,0xf07e2132
f0107f6b:	08 00 
f0107f6d:	a0 34 21 7e f0       	mov    0xf07e2134,%al
f0107f72:	83 e0 e0             	and    $0xffffffe0,%eax
f0107f75:	a2 34 21 7e f0       	mov    %al,0xf07e2134
f0107f7a:	a0 34 21 7e f0       	mov    0xf07e2134,%al
f0107f7f:	83 e0 1f             	and    $0x1f,%eax
f0107f82:	a2 34 21 7e f0       	mov    %al,0xf07e2134
f0107f87:	a0 35 21 7e f0       	mov    0xf07e2135,%al
f0107f8c:	83 e0 f0             	and    $0xfffffff0,%eax
f0107f8f:	83 c8 0e             	or     $0xe,%eax
f0107f92:	a2 35 21 7e f0       	mov    %al,0xf07e2135
f0107f97:	a0 35 21 7e f0       	mov    0xf07e2135,%al
f0107f9c:	83 e0 ef             	and    $0xffffffef,%eax
f0107f9f:	a2 35 21 7e f0       	mov    %al,0xf07e2135
f0107fa4:	a0 35 21 7e f0       	mov    0xf07e2135,%al
f0107fa9:	83 c8 60             	or     $0x60,%eax
f0107fac:	a2 35 21 7e f0       	mov    %al,0xf07e2135
f0107fb1:	a0 35 21 7e f0       	mov    0xf07e2135,%al
f0107fb6:	83 c8 80             	or     $0xffffff80,%eax
f0107fb9:	a2 35 21 7e f0       	mov    %al,0xf07e2135
f0107fbe:	b8 96 90 10 f0       	mov    $0xf0109096,%eax
f0107fc3:	c1 e8 10             	shr    $0x10,%eax
f0107fc6:	66 a3 36 21 7e f0    	mov    %ax,0xf07e2136
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f0107fcc:	b8 9c 90 10 f0       	mov    $0xf010909c,%eax
f0107fd1:	66 a3 38 21 7e f0    	mov    %ax,0xf07e2138
f0107fd7:	66 c7 05 3a 21 7e f0 	movw   $0x8,0xf07e213a
f0107fde:	08 00 
f0107fe0:	a0 3c 21 7e f0       	mov    0xf07e213c,%al
f0107fe5:	83 e0 e0             	and    $0xffffffe0,%eax
f0107fe8:	a2 3c 21 7e f0       	mov    %al,0xf07e213c
f0107fed:	a0 3c 21 7e f0       	mov    0xf07e213c,%al
f0107ff2:	83 e0 1f             	and    $0x1f,%eax
f0107ff5:	a2 3c 21 7e f0       	mov    %al,0xf07e213c
f0107ffa:	a0 3d 21 7e f0       	mov    0xf07e213d,%al
f0107fff:	83 e0 f0             	and    $0xfffffff0,%eax
f0108002:	83 c8 0e             	or     $0xe,%eax
f0108005:	a2 3d 21 7e f0       	mov    %al,0xf07e213d
f010800a:	a0 3d 21 7e f0       	mov    0xf07e213d,%al
f010800f:	83 e0 ef             	and    $0xffffffef,%eax
f0108012:	a2 3d 21 7e f0       	mov    %al,0xf07e213d
f0108017:	a0 3d 21 7e f0       	mov    0xf07e213d,%al
f010801c:	83 c8 60             	or     $0x60,%eax
f010801f:	a2 3d 21 7e f0       	mov    %al,0xf07e213d
f0108024:	a0 3d 21 7e f0       	mov    0xf07e213d,%al
f0108029:	83 c8 80             	or     $0xffffff80,%eax
f010802c:	a2 3d 21 7e f0       	mov    %al,0xf07e213d
f0108031:	b8 9c 90 10 f0       	mov    $0xf010909c,%eax
f0108036:	c1 e8 10             	shr    $0x10,%eax
f0108039:	66 a3 3e 21 7e f0    	mov    %ax,0xf07e213e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010803f:	b8 a2 90 10 f0       	mov    $0xf01090a2,%eax
f0108044:	66 a3 40 21 7e f0    	mov    %ax,0xf07e2140
f010804a:	66 c7 05 42 21 7e f0 	movw   $0x8,0xf07e2142
f0108051:	08 00 
f0108053:	a0 44 21 7e f0       	mov    0xf07e2144,%al
f0108058:	83 e0 e0             	and    $0xffffffe0,%eax
f010805b:	a2 44 21 7e f0       	mov    %al,0xf07e2144
f0108060:	a0 44 21 7e f0       	mov    0xf07e2144,%al
f0108065:	83 e0 1f             	and    $0x1f,%eax
f0108068:	a2 44 21 7e f0       	mov    %al,0xf07e2144
f010806d:	a0 45 21 7e f0       	mov    0xf07e2145,%al
f0108072:	83 e0 f0             	and    $0xfffffff0,%eax
f0108075:	83 c8 0e             	or     $0xe,%eax
f0108078:	a2 45 21 7e f0       	mov    %al,0xf07e2145
f010807d:	a0 45 21 7e f0       	mov    0xf07e2145,%al
f0108082:	83 e0 ef             	and    $0xffffffef,%eax
f0108085:	a2 45 21 7e f0       	mov    %al,0xf07e2145
f010808a:	a0 45 21 7e f0       	mov    0xf07e2145,%al
f010808f:	83 c8 60             	or     $0x60,%eax
f0108092:	a2 45 21 7e f0       	mov    %al,0xf07e2145
f0108097:	a0 45 21 7e f0       	mov    0xf07e2145,%al
f010809c:	83 c8 80             	or     $0xffffff80,%eax
f010809f:	a2 45 21 7e f0       	mov    %al,0xf07e2145
f01080a4:	b8 a2 90 10 f0       	mov    $0xf01090a2,%eax
f01080a9:	c1 e8 10             	shr    $0x10,%eax
f01080ac:	66 a3 46 21 7e f0    	mov    %ax,0xf07e2146
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f01080b2:	b8 a8 90 10 f0       	mov    $0xf01090a8,%eax
f01080b7:	66 a3 48 21 7e f0    	mov    %ax,0xf07e2148
f01080bd:	66 c7 05 4a 21 7e f0 	movw   $0x8,0xf07e214a
f01080c4:	08 00 
f01080c6:	a0 4c 21 7e f0       	mov    0xf07e214c,%al
f01080cb:	83 e0 e0             	and    $0xffffffe0,%eax
f01080ce:	a2 4c 21 7e f0       	mov    %al,0xf07e214c
f01080d3:	a0 4c 21 7e f0       	mov    0xf07e214c,%al
f01080d8:	83 e0 1f             	and    $0x1f,%eax
f01080db:	a2 4c 21 7e f0       	mov    %al,0xf07e214c
f01080e0:	a0 4d 21 7e f0       	mov    0xf07e214d,%al
f01080e5:	83 e0 f0             	and    $0xfffffff0,%eax
f01080e8:	83 c8 0e             	or     $0xe,%eax
f01080eb:	a2 4d 21 7e f0       	mov    %al,0xf07e214d
f01080f0:	a0 4d 21 7e f0       	mov    0xf07e214d,%al
f01080f5:	83 e0 ef             	and    $0xffffffef,%eax
f01080f8:	a2 4d 21 7e f0       	mov    %al,0xf07e214d
f01080fd:	a0 4d 21 7e f0       	mov    0xf07e214d,%al
f0108102:	83 c8 60             	or     $0x60,%eax
f0108105:	a2 4d 21 7e f0       	mov    %al,0xf07e214d
f010810a:	a0 4d 21 7e f0       	mov    0xf07e214d,%al
f010810f:	83 c8 80             	or     $0xffffff80,%eax
f0108112:	a2 4d 21 7e f0       	mov    %al,0xf07e214d
f0108117:	b8 a8 90 10 f0       	mov    $0xf01090a8,%eax
f010811c:	c1 e8 10             	shr    $0x10,%eax
f010811f:	66 a3 4e 21 7e f0    	mov    %ax,0xf07e214e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f0108125:	b8 ae 90 10 f0       	mov    $0xf01090ae,%eax
f010812a:	66 a3 50 21 7e f0    	mov    %ax,0xf07e2150
f0108130:	66 c7 05 52 21 7e f0 	movw   $0x8,0xf07e2152
f0108137:	08 00 
f0108139:	a0 54 21 7e f0       	mov    0xf07e2154,%al
f010813e:	83 e0 e0             	and    $0xffffffe0,%eax
f0108141:	a2 54 21 7e f0       	mov    %al,0xf07e2154
f0108146:	a0 54 21 7e f0       	mov    0xf07e2154,%al
f010814b:	83 e0 1f             	and    $0x1f,%eax
f010814e:	a2 54 21 7e f0       	mov    %al,0xf07e2154
f0108153:	a0 55 21 7e f0       	mov    0xf07e2155,%al
f0108158:	83 e0 f0             	and    $0xfffffff0,%eax
f010815b:	83 c8 0e             	or     $0xe,%eax
f010815e:	a2 55 21 7e f0       	mov    %al,0xf07e2155
f0108163:	a0 55 21 7e f0       	mov    0xf07e2155,%al
f0108168:	83 e0 ef             	and    $0xffffffef,%eax
f010816b:	a2 55 21 7e f0       	mov    %al,0xf07e2155
f0108170:	a0 55 21 7e f0       	mov    0xf07e2155,%al
f0108175:	83 c8 60             	or     $0x60,%eax
f0108178:	a2 55 21 7e f0       	mov    %al,0xf07e2155
f010817d:	a0 55 21 7e f0       	mov    0xf07e2155,%al
f0108182:	83 c8 80             	or     $0xffffff80,%eax
f0108185:	a2 55 21 7e f0       	mov    %al,0xf07e2155
f010818a:	b8 ae 90 10 f0       	mov    $0xf01090ae,%eax
f010818f:	c1 e8 10             	shr    $0x10,%eax
f0108192:	66 a3 56 21 7e f0    	mov    %ax,0xf07e2156
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f0108198:	b8 b4 90 10 f0       	mov    $0xf01090b4,%eax
f010819d:	66 a3 58 21 7e f0    	mov    %ax,0xf07e2158
f01081a3:	66 c7 05 5a 21 7e f0 	movw   $0x8,0xf07e215a
f01081aa:	08 00 
f01081ac:	a0 5c 21 7e f0       	mov    0xf07e215c,%al
f01081b1:	83 e0 e0             	and    $0xffffffe0,%eax
f01081b4:	a2 5c 21 7e f0       	mov    %al,0xf07e215c
f01081b9:	a0 5c 21 7e f0       	mov    0xf07e215c,%al
f01081be:	83 e0 1f             	and    $0x1f,%eax
f01081c1:	a2 5c 21 7e f0       	mov    %al,0xf07e215c
f01081c6:	a0 5d 21 7e f0       	mov    0xf07e215d,%al
f01081cb:	83 e0 f0             	and    $0xfffffff0,%eax
f01081ce:	83 c8 0e             	or     $0xe,%eax
f01081d1:	a2 5d 21 7e f0       	mov    %al,0xf07e215d
f01081d6:	a0 5d 21 7e f0       	mov    0xf07e215d,%al
f01081db:	83 e0 ef             	and    $0xffffffef,%eax
f01081de:	a2 5d 21 7e f0       	mov    %al,0xf07e215d
f01081e3:	a0 5d 21 7e f0       	mov    0xf07e215d,%al
f01081e8:	83 c8 60             	or     $0x60,%eax
f01081eb:	a2 5d 21 7e f0       	mov    %al,0xf07e215d
f01081f0:	a0 5d 21 7e f0       	mov    0xf07e215d,%al
f01081f5:	83 c8 80             	or     $0xffffff80,%eax
f01081f8:	a2 5d 21 7e f0       	mov    %al,0xf07e215d
f01081fd:	b8 b4 90 10 f0       	mov    $0xf01090b4,%eax
f0108202:	c1 e8 10             	shr    $0x10,%eax
f0108205:	66 a3 5e 21 7e f0    	mov    %ax,0xf07e215e



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010820b:	c7 05 e4 27 7e f0 00 	movl   $0xefc00000,0xf07e27e4
f0108212:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f0108215:	66 c7 05 e8 27 7e f0 	movw   $0x10,0xf07e27e8
f010821c:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010821e:	66 c7 05 c8 c7 15 f0 	movw   $0x68,0xf015c7c8
f0108225:	68 00 
f0108227:	b8 e0 27 7e f0       	mov    $0xf07e27e0,%eax
f010822c:	66 a3 ca c7 15 f0    	mov    %ax,0xf015c7ca
f0108232:	b8 e0 27 7e f0       	mov    $0xf07e27e0,%eax
f0108237:	c1 e8 10             	shr    $0x10,%eax
f010823a:	a2 cc c7 15 f0       	mov    %al,0xf015c7cc
f010823f:	a0 cd c7 15 f0       	mov    0xf015c7cd,%al
f0108244:	83 e0 f0             	and    $0xfffffff0,%eax
f0108247:	83 c8 09             	or     $0x9,%eax
f010824a:	a2 cd c7 15 f0       	mov    %al,0xf015c7cd
f010824f:	a0 cd c7 15 f0       	mov    0xf015c7cd,%al
f0108254:	83 c8 10             	or     $0x10,%eax
f0108257:	a2 cd c7 15 f0       	mov    %al,0xf015c7cd
f010825c:	a0 cd c7 15 f0       	mov    0xf015c7cd,%al
f0108261:	83 e0 9f             	and    $0xffffff9f,%eax
f0108264:	a2 cd c7 15 f0       	mov    %al,0xf015c7cd
f0108269:	a0 cd c7 15 f0       	mov    0xf015c7cd,%al
f010826e:	83 c8 80             	or     $0xffffff80,%eax
f0108271:	a2 cd c7 15 f0       	mov    %al,0xf015c7cd
f0108276:	a0 ce c7 15 f0       	mov    0xf015c7ce,%al
f010827b:	83 e0 f0             	and    $0xfffffff0,%eax
f010827e:	a2 ce c7 15 f0       	mov    %al,0xf015c7ce
f0108283:	a0 ce c7 15 f0       	mov    0xf015c7ce,%al
f0108288:	83 e0 ef             	and    $0xffffffef,%eax
f010828b:	a2 ce c7 15 f0       	mov    %al,0xf015c7ce
f0108290:	a0 ce c7 15 f0       	mov    0xf015c7ce,%al
f0108295:	83 e0 df             	and    $0xffffffdf,%eax
f0108298:	a2 ce c7 15 f0       	mov    %al,0xf015c7ce
f010829d:	a0 ce c7 15 f0       	mov    0xf015c7ce,%al
f01082a2:	83 c8 40             	or     $0x40,%eax
f01082a5:	a2 ce c7 15 f0       	mov    %al,0xf015c7ce
f01082aa:	a0 ce c7 15 f0       	mov    0xf015c7ce,%al
f01082af:	83 e0 7f             	and    $0x7f,%eax
f01082b2:	a2 ce c7 15 f0       	mov    %al,0xf015c7ce
f01082b7:	b8 e0 27 7e f0       	mov    $0xf07e27e0,%eax
f01082bc:	c1 e8 18             	shr    $0x18,%eax
f01082bf:	a2 cf c7 15 f0       	mov    %al,0xf015c7cf
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f01082c4:	a0 cd c7 15 f0       	mov    0xf015c7cd,%al
f01082c9:	83 e0 ef             	and    $0xffffffef,%eax
f01082cc:	a2 cd c7 15 f0       	mov    %al,0xf015c7cd
f01082d1:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f01082d7:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f01082db:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f01082de:	0f 01 1d 84 cc 15 f0 	lidtl  0xf015cc84
}
f01082e5:	90                   	nop
f01082e6:	c9                   	leave  
f01082e7:	c3                   	ret    

f01082e8 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f01082e8:	55                   	push   %ebp
f01082e9:	89 e5                	mov    %esp,%ebp
f01082eb:	53                   	push   %ebx
f01082ec:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f01082ef:	83 ec 08             	sub    $0x8,%esp
f01082f2:	ff 75 08             	pushl  0x8(%ebp)
f01082f5:	68 1b 0d 12 f0       	push   $0xf0120d1b
f01082fa:	e8 05 ef ff ff       	call   f0107204 <cprintf>
f01082ff:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f0108302:	8b 45 08             	mov    0x8(%ebp),%eax
f0108305:	83 ec 0c             	sub    $0xc,%esp
f0108308:	50                   	push   %eax
f0108309:	e8 fd 00 00 00       	call   f010840b <print_regs>
f010830e:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f0108311:	8b 45 08             	mov    0x8(%ebp),%eax
f0108314:	8b 40 20             	mov    0x20(%eax),%eax
f0108317:	0f b7 c0             	movzwl %ax,%eax
f010831a:	83 ec 08             	sub    $0x8,%esp
f010831d:	50                   	push   %eax
f010831e:	68 2d 0d 12 f0       	push   $0xf0120d2d
f0108323:	e8 dc ee ff ff       	call   f0107204 <cprintf>
f0108328:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010832b:	8b 45 08             	mov    0x8(%ebp),%eax
f010832e:	8b 40 24             	mov    0x24(%eax),%eax
f0108331:	0f b7 c0             	movzwl %ax,%eax
f0108334:	83 ec 08             	sub    $0x8,%esp
f0108337:	50                   	push   %eax
f0108338:	68 40 0d 12 f0       	push   $0xf0120d40
f010833d:	e8 c2 ee ff ff       	call   f0107204 <cprintf>
f0108342:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f0108345:	8b 45 08             	mov    0x8(%ebp),%eax
f0108348:	8b 58 28             	mov    0x28(%eax),%ebx
f010834b:	8b 45 08             	mov    0x8(%ebp),%eax
f010834e:	8b 40 28             	mov    0x28(%eax),%eax
f0108351:	83 ec 0c             	sub    $0xc,%esp
f0108354:	50                   	push   %eax
f0108355:	e8 d0 ee ff ff       	call   f010722a <trapname>
f010835a:	83 c4 10             	add    $0x10,%esp
f010835d:	89 c2                	mov    %eax,%edx
f010835f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108362:	8b 40 28             	mov    0x28(%eax),%eax
f0108365:	53                   	push   %ebx
f0108366:	52                   	push   %edx
f0108367:	50                   	push   %eax
f0108368:	68 53 0d 12 f0       	push   $0xf0120d53
f010836d:	e8 92 ee ff ff       	call   f0107204 <cprintf>
f0108372:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f0108375:	8b 45 08             	mov    0x8(%ebp),%eax
f0108378:	8b 40 2c             	mov    0x2c(%eax),%eax
f010837b:	83 ec 08             	sub    $0x8,%esp
f010837e:	50                   	push   %eax
f010837f:	68 6a 0d 12 f0       	push   $0xf0120d6a
f0108384:	e8 7b ee ff ff       	call   f0107204 <cprintf>
f0108389:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010838c:	8b 45 08             	mov    0x8(%ebp),%eax
f010838f:	8b 40 30             	mov    0x30(%eax),%eax
f0108392:	83 ec 08             	sub    $0x8,%esp
f0108395:	50                   	push   %eax
f0108396:	68 79 0d 12 f0       	push   $0xf0120d79
f010839b:	e8 64 ee ff ff       	call   f0107204 <cprintf>
f01083a0:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f01083a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a6:	8b 40 34             	mov    0x34(%eax),%eax
f01083a9:	0f b7 c0             	movzwl %ax,%eax
f01083ac:	83 ec 08             	sub    $0x8,%esp
f01083af:	50                   	push   %eax
f01083b0:	68 88 0d 12 f0       	push   $0xf0120d88
f01083b5:	e8 4a ee ff ff       	call   f0107204 <cprintf>
f01083ba:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f01083bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01083c0:	8b 40 38             	mov    0x38(%eax),%eax
f01083c3:	83 ec 08             	sub    $0x8,%esp
f01083c6:	50                   	push   %eax
f01083c7:	68 9b 0d 12 f0       	push   $0xf0120d9b
f01083cc:	e8 33 ee ff ff       	call   f0107204 <cprintf>
f01083d1:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f01083d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01083d7:	8b 40 3c             	mov    0x3c(%eax),%eax
f01083da:	83 ec 08             	sub    $0x8,%esp
f01083dd:	50                   	push   %eax
f01083de:	68 aa 0d 12 f0       	push   $0xf0120daa
f01083e3:	e8 1c ee ff ff       	call   f0107204 <cprintf>
f01083e8:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f01083eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01083ee:	8b 40 40             	mov    0x40(%eax),%eax
f01083f1:	0f b7 c0             	movzwl %ax,%eax
f01083f4:	83 ec 08             	sub    $0x8,%esp
f01083f7:	50                   	push   %eax
f01083f8:	68 b9 0d 12 f0       	push   $0xf0120db9
f01083fd:	e8 02 ee ff ff       	call   f0107204 <cprintf>
f0108402:	83 c4 10             	add    $0x10,%esp
}
f0108405:	90                   	nop
f0108406:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108409:	c9                   	leave  
f010840a:	c3                   	ret    

f010840b <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010840b:	55                   	push   %ebp
f010840c:	89 e5                	mov    %esp,%ebp
f010840e:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f0108411:	8b 45 08             	mov    0x8(%ebp),%eax
f0108414:	8b 00                	mov    (%eax),%eax
f0108416:	83 ec 08             	sub    $0x8,%esp
f0108419:	50                   	push   %eax
f010841a:	68 cc 0d 12 f0       	push   $0xf0120dcc
f010841f:	e8 e0 ed ff ff       	call   f0107204 <cprintf>
f0108424:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f0108427:	8b 45 08             	mov    0x8(%ebp),%eax
f010842a:	8b 40 04             	mov    0x4(%eax),%eax
f010842d:	83 ec 08             	sub    $0x8,%esp
f0108430:	50                   	push   %eax
f0108431:	68 db 0d 12 f0       	push   $0xf0120ddb
f0108436:	e8 c9 ed ff ff       	call   f0107204 <cprintf>
f010843b:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010843e:	8b 45 08             	mov    0x8(%ebp),%eax
f0108441:	8b 40 08             	mov    0x8(%eax),%eax
f0108444:	83 ec 08             	sub    $0x8,%esp
f0108447:	50                   	push   %eax
f0108448:	68 ea 0d 12 f0       	push   $0xf0120dea
f010844d:	e8 b2 ed ff ff       	call   f0107204 <cprintf>
f0108452:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f0108455:	8b 45 08             	mov    0x8(%ebp),%eax
f0108458:	8b 40 0c             	mov    0xc(%eax),%eax
f010845b:	83 ec 08             	sub    $0x8,%esp
f010845e:	50                   	push   %eax
f010845f:	68 f9 0d 12 f0       	push   $0xf0120df9
f0108464:	e8 9b ed ff ff       	call   f0107204 <cprintf>
f0108469:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010846c:	8b 45 08             	mov    0x8(%ebp),%eax
f010846f:	8b 40 10             	mov    0x10(%eax),%eax
f0108472:	83 ec 08             	sub    $0x8,%esp
f0108475:	50                   	push   %eax
f0108476:	68 08 0e 12 f0       	push   $0xf0120e08
f010847b:	e8 84 ed ff ff       	call   f0107204 <cprintf>
f0108480:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f0108483:	8b 45 08             	mov    0x8(%ebp),%eax
f0108486:	8b 40 14             	mov    0x14(%eax),%eax
f0108489:	83 ec 08             	sub    $0x8,%esp
f010848c:	50                   	push   %eax
f010848d:	68 17 0e 12 f0       	push   $0xf0120e17
f0108492:	e8 6d ed ff ff       	call   f0107204 <cprintf>
f0108497:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010849a:	8b 45 08             	mov    0x8(%ebp),%eax
f010849d:	8b 40 18             	mov    0x18(%eax),%eax
f01084a0:	83 ec 08             	sub    $0x8,%esp
f01084a3:	50                   	push   %eax
f01084a4:	68 26 0e 12 f0       	push   $0xf0120e26
f01084a9:	e8 56 ed ff ff       	call   f0107204 <cprintf>
f01084ae:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f01084b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b4:	8b 40 1c             	mov    0x1c(%eax),%eax
f01084b7:	83 ec 08             	sub    $0x8,%esp
f01084ba:	50                   	push   %eax
f01084bb:	68 35 0e 12 f0       	push   $0xf0120e35
f01084c0:	e8 3f ed ff ff       	call   f0107204 <cprintf>
f01084c5:	83 c4 10             	add    $0x10,%esp
}
f01084c8:	90                   	nop
f01084c9:	c9                   	leave  
f01084ca:	c3                   	ret    

f01084cb <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f01084cb:	55                   	push   %ebp
f01084cc:	89 e5                	mov    %esp,%ebp
f01084ce:	57                   	push   %edi
f01084cf:	56                   	push   %esi
f01084d0:	53                   	push   %ebx
f01084d1:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f01084d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01084d7:	8b 40 28             	mov    0x28(%eax),%eax
f01084da:	83 f8 0e             	cmp    $0xe,%eax
f01084dd:	75 21                	jne    f0108500 <trap_dispatch+0x35>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU())
f01084df:	e8 7e 02 00 00       	call   f0108762 <isPageReplacmentAlgorithmLRU>
f01084e4:	85 c0                	test   %eax,%eax
f01084e6:	74 05                	je     f01084ed <trap_dispatch+0x22>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f01084e8:	e8 44 20 00 00       	call   f010a531 <update_WS_time_stamps>
		}
		fault_handler(tf);
f01084ed:	83 ec 0c             	sub    $0xc,%esp
f01084f0:	ff 75 08             	pushl  0x8(%ebp)
f01084f3:	e8 aa 03 00 00       	call   f01088a2 <fault_handler>
f01084f8:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f01084fb:	e9 a5 00 00 00       	jmp    f01085a5 <trap_dispatch+0xda>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f0108500:	8b 45 08             	mov    0x8(%ebp),%eax
f0108503:	8b 40 28             	mov    0x28(%eax),%eax
f0108506:	83 f8 30             	cmp    $0x30,%eax
f0108509:	75 42                	jne    f010854d <trap_dispatch+0x82>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010850b:	8b 45 08             	mov    0x8(%ebp),%eax
f010850e:	8b 78 04             	mov    0x4(%eax),%edi
f0108511:	8b 45 08             	mov    0x8(%ebp),%eax
f0108514:	8b 30                	mov    (%eax),%esi
f0108516:	8b 45 08             	mov    0x8(%ebp),%eax
f0108519:	8b 58 10             	mov    0x10(%eax),%ebx
f010851c:	8b 45 08             	mov    0x8(%ebp),%eax
f010851f:	8b 48 18             	mov    0x18(%eax),%ecx
f0108522:	8b 45 08             	mov    0x8(%ebp),%eax
f0108525:	8b 50 14             	mov    0x14(%eax),%edx
f0108528:	8b 45 08             	mov    0x8(%ebp),%eax
f010852b:	8b 40 1c             	mov    0x1c(%eax),%eax
f010852e:	83 ec 08             	sub    $0x8,%esp
f0108531:	57                   	push   %edi
f0108532:	56                   	push   %esi
f0108533:	53                   	push   %ebx
f0108534:	51                   	push   %ecx
f0108535:	52                   	push   %edx
f0108536:	50                   	push   %eax
f0108537:	e8 fe 29 00 00       	call   f010af3a <syscall>
f010853c:	83 c4 20             	add    $0x20,%esp
f010853f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f0108542:	8b 45 08             	mov    0x8(%ebp),%eax
f0108545:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0108548:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010854b:	eb 58                	jmp    f01085a5 <trap_dispatch+0xda>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010854d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108550:	8b 40 28             	mov    0x28(%eax),%eax
f0108553:	83 f8 08             	cmp    $0x8,%eax
f0108556:	75 17                	jne    f010856f <trap_dispatch+0xa4>
	{
		panic("double fault!!");
f0108558:	83 ec 04             	sub    $0x4,%esp
f010855b:	68 44 0e 12 f0       	push   $0xf0120e44
f0108560:	68 f1 00 00 00       	push   $0xf1
f0108565:	68 53 0e 12 f0       	push   $0xf0120e53
f010856a:	e8 40 7c ff ff       	call   f01001af <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010856f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108572:	8b 40 28             	mov    0x28(%eax),%eax
f0108575:	83 f8 20             	cmp    $0x20,%eax
f0108578:	75 07                	jne    f0108581 <trap_dispatch+0xb6>
	{
		clock_interrupt_handler() ;
f010857a:	e8 99 1f 00 00       	call   f010a518 <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010857f:	eb 24                	jmp    f01085a5 <trap_dispatch+0xda>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f0108581:	8b 45 08             	mov    0x8(%ebp),%eax
f0108584:	8b 40 34             	mov    0x34(%eax),%eax
f0108587:	66 83 f8 08          	cmp    $0x8,%ax
f010858b:	75 17                	jne    f01085a4 <trap_dispatch+0xd9>
		{
			panic("unhandled trap in kernel");
f010858d:	83 ec 04             	sub    $0x4,%esp
f0108590:	68 5f 0e 12 f0       	push   $0xf0120e5f
f0108595:	68 fe 00 00 00       	push   $0xfe
f010859a:	68 53 0e 12 f0       	push   $0xf0120e53
f010859f:	e8 0b 7c ff ff       	call   f01001af <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f01085a4:	90                   	nop
		}
	}
	return;
}
f01085a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01085a8:	5b                   	pop    %ebx
f01085a9:	5e                   	pop    %esi
f01085aa:	5f                   	pop    %edi
f01085ab:	5d                   	pop    %ebp
f01085ac:	c3                   	ret    

f01085ad <trap>:

void trap(struct Trapframe *tf)
{
f01085ad:	55                   	push   %ebp
f01085ae:	89 e5                	mov    %esp,%ebp
f01085b0:	57                   	push   %edi
f01085b1:	56                   	push   %esi
f01085b2:	53                   	push   %ebx
f01085b3:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f01085b6:	e8 e7 e7 ff ff       	call   f0106da2 <kclock_stop>

	int userTrap = 0;
f01085bb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f01085c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085c5:	8b 40 34             	mov    0x34(%eax),%eax
f01085c8:	0f b7 c0             	movzwl %ax,%eax
f01085cb:	83 e0 03             	and    $0x3,%eax
f01085ce:	83 f8 03             	cmp    $0x3,%eax
f01085d1:	75 49                	jne    f010861c <trap+0x6f>
		assert(curenv);
f01085d3:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01085d8:	85 c0                	test   %eax,%eax
f01085da:	75 19                	jne    f01085f5 <trap+0x48>
f01085dc:	68 78 0e 12 f0       	push   $0xf0120e78
f01085e1:	68 7f 0e 12 f0       	push   $0xf0120e7f
f01085e6:	68 0e 01 00 00       	push   $0x10e
f01085eb:	68 53 0e 12 f0       	push   $0xf0120e53
f01085f0:	e8 ba 7b ff ff       	call   f01001af <_panic>
		curenv->env_tf = *tf;
f01085f5:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f01085fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01085fe:	89 c3                	mov    %eax,%ebx
f0108600:	b8 11 00 00 00       	mov    $0x11,%eax
f0108605:	89 d7                	mov    %edx,%edi
f0108607:	89 de                	mov    %ebx,%esi
f0108609:	89 c1                	mov    %eax,%ecx
f010860b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010860d:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0108612:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f0108615:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010861c:	8b 45 08             	mov    0x8(%ebp),%eax
f010861f:	8b 40 28             	mov    0x28(%eax),%eax
f0108622:	83 f8 20             	cmp    $0x20,%eax
f0108625:	75 40                	jne    f0108667 <trap+0xba>
	{
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f0108627:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010862b:	0f 84 a6 00 00 00    	je     f01086d7 <trap+0x12a>
		{
			assert(curenv);
f0108631:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0108636:	85 c0                	test   %eax,%eax
f0108638:	75 19                	jne    f0108653 <trap+0xa6>
f010863a:	68 78 0e 12 f0       	push   $0xf0120e78
f010863f:	68 7f 0e 12 f0       	push   $0xf0120e7f
f0108644:	68 1a 01 00 00       	push   $0x11a
f0108649:	68 53 0e 12 f0       	push   $0xf0120e53
f010864e:	e8 5c 7b ff ff       	call   f01001af <_panic>
			curenv->nClocks++ ;
f0108653:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0108658:	8b 90 3c 03 00 00    	mov    0x33c(%eax),%edx
f010865e:	42                   	inc    %edx
f010865f:	89 90 3c 03 00 00    	mov    %edx,0x33c(%eax)
f0108665:	eb 70                	jmp    f01086d7 <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f0108667:	8b 45 08             	mov    0x8(%ebp),%eax
f010866a:	8b 40 28             	mov    0x28(%eax),%eax
f010866d:	83 f8 0e             	cmp    $0xe,%eax
f0108670:	75 65                	jne    f01086d7 <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f0108672:	a0 c0 1f 7e f0       	mov    0xf07e1fc0,%al
f0108677:	84 c0                	test   %al,%al
f0108679:	74 5c                	je     f01086d7 <trap+0x12a>
			if (userTrap){
f010867b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010867f:	74 2c                	je     f01086ad <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f0108681:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0108686:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f010868c:	8b 52 30             	mov    0x30(%edx),%edx
f010868f:	89 d1                	mov    %edx,%ecx
f0108691:	8a 15 c0 1f 7e f0    	mov    0xf07e1fc0,%dl
f0108697:	0f b6 d2             	movzbl %dl,%edx
f010869a:	01 ca                	add    %ecx,%edx
f010869c:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010869f:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01086a4:	83 ec 0c             	sub    $0xc,%esp
f01086a7:	50                   	push   %eax
f01086a8:	e8 13 dd ff ff       	call   f01063c0 <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f01086ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01086b0:	8b 40 30             	mov    0x30(%eax),%eax
f01086b3:	89 c2                	mov    %eax,%edx
f01086b5:	a0 c0 1f 7e f0       	mov    0xf07e1fc0,%al
f01086ba:	0f b6 c0             	movzbl %al,%eax
f01086bd:	01 d0                	add    %edx,%eax
f01086bf:	89 c2                	mov    %eax,%edx
f01086c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01086c4:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f01086c7:	e8 01 e7 ff ff       	call   f0106dcd <kclock_resume>
				env_pop_tf(tf);
f01086cc:	83 ec 0c             	sub    $0xc,%esp
f01086cf:	ff 75 08             	pushl  0x8(%ebp)
f01086d2:	e8 98 e5 ff ff       	call   f0106c6f <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f01086d7:	83 ec 0c             	sub    $0xc,%esp
f01086da:	ff 75 08             	pushl  0x8(%ebp)
f01086dd:	e8 e9 fd ff ff       	call   f01084cb <trap_dispatch>
f01086e2:	83 c4 10             	add    $0x10,%esp
	assert(curenv && curenv->env_status == ENV_RUNNABLE);
f01086e5:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01086ea:	85 c0                	test   %eax,%eax
f01086ec:	74 0d                	je     f01086fb <trap+0x14e>
f01086ee:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01086f3:	8b 40 54             	mov    0x54(%eax),%eax
f01086f6:	83 f8 02             	cmp    $0x2,%eax
f01086f9:	74 19                	je     f0108714 <trap+0x167>
f01086fb:	68 94 0e 12 f0       	push   $0xf0120e94
f0108700:	68 7f 0e 12 f0       	push   $0xf0120e7f
f0108705:	68 2d 01 00 00       	push   $0x12d
f010870a:	68 53 0e 12 f0       	push   $0xf0120e53
f010870f:	e8 9b 7a ff ff       	call   f01001af <_panic>
	env_run(curenv);
f0108714:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0108719:	83 ec 0c             	sub    $0xc,%esp
f010871c:	50                   	push   %eax
f010871d:	e8 9e dc ff ff       	call   f01063c0 <env_run>

f0108722 <setPageReplacmentAlgorithmLRU>:
}

void setPageReplacmentAlgorithmLRU(){_PageRepAlgoType = PG_REP_LRU;}
f0108722:	55                   	push   %ebp
f0108723:	89 e5                	mov    %esp,%ebp
f0108725:	c7 05 b8 28 7e f0 01 	movl   $0x1,0xf07e28b8
f010872c:	00 00 00 
f010872f:	90                   	nop
f0108730:	5d                   	pop    %ebp
f0108731:	c3                   	ret    

f0108732 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f0108732:	55                   	push   %ebp
f0108733:	89 e5                	mov    %esp,%ebp
f0108735:	c7 05 b8 28 7e f0 02 	movl   $0x2,0xf07e28b8
f010873c:	00 00 00 
f010873f:	90                   	nop
f0108740:	5d                   	pop    %ebp
f0108741:	c3                   	ret    

f0108742 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f0108742:	55                   	push   %ebp
f0108743:	89 e5                	mov    %esp,%ebp
f0108745:	c7 05 b8 28 7e f0 03 	movl   $0x3,0xf07e28b8
f010874c:	00 00 00 
f010874f:	90                   	nop
f0108750:	5d                   	pop    %ebp
f0108751:	c3                   	ret    

f0108752 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f0108752:	55                   	push   %ebp
f0108753:	89 e5                	mov    %esp,%ebp
f0108755:	c7 05 b8 28 7e f0 04 	movl   $0x4,0xf07e28b8
f010875c:	00 00 00 
f010875f:	90                   	nop
f0108760:	5d                   	pop    %ebp
f0108761:	c3                   	ret    

f0108762 <isPageReplacmentAlgorithmLRU>:

uint32 isPageReplacmentAlgorithmLRU(){if(_PageRepAlgoType == PG_REP_LRU) return 1; return 0;}
f0108762:	55                   	push   %ebp
f0108763:	89 e5                	mov    %esp,%ebp
f0108765:	a1 b8 28 7e f0       	mov    0xf07e28b8,%eax
f010876a:	83 f8 01             	cmp    $0x1,%eax
f010876d:	75 07                	jne    f0108776 <isPageReplacmentAlgorithmLRU+0x14>
f010876f:	b8 01 00 00 00       	mov    $0x1,%eax
f0108774:	eb 05                	jmp    f010877b <isPageReplacmentAlgorithmLRU+0x19>
f0108776:	b8 00 00 00 00       	mov    $0x0,%eax
f010877b:	5d                   	pop    %ebp
f010877c:	c3                   	ret    

f010877d <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010877d:	55                   	push   %ebp
f010877e:	89 e5                	mov    %esp,%ebp
f0108780:	a1 b8 28 7e f0       	mov    0xf07e28b8,%eax
f0108785:	83 f8 02             	cmp    $0x2,%eax
f0108788:	75 07                	jne    f0108791 <isPageReplacmentAlgorithmCLOCK+0x14>
f010878a:	b8 01 00 00 00       	mov    $0x1,%eax
f010878f:	eb 05                	jmp    f0108796 <isPageReplacmentAlgorithmCLOCK+0x19>
f0108791:	b8 00 00 00 00       	mov    $0x0,%eax
f0108796:	5d                   	pop    %ebp
f0108797:	c3                   	ret    

f0108798 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f0108798:	55                   	push   %ebp
f0108799:	89 e5                	mov    %esp,%ebp
f010879b:	a1 b8 28 7e f0       	mov    0xf07e28b8,%eax
f01087a0:	83 f8 03             	cmp    $0x3,%eax
f01087a3:	75 07                	jne    f01087ac <isPageReplacmentAlgorithmFIFO+0x14>
f01087a5:	b8 01 00 00 00       	mov    $0x1,%eax
f01087aa:	eb 05                	jmp    f01087b1 <isPageReplacmentAlgorithmFIFO+0x19>
f01087ac:	b8 00 00 00 00       	mov    $0x0,%eax
f01087b1:	5d                   	pop    %ebp
f01087b2:	c3                   	ret    

f01087b3 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f01087b3:	55                   	push   %ebp
f01087b4:	89 e5                	mov    %esp,%ebp
f01087b6:	a1 b8 28 7e f0       	mov    0xf07e28b8,%eax
f01087bb:	83 f8 04             	cmp    $0x4,%eax
f01087be:	75 07                	jne    f01087c7 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f01087c0:	b8 01 00 00 00       	mov    $0x1,%eax
f01087c5:	eb 05                	jmp    f01087cc <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f01087c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01087cc:	5d                   	pop    %ebp
f01087cd:	c3                   	ret    

f01087ce <enableModifiedBuffer>:

void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f01087ce:	55                   	push   %ebp
f01087cf:	89 e5                	mov    %esp,%ebp
f01087d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01087d4:	a3 a8 28 7e f0       	mov    %eax,0xf07e28a8
f01087d9:	90                   	nop
f01087da:	5d                   	pop    %ebp
f01087db:	c3                   	ret    

f01087dc <isModifiedBufferEnabled>:
uint32 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f01087dc:	55                   	push   %ebp
f01087dd:	89 e5                	mov    %esp,%ebp
f01087df:	a1 a8 28 7e f0       	mov    0xf07e28a8,%eax
f01087e4:	5d                   	pop    %ebp
f01087e5:	c3                   	ret    

f01087e6 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f01087e6:	55                   	push   %ebp
f01087e7:	89 e5                	mov    %esp,%ebp
f01087e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01087ec:	a3 bc 28 7e f0       	mov    %eax,0xf07e28bc
f01087f1:	90                   	nop
f01087f2:	5d                   	pop    %ebp
f01087f3:	c3                   	ret    

f01087f4 <isBufferingEnabled>:
uint32 isBufferingEnabled(){  return _EnableBuffering ; }
f01087f4:	55                   	push   %ebp
f01087f5:	89 e5                	mov    %esp,%ebp
f01087f7:	a1 bc 28 7e f0       	mov    0xf07e28bc,%eax
f01087fc:	5d                   	pop    %ebp
f01087fd:	c3                   	ret    

f01087fe <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f01087fe:	55                   	push   %ebp
f01087ff:	89 e5                	mov    %esp,%ebp
f0108801:	8b 45 08             	mov    0x8(%ebp),%eax
f0108804:	a3 c8 28 7e f0       	mov    %eax,0xf07e28c8
f0108809:	90                   	nop
f010880a:	5d                   	pop    %ebp
f010880b:	c3                   	ret    

f010880c <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010880c:	55                   	push   %ebp
f010880d:	89 e5                	mov    %esp,%ebp
f010880f:	a1 c8 28 7e f0       	mov    0xf07e28c8,%eax
f0108814:	5d                   	pop    %ebp
f0108815:	c3                   	ret    

f0108816 <detect_modified_loop>:


void detect_modified_loop()
{
f0108816:	55                   	push   %ebp
f0108817:	89 e5                	mov    %esp,%ebp
f0108819:	83 ec 18             	sub    $0x18,%esp
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
f010881c:	a1 00 0d 80 f0       	mov    0xf0800d00,%eax
f0108821:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);
f0108824:	a1 00 0d 80 f0       	mov    0xf0800d00,%eax
f0108829:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f010882c:	eb 52                	jmp    f0108880 <detect_modified_loop+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f010882e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108831:	8b 00                	mov    (%eax),%eax
f0108833:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0108836:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108839:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010883c:	75 12                	jne    f0108850 <detect_modified_loop+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f010883e:	83 ec 0c             	sub    $0xc,%esp
f0108841:	68 c1 0e 12 f0       	push   $0xf0120ec1
f0108846:	e8 b9 e9 ff ff       	call   f0107204 <cprintf>
f010884b:	83 c4 10             	add    $0x10,%esp
			break;
f010884e:	eb 3f                	jmp    f010888f <detect_modified_loop+0x79>
		}

		if (fastPtr == NULL) {
f0108850:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108854:	74 38                	je     f010888e <detect_modified_loop+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0108856:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108859:	8b 00                	mov    (%eax),%eax
f010885b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f010885e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108861:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108864:	75 12                	jne    f0108878 <detect_modified_loop+0x62>
			cprintf("loop detected in modiflist\n");
f0108866:	83 ec 0c             	sub    $0xc,%esp
f0108869:	68 c1 0e 12 f0       	push   $0xf0120ec1
f010886e:	e8 91 e9 ff ff       	call   f0107204 <cprintf>
f0108873:	83 c4 10             	add    $0x10,%esp
			break;
f0108876:	eb 17                	jmp    f010888f <detect_modified_loop+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f0108878:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010887b:	8b 00                	mov    (%eax),%eax
f010887d:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  Frame_Info * slowPtr = LIST_FIRST(&modified_frame_list);
	struct  Frame_Info * fastPtr = LIST_FIRST(&modified_frame_list);


	while (slowPtr && fastPtr) {
f0108880:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108884:	74 09                	je     f010888f <detect_modified_loop+0x79>
f0108886:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010888a:	75 a2                	jne    f010882e <detect_modified_loop+0x18>
f010888c:	eb 01                	jmp    f010888f <detect_modified_loop+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f010888e:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished modi loop detection\n");
f010888f:	83 ec 0c             	sub    $0xc,%esp
f0108892:	68 dd 0e 12 f0       	push   $0xf0120edd
f0108897:	e8 68 e9 ff ff       	call   f0107204 <cprintf>
f010889c:	83 c4 10             	add    $0x10,%esp
}
f010889f:	90                   	nop
f01088a0:	c9                   	leave  
f01088a1:	c3                   	ret    

f01088a2 <fault_handler>:

void fault_handler(struct Trapframe *tf)
{
f01088a2:	55                   	push   %ebp
f01088a3:	89 e5                	mov    %esp,%ebp
f01088a5:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f01088a8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f01088af:	8b 45 08             	mov    0x8(%ebp),%eax
f01088b2:	8b 40 34             	mov    0x34(%eax),%eax
f01088b5:	0f b7 c0             	movzwl %ax,%eax
f01088b8:	83 e0 03             	and    $0x3,%eax
f01088bb:	83 f8 03             	cmp    $0x3,%eax
f01088be:	75 07                	jne    f01088c7 <fault_handler+0x25>
		userTrap = 1;
f01088c0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f01088c7:	0f 20 d0             	mov    %cr2,%eax
f01088ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f01088cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f01088d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f01088d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01088d7:	75 29                	jne    f0108902 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f01088d9:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f01088e0:	77 40                	ja     f0108922 <fault_handler+0x80>
f01088e2:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f01088e9:	76 37                	jbe    f0108922 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f01088eb:	83 ec 04             	sub    $0x4,%esp
f01088ee:	68 fc 0e 12 f0       	push   $0xf0120efc
f01088f3:	68 72 01 00 00       	push   $0x172
f01088f8:	68 53 0e 12 f0       	push   $0xf0120e53
f01088fd:	e8 ad 78 ff ff       	call   f01001af <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f0108902:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f0108909:	76 17                	jbe    f0108922 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010890b:	83 ec 04             	sub    $0x4,%esp
f010890e:	68 20 0f 12 f0       	push   $0xf0120f20
f0108913:	68 78 01 00 00       	push   $0x178
f0108918:	68 53 0e 12 f0       	push   $0xf0120e53
f010891d:	e8 8d 78 ff ff       	call   f01001af <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f0108922:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0108927:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010892a:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010892f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108932:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108935:	c1 ea 16             	shr    $0x16,%edx
f0108938:	c1 e2 02             	shl    $0x2,%edx
f010893b:	01 d0                	add    %edx,%eax
f010893d:	8b 00                	mov    (%eax),%eax
f010893f:	83 e0 01             	and    $0x1,%eax
f0108942:	85 c0                	test   %eax,%eax
f0108944:	75 28                	jne    f010896e <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f0108946:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108949:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
f010894f:	8d 50 01             	lea    0x1(%eax),%edx
f0108952:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108955:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)

		table_fault_handler(faulted_env, fault_va);
f010895b:	83 ec 08             	sub    $0x8,%esp
f010895e:	ff 75 ec             	pushl  -0x14(%ebp)
f0108961:	ff 75 e8             	pushl  -0x18(%ebp)
f0108964:	e8 56 00 00 00       	call   f01089bf <table_fault_handler>
f0108969:	83 c4 10             	add    $0x10,%esp
f010896c:	eb 42                	jmp    f01089b0 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010896e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108971:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f0108977:	8d 50 01             	lea    0x1(%eax),%edx
f010897a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010897d:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)

//				cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
//				cprintf("\nPage working set BEFORE fault handler...\n");
//				env_page_ws_print(curenv);

		if(isBufferingEnabled())
f0108983:	e8 6c fe ff ff       	call   f01087f4 <isBufferingEnabled>
f0108988:	85 c0                	test   %eax,%eax
f010898a:	74 13                	je     f010899f <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010898c:	83 ec 08             	sub    $0x8,%esp
f010898f:	ff 75 ec             	pushl  -0x14(%ebp)
f0108992:	ff 75 e8             	pushl  -0x18(%ebp)
f0108995:	e8 d2 05 00 00       	call   f0108f6c <__page_fault_handler_with_buffering>
f010899a:	83 c4 10             	add    $0x10,%esp
f010899d:	eb 11                	jmp    f01089b0 <fault_handler+0x10e>
		}
		else
		{
			page_fault_handler(faulted_env, fault_va);
f010899f:	83 ec 08             	sub    $0x8,%esp
f01089a2:	ff 75 ec             	pushl  -0x14(%ebp)
f01089a5:	ff 75 e8             	pushl  -0x18(%ebp)
f01089a8:	e8 33 00 00 00       	call   f01089e0 <page_fault_handler>
f01089ad:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01089b0:	0f 20 d8             	mov    %cr3,%eax
f01089b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01089b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01089b9:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f01089bc:	90                   	nop
f01089bd:	c9                   	leave  
f01089be:	c3                   	ret    

f01089bf <table_fault_handler>:


//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f01089bf:	55                   	push   %ebp
f01089c0:	89 e5                	mov    %esp,%ebp
f01089c2:	83 ec 18             	sub    $0x18,%esp
	//panic("table_fault_handler() is not implemented yet...!!");
	//Check if it's a stack page
	uint32* ptr_table;
	if(USE_KHEAP)
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
f01089c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01089c8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01089cb:	83 ec 08             	sub    $0x8,%esp
f01089ce:	ff 75 0c             	pushl  0xc(%ebp)
f01089d1:	50                   	push   %eax
f01089d2:	e8 5c b3 ff ff       	call   f0103d33 <create_page_table>
f01089d7:	83 c4 10             	add    $0x10,%esp
f01089da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
	}

}
f01089dd:	90                   	nop
f01089de:	c9                   	leave  
f01089df:	c3                   	ret    

f01089e0 <page_fault_handler>:

//Handle the page fault
void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f01089e0:	55                   	push   %ebp
f01089e1:	89 e5                	mov    %esp,%ebp
f01089e3:	83 ec 08             	sub    $0x8,%esp
	//[PRO'23] DON'T CHANGE THIS FUNCTION;
	__page_fault_handler_with_buffering(curenv, fault_va);
f01089e6:	83 ec 08             	sub    $0x8,%esp
f01089e9:	ff 75 0c             	pushl  0xc(%ebp)
f01089ec:	ff 75 08             	pushl  0x8(%ebp)
f01089ef:	e8 78 05 00 00       	call   f0108f6c <__page_fault_handler_with_buffering>
f01089f4:	83 c4 10             	add    $0x10,%esp
}
f01089f7:	90                   	nop
f01089f8:	c9                   	leave  
f01089f9:	c3                   	ret    

f01089fa <placePage>:

// ===================================================================================
// ================================ When Sherqo tries ================================
// ===================================================================================
void placePage(struct Env *env, uint32 faultVa, uint32 index)
{
f01089fa:	55                   	push   %ebp
f01089fb:	89 e5                	mov    %esp,%ebp
f01089fd:	83 ec 28             	sub    $0x28,%esp
	uint32 perms = pt_get_page_permissions(env, faultVa);
f0108a00:	83 ec 08             	sub    $0x8,%esp
f0108a03:	ff 75 0c             	pushl  0xc(%ebp)
f0108a06:	ff 75 08             	pushl  0x8(%ebp)
f0108a09:	e8 e1 c8 ff ff       	call   f01052ef <pt_get_page_permissions>
f0108a0e:	83 c4 10             	add    $0x10,%esp
f0108a11:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// 1. check if required page is buffered
	if (perms & PERM_BUFFERED) {
f0108a14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a17:	25 00 02 00 00       	and    $0x200,%eax
f0108a1c:	85 c0                	test   %eax,%eax
f0108a1e:	74 7a                	je     f0108a9a <placePage+0xa0>
		// Buffered
		uint32 * PT= NULL ;
f0108a20:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		pt_set_page_permissions(env, faultVa, PERM_PRESENT, PERM_BUFFERED); // setting PRESENT bit to 1, and BUFFERED bit to 0
f0108a27:	68 00 02 00 00       	push   $0x200
f0108a2c:	6a 01                	push   $0x1
f0108a2e:	ff 75 0c             	pushl  0xc(%ebp)
f0108a31:	ff 75 08             	pushl  0x8(%ebp)
f0108a34:	e8 52 c5 ff ff       	call   f0104f8b <pt_set_page_permissions>
f0108a39:	83 c4 10             	add    $0x10,%esp
		struct Frame_Info *frame = get_frame_info(env->env_page_directory, (void*)faultVa, &PT);
f0108a3c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108a3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108a42:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108a45:	83 ec 04             	sub    $0x4,%esp
f0108a48:	8d 4d dc             	lea    -0x24(%ebp),%ecx
f0108a4b:	51                   	push   %ecx
f0108a4c:	52                   	push   %edx
f0108a4d:	50                   	push   %eax
f0108a4e:	e8 43 b4 ff ff       	call   f0103e96 <get_frame_info>
f0108a53:	83 c4 10             	add    $0x10,%esp
f0108a56:	89 45 ec             	mov    %eax,-0x14(%ebp)
		frame->isBuffered = 0; // to 0
f0108a59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108a5c:	c6 40 14 00          	movb   $0x0,0x14(%eax)

		if (perms & PERM_MODIFIED) { // if the page was modified: Remove its Frame_Info from: "modified_frame_list"
f0108a60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108a63:	83 e0 40             	and    $0x40,%eax
f0108a66:	85 c0                	test   %eax,%eax
f0108a68:	74 18                	je     f0108a82 <placePage+0x88>
			bufferlist_remove_page(&modified_frame_list, frame);
f0108a6a:	83 ec 08             	sub    $0x8,%esp
f0108a6d:	ff 75 ec             	pushl  -0x14(%ebp)
f0108a70:	68 00 0d 80 f0       	push   $0xf0800d00
f0108a75:	e8 05 c4 ff ff       	call   f0104e7f <bufferlist_remove_page>
f0108a7a:	83 c4 10             	add    $0x10,%esp
f0108a7d:	e9 fc 00 00 00       	jmp    f0108b7e <placePage+0x184>
		}
		else { // if was not modified: or from "free_frame_list"
			bufferlist_remove_page(&free_frame_list, frame);
f0108a82:	83 ec 08             	sub    $0x8,%esp
f0108a85:	ff 75 ec             	pushl  -0x14(%ebp)
f0108a88:	68 14 0d 80 f0       	push   $0xf0800d14
f0108a8d:	e8 ed c3 ff ff       	call   f0104e7f <bufferlist_remove_page>
f0108a92:	83 c4 10             	add    $0x10,%esp
f0108a95:	e9 e4 00 00 00       	jmp    f0108b7e <placePage+0x184>
		}
	} else { // Not buffered
		// allocate and map frame for the faulted page
		struct Frame_Info *frame = NULL;
f0108a9a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int success = allocate_frame(&frame);
f0108aa1:	83 ec 0c             	sub    $0xc,%esp
f0108aa4:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0108aa7:	50                   	push   %eax
f0108aa8:	e8 af af ff ff       	call   f0103a5c <allocate_frame>
f0108aad:	83 c4 10             	add    $0x10,%esp
f0108ab0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if (success != 0) {
f0108ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0108ab7:	74 17                	je     f0108ad0 <placePage+0xd6>
			panic("Failed to allocate a frame for page fault handling!");
f0108ab9:	83 ec 04             	sub    $0x4,%esp
f0108abc:	68 44 0f 12 f0       	push   $0xf0120f44
f0108ac1:	68 d8 01 00 00       	push   $0x1d8
f0108ac6:	68 53 0e 12 f0       	push   $0xf0120e53
f0108acb:	e8 df 76 ff ff       	call   f01001af <_panic>
		}

		map_frame(env->env_page_directory, frame, (void*)faultVa, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0108ad0:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108ad3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0108ad6:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ad9:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108adc:	6a 07                	push   $0x7
f0108ade:	51                   	push   %ecx
f0108adf:	52                   	push   %edx
f0108ae0:	50                   	push   %eax
f0108ae1:	e8 f1 b2 ff ff       	call   f0103dd7 <map_frame>
f0108ae6:	83 c4 10             	add    $0x10,%esp

		// read the faulted page from page file to memory.
		success = pf_read_env_page(env, (void*)faultVa);
f0108ae9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108aec:	83 ec 08             	sub    $0x8,%esp
f0108aef:	50                   	push   %eax
f0108af0:	ff 75 08             	pushl  0x8(%ebp)
f0108af3:	e8 0d 33 00 00       	call   f010be05 <pf_read_env_page>
f0108af8:	83 c4 10             	add    $0x10,%esp
f0108afb:	89 45 e8             	mov    %eax,-0x18(%ebp)

		// if the page does not exist on page file, then CHECK if it is a stack page. If so this means that it is a new stack page, add a new empty page with this faulted address to page file (refer to Appendix I and Appendix II), else panic with invalid virtual address.
		if (success == E_PAGE_NOT_EXIST_IN_PF) {
f0108afe:	83 7d e8 f7          	cmpl   $0xfffffff7,-0x18(%ebp)
f0108b02:	75 7a                	jne    f0108b7e <placePage+0x184>
			// Check if it's a stack page (stack grows downward from USTACKTOP)
			// Assuming stack boundaries are defined elsewhere
			if (faultVa < USTACKTOP && faultVa >= USTACKBOTTOM) {
f0108b04:	81 7d 0c ff df bf ee 	cmpl   $0xeebfdfff,0xc(%ebp)
f0108b0b:	77 5a                	ja     f0108b67 <placePage+0x16d>
f0108b0d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108b14:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108b17:	2d 01 f0 fc 5f       	sub    $0x5ffcf001,%eax
f0108b1c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0108b1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b22:	ba 00 00 00 00       	mov    $0x0,%edx
f0108b27:	f7 75 e4             	divl   -0x1c(%ebp)
f0108b2a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108b2d:	29 d0                	sub    %edx,%eax
f0108b2f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108b32:	77 33                	ja     f0108b67 <placePage+0x16d>
				// It's a new stack page, add it to page file
				success = pf_add_empty_env_page(env, faultVa, 1); // initialize with zeros
f0108b34:	83 ec 04             	sub    $0x4,%esp
f0108b37:	6a 01                	push   $0x1
f0108b39:	ff 75 0c             	pushl  0xc(%ebp)
f0108b3c:	ff 75 08             	pushl  0x8(%ebp)
f0108b3f:	e8 25 30 00 00       	call   f010bb69 <pf_add_empty_env_page>
f0108b44:	83 c4 10             	add    $0x10,%esp
f0108b47:	89 45 e8             	mov    %eax,-0x18(%ebp)
				if (success == E_NO_PAGE_FILE_SPACE) {
f0108b4a:	83 7d e8 f8          	cmpl   $0xfffffff8,-0x18(%ebp)
f0108b4e:	75 2e                	jne    f0108b7e <placePage+0x184>
					panic("No enough virtual space on the page file");
f0108b50:	83 ec 04             	sub    $0x4,%esp
f0108b53:	68 78 0f 12 f0       	push   $0xf0120f78
f0108b58:	68 e8 01 00 00       	push   $0x1e8
f0108b5d:	68 53 0e 12 f0       	push   $0xf0120e53
f0108b62:	e8 48 76 ff ff       	call   f01001af <_panic>
				}
			} else {
				// Not a stack page and doesn't exist in page file
				panic("Invalid virtual address access at %x", faultVa);
f0108b67:	ff 75 0c             	pushl  0xc(%ebp)
f0108b6a:	68 a4 0f 12 f0       	push   $0xf0120fa4
f0108b6f:	68 ec 01 00 00       	push   $0x1ec
f0108b74:	68 53 0e 12 f0       	push   $0xf0120e53
f0108b79:	e8 31 76 ff ff       	call   f01001af <_panic>
			}
		}
	}

	// 2. update the working set
	if(index == -1)
f0108b7e:	83 7d 10 ff          	cmpl   $0xffffffff,0x10(%ebp)
f0108b82:	0f 85 89 00 00 00    	jne    f0108c11 <placePage+0x217>
	{
		for (int i = 0; i < env->page_WS_max_size; i++) {
f0108b88:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0108b8f:	eb 71                	jmp    f0108c02 <placePage+0x208>
			if (env->ptr_pageWorkingSet[i].empty) {
f0108b91:	8b 45 08             	mov    0x8(%ebp),%eax
f0108b94:	8b 48 78             	mov    0x78(%eax),%ecx
f0108b97:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108b9a:	89 d0                	mov    %edx,%eax
f0108b9c:	01 c0                	add    %eax,%eax
f0108b9e:	01 d0                	add    %edx,%eax
f0108ba0:	c1 e0 02             	shl    $0x2,%eax
f0108ba3:	01 c8                	add    %ecx,%eax
f0108ba5:	8a 40 04             	mov    0x4(%eax),%al
f0108ba8:	84 c0                	test   %al,%al
f0108baa:	74 53                	je     f0108bff <placePage+0x205>
				env->ptr_pageWorkingSet[i].empty = 0;
f0108bac:	8b 45 08             	mov    0x8(%ebp),%eax
f0108baf:	8b 48 78             	mov    0x78(%eax),%ecx
f0108bb2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108bb5:	89 d0                	mov    %edx,%eax
f0108bb7:	01 c0                	add    %eax,%eax
f0108bb9:	01 d0                	add    %edx,%eax
f0108bbb:	c1 e0 02             	shl    $0x2,%eax
f0108bbe:	01 c8                	add    %ecx,%eax
f0108bc0:	c6 40 04 00          	movb   $0x0,0x4(%eax)
				env->ptr_pageWorkingSet[i].virtual_address = faultVa;
f0108bc4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bc7:	8b 48 78             	mov    0x78(%eax),%ecx
f0108bca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108bcd:	89 d0                	mov    %edx,%eax
f0108bcf:	01 c0                	add    %eax,%eax
f0108bd1:	01 d0                	add    %edx,%eax
f0108bd3:	c1 e0 02             	shl    $0x2,%eax
f0108bd6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0108bd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bdc:	89 02                	mov    %eax,(%edx)
				env->page_last_WS_index = (i + 1) % env->page_WS_max_size;
f0108bde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108be1:	40                   	inc    %eax
f0108be2:	89 c2                	mov    %eax,%edx
f0108be4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108be7:	8b 48 74             	mov    0x74(%eax),%ecx
f0108bea:	89 d0                	mov    %edx,%eax
f0108bec:	ba 00 00 00 00       	mov    $0x0,%edx
f0108bf1:	f7 f1                	div    %ecx
f0108bf3:	8b 45 08             	mov    0x8(%ebp),%eax
f0108bf6:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
				break;
f0108bfc:	90                   	nop
	else
	{
		env->ptr_pageWorkingSet[index].virtual_address = faultVa;
		env->page_last_WS_index = (index + 1) % env->page_WS_max_size;
	}
}
f0108bfd:	eb 4a                	jmp    f0108c49 <placePage+0x24f>
	}

	// 2. update the working set
	if(index == -1)
	{
		for (int i = 0; i < env->page_WS_max_size; i++) {
f0108bff:	ff 45 f4             	incl   -0xc(%ebp)
f0108c02:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c05:	8b 50 74             	mov    0x74(%eax),%edx
f0108c08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108c0b:	39 c2                	cmp    %eax,%edx
f0108c0d:	77 82                	ja     f0108b91 <placePage+0x197>
	else
	{
		env->ptr_pageWorkingSet[index].virtual_address = faultVa;
		env->page_last_WS_index = (index + 1) % env->page_WS_max_size;
	}
}
f0108c0f:	eb 38                	jmp    f0108c49 <placePage+0x24f>
			}
		}
	}
	else
	{
		env->ptr_pageWorkingSet[index].virtual_address = faultVa;
f0108c11:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c14:	8b 48 78             	mov    0x78(%eax),%ecx
f0108c17:	8b 55 10             	mov    0x10(%ebp),%edx
f0108c1a:	89 d0                	mov    %edx,%eax
f0108c1c:	01 c0                	add    %eax,%eax
f0108c1e:	01 d0                	add    %edx,%eax
f0108c20:	c1 e0 02             	shl    $0x2,%eax
f0108c23:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0108c26:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108c29:	89 02                	mov    %eax,(%edx)
		env->page_last_WS_index = (index + 1) % env->page_WS_max_size;
f0108c2b:	8b 45 10             	mov    0x10(%ebp),%eax
f0108c2e:	8d 50 01             	lea    0x1(%eax),%edx
f0108c31:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c34:	8b 48 74             	mov    0x74(%eax),%ecx
f0108c37:	89 d0                	mov    %edx,%eax
f0108c39:	ba 00 00 00 00       	mov    $0x0,%edx
f0108c3e:	f7 f1                	div    %ecx
f0108c40:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c43:	89 90 d4 02 00 00    	mov    %edx,0x2d4(%eax)
	}
}
f0108c49:	90                   	nop
f0108c4a:	c9                   	leave  
f0108c4b:	c3                   	ret    

f0108c4c <replacePage>:


void replacePage(struct Env *env, uint32 fault_va) {
f0108c4c:	55                   	push   %ebp
f0108c4d:	89 e5                	mov    %esp,%ebp
f0108c4f:	53                   	push   %ebx
f0108c50:	83 ec 34             	sub    $0x34,%esp
	uint32 victim = -1;
f0108c53:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	uint32 count = 0;
f0108c5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 index = env->page_last_WS_index;
f0108c61:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c64:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108c6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 page_permissions;
	while(1)
	{
		count = 0;
f0108c6d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		index = env->page_last_WS_index;
f0108c74:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c77:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108c7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// try 1
		for(; count < env->page_WS_max_size; count++)
f0108c80:	eb 5f                	jmp    f0108ce1 <replacePage+0x95>
		{
			page_permissions = pt_get_page_permissions(env,
					env->ptr_pageWorkingSet[index].virtual_address);
f0108c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0108c85:	8b 48 78             	mov    0x78(%eax),%ecx
f0108c88:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108c8b:	89 d0                	mov    %edx,%eax
f0108c8d:	01 c0                	add    %eax,%eax
f0108c8f:	01 d0                	add    %edx,%eax
f0108c91:	c1 e0 02             	shl    $0x2,%eax
f0108c94:	01 c8                	add    %ecx,%eax
		count = 0;
		index = env->page_last_WS_index;
		// try 1
		for(; count < env->page_WS_max_size; count++)
		{
			page_permissions = pt_get_page_permissions(env,
f0108c96:	8b 00                	mov    (%eax),%eax
f0108c98:	83 ec 08             	sub    $0x8,%esp
f0108c9b:	50                   	push   %eax
f0108c9c:	ff 75 08             	pushl  0x8(%ebp)
f0108c9f:	e8 4b c6 ff ff       	call   f01052ef <pt_get_page_permissions>
f0108ca4:	83 c4 10             	add    $0x10,%esp
f0108ca7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					env->ptr_pageWorkingSet[index].virtual_address);
			if((!(page_permissions & (PERM_USED)) && !(page_permissions & (PERM_MODIFIED))))
f0108caa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108cad:	83 e0 20             	and    $0x20,%eax
f0108cb0:	85 c0                	test   %eax,%eax
f0108cb2:	75 12                	jne    f0108cc6 <replacePage+0x7a>
f0108cb4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108cb7:	83 e0 40             	and    $0x40,%eax
f0108cba:	85 c0                	test   %eax,%eax
f0108cbc:	75 08                	jne    f0108cc6 <replacePage+0x7a>
			{
				victim = index;
f0108cbe:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
				break;
f0108cc4:	eb 26                	jmp    f0108cec <replacePage+0xa0>
			}
			index =(index + 1) % env->page_WS_max_size;
f0108cc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108cc9:	8d 50 01             	lea    0x1(%eax),%edx
f0108ccc:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ccf:	8b 48 74             	mov    0x74(%eax),%ecx
f0108cd2:	89 d0                	mov    %edx,%eax
f0108cd4:	ba 00 00 00 00       	mov    $0x0,%edx
f0108cd9:	f7 f1                	div    %ecx
f0108cdb:	89 55 ec             	mov    %edx,-0x14(%ebp)
	while(1)
	{
		count = 0;
		index = env->page_last_WS_index;
		// try 1
		for(; count < env->page_WS_max_size; count++)
f0108cde:	ff 45 f0             	incl   -0x10(%ebp)
f0108ce1:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ce4:	8b 40 74             	mov    0x74(%eax),%eax
f0108ce7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108cea:	77 96                	ja     f0108c82 <replacePage+0x36>
				victim = index;
				break;
			}
			index =(index + 1) % env->page_WS_max_size;
		}
		if (victim != -1)
f0108cec:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0108cf0:	0f 85 a6 00 00 00    	jne    f0108d9c <replacePage+0x150>
			break;
		// try 2
		count = 0;
f0108cf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		index = env->page_last_WS_index;
f0108cfd:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d00:	8b 80 d4 02 00 00    	mov    0x2d4(%eax),%eax
f0108d06:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for(; count < env->page_WS_max_size; count++)
f0108d09:	eb 7d                	jmp    f0108d88 <replacePage+0x13c>
		{

			page_permissions = pt_get_page_permissions(env,
					env->ptr_pageWorkingSet[index].virtual_address);
f0108d0b:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d0e:	8b 48 78             	mov    0x78(%eax),%ecx
f0108d11:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108d14:	89 d0                	mov    %edx,%eax
f0108d16:	01 c0                	add    %eax,%eax
f0108d18:	01 d0                	add    %edx,%eax
f0108d1a:	c1 e0 02             	shl    $0x2,%eax
f0108d1d:	01 c8                	add    %ecx,%eax
		count = 0;
		index = env->page_last_WS_index;
		for(; count < env->page_WS_max_size; count++)
		{

			page_permissions = pt_get_page_permissions(env,
f0108d1f:	8b 00                	mov    (%eax),%eax
f0108d21:	83 ec 08             	sub    $0x8,%esp
f0108d24:	50                   	push   %eax
f0108d25:	ff 75 08             	pushl  0x8(%ebp)
f0108d28:	e8 c2 c5 ff ff       	call   f01052ef <pt_get_page_permissions>
f0108d2d:	83 c4 10             	add    $0x10,%esp
f0108d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					env->ptr_pageWorkingSet[index].virtual_address);
			if(page_permissions & (PERM_USED))
f0108d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108d36:	83 e0 20             	and    $0x20,%eax
f0108d39:	85 c0                	test   %eax,%eax
f0108d3b:	74 28                	je     f0108d65 <replacePage+0x119>
			{
				pt_set_page_permissions(env, env->ptr_pageWorkingSet[index].virtual_address,
f0108d3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d40:	8b 48 78             	mov    0x78(%eax),%ecx
f0108d43:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0108d46:	89 d0                	mov    %edx,%eax
f0108d48:	01 c0                	add    %eax,%eax
f0108d4a:	01 d0                	add    %edx,%eax
f0108d4c:	c1 e0 02             	shl    $0x2,%eax
f0108d4f:	01 c8                	add    %ecx,%eax
f0108d51:	8b 00                	mov    (%eax),%eax
f0108d53:	6a 20                	push   $0x20
f0108d55:	6a 00                	push   $0x0
f0108d57:	50                   	push   %eax
f0108d58:	ff 75 08             	pushl  0x8(%ebp)
f0108d5b:	e8 2b c2 ff ff       	call   f0104f8b <pt_set_page_permissions>
f0108d60:	83 c4 10             	add    $0x10,%esp
f0108d63:	eb 08                	jmp    f0108d6d <replacePage+0x121>
									0, PERM_USED) ;

			}
			else
			{
				victim = index;
f0108d65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d68:	89 45 f4             	mov    %eax,-0xc(%ebp)
				break;
f0108d6b:	eb 2a                	jmp    f0108d97 <replacePage+0x14b>
			}

			index =(index + 1) % env->page_WS_max_size;
f0108d6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108d70:	8d 50 01             	lea    0x1(%eax),%edx
f0108d73:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d76:	8b 48 74             	mov    0x74(%eax),%ecx
f0108d79:	89 d0                	mov    %edx,%eax
f0108d7b:	ba 00 00 00 00       	mov    $0x0,%edx
f0108d80:	f7 f1                	div    %ecx
f0108d82:	89 55 ec             	mov    %edx,-0x14(%ebp)
		if (victim != -1)
			break;
		// try 2
		count = 0;
		index = env->page_last_WS_index;
		for(; count < env->page_WS_max_size; count++)
f0108d85:	ff 45 f0             	incl   -0x10(%ebp)
f0108d88:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d8b:	8b 40 74             	mov    0x74(%eax),%eax
f0108d8e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0108d91:	0f 87 74 ff ff ff    	ja     f0108d0b <replacePage+0xbf>
			}

			index =(index + 1) % env->page_WS_max_size;
		}

	}// end of while
f0108d97:	e9 d1 fe ff ff       	jmp    f0108c6d <replacePage+0x21>
				break;
			}
			index =(index + 1) % env->page_WS_max_size;
		}
		if (victim != -1)
			break;
f0108d9c:	90                   	nop
			index =(index + 1) % env->page_WS_max_size;
		}

	}// end of while

	unsigned int victimVA = env->ptr_pageWorkingSet[victim].virtual_address;
f0108d9d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108da0:	8b 48 78             	mov    0x78(%eax),%ecx
f0108da3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108da6:	89 d0                	mov    %edx,%eax
f0108da8:	01 c0                	add    %eax,%eax
f0108daa:	01 d0                	add    %edx,%eax
f0108dac:	c1 e0 02             	shl    $0x2,%eax
f0108daf:	01 c8                	add    %ecx,%eax
f0108db1:	8b 00                	mov    (%eax),%eax
f0108db3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint32 * PT= NULL ;
f0108db6:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	struct Frame_Info *frame = get_frame_info(env->env_page_directory, (void*)victimVA, &PT);
f0108dbd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0108dc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0108dc3:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108dc6:	83 ec 04             	sub    $0x4,%esp
f0108dc9:	8d 4d d0             	lea    -0x30(%ebp),%ecx
f0108dcc:	51                   	push   %ecx
f0108dcd:	52                   	push   %edx
f0108dce:	50                   	push   %eax
f0108dcf:	e8 c2 b0 ff ff       	call   f0103e96 <get_frame_info>
f0108dd4:	83 c4 10             	add    $0x10,%esp
f0108dd7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	frame->va = victimVA;
f0108dda:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108ddd:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0108de0:	89 50 0c             	mov    %edx,0xc(%eax)
	frame->environment = env;
f0108de3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108de6:	8b 55 08             	mov    0x8(%ebp),%edx
f0108de9:	89 50 10             	mov    %edx,0x10(%eax)
	frame->isBuffered = 1;
f0108dec:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108def:	c6 40 14 01          	movb   $0x1,0x14(%eax)
	pt_set_page_permissions(env, victimVA, PERM_BUFFERED, PERM_PRESENT) ;
f0108df3:	6a 01                	push   $0x1
f0108df5:	68 00 02 00 00       	push   $0x200
f0108dfa:	ff 75 e0             	pushl  -0x20(%ebp)
f0108dfd:	ff 75 08             	pushl  0x8(%ebp)
f0108e00:	e8 86 c1 ff ff       	call   f0104f8b <pt_set_page_permissions>
f0108e05:	83 c4 10             	add    $0x10,%esp

	uint32 perms = pt_get_page_permissions(env, victimVA);
f0108e08:	83 ec 08             	sub    $0x8,%esp
f0108e0b:	ff 75 e0             	pushl  -0x20(%ebp)
f0108e0e:	ff 75 08             	pushl  0x8(%ebp)
f0108e11:	e8 d9 c4 ff ff       	call   f01052ef <pt_get_page_permissions>
f0108e16:	83 c4 10             	add    $0x10,%esp
f0108e19:	89 45 d8             	mov    %eax,-0x28(%ebp)

	if (perms & PERM_MODIFIED)
f0108e1c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0108e1f:	83 e0 40             	and    $0x40,%eax
f0108e22:	85 c0                	test   %eax,%eax
f0108e24:	0f 84 15 01 00 00    	je     f0108f3f <replacePage+0x2f3>
	{
		bufferList_add_page(&modified_frame_list, frame);
f0108e2a:	83 ec 08             	sub    $0x8,%esp
f0108e2d:	ff 75 dc             	pushl  -0x24(%ebp)
f0108e30:	68 00 0d 80 f0       	push   $0xf0800d00
f0108e35:	e8 f3 bf ff ff       	call   f0104e2d <bufferList_add_page>
f0108e3a:	83 c4 10             	add    $0x10,%esp
		if(LIST_SIZE(&modified_frame_list) == getModifiedBufferLength())
f0108e3d:	8b 1d 0c 0d 80 f0    	mov    0xf0800d0c,%ebx
f0108e43:	e8 c4 f9 ff ff       	call   f010880c <getModifiedBufferLength>
f0108e48:	39 c3                	cmp    %eax,%ebx
f0108e4a:	0f 85 02 01 00 00    	jne    f0108f52 <replacePage+0x306>
		{
			struct Frame_Info *ptr_fi ;
			LIST_FOREACH(ptr_fi, &modified_frame_list)
f0108e50:	a1 00 0d 80 f0       	mov    0xf0800d00,%eax
f0108e55:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108e58:	e9 b2 00 00 00       	jmp    f0108f0f <replacePage+0x2c3>
			{
				uint32 * PT= NULL ;
f0108e5d:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
				ptr_fi =  get_frame_info(ptr_fi->environment->env_page_directory,(void *)(ptr_fi->va ),&PT);
f0108e64:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e67:	8b 40 0c             	mov    0xc(%eax),%eax
f0108e6a:	89 c1                	mov    %eax,%ecx
f0108e6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e6f:	8b 40 10             	mov    0x10(%eax),%eax
f0108e72:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108e75:	83 ec 04             	sub    $0x4,%esp
f0108e78:	8d 55 cc             	lea    -0x34(%ebp),%edx
f0108e7b:	52                   	push   %edx
f0108e7c:	51                   	push   %ecx
f0108e7d:	50                   	push   %eax
f0108e7e:	e8 13 b0 ff ff       	call   f0103e96 <get_frame_info>
f0108e83:	83 c4 10             	add    $0x10,%esp
f0108e86:	89 45 e8             	mov    %eax,-0x18(%ebp)
				int ret = pf_update_env_page( ptr_fi->environment, (void *)(ptr_fi->va ), ptr_fi);
f0108e89:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e8c:	8b 40 0c             	mov    0xc(%eax),%eax
f0108e8f:	89 c2                	mov    %eax,%edx
f0108e91:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108e94:	8b 40 10             	mov    0x10(%eax),%eax
f0108e97:	83 ec 04             	sub    $0x4,%esp
f0108e9a:	ff 75 e8             	pushl  -0x18(%ebp)
f0108e9d:	52                   	push   %edx
f0108e9e:	50                   	push   %eax
f0108e9f:	e8 62 2e 00 00       	call   f010bd06 <pf_update_env_page>
f0108ea4:	83 c4 10             	add    $0x10,%esp
f0108ea7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
				if (ret ==  E_PAGE_NOT_EXIST_IN_PF)
f0108eaa:	83 7d d4 f7          	cmpl   $0xfffffff7,-0x2c(%ebp)
f0108eae:	75 17                	jne    f0108ec7 <replacePage+0x27b>
					panic("The page to be updated doesn’t exist on the page file");
f0108eb0:	83 ec 04             	sub    $0x4,%esp
f0108eb3:	68 cc 0f 12 f0       	push   $0xf0120fcc
f0108eb8:	68 4b 02 00 00       	push   $0x24b
f0108ebd:	68 53 0e 12 f0       	push   $0xf0120e53
f0108ec2:	e8 e8 72 ff ff       	call   f01001af <_panic>
				pt_set_page_permissions(ptr_fi->environment,(ptr_fi->va ), 0, PERM_MODIFIED);
f0108ec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108eca:	8b 50 0c             	mov    0xc(%eax),%edx
f0108ecd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108ed0:	8b 40 10             	mov    0x10(%eax),%eax
f0108ed3:	6a 40                	push   $0x40
f0108ed5:	6a 00                	push   $0x0
f0108ed7:	52                   	push   %edx
f0108ed8:	50                   	push   %eax
f0108ed9:	e8 ad c0 ff ff       	call   f0104f8b <pt_set_page_permissions>
f0108ede:	83 c4 10             	add    $0x10,%esp
				bufferlist_remove_page(&modified_frame_list, frame);
f0108ee1:	83 ec 08             	sub    $0x8,%esp
f0108ee4:	ff 75 dc             	pushl  -0x24(%ebp)
f0108ee7:	68 00 0d 80 f0       	push   $0xf0800d00
f0108eec:	e8 8e bf ff ff       	call   f0104e7f <bufferlist_remove_page>
f0108ef1:	83 c4 10             	add    $0x10,%esp
				bufferList_add_page(&free_frame_list, ptr_fi);
f0108ef4:	83 ec 08             	sub    $0x8,%esp
f0108ef7:	ff 75 e8             	pushl  -0x18(%ebp)
f0108efa:	68 14 0d 80 f0       	push   $0xf0800d14
f0108eff:	e8 29 bf ff ff       	call   f0104e2d <bufferList_add_page>
f0108f04:	83 c4 10             	add    $0x10,%esp
	{
		bufferList_add_page(&modified_frame_list, frame);
		if(LIST_SIZE(&modified_frame_list) == getModifiedBufferLength())
		{
			struct Frame_Info *ptr_fi ;
			LIST_FOREACH(ptr_fi, &modified_frame_list)
f0108f07:	a1 08 0d 80 f0       	mov    0xf0800d08,%eax
f0108f0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108f0f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0108f13:	74 07                	je     f0108f1c <replacePage+0x2d0>
f0108f15:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108f18:	8b 00                	mov    (%eax),%eax
f0108f1a:	eb 05                	jmp    f0108f21 <replacePage+0x2d5>
f0108f1c:	b8 00 00 00 00       	mov    $0x0,%eax
f0108f21:	a3 08 0d 80 f0       	mov    %eax,0xf0800d08
f0108f26:	a1 08 0d 80 f0       	mov    0xf0800d08,%eax
f0108f2b:	85 c0                	test   %eax,%eax
f0108f2d:	0f 85 2a ff ff ff    	jne    f0108e5d <replacePage+0x211>
f0108f33:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0108f37:	0f 85 20 ff ff ff    	jne    f0108e5d <replacePage+0x211>
f0108f3d:	eb 13                	jmp    f0108f52 <replacePage+0x306>

			}
		}
	}
	else
		bufferList_add_page(&free_frame_list, frame);
f0108f3f:	83 ec 08             	sub    $0x8,%esp
f0108f42:	ff 75 dc             	pushl  -0x24(%ebp)
f0108f45:	68 14 0d 80 f0       	push   $0xf0800d14
f0108f4a:	e8 de be ff ff       	call   f0104e2d <bufferList_add_page>
f0108f4f:	83 c4 10             	add    $0x10,%esp
	//cprintf("victim: %d\n", victim);

	placePage(env,fault_va, victim);
f0108f52:	83 ec 04             	sub    $0x4,%esp
f0108f55:	ff 75 f4             	pushl  -0xc(%ebp)
f0108f58:	ff 75 0c             	pushl  0xc(%ebp)
f0108f5b:	ff 75 08             	pushl  0x8(%ebp)
f0108f5e:	e8 97 fa ff ff       	call   f01089fa <placePage>
f0108f63:	83 c4 10             	add    $0x10,%esp


}
f0108f66:	90                   	nop
f0108f67:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108f6a:	c9                   	leave  
f0108f6b:	c3                   	ret    

f0108f6c <__page_fault_handler_with_buffering>:

// call the guys
void __page_fault_handler_with_buffering(struct Env *curEnv, uint32 pageWS) {
f0108f6c:	55                   	push   %ebp
f0108f6d:	89 e5                	mov    %esp,%ebp
f0108f6f:	83 ec 18             	sub    $0x18,%esp
	pageWS = ROUNDDOWN(pageWS, PAGE_SIZE);
f0108f72:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108f75:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108f80:	89 45 0c             	mov    %eax,0xc(%ebp)

	if (env_page_ws_get_size(curEnv) < curEnv->page_WS_max_size)
f0108f83:	83 ec 0c             	sub    $0xc,%esp
f0108f86:	ff 75 08             	pushl  0x8(%ebp)
f0108f89:	e8 39 b6 ff ff       	call   f01045c7 <env_page_ws_get_size>
f0108f8e:	83 c4 10             	add    $0x10,%esp
f0108f91:	89 c2                	mov    %eax,%edx
f0108f93:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f96:	8b 40 74             	mov    0x74(%eax),%eax
f0108f99:	39 c2                	cmp    %eax,%edx
f0108f9b:	73 15                	jae    f0108fb2 <__page_fault_handler_with_buffering+0x46>
		placePage(curEnv, pageWS, -1);
f0108f9d:	83 ec 04             	sub    $0x4,%esp
f0108fa0:	6a ff                	push   $0xffffffff
f0108fa2:	ff 75 0c             	pushl  0xc(%ebp)
f0108fa5:	ff 75 08             	pushl  0x8(%ebp)
f0108fa8:	e8 4d fa ff ff       	call   f01089fa <placePage>
f0108fad:	83 c4 10             	add    $0x10,%esp
	else
		replacePage(curEnv, pageWS);
}
f0108fb0:	eb 11                	jmp    f0108fc3 <__page_fault_handler_with_buffering+0x57>
	pageWS = ROUNDDOWN(pageWS, PAGE_SIZE);

	if (env_page_ws_get_size(curEnv) < curEnv->page_WS_max_size)
		placePage(curEnv, pageWS, -1);
	else
		replacePage(curEnv, pageWS);
f0108fb2:	83 ec 08             	sub    $0x8,%esp
f0108fb5:	ff 75 0c             	pushl  0xc(%ebp)
f0108fb8:	ff 75 08             	pushl  0x8(%ebp)
f0108fbb:	e8 8c fc ff ff       	call   f0108c4c <replacePage>
f0108fc0:	83 c4 10             	add    $0x10,%esp
}
f0108fc3:	90                   	nop
f0108fc4:	c9                   	leave  
f0108fc5:	c3                   	ret    

f0108fc6 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f0108fc6:	6a 0e                	push   $0xe
f0108fc8:	e9 ed 00 00 00       	jmp    f01090ba <_alltraps>
f0108fcd:	90                   	nop

f0108fce <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f0108fce:	6a 00                	push   $0x0
f0108fd0:	6a 30                	push   $0x30
f0108fd2:	e9 e3 00 00 00       	jmp    f01090ba <_alltraps>
f0108fd7:	90                   	nop

f0108fd8 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f0108fd8:	6a 08                	push   $0x8
f0108fda:	e9 db 00 00 00       	jmp    f01090ba <_alltraps>
f0108fdf:	90                   	nop

f0108fe0 <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f0108fe0:	6a 00                	push   $0x0
f0108fe2:	6a 00                	push   $0x0
f0108fe4:	e9 d1 00 00 00       	jmp    f01090ba <_alltraps>
f0108fe9:	90                   	nop

f0108fea <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f0108fea:	6a 00                	push   $0x0
f0108fec:	6a 01                	push   $0x1
f0108fee:	e9 c7 00 00 00       	jmp    f01090ba <_alltraps>
f0108ff3:	90                   	nop

f0108ff4 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f0108ff4:	6a 00                	push   $0x0
f0108ff6:	6a 02                	push   $0x2
f0108ff8:	e9 bd 00 00 00       	jmp    f01090ba <_alltraps>
f0108ffd:	90                   	nop

f0108ffe <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f0108ffe:	6a 00                	push   $0x0
f0109000:	6a 03                	push   $0x3
f0109002:	e9 b3 00 00 00       	jmp    f01090ba <_alltraps>
f0109007:	90                   	nop

f0109008 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f0109008:	6a 00                	push   $0x0
f010900a:	6a 04                	push   $0x4
f010900c:	e9 a9 00 00 00       	jmp    f01090ba <_alltraps>
f0109011:	90                   	nop

f0109012 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f0109012:	6a 00                	push   $0x0
f0109014:	6a 05                	push   $0x5
f0109016:	e9 9f 00 00 00       	jmp    f01090ba <_alltraps>
f010901b:	90                   	nop

f010901c <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010901c:	6a 00                	push   $0x0
f010901e:	6a 06                	push   $0x6
f0109020:	e9 95 00 00 00       	jmp    f01090ba <_alltraps>
f0109025:	90                   	nop

f0109026 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f0109026:	6a 00                	push   $0x0
f0109028:	6a 07                	push   $0x7
f010902a:	e9 8b 00 00 00       	jmp    f01090ba <_alltraps>
f010902f:	90                   	nop

f0109030 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f0109030:	6a 0a                	push   $0xa
f0109032:	e9 83 00 00 00       	jmp    f01090ba <_alltraps>
f0109037:	90                   	nop

f0109038 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f0109038:	6a 0b                	push   $0xb
f010903a:	eb 7e                	jmp    f01090ba <_alltraps>

f010903c <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010903c:	6a 0c                	push   $0xc
f010903e:	eb 7a                	jmp    f01090ba <_alltraps>

f0109040 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f0109040:	6a 0d                	push   $0xd
f0109042:	eb 76                	jmp    f01090ba <_alltraps>

f0109044 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f0109044:	6a 00                	push   $0x0
f0109046:	6a 10                	push   $0x10
f0109048:	eb 70                	jmp    f01090ba <_alltraps>

f010904a <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010904a:	6a 11                	push   $0x11
f010904c:	eb 6c                	jmp    f01090ba <_alltraps>

f010904e <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010904e:	6a 00                	push   $0x0
f0109050:	6a 12                	push   $0x12
f0109052:	eb 66                	jmp    f01090ba <_alltraps>

f0109054 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f0109054:	6a 00                	push   $0x0
f0109056:	6a 13                	push   $0x13
f0109058:	eb 60                	jmp    f01090ba <_alltraps>

f010905a <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010905a:	6a 00                	push   $0x0
f010905c:	6a 20                	push   $0x20
f010905e:	eb 5a                	jmp    f01090ba <_alltraps>

f0109060 <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f0109060:	6a 00                	push   $0x0
f0109062:	6a 21                	push   $0x21
f0109064:	eb 54                	jmp    f01090ba <_alltraps>

f0109066 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f0109066:	6a 00                	push   $0x0
f0109068:	6a 22                	push   $0x22
f010906a:	eb 4e                	jmp    f01090ba <_alltraps>

f010906c <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010906c:	6a 00                	push   $0x0
f010906e:	6a 23                	push   $0x23
f0109070:	eb 48                	jmp    f01090ba <_alltraps>

f0109072 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f0109072:	6a 00                	push   $0x0
f0109074:	6a 24                	push   $0x24
f0109076:	eb 42                	jmp    f01090ba <_alltraps>

f0109078 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f0109078:	6a 00                	push   $0x0
f010907a:	6a 25                	push   $0x25
f010907c:	eb 3c                	jmp    f01090ba <_alltraps>

f010907e <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010907e:	6a 00                	push   $0x0
f0109080:	6a 26                	push   $0x26
f0109082:	eb 36                	jmp    f01090ba <_alltraps>

f0109084 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f0109084:	6a 00                	push   $0x0
f0109086:	6a 27                	push   $0x27
f0109088:	eb 30                	jmp    f01090ba <_alltraps>

f010908a <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010908a:	6a 00                	push   $0x0
f010908c:	6a 28                	push   $0x28
f010908e:	eb 2a                	jmp    f01090ba <_alltraps>

f0109090 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f0109090:	6a 00                	push   $0x0
f0109092:	6a 29                	push   $0x29
f0109094:	eb 24                	jmp    f01090ba <_alltraps>

f0109096 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f0109096:	6a 00                	push   $0x0
f0109098:	6a 2a                	push   $0x2a
f010909a:	eb 1e                	jmp    f01090ba <_alltraps>

f010909c <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010909c:	6a 00                	push   $0x0
f010909e:	6a 2b                	push   $0x2b
f01090a0:	eb 18                	jmp    f01090ba <_alltraps>

f01090a2 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f01090a2:	6a 00                	push   $0x0
f01090a4:	6a 2c                	push   $0x2c
f01090a6:	eb 12                	jmp    f01090ba <_alltraps>

f01090a8 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f01090a8:	6a 00                	push   $0x0
f01090aa:	6a 2d                	push   $0x2d
f01090ac:	eb 0c                	jmp    f01090ba <_alltraps>

f01090ae <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f01090ae:	6a 00                	push   $0x0
f01090b0:	6a 2e                	push   $0x2e
f01090b2:	eb 06                	jmp    f01090ba <_alltraps>

f01090b4 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f01090b4:	6a 00                	push   $0x0
f01090b6:	6a 2f                	push   $0x2f
f01090b8:	eb 00                	jmp    f01090ba <_alltraps>

f01090ba <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds 
f01090ba:	1e                   	push   %ds
push %es 
f01090bb:	06                   	push   %es
pushal 	
f01090bc:	60                   	pusha  

mov $(GD_KD), %ax 
f01090bd:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f01090c1:	8e d8                	mov    %eax,%ds
mov %ax,%es
f01090c3:	8e c0                	mov    %eax,%es

push %esp
f01090c5:	54                   	push   %esp

call trap
f01090c6:	e8 e2 f4 ff ff       	call   f01085ad <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at 
f01090cb:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal 	
f01090cc:	61                   	popa   
pop %es 
f01090cd:	07                   	pop    %es
pop %ds    
f01090ce:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f01090cf:	83 c4 08             	add    $0x8,%esp

iret
f01090d2:	cf                   	iret   

f01090d3 <isSchedMethodRR>:
extern inline void pd_set_table_unused(struct Env *e, uint32 virtual_address);
extern inline void pd_clear_page_dir_entry(struct Env *e, uint32 virtual_address);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f01090d3:	55                   	push   %ebp
f01090d4:	89 e5                	mov    %esp,%ebp
f01090d6:	a1 a4 28 7e f0       	mov    0xf07e28a4,%eax
f01090db:	85 c0                	test   %eax,%eax
f01090dd:	75 07                	jne    f01090e6 <isSchedMethodRR+0x13>
f01090df:	b8 01 00 00 00       	mov    $0x1,%eax
f01090e4:	eb 05                	jmp    f01090eb <isSchedMethodRR+0x18>
f01090e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01090eb:	5d                   	pop    %ebp
f01090ec:	c3                   	ret    

f01090ed <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f01090ed:	55                   	push   %ebp
f01090ee:	89 e5                	mov    %esp,%ebp
f01090f0:	a1 a4 28 7e f0       	mov    0xf07e28a4,%eax
f01090f5:	83 f8 01             	cmp    $0x1,%eax
f01090f8:	75 07                	jne    f0109101 <isSchedMethodMLFQ+0x14>
f01090fa:	b8 01 00 00 00       	mov    $0x1,%eax
f01090ff:	eb 05                	jmp    f0109106 <isSchedMethodMLFQ+0x19>
f0109101:	b8 00 00 00 00       	mov    $0x0,%eax
f0109106:	5d                   	pop    %ebp
f0109107:	c3                   	ret    

f0109108 <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f0109108:	55                   	push   %ebp
f0109109:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f010910b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010910f:	74 1d                	je     f010912e <init_queue+0x26>
	{
		LIST_INIT(queue);
f0109111:	8b 45 08             	mov    0x8(%ebp),%eax
f0109114:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010911a:	8b 45 08             	mov    0x8(%ebp),%eax
f010911d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0109124:	8b 45 08             	mov    0x8(%ebp),%eax
f0109127:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f010912e:	90                   	nop
f010912f:	5d                   	pop    %ebp
f0109130:	c3                   	ret    

f0109131 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f0109131:	55                   	push   %ebp
f0109132:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0109134:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109138:	74 08                	je     f0109142 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f010913a:	8b 45 08             	mov    0x8(%ebp),%eax
f010913d:	8b 40 0c             	mov    0xc(%eax),%eax
f0109140:	eb 05                	jmp    f0109147 <queue_size+0x16>
	}
	else
	{
		return 0;
f0109142:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0109147:	5d                   	pop    %ebp
f0109148:	c3                   	ret    

f0109149 <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0109149:	55                   	push   %ebp
f010914a:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f010914c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0109150:	74 4c                	je     f010919e <enqueue+0x55>
	{
		LIST_INSERT_HEAD(queue, env);
f0109152:	8b 45 08             	mov    0x8(%ebp),%eax
f0109155:	8b 10                	mov    (%eax),%edx
f0109157:	8b 45 0c             	mov    0xc(%ebp),%eax
f010915a:	89 50 44             	mov    %edx,0x44(%eax)
f010915d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109160:	8b 40 44             	mov    0x44(%eax),%eax
f0109163:	85 c0                	test   %eax,%eax
f0109165:	74 0d                	je     f0109174 <enqueue+0x2b>
f0109167:	8b 45 08             	mov    0x8(%ebp),%eax
f010916a:	8b 00                	mov    (%eax),%eax
f010916c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010916f:	89 50 48             	mov    %edx,0x48(%eax)
f0109172:	eb 09                	jmp    f010917d <enqueue+0x34>
f0109174:	8b 45 08             	mov    0x8(%ebp),%eax
f0109177:	8b 55 0c             	mov    0xc(%ebp),%edx
f010917a:	89 50 04             	mov    %edx,0x4(%eax)
f010917d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109180:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109183:	89 10                	mov    %edx,(%eax)
f0109185:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109188:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010918f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109192:	8b 40 0c             	mov    0xc(%eax),%eax
f0109195:	8d 50 01             	lea    0x1(%eax),%edx
f0109198:	8b 45 08             	mov    0x8(%ebp),%eax
f010919b:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f010919e:	90                   	nop
f010919f:	5d                   	pop    %ebp
f01091a0:	c3                   	ret    

f01091a1 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f01091a1:	55                   	push   %ebp
f01091a2:	89 e5                	mov    %esp,%ebp
f01091a4:	83 ec 10             	sub    $0x10,%esp
	struct Env* envItem = LIST_LAST(queue);
f01091a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01091aa:	8b 40 04             	mov    0x4(%eax),%eax
f01091ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (envItem != NULL)
f01091b0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01091b4:	74 70                	je     f0109226 <dequeue+0x85>
	{
		LIST_REMOVE(queue, envItem);
f01091b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091b9:	8b 40 44             	mov    0x44(%eax),%eax
f01091bc:	85 c0                	test   %eax,%eax
f01091be:	74 11                	je     f01091d1 <dequeue+0x30>
f01091c0:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091c3:	8b 40 44             	mov    0x44(%eax),%eax
f01091c6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01091c9:	8b 52 48             	mov    0x48(%edx),%edx
f01091cc:	89 50 48             	mov    %edx,0x48(%eax)
f01091cf:	eb 0c                	jmp    f01091dd <dequeue+0x3c>
f01091d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091d4:	8b 50 48             	mov    0x48(%eax),%edx
f01091d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01091da:	89 50 04             	mov    %edx,0x4(%eax)
f01091dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091e0:	8b 40 48             	mov    0x48(%eax),%eax
f01091e3:	85 c0                	test   %eax,%eax
f01091e5:	74 11                	je     f01091f8 <dequeue+0x57>
f01091e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091ea:	8b 40 48             	mov    0x48(%eax),%eax
f01091ed:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01091f0:	8b 52 44             	mov    0x44(%edx),%edx
f01091f3:	89 50 44             	mov    %edx,0x44(%eax)
f01091f6:	eb 0b                	jmp    f0109203 <dequeue+0x62>
f01091f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01091fb:	8b 50 44             	mov    0x44(%eax),%edx
f01091fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0109201:	89 10                	mov    %edx,(%eax)
f0109203:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0109206:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010920d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0109210:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109217:	8b 45 08             	mov    0x8(%ebp),%eax
f010921a:	8b 40 0c             	mov    0xc(%eax),%eax
f010921d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109220:	8b 45 08             	mov    0x8(%ebp),%eax
f0109223:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f0109226:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0109229:	c9                   	leave  
f010922a:	c3                   	ret    

f010922b <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f010922b:	55                   	push   %ebp
f010922c:	89 e5                	mov    %esp,%ebp
	if (e != NULL)
f010922e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0109232:	74 70                	je     f01092a4 <remove_from_queue+0x79>
	{
		LIST_REMOVE(queue, e);
f0109234:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109237:	8b 40 44             	mov    0x44(%eax),%eax
f010923a:	85 c0                	test   %eax,%eax
f010923c:	74 11                	je     f010924f <remove_from_queue+0x24>
f010923e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109241:	8b 40 44             	mov    0x44(%eax),%eax
f0109244:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109247:	8b 52 48             	mov    0x48(%edx),%edx
f010924a:	89 50 48             	mov    %edx,0x48(%eax)
f010924d:	eb 0c                	jmp    f010925b <remove_from_queue+0x30>
f010924f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109252:	8b 50 48             	mov    0x48(%eax),%edx
f0109255:	8b 45 08             	mov    0x8(%ebp),%eax
f0109258:	89 50 04             	mov    %edx,0x4(%eax)
f010925b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010925e:	8b 40 48             	mov    0x48(%eax),%eax
f0109261:	85 c0                	test   %eax,%eax
f0109263:	74 11                	je     f0109276 <remove_from_queue+0x4b>
f0109265:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109268:	8b 40 48             	mov    0x48(%eax),%eax
f010926b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010926e:	8b 52 44             	mov    0x44(%edx),%edx
f0109271:	89 50 44             	mov    %edx,0x44(%eax)
f0109274:	eb 0b                	jmp    f0109281 <remove_from_queue+0x56>
f0109276:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109279:	8b 50 44             	mov    0x44(%eax),%edx
f010927c:	8b 45 08             	mov    0x8(%ebp),%eax
f010927f:	89 10                	mov    %edx,(%eax)
f0109281:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109284:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010928b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010928e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109295:	8b 45 08             	mov    0x8(%ebp),%eax
f0109298:	8b 40 0c             	mov    0xc(%eax),%eax
f010929b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010929e:	8b 45 08             	mov    0x8(%ebp),%eax
f01092a1:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f01092a4:	90                   	nop
f01092a5:	5d                   	pop    %ebp
f01092a6:	c3                   	ret    

f01092a7 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f01092a7:	55                   	push   %ebp
f01092a8:	89 e5                	mov    %esp,%ebp
f01092aa:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f01092ad:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f01092b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b7:	8b 00                	mov    (%eax),%eax
f01092b9:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01092bc:	eb 19                	jmp    f01092d7 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f01092be:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01092c1:	8b 40 4c             	mov    0x4c(%eax),%eax
f01092c4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01092c7:	75 05                	jne    f01092ce <find_env_in_queue+0x27>
		{
			return ptr_env;
f01092c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01092cc:	eb 37                	jmp    f0109305 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01092ce:	8b 45 08             	mov    0x8(%ebp),%eax
f01092d1:	8b 40 08             	mov    0x8(%eax),%eax
f01092d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01092d7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01092db:	74 08                	je     f01092e5 <find_env_in_queue+0x3e>
f01092dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01092e0:	8b 40 44             	mov    0x44(%eax),%eax
f01092e3:	eb 05                	jmp    f01092ea <find_env_in_queue+0x43>
f01092e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01092ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01092ed:	89 42 08             	mov    %eax,0x8(%edx)
f01092f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01092f3:	8b 40 08             	mov    0x8(%eax),%eax
f01092f6:	85 c0                	test   %eax,%eax
f01092f8:	75 c4                	jne    f01092be <find_env_in_queue+0x17>
f01092fa:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01092fe:	75 be                	jne    f01092be <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f0109300:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109305:	c9                   	leave  
f0109306:	c3                   	ret    

f0109307 <sched_init_MLFQ>:
//==================================================================================//
//============================= NOT REQUIRED FUNCTIONS =================================//
//==================================================================================//

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0109307:	55                   	push   %ebp
f0109308:	89 e5                	mov    %esp,%ebp
f010930a:	83 ec 18             	sub    $0x18,%esp
f010930d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109310:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0109313:	e8 f9 01 00 00       	call   f0109511 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f0109318:	c7 05 ac 28 7e f0 00 	movl   $0x0,0xf07e28ac
f010931f:	00 00 00 
	scheduler_method = SCH_MLFQ;
f0109322:	c7 05 a4 28 7e f0 01 	movl   $0x1,0xf07e28a4
f0109329:	00 00 00 
	//=========================================
	//=========================================
	panic("This function is not required");
f010932c:	83 ec 04             	sub    $0x4,%esp
f010932f:	68 b0 11 12 f0       	push   $0xf01211b0
f0109334:	6a 64                	push   $0x64
f0109336:	68 ce 11 12 f0       	push   $0xf01211ce
f010933b:	e8 6f 6e ff ff       	call   f01001af <_panic>

f0109340 <fos_scheduler_MLFQ>:
}

struct Env* fos_scheduler_MLFQ()
{
f0109340:	55                   	push   %ebp
f0109341:	89 e5                	mov    %esp,%ebp
f0109343:	83 ec 08             	sub    $0x8,%esp
	panic("This function is not required");
f0109346:	83 ec 04             	sub    $0x4,%esp
f0109349:	68 b0 11 12 f0       	push   $0xf01211b0
f010934e:	6a 69                	push   $0x69
f0109350:	68 ce 11 12 f0       	push   $0xf01211ce
f0109355:	e8 55 6e ff ff       	call   f01001af <_panic>

f010935a <fos_scheduler>:



void
fos_scheduler(void)
{
f010935a:	55                   	push   %ebp
f010935b:	89 e5                	mov    %esp,%ebp
f010935d:	83 ec 18             	sub    $0x18,%esp

	chk1();
f0109360:	e8 60 1b 01 00       	call   f011aec5 <chk1>
	scheduler_status = SCH_STARTED;
f0109365:	c7 05 ac 28 7e f0 01 	movl   $0x1,0xf07e28ac
f010936c:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f010936f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f0109376:	a1 a4 28 7e f0       	mov    0xf07e28a4,%eax
f010937b:	85 c0                	test   %eax,%eax
f010937d:	75 4d                	jne    f01093cc <fos_scheduler+0x72>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f010937f:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0109384:	85 c0                	test   %eax,%eax
f0109386:	74 18                	je     f01093a0 <fos_scheduler+0x46>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0109388:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f010938e:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109393:	83 ec 08             	sub    $0x8,%esp
f0109396:	52                   	push   %edx
f0109397:	50                   	push   %eax
f0109398:	e8 ac fd ff ff       	call   f0109149 <enqueue>
f010939d:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f01093a0:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f01093a5:	83 ec 0c             	sub    $0xc,%esp
f01093a8:	50                   	push   %eax
f01093a9:	e8 f3 fd ff ff       	call   f01091a1 <dequeue>
f01093ae:	83 c4 10             	add    $0x10,%esp
f01093b1:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f01093b4:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f01093b9:	8a 00                	mov    (%eax),%al
f01093bb:	0f b6 c0             	movzbl %al,%eax
f01093be:	83 ec 0c             	sub    $0xc,%esp
f01093c1:	50                   	push   %eax
f01093c2:	e8 c1 da ff ff       	call   f0106e88 <kclock_set_quantum>
f01093c7:	83 c4 10             	add    $0x10,%esp
f01093ca:	eb 12                	jmp    f01093de <fos_scheduler+0x84>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f01093cc:	a1 a4 28 7e f0       	mov    0xf07e28a4,%eax
f01093d1:	83 f8 01             	cmp    $0x1,%eax
f01093d4:	75 08                	jne    f01093de <fos_scheduler+0x84>
	{
		next_env = fos_scheduler_MLFQ();
f01093d6:	e8 65 ff ff ff       	call   f0109340 <fos_scheduler_MLFQ>
f01093db:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f01093de:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f01093e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f01093e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01093e9:	a3 90 1f 7e f0       	mov    %eax,0xf07e1f90
	chk2(next_env);
f01093ee:	83 ec 0c             	sub    $0xc,%esp
f01093f1:	ff 75 f4             	pushl  -0xc(%ebp)
f01093f4:	e8 09 1b 01 00       	call   f011af02 <chk2>
f01093f9:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f01093fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01093ff:	a3 90 1f 7e f0       	mov    %eax,0xf07e1f90

	//cprintf("Scheduler select program '%s'\n", next_env->prog_name);
	if(next_env != NULL)
f0109404:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109408:	74 0b                	je     f0109415 <fos_scheduler+0xbb>
	{
		env_run(next_env);
f010940a:	83 ec 0c             	sub    $0xc,%esp
f010940d:	ff 75 f4             	pushl  -0xc(%ebp)
f0109410:	e8 ab cf ff ff       	call   f01063c0 <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f0109415:	c7 05 90 1f 7e f0 00 	movl   $0x0,0xf07e1f90
f010941c:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010941f:	a1 38 0d 80 f0       	mov    0xf0800d38,%eax
f0109424:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109427:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010942a:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f010942d:	c7 05 ac 28 7e f0 00 	movl   $0x0,0xf07e28ac
f0109434:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f0109437:	83 ec 0c             	sub    $0xc,%esp
f010943a:	6a 00                	push   $0x0
f010943c:	e8 ec 83 ff ff       	call   f010182d <run_command_prompt>
f0109441:	83 c4 10             	add    $0x10,%esp
f0109444:	eb f1                	jmp    f0109437 <fos_scheduler+0xdd>

f0109446 <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f0109446:	55                   	push   %ebp
f0109447:	89 e5                	mov    %esp,%ebp
f0109449:	83 ec 18             	sub    $0x18,%esp
f010944c:	8b 45 08             	mov    0x8(%ebp),%eax
f010944f:	88 45 f4             	mov    %al,-0xc(%ebp)
	sched_delete_ready_queues();
f0109452:	e8 ba 00 00 00       	call   f0109511 <sched_delete_ready_queues>
	scheduler_status = SCH_STOPPED;
f0109457:	c7 05 ac 28 7e f0 00 	movl   $0x0,0xf07e28ac
f010945e:	00 00 00 
	scheduler_method = SCH_RR;
f0109461:	c7 05 a4 28 7e f0 00 	movl   $0x0,0xf07e28a4
f0109468:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f010946b:	c6 05 b4 28 7e f0 01 	movb   $0x1,0xf07e28b4
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
f0109472:	83 ec 0c             	sub    $0xc,%esp
f0109475:	6a 10                	push   $0x10
f0109477:	e8 19 3a 00 00       	call   f010ce95 <kmalloc>
f010947c:	83 c4 10             	add    $0x10,%esp
f010947f:	a3 58 28 7e f0       	mov    %eax,0xf07e2858
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
f0109484:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0109489:	0f b6 c0             	movzbl %al,%eax
f010948c:	83 ec 0c             	sub    $0xc,%esp
f010948f:	50                   	push   %eax
f0109490:	e8 00 3a 00 00       	call   f010ce95 <kmalloc>
f0109495:	83 c4 10             	add    $0x10,%esp
f0109498:	a3 84 28 7e f0       	mov    %eax,0xf07e2884
	quantums[0] = quantum;
f010949d:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f01094a2:	8a 55 f4             	mov    -0xc(%ebp),%dl
f01094a5:	88 10                	mov    %dl,(%eax)
	kclock_set_quantum(quantums[0]);
f01094a7:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f01094ac:	8a 00                	mov    (%eax),%al
f01094ae:	0f b6 c0             	movzbl %al,%eax
f01094b1:	83 ec 0c             	sub    $0xc,%esp
f01094b4:	50                   	push   %eax
f01094b5:	e8 ce d9 ff ff       	call   f0106e88 <kclock_set_quantum>
f01094ba:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f01094bd:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f01094c2:	83 ec 0c             	sub    $0xc,%esp
f01094c5:	50                   	push   %eax
f01094c6:	e8 3d fc ff ff       	call   f0109108 <init_queue>
f01094cb:	83 c4 10             	add    $0x10,%esp
}
f01094ce:	90                   	nop
f01094cf:	c9                   	leave  
f01094d0:	c3                   	ret    

f01094d1 <sched_init>:



void sched_init()
{
f01094d1:	55                   	push   %ebp
f01094d2:	89 e5                	mov    %esp,%ebp
f01094d4:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f01094d7:	c7 05 74 28 7e f0 00 	movl   $0x0,0xf07e2874
f01094de:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f01094e1:	83 ec 0c             	sub    $0xc,%esp
f01094e4:	6a 0a                	push   $0xa
f01094e6:	e8 5b ff ff ff       	call   f0109446 <sched_init_RR>
f01094eb:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f01094ee:	83 ec 0c             	sub    $0xc,%esp
f01094f1:	68 94 28 7e f0       	push   $0xf07e2894
f01094f6:	e8 0d fc ff ff       	call   f0109108 <init_queue>
f01094fb:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f01094fe:	83 ec 0c             	sub    $0xc,%esp
f0109501:	68 64 28 7e f0       	push   $0xf07e2864
f0109506:	e8 fd fb ff ff       	call   f0109108 <init_queue>
f010950b:	83 c4 10             	add    $0x10,%esp
}
f010950e:	90                   	nop
f010950f:	c9                   	leave  
f0109510:	c3                   	ret    

f0109511 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0109511:	55                   	push   %ebp
f0109512:	89 e5                	mov    %esp,%ebp
f0109514:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
f0109517:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010951c:	85 c0                	test   %eax,%eax
f010951e:	74 11                	je     f0109531 <sched_delete_ready_queues+0x20>
		kfree(env_ready_queues);
f0109520:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109525:	83 ec 0c             	sub    $0xc,%esp
f0109528:	50                   	push   %eax
f0109529:	e8 b2 39 00 00       	call   f010cee0 <kfree>
f010952e:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
f0109531:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f0109536:	85 c0                	test   %eax,%eax
f0109538:	74 11                	je     f010954b <sched_delete_ready_queues+0x3a>
	kfree(quantums);
f010953a:	a1 84 28 7e f0       	mov    0xf07e2884,%eax
f010953f:	83 ec 0c             	sub    $0xc,%esp
f0109542:	50                   	push   %eax
f0109543:	e8 98 39 00 00       	call   f010cee0 <kfree>
f0109548:	83 c4 10             	add    $0x10,%esp
}
f010954b:	90                   	nop
f010954c:	c9                   	leave  
f010954d:	c3                   	ret    

f010954e <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f010954e:	55                   	push   %ebp
f010954f:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0109551:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109555:	74 1b                	je     f0109572 <sched_insert_ready+0x24>
	{
		env->env_status = ENV_READY ;
f0109557:	8b 45 08             	mov    0x8(%ebp),%eax
f010955a:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f0109561:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109566:	ff 75 08             	pushl  0x8(%ebp)
f0109569:	50                   	push   %eax
f010956a:	e8 da fb ff ff       	call   f0109149 <enqueue>
f010956f:	83 c4 08             	add    $0x8,%esp
	}
}
f0109572:	90                   	nop
f0109573:	c9                   	leave  
f0109574:	c3                   	ret    

f0109575 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f0109575:	55                   	push   %ebp
f0109576:	89 e5                	mov    %esp,%ebp
f0109578:	83 ec 10             	sub    $0x10,%esp
	if(env != NULL)
f010957b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010957f:	0f 84 e1 00 00 00    	je     f0109666 <sched_remove_ready+0xf1>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010958c:	e9 c4 00 00 00       	jmp    f0109655 <sched_remove_ready+0xe0>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0109591:	8b 45 08             	mov    0x8(%ebp),%eax
f0109594:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109597:	89 c2                	mov    %eax,%edx
f0109599:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010959e:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01095a1:	c1 e1 04             	shl    $0x4,%ecx
f01095a4:	01 c8                	add    %ecx,%eax
f01095a6:	52                   	push   %edx
f01095a7:	50                   	push   %eax
f01095a8:	e8 fa fc ff ff       	call   f01092a7 <find_env_in_queue>
f01095ad:	83 c4 08             	add    $0x8,%esp
f01095b0:	89 45 f8             	mov    %eax,-0x8(%ebp)
			if (ptr_env != NULL)
f01095b3:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f01095b7:	0f 84 95 00 00 00    	je     f0109652 <sched_remove_ready+0xdd>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f01095bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01095c0:	8b 40 44             	mov    0x44(%eax),%eax
f01095c3:	85 c0                	test   %eax,%eax
f01095c5:	74 11                	je     f01095d8 <sched_remove_ready+0x63>
f01095c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01095ca:	8b 40 44             	mov    0x44(%eax),%eax
f01095cd:	8b 55 08             	mov    0x8(%ebp),%edx
f01095d0:	8b 52 48             	mov    0x48(%edx),%edx
f01095d3:	89 50 48             	mov    %edx,0x48(%eax)
f01095d6:	eb 16                	jmp    f01095ee <sched_remove_ready+0x79>
f01095d8:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f01095dd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01095e0:	c1 e2 04             	shl    $0x4,%edx
f01095e3:	01 c2                	add    %eax,%edx
f01095e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01095e8:	8b 40 48             	mov    0x48(%eax),%eax
f01095eb:	89 42 04             	mov    %eax,0x4(%edx)
f01095ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01095f1:	8b 40 48             	mov    0x48(%eax),%eax
f01095f4:	85 c0                	test   %eax,%eax
f01095f6:	74 11                	je     f0109609 <sched_remove_ready+0x94>
f01095f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01095fb:	8b 40 48             	mov    0x48(%eax),%eax
f01095fe:	8b 55 08             	mov    0x8(%ebp),%edx
f0109601:	8b 52 44             	mov    0x44(%edx),%edx
f0109604:	89 50 44             	mov    %edx,0x44(%eax)
f0109607:	eb 15                	jmp    f010961e <sched_remove_ready+0xa9>
f0109609:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010960e:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0109611:	c1 e2 04             	shl    $0x4,%edx
f0109614:	01 c2                	add    %eax,%edx
f0109616:	8b 45 08             	mov    0x8(%ebp),%eax
f0109619:	8b 40 44             	mov    0x44(%eax),%eax
f010961c:	89 02                	mov    %eax,(%edx)
f010961e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109621:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109628:	8b 45 08             	mov    0x8(%ebp),%eax
f010962b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109632:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109637:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010963a:	c1 e2 04             	shl    $0x4,%edx
f010963d:	01 d0                	add    %edx,%eax
f010963f:	8b 50 0c             	mov    0xc(%eax),%edx
f0109642:	4a                   	dec    %edx
f0109643:	89 50 0c             	mov    %edx,0xc(%eax)
				env->env_status = ENV_UNKNOWN;
f0109646:	8b 45 08             	mov    0x8(%ebp),%eax
f0109649:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f0109650:	eb 14                	jmp    f0109666 <sched_remove_ready+0xf1>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109652:	ff 45 fc             	incl   -0x4(%ebp)
f0109655:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010965a:	0f b6 c0             	movzbl %al,%eax
f010965d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0109660:	0f 8f 2b ff ff ff    	jg     f0109591 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f0109666:	c9                   	leave  
f0109667:	c3                   	ret    

f0109668 <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f0109668:	55                   	push   %ebp
f0109669:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f010966b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010966f:	74 1a                	je     f010968b <sched_insert_new+0x23>
	{
		env->env_status = ENV_NEW ;
f0109671:	8b 45 08             	mov    0x8(%ebp),%eax
f0109674:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f010967b:	ff 75 08             	pushl  0x8(%ebp)
f010967e:	68 94 28 7e f0       	push   $0xf07e2894
f0109683:	e8 c1 fa ff ff       	call   f0109149 <enqueue>
f0109688:	83 c4 08             	add    $0x8,%esp
	}
}
f010968b:	90                   	nop
f010968c:	c9                   	leave  
f010968d:	c3                   	ret    

f010968e <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f010968e:	55                   	push   %ebp
f010968f:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0109691:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109695:	74 75                	je     f010970c <sched_remove_new+0x7e>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0109697:	8b 45 08             	mov    0x8(%ebp),%eax
f010969a:	8b 40 44             	mov    0x44(%eax),%eax
f010969d:	85 c0                	test   %eax,%eax
f010969f:	74 11                	je     f01096b2 <sched_remove_new+0x24>
f01096a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a4:	8b 40 44             	mov    0x44(%eax),%eax
f01096a7:	8b 55 08             	mov    0x8(%ebp),%edx
f01096aa:	8b 52 48             	mov    0x48(%edx),%edx
f01096ad:	89 50 48             	mov    %edx,0x48(%eax)
f01096b0:	eb 0b                	jmp    f01096bd <sched_remove_new+0x2f>
f01096b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01096b5:	8b 40 48             	mov    0x48(%eax),%eax
f01096b8:	a3 98 28 7e f0       	mov    %eax,0xf07e2898
f01096bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01096c0:	8b 40 48             	mov    0x48(%eax),%eax
f01096c3:	85 c0                	test   %eax,%eax
f01096c5:	74 11                	je     f01096d8 <sched_remove_new+0x4a>
f01096c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01096ca:	8b 40 48             	mov    0x48(%eax),%eax
f01096cd:	8b 55 08             	mov    0x8(%ebp),%edx
f01096d0:	8b 52 44             	mov    0x44(%edx),%edx
f01096d3:	89 50 44             	mov    %edx,0x44(%eax)
f01096d6:	eb 0b                	jmp    f01096e3 <sched_remove_new+0x55>
f01096d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01096db:	8b 40 44             	mov    0x44(%eax),%eax
f01096de:	a3 94 28 7e f0       	mov    %eax,0xf07e2894
f01096e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01096e6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01096ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01096f0:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01096f7:	a1 a0 28 7e f0       	mov    0xf07e28a0,%eax
f01096fc:	48                   	dec    %eax
f01096fd:	a3 a0 28 7e f0       	mov    %eax,0xf07e28a0
		env->env_status = ENV_UNKNOWN;
f0109702:	8b 45 08             	mov    0x8(%ebp),%eax
f0109705:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f010970c:	90                   	nop
f010970d:	5d                   	pop    %ebp
f010970e:	c3                   	ret    

f010970f <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f010970f:	55                   	push   %ebp
f0109710:	89 e5                	mov    %esp,%ebp
f0109712:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0109715:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109719:	74 34                	je     f010974f <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f010971b:	e8 d4 f0 ff ff       	call   f01087f4 <isBufferingEnabled>
f0109720:	85 c0                	test   %eax,%eax
f0109722:	74 0e                	je     f0109732 <sched_insert_exit+0x23>
f0109724:	83 ec 0c             	sub    $0xc,%esp
f0109727:	ff 75 08             	pushl  0x8(%ebp)
f010972a:	e8 96 d4 ff ff       	call   f0106bc5 <cleanup_buffers>
f010972f:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0109732:	8b 45 08             	mov    0x8(%ebp),%eax
f0109735:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f010973c:	83 ec 08             	sub    $0x8,%esp
f010973f:	ff 75 08             	pushl  0x8(%ebp)
f0109742:	68 64 28 7e f0       	push   $0xf07e2864
f0109747:	e8 fd f9 ff ff       	call   f0109149 <enqueue>
f010974c:	83 c4 10             	add    $0x10,%esp
	}
}
f010974f:	90                   	nop
f0109750:	c9                   	leave  
f0109751:	c3                   	ret    

f0109752 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0109752:	55                   	push   %ebp
f0109753:	89 e5                	mov    %esp,%ebp
	if(env != NULL)
f0109755:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109759:	74 75                	je     f01097d0 <sched_remove_exit+0x7e>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f010975b:	8b 45 08             	mov    0x8(%ebp),%eax
f010975e:	8b 40 44             	mov    0x44(%eax),%eax
f0109761:	85 c0                	test   %eax,%eax
f0109763:	74 11                	je     f0109776 <sched_remove_exit+0x24>
f0109765:	8b 45 08             	mov    0x8(%ebp),%eax
f0109768:	8b 40 44             	mov    0x44(%eax),%eax
f010976b:	8b 55 08             	mov    0x8(%ebp),%edx
f010976e:	8b 52 48             	mov    0x48(%edx),%edx
f0109771:	89 50 48             	mov    %edx,0x48(%eax)
f0109774:	eb 0b                	jmp    f0109781 <sched_remove_exit+0x2f>
f0109776:	8b 45 08             	mov    0x8(%ebp),%eax
f0109779:	8b 40 48             	mov    0x48(%eax),%eax
f010977c:	a3 68 28 7e f0       	mov    %eax,0xf07e2868
f0109781:	8b 45 08             	mov    0x8(%ebp),%eax
f0109784:	8b 40 48             	mov    0x48(%eax),%eax
f0109787:	85 c0                	test   %eax,%eax
f0109789:	74 11                	je     f010979c <sched_remove_exit+0x4a>
f010978b:	8b 45 08             	mov    0x8(%ebp),%eax
f010978e:	8b 40 48             	mov    0x48(%eax),%eax
f0109791:	8b 55 08             	mov    0x8(%ebp),%edx
f0109794:	8b 52 44             	mov    0x44(%edx),%edx
f0109797:	89 50 44             	mov    %edx,0x44(%eax)
f010979a:	eb 0b                	jmp    f01097a7 <sched_remove_exit+0x55>
f010979c:	8b 45 08             	mov    0x8(%ebp),%eax
f010979f:	8b 40 44             	mov    0x44(%eax),%eax
f01097a2:	a3 64 28 7e f0       	mov    %eax,0xf07e2864
f01097a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01097aa:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01097b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01097b4:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01097bb:	a1 70 28 7e f0       	mov    0xf07e2870,%eax
f01097c0:	48                   	dec    %eax
f01097c1:	a3 70 28 7e f0       	mov    %eax,0xf07e2870
		env->env_status = ENV_UNKNOWN;
f01097c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01097c9:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01097d0:	90                   	nop
f01097d1:	5d                   	pop    %ebp
f01097d2:	c3                   	ret    

f01097d3 <sched_print_all>:

void sched_print_all()
{
f01097d3:	55                   	push   %ebp
f01097d4:	89 e5                	mov    %esp,%ebp
f01097d6:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f01097d9:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f01097de:	85 c0                	test   %eax,%eax
f01097e0:	74 6c                	je     f010984e <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f01097e2:	83 ec 0c             	sub    $0xc,%esp
f01097e5:	68 dc 11 12 f0       	push   $0xf01211dc
f01097ea:	e8 15 da ff ff       	call   f0107204 <cprintf>
f01097ef:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f01097f2:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f01097f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01097fa:	eb 29                	jmp    f0109825 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01097fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01097ff:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109805:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109808:	8b 40 4c             	mov    0x4c(%eax),%eax
f010980b:	83 ec 04             	sub    $0x4,%esp
f010980e:	52                   	push   %edx
f010980f:	50                   	push   %eax
f0109810:	68 fe 11 12 f0       	push   $0xf01211fe
f0109815:	e8 ea d9 ff ff       	call   f0107204 <cprintf>
f010981a:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f010981d:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109822:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109825:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109829:	74 08                	je     f0109833 <sched_print_all+0x60>
f010982b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010982e:	8b 40 44             	mov    0x44(%eax),%eax
f0109831:	eb 05                	jmp    f0109838 <sched_print_all+0x65>
f0109833:	b8 00 00 00 00       	mov    $0x0,%eax
f0109838:	a3 9c 28 7e f0       	mov    %eax,0xf07e289c
f010983d:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109842:	85 c0                	test   %eax,%eax
f0109844:	75 b6                	jne    f01097fc <sched_print_all+0x29>
f0109846:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010984a:	75 b0                	jne    f01097fc <sched_print_all+0x29>
f010984c:	eb 10                	jmp    f010985e <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f010984e:	83 ec 0c             	sub    $0xc,%esp
f0109851:	68 08 12 12 f0       	push   $0xf0121208
f0109856:	e8 a9 d9 ff ff       	call   f0107204 <cprintf>
f010985b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f010985e:	83 ec 0c             	sub    $0xc,%esp
f0109861:	68 24 12 12 f0       	push   $0xf0121224
f0109866:	e8 99 d9 ff ff       	call   f0107204 <cprintf>
f010986b:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010986e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109875:	e9 ca 00 00 00       	jmp    f0109944 <sched_print_all+0x171>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010987a:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010987f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109882:	c1 e2 04             	shl    $0x4,%edx
f0109885:	01 d0                	add    %edx,%eax
f0109887:	8b 00                	mov    (%eax),%eax
f0109889:	85 c0                	test   %eax,%eax
f010988b:	0f 84 8d 00 00 00    	je     f010991e <sched_print_all+0x14b>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0109891:	83 ec 08             	sub    $0x8,%esp
f0109894:	ff 75 f0             	pushl  -0x10(%ebp)
f0109897:	68 58 12 12 f0       	push   $0xf0121258
f010989c:	e8 63 d9 ff ff       	call   f0107204 <cprintf>
f01098a1:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01098a4:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f01098a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01098ac:	c1 e2 04             	shl    $0x4,%edx
f01098af:	01 d0                	add    %edx,%eax
f01098b1:	8b 00                	mov    (%eax),%eax
f01098b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01098b6:	eb 34                	jmp    f01098ec <sched_print_all+0x119>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f01098b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098bb:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f01098c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01098c4:	8b 40 4c             	mov    0x4c(%eax),%eax
f01098c7:	83 ec 04             	sub    $0x4,%esp
f01098ca:	52                   	push   %edx
f01098cb:	50                   	push   %eax
f01098cc:	68 fe 11 12 f0       	push   $0xf01211fe
f01098d1:	e8 2e d9 ff ff       	call   f0107204 <cprintf>
f01098d6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01098d9:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f01098de:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01098e1:	c1 e2 04             	shl    $0x4,%edx
f01098e4:	01 d0                	add    %edx,%eax
f01098e6:	8b 40 08             	mov    0x8(%eax),%eax
f01098e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01098ec:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f01098f1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01098f4:	c1 e2 04             	shl    $0x4,%edx
f01098f7:	01 d0                	add    %edx,%eax
f01098f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01098fd:	74 08                	je     f0109907 <sched_print_all+0x134>
f01098ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109902:	8b 52 44             	mov    0x44(%edx),%edx
f0109905:	eb 05                	jmp    f010990c <sched_print_all+0x139>
f0109907:	ba 00 00 00 00       	mov    $0x0,%edx
f010990c:	89 50 08             	mov    %edx,0x8(%eax)
f010990f:	8b 40 08             	mov    0x8(%eax),%eax
f0109912:	85 c0                	test   %eax,%eax
f0109914:	75 a2                	jne    f01098b8 <sched_print_all+0xe5>
f0109916:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010991a:	75 9c                	jne    f01098b8 <sched_print_all+0xe5>
f010991c:	eb 13                	jmp    f0109931 <sched_print_all+0x15e>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f010991e:	83 ec 08             	sub    $0x8,%esp
f0109921:	ff 75 f0             	pushl  -0x10(%ebp)
f0109924:	68 80 12 12 f0       	push   $0xf0121280
f0109929:	e8 d6 d8 ff ff       	call   f0107204 <cprintf>
f010992e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0109931:	83 ec 0c             	sub    $0xc,%esp
f0109934:	68 24 12 12 f0       	push   $0xf0121224
f0109939:	e8 c6 d8 ff ff       	call   f0107204 <cprintf>
f010993e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109941:	ff 45 f0             	incl   -0x10(%ebp)
f0109944:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0109949:	0f b6 c0             	movzbl %al,%eax
f010994c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010994f:	0f 8f 25 ff ff ff    	jg     f010987a <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0109955:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f010995a:	85 c0                	test   %eax,%eax
f010995c:	74 6c                	je     f01099ca <sched_print_all+0x1f7>
	{
		cprintf("The processes in EXIT queue are:\n");
f010995e:	83 ec 0c             	sub    $0xc,%esp
f0109961:	68 a4 12 12 f0       	push   $0xf01212a4
f0109966:	e8 99 d8 ff ff       	call   f0107204 <cprintf>
f010996b:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010996e:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f0109973:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109976:	eb 29                	jmp    f01099a1 <sched_print_all+0x1ce>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0109978:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010997b:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109984:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109987:	83 ec 04             	sub    $0x4,%esp
f010998a:	52                   	push   %edx
f010998b:	50                   	push   %eax
f010998c:	68 fe 11 12 f0       	push   $0xf01211fe
f0109991:	e8 6e d8 ff ff       	call   f0107204 <cprintf>
f0109996:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109999:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f010999e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01099a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099a5:	74 08                	je     f01099af <sched_print_all+0x1dc>
f01099a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01099aa:	8b 40 44             	mov    0x44(%eax),%eax
f01099ad:	eb 05                	jmp    f01099b4 <sched_print_all+0x1e1>
f01099af:	b8 00 00 00 00       	mov    $0x0,%eax
f01099b4:	a3 6c 28 7e f0       	mov    %eax,0xf07e286c
f01099b9:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f01099be:	85 c0                	test   %eax,%eax
f01099c0:	75 b6                	jne    f0109978 <sched_print_all+0x1a5>
f01099c2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01099c6:	75 b0                	jne    f0109978 <sched_print_all+0x1a5>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f01099c8:	eb 10                	jmp    f01099da <sched_print_all+0x207>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f01099ca:	83 ec 0c             	sub    $0xc,%esp
f01099cd:	68 c6 12 12 f0       	push   $0xf01212c6
f01099d2:	e8 2d d8 ff ff       	call   f0107204 <cprintf>
f01099d7:	83 c4 10             	add    $0x10,%esp
	}
}
f01099da:	90                   	nop
f01099db:	c9                   	leave  
f01099dc:	c3                   	ret    

f01099dd <sched_run_all>:

void sched_run_all()
{
f01099dd:	55                   	push   %ebp
f01099de:	89 e5                	mov    %esp,%ebp
f01099e0:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01099e3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01099ea:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f01099ef:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01099f2:	eb 1e                	jmp    f0109a12 <sched_run_all+0x35>
	{
		sched_remove_new(ptr_env);
f01099f4:	ff 75 f4             	pushl  -0xc(%ebp)
f01099f7:	e8 92 fc ff ff       	call   f010968e <sched_remove_new>
f01099fc:	83 c4 04             	add    $0x4,%esp
		sched_insert_ready(ptr_env);
f01099ff:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a02:	e8 47 fb ff ff       	call   f010954e <sched_insert_ready>
f0109a07:	83 c4 04             	add    $0x4,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109a0a:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109a0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a16:	74 08                	je     f0109a20 <sched_run_all+0x43>
f0109a18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a1b:	8b 40 44             	mov    0x44(%eax),%eax
f0109a1e:	eb 05                	jmp    f0109a25 <sched_run_all+0x48>
f0109a20:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a25:	a3 9c 28 7e f0       	mov    %eax,0xf07e289c
f0109a2a:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109a2f:	85 c0                	test   %eax,%eax
f0109a31:	75 c1                	jne    f01099f4 <sched_run_all+0x17>
f0109a33:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a37:	75 bb                	jne    f01099f4 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0109a39:	a1 ac 28 7e f0       	mov    0xf07e28ac,%eax
f0109a3e:	85 c0                	test   %eax,%eax
f0109a40:	75 05                	jne    f0109a47 <sched_run_all+0x6a>
		fos_scheduler();
f0109a42:	e8 13 f9 ff ff       	call   f010935a <fos_scheduler>
}
f0109a47:	90                   	nop
f0109a48:	c9                   	leave  
f0109a49:	c3                   	ret    

f0109a4a <sched_kill_all>:

void sched_kill_all()
{
f0109a4a:	55                   	push   %ebp
f0109a4b:	89 e5                	mov    %esp,%ebp
f0109a4d:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0109a50:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f0109a55:	85 c0                	test   %eax,%eax
f0109a57:	0f 84 98 00 00 00    	je     f0109af5 <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0109a5d:	83 ec 0c             	sub    $0xc,%esp
f0109a60:	68 e4 12 12 f0       	push   $0xf01212e4
f0109a65:	e8 9a d7 ff ff       	call   f0107204 <cprintf>
f0109a6a:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109a6d:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f0109a72:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109a75:	eb 55                	jmp    f0109acc <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109a77:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a7a:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a83:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109a86:	83 ec 04             	sub    $0x4,%esp
f0109a89:	52                   	push   %edx
f0109a8a:	50                   	push   %eax
f0109a8b:	68 10 13 12 f0       	push   $0xf0121310
f0109a90:	e8 6f d7 ff ff       	call   f0107204 <cprintf>
f0109a95:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0109a98:	83 ec 0c             	sub    $0xc,%esp
f0109a9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0109a9e:	e8 eb fb ff ff       	call   f010968e <sched_remove_new>
f0109aa3:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109aa6:	83 ec 0c             	sub    $0xc,%esp
f0109aa9:	ff 75 f4             	pushl  -0xc(%ebp)
f0109aac:	e8 34 ca ff ff       	call   f01064e5 <start_env_free>
f0109ab1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109ab4:	83 ec 0c             	sub    $0xc,%esp
f0109ab7:	68 23 13 12 f0       	push   $0xf0121323
f0109abc:	e8 43 d7 ff ff       	call   f0107204 <cprintf>
f0109ac1:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109ac4:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109ac9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109acc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109ad0:	74 08                	je     f0109ada <sched_kill_all+0x90>
f0109ad2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ad5:	8b 40 44             	mov    0x44(%eax),%eax
f0109ad8:	eb 05                	jmp    f0109adf <sched_kill_all+0x95>
f0109ada:	b8 00 00 00 00       	mov    $0x0,%eax
f0109adf:	a3 9c 28 7e f0       	mov    %eax,0xf07e289c
f0109ae4:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109ae9:	85 c0                	test   %eax,%eax
f0109aeb:	75 8a                	jne    f0109a77 <sched_kill_all+0x2d>
f0109aed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109af1:	75 84                	jne    f0109a77 <sched_kill_all+0x2d>
f0109af3:	eb 10                	jmp    f0109b05 <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0109af5:	83 ec 0c             	sub    $0xc,%esp
f0109af8:	68 29 13 12 f0       	push   $0xf0121329
f0109afd:	e8 02 d7 ff ff       	call   f0107204 <cprintf>
f0109b02:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0109b05:	83 ec 0c             	sub    $0xc,%esp
f0109b08:	68 24 12 12 f0       	push   $0xf0121224
f0109b0d:	e8 f2 d6 ff ff       	call   f0107204 <cprintf>
f0109b12:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109b15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109b1c:	e9 7c 01 00 00       	jmp    f0109c9d <sched_kill_all+0x253>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109b21:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109b26:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b29:	c1 e2 04             	shl    $0x4,%edx
f0109b2c:	01 d0                	add    %edx,%eax
f0109b2e:	8b 00                	mov    (%eax),%eax
f0109b30:	85 c0                	test   %eax,%eax
f0109b32:	0f 84 3f 01 00 00    	je     f0109c77 <sched_kill_all+0x22d>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0109b38:	83 ec 08             	sub    $0x8,%esp
f0109b3b:	ff 75 f0             	pushl  -0x10(%ebp)
f0109b3e:	68 44 13 12 f0       	push   $0xf0121344
f0109b43:	e8 bc d6 ff ff       	call   f0107204 <cprintf>
f0109b48:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109b4b:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109b50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109b53:	c1 e2 04             	shl    $0x4,%edx
f0109b56:	01 d0                	add    %edx,%eax
f0109b58:	8b 00                	mov    (%eax),%eax
f0109b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109b5d:	e9 db 00 00 00       	jmp    f0109c3d <sched_kill_all+0x1f3>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b65:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109b6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b6e:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109b71:	83 ec 04             	sub    $0x4,%esp
f0109b74:	52                   	push   %edx
f0109b75:	50                   	push   %eax
f0109b76:	68 10 13 12 f0       	push   $0xf0121310
f0109b7b:	e8 84 d6 ff ff       	call   f0107204 <cprintf>
f0109b80:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109b83:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b86:	8b 40 44             	mov    0x44(%eax),%eax
f0109b89:	85 c0                	test   %eax,%eax
f0109b8b:	74 11                	je     f0109b9e <sched_kill_all+0x154>
f0109b8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b90:	8b 40 44             	mov    0x44(%eax),%eax
f0109b93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109b96:	8b 52 48             	mov    0x48(%edx),%edx
f0109b99:	89 50 48             	mov    %edx,0x48(%eax)
f0109b9c:	eb 16                	jmp    f0109bb4 <sched_kill_all+0x16a>
f0109b9e:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109ba3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109ba6:	c1 e2 04             	shl    $0x4,%edx
f0109ba9:	01 c2                	add    %eax,%edx
f0109bab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bae:	8b 40 48             	mov    0x48(%eax),%eax
f0109bb1:	89 42 04             	mov    %eax,0x4(%edx)
f0109bb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bb7:	8b 40 48             	mov    0x48(%eax),%eax
f0109bba:	85 c0                	test   %eax,%eax
f0109bbc:	74 11                	je     f0109bcf <sched_kill_all+0x185>
f0109bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bc1:	8b 40 48             	mov    0x48(%eax),%eax
f0109bc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109bc7:	8b 52 44             	mov    0x44(%edx),%edx
f0109bca:	89 50 44             	mov    %edx,0x44(%eax)
f0109bcd:	eb 15                	jmp    f0109be4 <sched_kill_all+0x19a>
f0109bcf:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109bd4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109bd7:	c1 e2 04             	shl    $0x4,%edx
f0109bda:	01 c2                	add    %eax,%edx
f0109bdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bdf:	8b 40 44             	mov    0x44(%eax),%eax
f0109be2:	89 02                	mov    %eax,(%edx)
f0109be4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109be7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109bf1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109bf8:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109bfd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109c00:	c1 e2 04             	shl    $0x4,%edx
f0109c03:	01 d0                	add    %edx,%eax
f0109c05:	8b 50 0c             	mov    0xc(%eax),%edx
f0109c08:	4a                   	dec    %edx
f0109c09:	89 50 0c             	mov    %edx,0xc(%eax)
				start_env_free(ptr_env);
f0109c0c:	83 ec 0c             	sub    $0xc,%esp
f0109c0f:	ff 75 f4             	pushl  -0xc(%ebp)
f0109c12:	e8 ce c8 ff ff       	call   f01064e5 <start_env_free>
f0109c17:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0109c1a:	83 ec 0c             	sub    $0xc,%esp
f0109c1d:	68 23 13 12 f0       	push   $0xf0121323
f0109c22:	e8 dd d5 ff ff       	call   f0107204 <cprintf>
f0109c27:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109c2a:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109c2f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109c32:	c1 e2 04             	shl    $0x4,%edx
f0109c35:	01 d0                	add    %edx,%eax
f0109c37:	8b 40 08             	mov    0x8(%eax),%eax
f0109c3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109c3d:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109c42:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109c45:	c1 e2 04             	shl    $0x4,%edx
f0109c48:	01 d0                	add    %edx,%eax
f0109c4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c4e:	74 08                	je     f0109c58 <sched_kill_all+0x20e>
f0109c50:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c53:	8b 52 44             	mov    0x44(%edx),%edx
f0109c56:	eb 05                	jmp    f0109c5d <sched_kill_all+0x213>
f0109c58:	ba 00 00 00 00       	mov    $0x0,%edx
f0109c5d:	89 50 08             	mov    %edx,0x8(%eax)
f0109c60:	8b 40 08             	mov    0x8(%eax),%eax
f0109c63:	85 c0                	test   %eax,%eax
f0109c65:	0f 85 f7 fe ff ff    	jne    f0109b62 <sched_kill_all+0x118>
f0109c6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109c6f:	0f 85 ed fe ff ff    	jne    f0109b62 <sched_kill_all+0x118>
f0109c75:	eb 13                	jmp    f0109c8a <sched_kill_all+0x240>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0109c77:	83 ec 08             	sub    $0x8,%esp
f0109c7a:	ff 75 f0             	pushl  -0x10(%ebp)
f0109c7d:	68 80 12 12 f0       	push   $0xf0121280
f0109c82:	e8 7d d5 ff ff       	call   f0107204 <cprintf>
f0109c87:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0109c8a:	83 ec 0c             	sub    $0xc,%esp
f0109c8d:	68 24 12 12 f0       	push   $0xf0121224
f0109c92:	e8 6d d5 ff ff       	call   f0107204 <cprintf>
f0109c97:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109c9a:	ff 45 f0             	incl   -0x10(%ebp)
f0109c9d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0109ca2:	0f b6 c0             	movzbl %al,%eax
f0109ca5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0109ca8:	0f 8f 73 fe ff ff    	jg     f0109b21 <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0109cae:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f0109cb3:	85 c0                	test   %eax,%eax
f0109cb5:	0f 84 98 00 00 00    	je     f0109d53 <sched_kill_all+0x309>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0109cbb:	83 ec 0c             	sub    $0xc,%esp
f0109cbe:	68 78 13 12 f0       	push   $0xf0121378
f0109cc3:	e8 3c d5 ff ff       	call   f0107204 <cprintf>
f0109cc8:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109ccb:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f0109cd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109cd3:	eb 55                	jmp    f0109d2a <sched_kill_all+0x2e0>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0109cd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109cd8:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f0109cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ce1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ce4:	83 ec 04             	sub    $0x4,%esp
f0109ce7:	52                   	push   %edx
f0109ce8:	50                   	push   %eax
f0109ce9:	68 10 13 12 f0       	push   $0xf0121310
f0109cee:	e8 11 d5 ff ff       	call   f0107204 <cprintf>
f0109cf3:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0109cf6:	83 ec 0c             	sub    $0xc,%esp
f0109cf9:	ff 75 f4             	pushl  -0xc(%ebp)
f0109cfc:	e8 51 fa ff ff       	call   f0109752 <sched_remove_exit>
f0109d01:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f0109d04:	83 ec 0c             	sub    $0xc,%esp
f0109d07:	ff 75 f4             	pushl  -0xc(%ebp)
f0109d0a:	e8 d6 c7 ff ff       	call   f01064e5 <start_env_free>
f0109d0f:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0109d12:	83 ec 0c             	sub    $0xc,%esp
f0109d15:	68 23 13 12 f0       	push   $0xf0121323
f0109d1a:	e8 e5 d4 ff ff       	call   f0107204 <cprintf>
f0109d1f:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0109d22:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f0109d27:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d2a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d2e:	74 08                	je     f0109d38 <sched_kill_all+0x2ee>
f0109d30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109d33:	8b 40 44             	mov    0x44(%eax),%eax
f0109d36:	eb 05                	jmp    f0109d3d <sched_kill_all+0x2f3>
f0109d38:	b8 00 00 00 00       	mov    $0x0,%eax
f0109d3d:	a3 6c 28 7e f0       	mov    %eax,0xf07e286c
f0109d42:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f0109d47:	85 c0                	test   %eax,%eax
f0109d49:	75 8a                	jne    f0109cd5 <sched_kill_all+0x28b>
f0109d4b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109d4f:	75 84                	jne    f0109cd5 <sched_kill_all+0x28b>
f0109d51:	eb 10                	jmp    f0109d63 <sched_kill_all+0x319>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0109d53:	83 ec 0c             	sub    $0xc,%esp
f0109d56:	68 c6 12 12 f0       	push   $0xf01212c6
f0109d5b:	e8 a4 d4 ff ff       	call   f0107204 <cprintf>
f0109d60:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0109d63:	c7 05 90 1f 7e f0 00 	movl   $0x0,0xf07e1f90
f0109d6a:	00 00 00 
	fos_scheduler();
f0109d6d:	e8 e8 f5 ff ff       	call   f010935a <fos_scheduler>

f0109d72 <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f0109d72:	55                   	push   %ebp
f0109d73:	89 e5                	mov    %esp,%ebp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0109d75:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109d79:	74 0b                	je     f0109d86 <sched_new_env+0x14>
	{
		sched_insert_new(e);
f0109d7b:	ff 75 08             	pushl  0x8(%ebp)
f0109d7e:	e8 e5 f8 ff ff       	call   f0109668 <sched_insert_new>
f0109d83:	83 c4 04             	add    $0x4,%esp
	}
}
f0109d86:	90                   	nop
f0109d87:	c9                   	leave  
f0109d88:	c3                   	ret    

f0109d89 <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f0109d89:	55                   	push   %ebp
f0109d8a:	89 e5                	mov    %esp,%ebp
f0109d8c:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109d8f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109d96:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f0109d9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109d9e:	eb 37                	jmp    f0109dd7 <sched_run_env+0x4e>
	{
		if(ptr_env->env_id == envId)
f0109da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109da3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109da6:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109da9:	75 24                	jne    f0109dcf <sched_run_env+0x46>
		{
			sched_remove_new(ptr_env);
f0109dab:	ff 75 f4             	pushl  -0xc(%ebp)
f0109dae:	e8 db f8 ff ff       	call   f010968e <sched_remove_new>
f0109db3:	83 c4 04             	add    $0x4,%esp
			sched_insert_ready(ptr_env);
f0109db6:	ff 75 f4             	pushl  -0xc(%ebp)
f0109db9:	e8 90 f7 ff ff       	call   f010954e <sched_insert_ready>
f0109dbe:	83 c4 04             	add    $0x4,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f0109dc1:	a1 ac 28 7e f0       	mov    0xf07e28ac,%eax
f0109dc6:	85 c0                	test   %eax,%eax
f0109dc8:	75 36                	jne    f0109e00 <sched_run_env+0x77>
			{
				fos_scheduler();
f0109dca:	e8 8b f5 ff ff       	call   f010935a <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0109dcf:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109dd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109dd7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109ddb:	74 08                	je     f0109de5 <sched_run_env+0x5c>
f0109ddd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109de0:	8b 40 44             	mov    0x44(%eax),%eax
f0109de3:	eb 05                	jmp    f0109dea <sched_run_env+0x61>
f0109de5:	b8 00 00 00 00       	mov    $0x0,%eax
f0109dea:	a3 9c 28 7e f0       	mov    %eax,0xf07e289c
f0109def:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109df4:	85 c0                	test   %eax,%eax
f0109df6:	75 a8                	jne    f0109da0 <sched_run_env+0x17>
f0109df8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109dfc:	75 a2                	jne    f0109da0 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0109dfe:	eb 01                	jmp    f0109e01 <sched_run_env+0x78>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0109e00:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0109e01:	90                   	nop
f0109e02:	c9                   	leave  
f0109e03:	c3                   	ret    

f0109e04 <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f0109e04:	55                   	push   %ebp
f0109e05:	89 e5                	mov    %esp,%ebp
f0109e07:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0109e0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0109e11:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0109e18:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e1c:	75 56                	jne    f0109e74 <sched_exit_env+0x70>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109e1e:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f0109e23:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109e26:	eb 25                	jmp    f0109e4d <sched_exit_env+0x49>
				{
			if(ptr_env->env_id == envId)
f0109e28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e2b:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109e2e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109e31:	75 12                	jne    f0109e45 <sched_exit_env+0x41>
			{
				sched_remove_new(ptr_env);
f0109e33:	ff 75 f4             	pushl  -0xc(%ebp)
f0109e36:	e8 53 f8 ff ff       	call   f010968e <sched_remove_new>
f0109e3b:	83 c4 04             	add    $0x4,%esp
				found = 1;
f0109e3e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0109e45:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109e4a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109e4d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109e51:	74 08                	je     f0109e5b <sched_exit_env+0x57>
f0109e53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109e56:	8b 40 44             	mov    0x44(%eax),%eax
f0109e59:	eb 05                	jmp    f0109e60 <sched_exit_env+0x5c>
f0109e5b:	b8 00 00 00 00       	mov    $0x0,%eax
f0109e60:	a3 9c 28 7e f0       	mov    %eax,0xf07e289c
f0109e65:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f0109e6a:	85 c0                	test   %eax,%eax
f0109e6c:	75 ba                	jne    f0109e28 <sched_exit_env+0x24>
f0109e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109e72:	75 b4                	jne    f0109e28 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0109e74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109e78:	0f 85 4a 01 00 00    	jne    f0109fc8 <sched_exit_env+0x1c4>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109e7e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109e85:	e9 2a 01 00 00       	jmp    f0109fb4 <sched_exit_env+0x1b0>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f0109e8a:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109e8f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109e92:	c1 e2 04             	shl    $0x4,%edx
f0109e95:	01 d0                	add    %edx,%eax
f0109e97:	8b 00                	mov    (%eax),%eax
f0109e99:	85 c0                	test   %eax,%eax
f0109e9b:	0f 84 0a 01 00 00    	je     f0109fab <sched_exit_env+0x1a7>
			{
				ptr_env=NULL;
f0109ea1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109ea8:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109ead:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109eb0:	c1 e2 04             	shl    $0x4,%edx
f0109eb3:	01 d0                	add    %edx,%eax
f0109eb5:	8b 00                	mov    (%eax),%eax
f0109eb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109eba:	e9 b4 00 00 00       	jmp    f0109f73 <sched_exit_env+0x16f>
				{
					if(ptr_env->env_id == envId)
f0109ebf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ec2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109ec5:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109ec8:	0f 85 92 00 00 00    	jne    f0109f60 <sched_exit_env+0x15c>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0109ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ed1:	8b 40 44             	mov    0x44(%eax),%eax
f0109ed4:	85 c0                	test   %eax,%eax
f0109ed6:	74 11                	je     f0109ee9 <sched_exit_env+0xe5>
f0109ed8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109edb:	8b 40 44             	mov    0x44(%eax),%eax
f0109ede:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ee1:	8b 52 48             	mov    0x48(%edx),%edx
f0109ee4:	89 50 48             	mov    %edx,0x48(%eax)
f0109ee7:	eb 16                	jmp    f0109eff <sched_exit_env+0xfb>
f0109ee9:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109eee:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109ef1:	c1 e2 04             	shl    $0x4,%edx
f0109ef4:	01 c2                	add    %eax,%edx
f0109ef6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ef9:	8b 40 48             	mov    0x48(%eax),%eax
f0109efc:	89 42 04             	mov    %eax,0x4(%edx)
f0109eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f02:	8b 40 48             	mov    0x48(%eax),%eax
f0109f05:	85 c0                	test   %eax,%eax
f0109f07:	74 11                	je     f0109f1a <sched_exit_env+0x116>
f0109f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f0c:	8b 40 48             	mov    0x48(%eax),%eax
f0109f0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f12:	8b 52 44             	mov    0x44(%edx),%edx
f0109f15:	89 50 44             	mov    %edx,0x44(%eax)
f0109f18:	eb 15                	jmp    f0109f2f <sched_exit_env+0x12b>
f0109f1a:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109f1f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109f22:	c1 e2 04             	shl    $0x4,%edx
f0109f25:	01 c2                	add    %eax,%edx
f0109f27:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f2a:	8b 40 44             	mov    0x44(%eax),%eax
f0109f2d:	89 02                	mov    %eax,(%edx)
f0109f2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f32:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0109f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109f3c:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0109f43:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109f48:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109f4b:	c1 e2 04             	shl    $0x4,%edx
f0109f4e:	01 d0                	add    %edx,%eax
f0109f50:	8b 50 0c             	mov    0xc(%eax),%edx
f0109f53:	4a                   	dec    %edx
f0109f54:	89 50 0c             	mov    %edx,0xc(%eax)
						found = 1;
f0109f57:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0109f5e:	eb 4b                	jmp    f0109fab <sched_exit_env+0x1a7>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0109f60:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109f65:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109f68:	c1 e2 04             	shl    $0x4,%edx
f0109f6b:	01 d0                	add    %edx,%eax
f0109f6d:	8b 40 08             	mov    0x8(%eax),%eax
f0109f70:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109f73:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f0109f78:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109f7b:	c1 e2 04             	shl    $0x4,%edx
f0109f7e:	01 d0                	add    %edx,%eax
f0109f80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109f84:	74 08                	je     f0109f8e <sched_exit_env+0x18a>
f0109f86:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f89:	8b 52 44             	mov    0x44(%edx),%edx
f0109f8c:	eb 05                	jmp    f0109f93 <sched_exit_env+0x18f>
f0109f8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f93:	89 50 08             	mov    %edx,0x8(%eax)
f0109f96:	8b 40 08             	mov    0x8(%eax),%eax
f0109f99:	85 c0                	test   %eax,%eax
f0109f9b:	0f 85 1e ff ff ff    	jne    f0109ebf <sched_exit_env+0xbb>
f0109fa1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109fa5:	0f 85 14 ff ff ff    	jne    f0109ebf <sched_exit_env+0xbb>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0109fab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109faf:	75 16                	jne    f0109fc7 <sched_exit_env+0x1c3>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0109fb1:	ff 45 ec             	incl   -0x14(%ebp)
f0109fb4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0109fb9:	0f b6 c0             	movzbl %al,%eax
f0109fbc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109fbf:	0f 8f c5 fe ff ff    	jg     f0109e8a <sched_exit_env+0x86>
f0109fc5:	eb 01                	jmp    f0109fc8 <sched_exit_env+0x1c4>
						break;
					}
				}
			}
			if (found)
				break;
f0109fc7:	90                   	nop
		}
	}
	if (!found)
f0109fc8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109fcc:	75 1c                	jne    f0109fea <sched_exit_env+0x1e6>
	{
		if (curenv->env_id == envId)
f0109fce:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0109fd3:	8b 40 4c             	mov    0x4c(%eax),%eax
f0109fd6:	3b 45 08             	cmp    0x8(%ebp),%eax
f0109fd9:	75 0f                	jne    f0109fea <sched_exit_env+0x1e6>
		{
			ptr_env = curenv;
f0109fdb:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f0109fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0109fe3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0109fea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109fee:	74 2a                	je     f010a01a <sched_exit_env+0x216>
	{
		sched_insert_exit(ptr_env);
f0109ff0:	83 ec 0c             	sub    $0xc,%esp
f0109ff3:	ff 75 f4             	pushl  -0xc(%ebp)
f0109ff6:	e8 14 f7 ff ff       	call   f010970f <sched_insert_exit>
f0109ffb:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f0109ffe:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a003:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a006:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a009:	75 0f                	jne    f010a01a <sched_exit_env+0x216>
		{
			curenv = NULL;
f010a00b:	c7 05 90 1f 7e f0 00 	movl   $0x0,0xf07e1f90
f010a012:	00 00 00 
			fos_scheduler();
f010a015:	e8 40 f3 ff ff       	call   f010935a <fos_scheduler>
		}
	}
}
f010a01a:	90                   	nop
f010a01b:	c9                   	leave  
f010a01c:	c3                   	ret    

f010a01d <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f010a01d:	55                   	push   %ebp
f010a01e:	89 e5                	mov    %esp,%ebp
f010a020:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010a023:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a02a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a031:	e9 1a 01 00 00       	jmp    f010a150 <sched_exit_all_ready_envs+0x133>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f010a036:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a03b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a03e:	c1 e2 04             	shl    $0x4,%edx
f010a041:	01 d0                	add    %edx,%eax
f010a043:	8b 00                	mov    (%eax),%eax
f010a045:	85 c0                	test   %eax,%eax
f010a047:	0f 84 00 01 00 00    	je     f010a14d <sched_exit_all_ready_envs+0x130>
		{
			ptr_env=NULL;
f010a04d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a054:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a059:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a05c:	c1 e2 04             	shl    $0x4,%edx
f010a05f:	01 d0                	add    %edx,%eax
f010a061:	8b 00                	mov    (%eax),%eax
f010a063:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a066:	e9 aa 00 00 00       	jmp    f010a115 <sched_exit_all_ready_envs+0xf8>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010a06b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a06e:	8b 40 44             	mov    0x44(%eax),%eax
f010a071:	85 c0                	test   %eax,%eax
f010a073:	74 11                	je     f010a086 <sched_exit_all_ready_envs+0x69>
f010a075:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a078:	8b 40 44             	mov    0x44(%eax),%eax
f010a07b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a07e:	8b 52 48             	mov    0x48(%edx),%edx
f010a081:	89 50 48             	mov    %edx,0x48(%eax)
f010a084:	eb 16                	jmp    f010a09c <sched_exit_all_ready_envs+0x7f>
f010a086:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a08b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a08e:	c1 e2 04             	shl    $0x4,%edx
f010a091:	01 c2                	add    %eax,%edx
f010a093:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a096:	8b 40 48             	mov    0x48(%eax),%eax
f010a099:	89 42 04             	mov    %eax,0x4(%edx)
f010a09c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a09f:	8b 40 48             	mov    0x48(%eax),%eax
f010a0a2:	85 c0                	test   %eax,%eax
f010a0a4:	74 11                	je     f010a0b7 <sched_exit_all_ready_envs+0x9a>
f010a0a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0a9:	8b 40 48             	mov    0x48(%eax),%eax
f010a0ac:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a0af:	8b 52 44             	mov    0x44(%edx),%edx
f010a0b2:	89 50 44             	mov    %edx,0x44(%eax)
f010a0b5:	eb 15                	jmp    f010a0cc <sched_exit_all_ready_envs+0xaf>
f010a0b7:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a0bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a0bf:	c1 e2 04             	shl    $0x4,%edx
f010a0c2:	01 c2                	add    %eax,%edx
f010a0c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0c7:	8b 40 44             	mov    0x44(%eax),%eax
f010a0ca:	89 02                	mov    %eax,(%edx)
f010a0cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0cf:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a0d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a0d9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a0e0:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a0e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a0e8:	c1 e2 04             	shl    $0x4,%edx
f010a0eb:	01 d0                	add    %edx,%eax
f010a0ed:	8b 50 0c             	mov    0xc(%eax),%edx
f010a0f0:	4a                   	dec    %edx
f010a0f1:	89 50 0c             	mov    %edx,0xc(%eax)
				sched_insert_exit(ptr_env);
f010a0f4:	83 ec 0c             	sub    $0xc,%esp
f010a0f7:	ff 75 f4             	pushl  -0xc(%ebp)
f010a0fa:	e8 10 f6 ff ff       	call   f010970f <sched_insert_exit>
f010a0ff:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a102:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a107:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a10a:	c1 e2 04             	shl    $0x4,%edx
f010a10d:	01 d0                	add    %edx,%eax
f010a10f:	8b 40 08             	mov    0x8(%eax),%eax
f010a112:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a115:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a11a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a11d:	c1 e2 04             	shl    $0x4,%edx
f010a120:	01 d0                	add    %edx,%eax
f010a122:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a126:	74 08                	je     f010a130 <sched_exit_all_ready_envs+0x113>
f010a128:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a12b:	8b 52 44             	mov    0x44(%edx),%edx
f010a12e:	eb 05                	jmp    f010a135 <sched_exit_all_ready_envs+0x118>
f010a130:	ba 00 00 00 00       	mov    $0x0,%edx
f010a135:	89 50 08             	mov    %edx,0x8(%eax)
f010a138:	8b 40 08             	mov    0x8(%eax),%eax
f010a13b:	85 c0                	test   %eax,%eax
f010a13d:	0f 85 28 ff ff ff    	jne    f010a06b <sched_exit_all_ready_envs+0x4e>
f010a143:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a147:	0f 85 1e ff ff ff    	jne    f010a06b <sched_exit_all_ready_envs+0x4e>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a14d:	ff 45 f0             	incl   -0x10(%ebp)
f010a150:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010a155:	0f b6 c0             	movzbl %al,%eax
f010a158:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a15b:	0f 8f d5 fe ff ff    	jg     f010a036 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f010a161:	90                   	nop
f010a162:	c9                   	leave  
f010a163:	c3                   	ret    

f010a164 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f010a164:	55                   	push   %ebp
f010a165:	89 e5                	mov    %esp,%ebp
f010a167:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f010a16a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010a171:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f010a178:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a17c:	0f 85 a0 00 00 00    	jne    f010a222 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010a182:	a1 94 28 7e f0       	mov    0xf07e2894,%eax
f010a187:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a18a:	eb 67                	jmp    f010a1f3 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f010a18c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a18f:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a192:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a195:	75 54                	jne    f010a1eb <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f010a197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a19a:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a1a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1a3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a1a6:	83 ec 04             	sub    $0x4,%esp
f010a1a9:	52                   	push   %edx
f010a1aa:	50                   	push   %eax
f010a1ab:	68 a4 13 12 f0       	push   $0xf01213a4
f010a1b0:	e8 4f d0 ff ff       	call   f0107204 <cprintf>
f010a1b5:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f010a1b8:	83 ec 0c             	sub    $0xc,%esp
f010a1bb:	ff 75 f4             	pushl  -0xc(%ebp)
f010a1be:	e8 cb f4 ff ff       	call   f010968e <sched_remove_new>
f010a1c3:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010a1c6:	83 ec 0c             	sub    $0xc,%esp
f010a1c9:	ff 75 f4             	pushl  -0xc(%ebp)
f010a1cc:	e8 14 c3 ff ff       	call   f01064e5 <start_env_free>
f010a1d1:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010a1d4:	83 ec 0c             	sub    $0xc,%esp
f010a1d7:	68 23 13 12 f0       	push   $0xf0121323
f010a1dc:	e8 23 d0 ff ff       	call   f0107204 <cprintf>
f010a1e1:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010a1e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010a1eb:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f010a1f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a1f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a1f7:	74 08                	je     f010a201 <sched_kill_env+0x9d>
f010a1f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a1fc:	8b 40 44             	mov    0x44(%eax),%eax
f010a1ff:	eb 05                	jmp    f010a206 <sched_kill_env+0xa2>
f010a201:	b8 00 00 00 00       	mov    $0x0,%eax
f010a206:	a3 9c 28 7e f0       	mov    %eax,0xf07e289c
f010a20b:	a1 9c 28 7e f0       	mov    0xf07e289c,%eax
f010a210:	85 c0                	test   %eax,%eax
f010a212:	0f 85 74 ff ff ff    	jne    f010a18c <sched_kill_env+0x28>
f010a218:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a21c:	0f 85 6a ff ff ff    	jne    f010a18c <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f010a222:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a226:	0f 85 89 01 00 00    	jne    f010a3b5 <sched_kill_env+0x251>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a22c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010a233:	e9 69 01 00 00       	jmp    f010a3a1 <sched_kill_env+0x23d>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010a238:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a23d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a240:	c1 e2 04             	shl    $0x4,%edx
f010a243:	01 d0                	add    %edx,%eax
f010a245:	8b 00                	mov    (%eax),%eax
f010a247:	85 c0                	test   %eax,%eax
f010a249:	0f 84 49 01 00 00    	je     f010a398 <sched_kill_env+0x234>
			{
				ptr_env=NULL;
f010a24f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a256:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a25b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a25e:	c1 e2 04             	shl    $0x4,%edx
f010a261:	01 d0                	add    %edx,%eax
f010a263:	8b 00                	mov    (%eax),%eax
f010a265:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a268:	e9 f3 00 00 00       	jmp    f010a360 <sched_kill_env+0x1fc>
				{
					if(ptr_env->env_id == envId)
f010a26d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a270:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a273:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a276:	0f 85 d1 00 00 00    	jne    f010a34d <sched_kill_env+0x1e9>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f010a27c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a27f:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a285:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a288:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a28b:	ff 75 ec             	pushl  -0x14(%ebp)
f010a28e:	52                   	push   %edx
f010a28f:	50                   	push   %eax
f010a290:	68 cc 13 12 f0       	push   $0xf01213cc
f010a295:	e8 6a cf ff ff       	call   f0107204 <cprintf>
f010a29a:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f010a29d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2a0:	8b 40 44             	mov    0x44(%eax),%eax
f010a2a3:	85 c0                	test   %eax,%eax
f010a2a5:	74 11                	je     f010a2b8 <sched_kill_env+0x154>
f010a2a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2aa:	8b 40 44             	mov    0x44(%eax),%eax
f010a2ad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2b0:	8b 52 48             	mov    0x48(%edx),%edx
f010a2b3:	89 50 48             	mov    %edx,0x48(%eax)
f010a2b6:	eb 16                	jmp    f010a2ce <sched_kill_env+0x16a>
f010a2b8:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a2bd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a2c0:	c1 e2 04             	shl    $0x4,%edx
f010a2c3:	01 c2                	add    %eax,%edx
f010a2c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2c8:	8b 40 48             	mov    0x48(%eax),%eax
f010a2cb:	89 42 04             	mov    %eax,0x4(%edx)
f010a2ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2d1:	8b 40 48             	mov    0x48(%eax),%eax
f010a2d4:	85 c0                	test   %eax,%eax
f010a2d6:	74 11                	je     f010a2e9 <sched_kill_env+0x185>
f010a2d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2db:	8b 40 48             	mov    0x48(%eax),%eax
f010a2de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a2e1:	8b 52 44             	mov    0x44(%edx),%edx
f010a2e4:	89 50 44             	mov    %edx,0x44(%eax)
f010a2e7:	eb 15                	jmp    f010a2fe <sched_kill_env+0x19a>
f010a2e9:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a2ee:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a2f1:	c1 e2 04             	shl    $0x4,%edx
f010a2f4:	01 c2                	add    %eax,%edx
f010a2f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a2f9:	8b 40 44             	mov    0x44(%eax),%eax
f010a2fc:	89 02                	mov    %eax,(%edx)
f010a2fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a301:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a308:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a30b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a312:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a317:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a31a:	c1 e2 04             	shl    $0x4,%edx
f010a31d:	01 d0                	add    %edx,%eax
f010a31f:	8b 50 0c             	mov    0xc(%eax),%edx
f010a322:	4a                   	dec    %edx
f010a323:	89 50 0c             	mov    %edx,0xc(%eax)
						start_env_free(ptr_env);
f010a326:	83 ec 0c             	sub    $0xc,%esp
f010a329:	ff 75 f4             	pushl  -0xc(%ebp)
f010a32c:	e8 b4 c1 ff ff       	call   f01064e5 <start_env_free>
f010a331:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f010a334:	83 ec 0c             	sub    $0xc,%esp
f010a337:	68 23 13 12 f0       	push   $0xf0121323
f010a33c:	e8 c3 ce ff ff       	call   f0107204 <cprintf>
f010a341:	83 c4 10             	add    $0x10,%esp
						found = 1;
f010a344:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f010a34b:	eb 4b                	jmp    f010a398 <sched_kill_env+0x234>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010a34d:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a352:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a355:	c1 e2 04             	shl    $0x4,%edx
f010a358:	01 d0                	add    %edx,%eax
f010a35a:	8b 40 08             	mov    0x8(%eax),%eax
f010a35d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a360:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f010a365:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010a368:	c1 e2 04             	shl    $0x4,%edx
f010a36b:	01 d0                	add    %edx,%eax
f010a36d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a371:	74 08                	je     f010a37b <sched_kill_env+0x217>
f010a373:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a376:	8b 52 44             	mov    0x44(%edx),%edx
f010a379:	eb 05                	jmp    f010a380 <sched_kill_env+0x21c>
f010a37b:	ba 00 00 00 00       	mov    $0x0,%edx
f010a380:	89 50 08             	mov    %edx,0x8(%eax)
f010a383:	8b 40 08             	mov    0x8(%eax),%eax
f010a386:	85 c0                	test   %eax,%eax
f010a388:	0f 85 df fe ff ff    	jne    f010a26d <sched_kill_env+0x109>
f010a38e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a392:	0f 85 d5 fe ff ff    	jne    f010a26d <sched_kill_env+0x109>
						break;
						//return;
					}
				}
			}
			if (found)
f010a398:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a39c:	75 16                	jne    f010a3b4 <sched_kill_env+0x250>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010a39e:	ff 45 ec             	incl   -0x14(%ebp)
f010a3a1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010a3a6:	0f b6 c0             	movzbl %al,%eax
f010a3a9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010a3ac:	0f 8f 86 fe ff ff    	jg     f010a238 <sched_kill_env+0xd4>
f010a3b2:	eb 01                	jmp    f010a3b5 <sched_kill_env+0x251>
						//return;
					}
				}
			}
			if (found)
				break;
f010a3b4:	90                   	nop
		}
	}
	if (!found)
f010a3b5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a3b9:	0f 85 a7 00 00 00    	jne    f010a466 <sched_kill_env+0x302>
	{
		ptr_env=NULL;
f010a3bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010a3c6:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f010a3cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a3ce:	eb 67                	jmp    f010a437 <sched_kill_env+0x2d3>
		{
			if(ptr_env->env_id == envId)
f010a3d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3d3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a3d6:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a3d9:	75 54                	jne    f010a42f <sched_kill_env+0x2cb>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f010a3db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3de:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a3e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a3e7:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a3ea:	83 ec 04             	sub    $0x4,%esp
f010a3ed:	52                   	push   %edx
f010a3ee:	50                   	push   %eax
f010a3ef:	68 f8 13 12 f0       	push   $0xf01213f8
f010a3f4:	e8 0b ce ff ff       	call   f0107204 <cprintf>
f010a3f9:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f010a3fc:	83 ec 0c             	sub    $0xc,%esp
f010a3ff:	ff 75 f4             	pushl  -0xc(%ebp)
f010a402:	e8 4b f3 ff ff       	call   f0109752 <sched_remove_exit>
f010a407:	83 c4 10             	add    $0x10,%esp
				start_env_free(ptr_env);
f010a40a:	83 ec 0c             	sub    $0xc,%esp
f010a40d:	ff 75 f4             	pushl  -0xc(%ebp)
f010a410:	e8 d0 c0 ff ff       	call   f01064e5 <start_env_free>
f010a415:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f010a418:	83 ec 0c             	sub    $0xc,%esp
f010a41b:	68 23 13 12 f0       	push   $0xf0121323
f010a420:	e8 df cd ff ff       	call   f0107204 <cprintf>
f010a425:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010a428:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010a42f:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f010a434:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a437:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a43b:	74 08                	je     f010a445 <sched_kill_env+0x2e1>
f010a43d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a440:	8b 40 44             	mov    0x44(%eax),%eax
f010a443:	eb 05                	jmp    f010a44a <sched_kill_env+0x2e6>
f010a445:	b8 00 00 00 00       	mov    $0x0,%eax
f010a44a:	a3 6c 28 7e f0       	mov    %eax,0xf07e286c
f010a44f:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f010a454:	85 c0                	test   %eax,%eax
f010a456:	0f 85 74 ff ff ff    	jne    f010a3d0 <sched_kill_env+0x26c>
f010a45c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a460:	0f 85 6a ff ff ff    	jne    f010a3d0 <sched_kill_env+0x26c>
				//return;
			}
		}
	}

	if (!found)
f010a466:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010a46a:	75 7f                	jne    f010a4eb <sched_kill_env+0x387>
	{
		if (curenv->env_id == envId)
f010a46c:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a471:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a474:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a477:	75 72                	jne    f010a4eb <sched_kill_env+0x387>
		{
			ptr_env = curenv;
f010a479:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a47e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f010a481:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a484:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a487:	83 f8 02             	cmp    $0x2,%eax
f010a48a:	74 19                	je     f010a4a5 <sched_kill_env+0x341>
f010a48c:	68 20 14 12 f0       	push   $0xf0121420
f010a491:	68 40 14 12 f0       	push   $0xf0121440
f010a496:	68 4f 02 00 00       	push   $0x24f
f010a49b:	68 ce 11 12 f0       	push   $0xf01211ce
f010a4a0:	e8 0a 5d ff ff       	call   f01001af <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010a4a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4a8:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
f010a4ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4b1:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a4b4:	83 ec 04             	sub    $0x4,%esp
f010a4b7:	52                   	push   %edx
f010a4b8:	50                   	push   %eax
f010a4b9:	68 58 14 12 f0       	push   $0xf0121458
f010a4be:	e8 41 cd ff ff       	call   f0107204 <cprintf>
f010a4c3:	83 c4 10             	add    $0x10,%esp
			start_env_free(ptr_env);
f010a4c6:	83 ec 0c             	sub    $0xc,%esp
f010a4c9:	ff 75 f4             	pushl  -0xc(%ebp)
f010a4cc:	e8 14 c0 ff ff       	call   f01064e5 <start_env_free>
f010a4d1:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010a4d4:	83 ec 0c             	sub    $0xc,%esp
f010a4d7:	68 23 13 12 f0       	push   $0xf0121323
f010a4dc:	e8 23 cd ff ff       	call   f0107204 <cprintf>
f010a4e1:	83 c4 10             	add    $0x10,%esp
			found = 1;
f010a4e4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	//If it's the curenv, then reset it and reinvoke the scheduler
	//as there's no meaning to return back to a killed env
	if (curenv->env_id == envId)
f010a4eb:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a4f0:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a4f3:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a4f6:	75 1d                	jne    f010a515 <sched_kill_env+0x3b1>
	{
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f010a4f8:	a1 38 0d 80 f0       	mov    0xf0800d38,%eax
f010a4fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010a500:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a503:	0f 22 d8             	mov    %eax,%cr3
		curenv = NULL;
f010a506:	c7 05 90 1f 7e f0 00 	movl   $0x0,0xf07e1f90
f010a50d:	00 00 00 
		fos_scheduler();
f010a510:	e8 45 ee ff ff       	call   f010935a <fos_scheduler>
	}

}
f010a515:	90                   	nop
f010a516:	c9                   	leave  
f010a517:	c3                   	ret    

f010a518 <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f010a518:	55                   	push   %ebp
f010a519:	89 e5                	mov    %esp,%ebp
f010a51b:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU())
f010a51e:	e8 3f e2 ff ff       	call   f0108762 <isPageReplacmentAlgorithmLRU>
f010a523:	85 c0                	test   %eax,%eax
f010a525:	74 05                	je     f010a52c <clock_interrupt_handler+0x14>
	{
		update_WS_time_stamps();
f010a527:	e8 05 00 00 00       	call   f010a531 <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f010a52c:	e8 29 ee ff ff       	call   f010935a <fos_scheduler>

f010a531 <update_WS_time_stamps>:
	}

}
 */
void update_WS_time_stamps()
{
f010a531:	55                   	push   %ebp
f010a532:	89 e5                	mov    %esp,%ebp
f010a534:	53                   	push   %ebx
f010a535:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f010a538:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a53d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f010a540:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010a544:	0f 84 bc 01 00 00    	je     f010a706 <update_WS_time_stamps+0x1d5>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010a54a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a551:	e9 c7 00 00 00       	jmp    f010a61d <update_WS_time_stamps+0xec>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f010a556:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a559:	8b 48 78             	mov    0x78(%eax),%ecx
f010a55c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a55f:	89 d0                	mov    %edx,%eax
f010a561:	01 c0                	add    %eax,%eax
f010a563:	01 d0                	add    %edx,%eax
f010a565:	c1 e0 02             	shl    $0x2,%eax
f010a568:	01 c8                	add    %ecx,%eax
f010a56a:	8a 40 04             	mov    0x4(%eax),%al
f010a56d:	3c 01                	cmp    $0x1,%al
f010a56f:	0f 84 a5 00 00 00    	je     f010a61a <update_WS_time_stamps+0xe9>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f010a575:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a578:	8b 48 78             	mov    0x78(%eax),%ecx
f010a57b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a57e:	89 d0                	mov    %edx,%eax
f010a580:	01 c0                	add    %eax,%eax
f010a582:	01 d0                	add    %edx,%eax
f010a584:	c1 e0 02             	shl    $0x2,%eax
f010a587:	01 c8                	add    %ecx,%eax
f010a589:	8b 00                	mov    (%eax),%eax
f010a58b:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr, page_va) ;
f010a58e:	83 ec 08             	sub    $0x8,%esp
f010a591:	ff 75 e8             	pushl  -0x18(%ebp)
f010a594:	ff 75 ec             	pushl  -0x14(%ebp)
f010a597:	e8 53 ad ff ff       	call   f01052ef <pt_get_page_permissions>
f010a59c:	83 c4 10             	add    $0x10,%esp
f010a59f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f010a5a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a5a5:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5ab:	89 d0                	mov    %edx,%eax
f010a5ad:	01 c0                	add    %eax,%eax
f010a5af:	01 d0                	add    %edx,%eax
f010a5b1:	c1 e0 02             	shl    $0x2,%eax
f010a5b4:	01 c8                	add    %ecx,%eax
f010a5b6:	8b 40 08             	mov    0x8(%eax),%eax
f010a5b9:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f010a5bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a5bf:	83 e0 20             	and    $0x20,%eax
f010a5c2:	85 c0                	test   %eax,%eax
f010a5c4:	74 37                	je     f010a5fd <update_WS_time_stamps+0xcc>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a5c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a5c9:	8b 48 78             	mov    0x78(%eax),%ecx
f010a5cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a5cf:	89 d0                	mov    %edx,%eax
f010a5d1:	01 c0                	add    %eax,%eax
f010a5d3:	01 d0                	add    %edx,%eax
f010a5d5:	c1 e0 02             	shl    $0x2,%eax
f010a5d8:	01 c8                	add    %ecx,%eax
f010a5da:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010a5dd:	c1 ea 02             	shr    $0x2,%edx
f010a5e0:	81 ca 00 00 00 80    	or     $0x80000000,%edx
f010a5e6:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr, page_va, 0 , PERM_USED) ;
f010a5e9:	6a 20                	push   $0x20
f010a5eb:	6a 00                	push   $0x0
f010a5ed:	ff 75 e8             	pushl  -0x18(%ebp)
f010a5f0:	ff 75 ec             	pushl  -0x14(%ebp)
f010a5f3:	e8 93 a9 ff ff       	call   f0104f8b <pt_set_page_permissions>
f010a5f8:	83 c4 10             	add    $0x10,%esp
f010a5fb:	eb 1d                	jmp    f010a61a <update_WS_time_stamps+0xe9>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f010a5fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a600:	8b 48 78             	mov    0x78(%eax),%ecx
f010a603:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a606:	89 d0                	mov    %edx,%eax
f010a608:	01 c0                	add    %eax,%eax
f010a60a:	01 d0                	add    %edx,%eax
f010a60c:	c1 e0 02             	shl    $0x2,%eax
f010a60f:	01 c8                	add    %ecx,%eax
f010a611:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010a614:	c1 ea 02             	shr    $0x2,%edx
f010a617:	89 50 08             	mov    %edx,0x8(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f010a61a:	ff 45 f4             	incl   -0xc(%ebp)
f010a61d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a620:	8b 50 74             	mov    0x74(%eax),%edx
f010a623:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a626:	39 c2                	cmp    %eax,%edx
f010a628:	0f 87 28 ff ff ff    	ja     f010a556 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a62e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010a635:	e9 c2 00 00 00       	jmp    f010a6fc <update_WS_time_stamps+0x1cb>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f010a63a:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a63d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a640:	89 d0                	mov    %edx,%eax
f010a642:	01 c0                	add    %eax,%eax
f010a644:	01 d0                	add    %edx,%eax
f010a646:	c1 e0 02             	shl    $0x2,%eax
f010a649:	01 c8                	add    %ecx,%eax
f010a64b:	83 e8 80             	sub    $0xffffff80,%eax
f010a64e:	8a 00                	mov    (%eax),%al
f010a650:	3c 01                	cmp    $0x1,%al
f010a652:	0f 84 a1 00 00 00    	je     f010a6f9 <update_WS_time_stamps+0x1c8>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f010a658:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a65b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a65e:	89 d0                	mov    %edx,%eax
f010a660:	01 c0                	add    %eax,%eax
f010a662:	01 d0                	add    %edx,%eax
f010a664:	c1 e0 02             	shl    $0x2,%eax
f010a667:	01 c8                	add    %ecx,%eax
f010a669:	83 c0 7c             	add    $0x7c,%eax
f010a66c:	8b 00                	mov    (%eax),%eax
f010a66e:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f010a671:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f010a674:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a677:	89 d0                	mov    %edx,%eax
f010a679:	01 c0                	add    %eax,%eax
f010a67b:	01 d0                	add    %edx,%eax
f010a67d:	c1 e0 02             	shl    $0x2,%eax
f010a680:	01 c8                	add    %ecx,%eax
f010a682:	05 84 00 00 00       	add    $0x84,%eax
f010a687:	8b 00                	mov    (%eax),%eax
f010a689:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr, table_va))
f010a68c:	83 ec 08             	sub    $0x8,%esp
f010a68f:	ff 75 dc             	pushl  -0x24(%ebp)
f010a692:	ff 75 ec             	pushl  -0x14(%ebp)
f010a695:	e8 55 a8 ff ff       	call   f0104eef <pd_is_table_used>
f010a69a:	83 c4 10             	add    $0x10,%esp
f010a69d:	85 c0                	test   %eax,%eax
f010a69f:	74 38                	je     f010a6d9 <update_WS_time_stamps+0x1a8>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f010a6a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6a4:	c1 e8 02             	shr    $0x2,%eax
f010a6a7:	0d 00 00 00 80       	or     $0x80000000,%eax
f010a6ac:	89 c1                	mov    %eax,%ecx
f010a6ae:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a6b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6b4:	89 d0                	mov    %edx,%eax
f010a6b6:	01 c0                	add    %eax,%eax
f010a6b8:	01 d0                	add    %edx,%eax
f010a6ba:	c1 e0 02             	shl    $0x2,%eax
f010a6bd:	01 d8                	add    %ebx,%eax
f010a6bf:	05 84 00 00 00       	add    $0x84,%eax
f010a6c4:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr, table_va);
f010a6c6:	83 ec 08             	sub    $0x8,%esp
f010a6c9:	ff 75 dc             	pushl  -0x24(%ebp)
f010a6cc:	ff 75 ec             	pushl  -0x14(%ebp)
f010a6cf:	e8 3e a8 ff ff       	call   f0104f12 <pd_set_table_unused>
f010a6d4:	83 c4 10             	add    $0x10,%esp
f010a6d7:	eb 20                	jmp    f010a6f9 <update_WS_time_stamps+0x1c8>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f010a6d9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a6dc:	c1 e8 02             	shr    $0x2,%eax
f010a6df:	89 c1                	mov    %eax,%ecx
f010a6e1:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f010a6e4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a6e7:	89 d0                	mov    %edx,%eax
f010a6e9:	01 c0                	add    %eax,%eax
f010a6eb:	01 d0                	add    %edx,%eax
f010a6ed:	c1 e0 02             	shl    $0x2,%eax
f010a6f0:	01 d8                	add    %ebx,%eax
f010a6f2:	05 84 00 00 00       	add    $0x84,%eax
f010a6f7:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f010a6f9:	ff 45 f0             	incl   -0x10(%ebp)
f010a6fc:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f010a700:	0f 8e 34 ff ff ff    	jle    f010a63a <update_WS_time_stamps+0x109>
					}
				}
			}
		}
	}
}
f010a706:	90                   	nop
f010a707:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a70a:	c9                   	leave  
f010a70b:	c3                   	ret    

f010a70c <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010a70c:	55                   	push   %ebp
f010a70d:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010a70f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a712:	8b 15 24 0d 80 f0    	mov    0xf0800d24,%edx
f010a718:	29 d0                	sub    %edx,%eax
f010a71a:	c1 f8 03             	sar    $0x3,%eax
f010a71d:	89 c2                	mov    %eax,%edx
f010a71f:	89 d0                	mov    %edx,%eax
f010a721:	c1 e0 02             	shl    $0x2,%eax
f010a724:	01 d0                	add    %edx,%eax
f010a726:	c1 e0 02             	shl    $0x2,%eax
f010a729:	01 d0                	add    %edx,%eax
f010a72b:	c1 e0 02             	shl    $0x2,%eax
f010a72e:	01 d0                	add    %edx,%eax
f010a730:	89 c1                	mov    %eax,%ecx
f010a732:	c1 e1 08             	shl    $0x8,%ecx
f010a735:	01 c8                	add    %ecx,%eax
f010a737:	89 c1                	mov    %eax,%ecx
f010a739:	c1 e1 10             	shl    $0x10,%ecx
f010a73c:	01 c8                	add    %ecx,%eax
f010a73e:	01 c0                	add    %eax,%eax
f010a740:	01 d0                	add    %edx,%eax
}
f010a742:	5d                   	pop    %ebp
f010a743:	c3                   	ret    

f010a744 <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010a744:	55                   	push   %ebp
f010a745:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010a747:	ff 75 08             	pushl  0x8(%ebp)
f010a74a:	e8 bd ff ff ff       	call   f010a70c <to_frame_number>
f010a74f:	83 c4 04             	add    $0x4,%esp
f010a752:	c1 e0 0c             	shl    $0xc,%eax
}
f010a755:	c9                   	leave  
f010a756:	c3                   	ret    

f010a757 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010a757:	55                   	push   %ebp
f010a758:	89 e5                	mov    %esp,%ebp
f010a75a:	83 ec 18             	sub    $0x18,%esp
f010a75d:	8b 45 10             	mov    0x10(%ebp),%eax
f010a760:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010a763:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010a767:	74 26                	je     f010a78f <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010a769:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a76e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a771:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f010a777:	81 c2 f4 02 00 00    	add    $0x2f4,%edx
f010a77d:	83 ec 04             	sub    $0x4,%esp
f010a780:	50                   	push   %eax
f010a781:	52                   	push   %edx
f010a782:	68 84 14 12 f0       	push   $0xf0121484
f010a787:	e8 78 ca ff ff       	call   f0107204 <cprintf>
f010a78c:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010a78f:	83 ec 04             	sub    $0x4,%esp
f010a792:	ff 75 08             	pushl  0x8(%ebp)
f010a795:	ff 75 0c             	pushl  0xc(%ebp)
f010a798:	68 8d 14 12 f0       	push   $0xf012148d
f010a79d:	e8 62 ca ff ff       	call   f0107204 <cprintf>
f010a7a2:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010a7a5:	90                   	nop
f010a7a6:	c9                   	leave  
f010a7a7:	c3                   	ret    

f010a7a8 <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010a7a8:	55                   	push   %ebp
f010a7a9:	89 e5                	mov    %esp,%ebp
f010a7ab:	83 ec 18             	sub    $0x18,%esp
f010a7ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7b1:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010a7b4:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010a7b8:	83 ec 08             	sub    $0x8,%esp
f010a7bb:	50                   	push   %eax
f010a7bc:	68 92 14 12 f0       	push   $0xf0121492
f010a7c1:	e8 3e ca ff ff       	call   f0107204 <cprintf>
f010a7c6:	83 c4 10             	add    $0x10,%esp
}
f010a7c9:	90                   	nop
f010a7ca:	c9                   	leave  
f010a7cb:	c3                   	ret    

f010a7cc <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010a7cc:	55                   	push   %ebp
f010a7cd:	89 e5                	mov    %esp,%ebp
f010a7cf:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010a7d2:	e8 0d 64 ff ff       	call   f0100be4 <cons_getc2>
f010a7d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010a7da:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010a7dd:	c9                   	leave  
f010a7de:	c3                   	ret    

f010a7df <sys_getenvid>:

// Returns the current environment's envid.

//2017
static int32 sys_getenvid(void)
{
f010a7df:	55                   	push   %ebp
f010a7e0:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010a7e2:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a7e7:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010a7ea:	5d                   	pop    %ebp
f010a7eb:	c3                   	ret    

f010a7ec <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010a7ec:	55                   	push   %ebp
f010a7ed:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010a7ef:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a7f4:	89 c2                	mov    %eax,%edx
f010a7f6:	a1 8c 1f 7e f0       	mov    0xf07e1f8c,%eax
f010a7fb:	29 c2                	sub    %eax,%edx
f010a7fd:	89 d0                	mov    %edx,%eax
f010a7ff:	c1 f8 06             	sar    $0x6,%eax
f010a802:	89 c1                	mov    %eax,%ecx
f010a804:	89 ca                	mov    %ecx,%edx
f010a806:	c1 e2 02             	shl    $0x2,%edx
f010a809:	01 ca                	add    %ecx,%edx
f010a80b:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010a812:	01 c2                	add    %eax,%edx
f010a814:	89 d0                	mov    %edx,%eax
f010a816:	c1 e0 06             	shl    $0x6,%eax
f010a819:	29 d0                	sub    %edx,%eax
f010a81b:	89 c2                	mov    %eax,%edx
f010a81d:	c1 e2 0c             	shl    $0xc,%edx
f010a820:	01 d0                	add    %edx,%eax
f010a822:	c1 e0 02             	shl    $0x2,%eax
f010a825:	01 c8                	add    %ecx,%eax
f010a827:	01 c0                	add    %eax,%eax
f010a829:	01 c8                	add    %ecx,%eax
f010a82b:	c1 e0 04             	shl    $0x4,%eax
f010a82e:	01 c8                	add    %ecx,%eax
f010a830:	c1 e0 02             	shl    $0x2,%eax
f010a833:	01 c8                	add    %ecx,%eax
}
f010a835:	5d                   	pop    %ebp
f010a836:	c3                   	ret    

f010a837 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010a837:	55                   	push   %ebp
f010a838:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010a83a:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a83f:	8b 40 50             	mov    0x50(%eax),%eax
}
f010a842:	5d                   	pop    %ebp
f010a843:	c3                   	ret    

f010a844 <sys_env_destroy>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_env_destroy(int32 envid)
{
f010a844:	55                   	push   %ebp
f010a845:	89 e5                	mov    %esp,%ebp
f010a847:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 0)) < 0)
f010a84a:	83 ec 04             	sub    $0x4,%esp
f010a84d:	6a 00                	push   $0x0
f010a84f:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010a852:	50                   	push   %eax
f010a853:	ff 75 08             	pushl  0x8(%ebp)
f010a856:	e8 20 89 ff ff       	call   f010317b <envid2env>
f010a85b:	83 c4 10             	add    $0x10,%esp
f010a85e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a861:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a865:	79 05                	jns    f010a86c <sys_env_destroy+0x28>
		return r;
f010a867:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a86a:	eb 5e                	jmp    f010a8ca <sys_env_destroy+0x86>

	if (e == curenv)
f010a86c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010a86f:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a874:	39 c2                	cmp    %eax,%edx
f010a876:	75 1b                	jne    f010a893 <sys_env_destroy+0x4f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010a878:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a87d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a880:	83 ec 08             	sub    $0x8,%esp
f010a883:	50                   	push   %eax
f010a884:	68 95 14 12 f0       	push   $0xf0121495
f010a889:	e8 76 c9 ff ff       	call   f0107204 <cprintf>
f010a88e:	83 c4 10             	add    $0x10,%esp
f010a891:	eb 20                	jmp    f010a8b3 <sys_env_destroy+0x6f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010a893:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a896:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a899:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a89e:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a8a1:	83 ec 04             	sub    $0x4,%esp
f010a8a4:	52                   	push   %edx
f010a8a5:	50                   	push   %eax
f010a8a6:	68 b0 14 12 f0       	push   $0xf01214b0
f010a8ab:	e8 54 c9 ff ff       	call   f0107204 <cprintf>
f010a8b0:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010a8b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a8b6:	8b 40 4c             	mov    0x4c(%eax),%eax
f010a8b9:	83 ec 0c             	sub    $0xc,%esp
f010a8bc:	50                   	push   %eax
f010a8bd:	e8 a2 f8 ff ff       	call   f010a164 <sched_kill_env>
f010a8c2:	83 c4 10             	add    $0x10,%esp

	return 0;
f010a8c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a8ca:	c9                   	leave  
f010a8cb:	c3                   	ret    

f010a8cc <sys_env_exit>:

static void sys_env_exit()
{
f010a8cc:	55                   	push   %ebp
f010a8cd:	89 e5                	mov    %esp,%ebp
f010a8cf:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010a8d2:	e8 b2 c2 ff ff       	call   f0106b89 <env_exit>
	//env_run_cmd_prmpt();
}
f010a8d7:	90                   	nop
f010a8d8:	c9                   	leave  
f010a8d9:	c3                   	ret    

f010a8da <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010a8da:	55                   	push   %ebp
f010a8db:	89 e5                	mov    %esp,%ebp
f010a8dd:	83 ec 18             	sub    $0x18,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010a8e0:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010a8e5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct Frame_Info *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010a8e8:	83 ec 0c             	sub    $0xc,%esp
f010a8eb:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010a8ee:	50                   	push   %eax
f010a8ef:	e8 68 91 ff ff       	call   f0103a5c <allocate_frame>
f010a8f4:	83 c4 10             	add    $0x10,%esp
f010a8f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a8fa:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a8fe:	75 08                	jne    f010a908 <__sys_allocate_page+0x2e>
		return r ;
f010a900:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a903:	e9 e8 00 00 00       	jmp    f010a9f0 <__sys_allocate_page+0x116>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010a908:	8b 45 08             	mov    0x8(%ebp),%eax
f010a90b:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010a910:	77 0c                	ja     f010a91e <__sys_allocate_page+0x44>
f010a912:	8b 45 08             	mov    0x8(%ebp),%eax
f010a915:	25 ff 0f 00 00       	and    $0xfff,%eax
f010a91a:	85 c0                	test   %eax,%eax
f010a91c:	74 0a                	je     f010a928 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010a91e:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a923:	e9 c8 00 00 00       	jmp    f010a9f0 <__sys_allocate_page+0x116>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010a928:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a92b:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010a930:	83 f8 04             	cmp    $0x4,%eax
f010a933:	74 0a                	je     f010a93f <__sys_allocate_page+0x65>
		return E_INVAL;
f010a935:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010a93a:	e9 b1 00 00 00       	jmp    f010a9f0 <__sys_allocate_page+0x116>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010a93f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a942:	83 ec 0c             	sub    $0xc,%esp
f010a945:	50                   	push   %eax
f010a946:	e8 f9 fd ff ff       	call   f010a744 <to_physical_address>
f010a94b:	83 c4 10             	add    $0x10,%esp
f010a94e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
		//		we are using an unsed VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
		//		to do temp initialization of a frame.
		map_frame(e->env_page_directory, ptr_frame_info, (void*)USER_LIMIT, PERM_WRITEABLE);
f010a951:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a954:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a957:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a95a:	6a 02                	push   $0x2
f010a95c:	68 00 00 80 ef       	push   $0xef800000
f010a961:	52                   	push   %edx
f010a962:	50                   	push   %eax
f010a963:	e8 6f 94 ff ff       	call   f0103dd7 <map_frame>
f010a968:	83 c4 10             	add    $0x10,%esp
		memset((void*)USER_LIMIT, 0, PAGE_SIZE);
f010a96b:	83 ec 04             	sub    $0x4,%esp
f010a96e:	68 00 10 00 00       	push   $0x1000
f010a973:	6a 00                	push   $0x0
f010a975:	68 00 00 80 ef       	push   $0xef800000
f010a97a:	e8 ec 25 01 00       	call   f011cf6b <memset>
f010a97f:	83 c4 10             	add    $0x10,%esp

		// Temporarily increase the references to prevent unmap_frame from removing the frame
		// we just got from allocate_frame, we will use it for the new page
		ptr_frame_info->references += 1;
f010a982:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a985:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a988:	8b 40 08             	mov    0x8(%eax),%eax
f010a98b:	40                   	inc    %eax
f010a98c:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(e->env_page_directory, (void*)USER_LIMIT);
f010a990:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a993:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a996:	83 ec 08             	sub    $0x8,%esp
f010a999:	68 00 00 80 ef       	push   $0xef800000
f010a99e:	50                   	push   %eax
f010a99f:	e8 62 95 ff ff       	call   f0103f06 <unmap_frame>
f010a9a4:	83 c4 10             	add    $0x10,%esp

		//return it to the original status
		ptr_frame_info->references -= 1;
f010a9a7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a9aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9ad:	8b 40 08             	mov    0x8(%eax),%eax
f010a9b0:	48                   	dec    %eax
f010a9b1:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
	}

	r = map_frame(e->env_page_directory, ptr_frame_info, va, perm) ;
f010a9b5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010a9b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a9bb:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a9be:	ff 75 0c             	pushl  0xc(%ebp)
f010a9c1:	ff 75 08             	pushl  0x8(%ebp)
f010a9c4:	52                   	push   %edx
f010a9c5:	50                   	push   %eax
f010a9c6:	e8 0c 94 ff ff       	call   f0103dd7 <map_frame>
f010a9cb:	83 c4 10             	add    $0x10,%esp
f010a9ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010a9d1:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010a9d5:	75 14                	jne    f010a9eb <__sys_allocate_page+0x111>
	{
		decrement_references(ptr_frame_info);
f010a9d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010a9da:	83 ec 0c             	sub    $0xc,%esp
f010a9dd:	50                   	push   %eax
f010a9de:	e8 c8 91 ff ff       	call   f0103bab <decrement_references>
f010a9e3:	83 c4 10             	add    $0x10,%esp
		return r;
f010a9e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a9e9:	eb 05                	jmp    f010a9f0 <__sys_allocate_page+0x116>
	}
	return 0 ;
f010a9eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a9f0:	c9                   	leave  
f010a9f1:	c3                   	ret    

f010a9f2 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010a9f2:	55                   	push   %ebp
f010a9f3:	89 e5                	mov    %esp,%ebp
f010a9f5:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010a9f8:	83 ec 04             	sub    $0x4,%esp
f010a9fb:	68 c8 14 12 f0       	push   $0xf01214c8
f010aa00:	68 e5 00 00 00       	push   $0xe5
f010aa05:	68 e6 14 12 f0       	push   $0xf01214e6
f010aa0a:	e8 a0 57 ff ff       	call   f01001af <_panic>

f010aa0f <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010aa0f:	55                   	push   %ebp
f010aa10:	89 e5                	mov    %esp,%ebp
f010aa12:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010aa15:	83 ec 04             	sub    $0x4,%esp
f010aa18:	68 f8 14 12 f0       	push   $0xf01214f8
f010aa1d:	68 f4 00 00 00       	push   $0xf4
f010aa22:	68 e6 14 12 f0       	push   $0xf01214e6
f010aa27:	e8 83 57 ff ff       	call   f01001af <_panic>

f010aa2c <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010aa2c:	55                   	push   %ebp
f010aa2d:	89 e5                	mov    %esp,%ebp
f010aa2f:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010aa32:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010aa37:	8b 40 5c             	mov    0x5c(%eax),%eax
f010aa3a:	83 ec 04             	sub    $0x4,%esp
f010aa3d:	ff 75 0c             	pushl  0xc(%ebp)
f010aa40:	ff 75 08             	pushl  0x8(%ebp)
f010aa43:	50                   	push   %eax
f010aa44:	e8 ed 99 ff ff       	call   f0104436 <calculate_required_frames>
f010aa49:	83 c4 10             	add    $0x10,%esp
}
f010aa4c:	c9                   	leave  
f010aa4d:	c3                   	ret    

f010aa4e <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010aa4e:	55                   	push   %ebp
f010aa4f:	89 e5                	mov    %esp,%ebp
f010aa51:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010aa54:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010aa57:	83 ec 0c             	sub    $0xc,%esp
f010aa5a:	50                   	push   %eax
f010aa5b:	e8 86 9a ff ff       	call   f01044e6 <calculate_available_frames>
f010aa60:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010aa63:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010aa66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010aa69:	01 d0                	add    %edx,%eax
}
f010aa6b:	c9                   	leave  
f010aa6c:	c3                   	ret    

f010aa6d <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010aa6d:	55                   	push   %ebp
f010aa6e:	89 e5                	mov    %esp,%ebp
f010aa70:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010aa73:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010aa76:	83 ec 0c             	sub    $0xc,%esp
f010aa79:	50                   	push   %eax
f010aa7a:	e8 67 9a ff ff       	call   f01044e6 <calculate_available_frames>
f010aa7f:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010aa82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010aa85:	c9                   	leave  
f010aa86:	c3                   	ret    

f010aa87 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010aa87:	55                   	push   %ebp
f010aa88:	89 e5                	mov    %esp,%ebp
f010aa8a:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010aa8d:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010aa90:	83 ec 0c             	sub    $0xc,%esp
f010aa93:	50                   	push   %eax
f010aa94:	e8 4d 9a ff ff       	call   f01044e6 <calculate_available_frames>
f010aa99:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010aa9c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010aa9f:	c9                   	leave  
f010aaa0:	c3                   	ret    

f010aaa1 <sys_pf_calculate_allocated_pages>:

int sys_pf_calculate_allocated_pages(void)
{
f010aaa1:	55                   	push   %ebp
f010aaa2:	89 e5                	mov    %esp,%ebp
f010aaa4:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010aaa7:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010aaac:	83 ec 0c             	sub    $0xc,%esp
f010aaaf:	50                   	push   %eax
f010aab0:	e8 25 16 00 00       	call   f010c0da <pf_calculate_allocated_pages>
f010aab5:	83 c4 10             	add    $0x10,%esp
}
f010aab8:	c9                   	leave  
f010aab9:	c3                   	ret    

f010aaba <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010aaba:	55                   	push   %ebp
f010aabb:	89 e5                	mov    %esp,%ebp
f010aabd:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010aac0:	83 ec 0c             	sub    $0xc,%esp
f010aac3:	ff 75 08             	pushl  0x8(%ebp)
f010aac6:	e8 46 00 01 00       	call   f011ab11 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010aacb:	83 c4 10             	add    $0x10,%esp
}
f010aace:	c9                   	leave  
f010aacf:	c3                   	ret    

f010aad0 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010aad0:	55                   	push   %ebp
f010aad1:	89 e5                	mov    %esp,%ebp
f010aad3:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010aad6:	e8 8e ff 00 00       	call   f011aa69 <scarce_memory>
}
f010aadb:	90                   	nop
f010aadc:	c9                   	leave  
f010aadd:	c3                   	ret    

f010aade <sys_freeMem>:

void sys_freeMem(uint32 virtual_address, uint32 size)
{
f010aade:	55                   	push   %ebp
f010aadf:	89 e5                	mov    %esp,%ebp
f010aae1:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010aae4:	e8 0b dd ff ff       	call   f01087f4 <isBufferingEnabled>
f010aae9:	85 c0                	test   %eax,%eax
f010aaeb:	74 19                	je     f010ab06 <sys_freeMem+0x28>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
f010aaed:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010aaf2:	83 ec 04             	sub    $0x4,%esp
f010aaf5:	ff 75 0c             	pushl  0xc(%ebp)
f010aaf8:	ff 75 08             	pushl  0x8(%ebp)
f010aafb:	50                   	push   %eax
f010aafc:	e8 13 96 ff ff       	call   f0104114 <__freeMem_with_buffering>
f010ab01:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		freeMem(curenv, virtual_address, size);
	}
	return;
f010ab04:	eb 18                	jmp    f010ab1e <sys_freeMem+0x40>
	{
		__freeMem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		freeMem(curenv, virtual_address, size);
f010ab06:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010ab0b:	83 ec 04             	sub    $0x4,%esp
f010ab0e:	ff 75 0c             	pushl  0xc(%ebp)
f010ab11:	ff 75 08             	pushl  0x8(%ebp)
f010ab14:	50                   	push   %eax
f010ab15:	e8 dd 95 ff ff       	call   f01040f7 <freeMem>
f010ab1a:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010ab1d:	90                   	nop
}
f010ab1e:	c9                   	leave  
f010ab1f:	c3                   	ret    

f010ab20 <sys_allocateMem>:

void sys_allocateMem(uint32 virtual_address, uint32 size)
{
f010ab20:	55                   	push   %ebp
f010ab21:	89 e5                	mov    %esp,%ebp
f010ab23:	83 ec 08             	sub    $0x8,%esp
	allocateMem(curenv, virtual_address, size);
f010ab26:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010ab2b:	83 ec 04             	sub    $0x4,%esp
f010ab2e:	ff 75 0c             	pushl  0xc(%ebp)
f010ab31:	ff 75 08             	pushl  0x8(%ebp)
f010ab34:	50                   	push   %eax
f010ab35:	e8 30 95 ff ff       	call   f010406a <allocateMem>
f010ab3a:	83 c4 10             	add    $0x10,%esp
	return;
f010ab3d:	90                   	nop
}
f010ab3e:	c9                   	leave  
f010ab3f:	c3                   	ret    

f010ab40 <sys_disable_interrupt>:

//NEW!! 2012...
void sys_disable_interrupt()
{
f010ab40:	55                   	push   %ebp
f010ab41:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010ab43:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010ab48:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f010ab4e:	8b 52 38             	mov    0x38(%edx),%edx
f010ab51:	80 e6 fd             	and    $0xfd,%dh
f010ab54:	89 50 38             	mov    %edx,0x38(%eax)
}
f010ab57:	90                   	nop
f010ab58:	5d                   	pop    %ebp
f010ab59:	c3                   	ret    

f010ab5a <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010ab5a:	55                   	push   %ebp
f010ab5b:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010ab5d:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010ab62:	8b 15 90 1f 7e f0    	mov    0xf07e1f90,%edx
f010ab68:	8b 52 38             	mov    0x38(%edx),%edx
f010ab6b:	80 ce 02             	or     $0x2,%dh
f010ab6e:	89 50 38             	mov    %edx,0x38(%eax)
}
f010ab71:	90                   	nop
f010ab72:	5d                   	pop    %ebp
f010ab73:	c3                   	ret    

f010ab74 <sys_clearFFL>:

void sys_clearFFL()
{
f010ab74:	55                   	push   %ebp
f010ab75:	89 e5                	mov    %esp,%ebp
f010ab77:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010ab7a:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f010ab7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010ab82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ab89:	eb 12                	jmp    f010ab9d <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010ab8b:	83 ec 0c             	sub    $0xc,%esp
f010ab8e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010ab91:	50                   	push   %eax
f010ab92:	e8 c5 8e ff ff       	call   f0103a5c <allocate_frame>
f010ab97:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i < size ; i++)
f010ab9a:	ff 45 f4             	incl   -0xc(%ebp)
f010ab9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aba0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010aba3:	7c e6                	jl     f010ab8b <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010aba5:	90                   	nop
f010aba6:	c9                   	leave  
f010aba7:	c3                   	ret    

f010aba8 <sys_createSemaphore>:

int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010aba8:	55                   	push   %ebp
f010aba9:	89 e5                	mov    %esp,%ebp
f010abab:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010abae:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010abb3:	8b 40 4c             	mov    0x4c(%eax),%eax
f010abb6:	83 ec 04             	sub    $0x4,%esp
f010abb9:	ff 75 0c             	pushl  0xc(%ebp)
f010abbc:	ff 75 08             	pushl  0x8(%ebp)
f010abbf:	50                   	push   %eax
f010abc0:	e8 0c 1c 00 00       	call   f010c7d1 <createSemaphore>
f010abc5:	83 c4 10             	add    $0x10,%esp
}
f010abc8:	c9                   	leave  
f010abc9:	c3                   	ret    

f010abca <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010abca:	55                   	push   %ebp
f010abcb:	89 e5                	mov    %esp,%ebp
f010abcd:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010abd0:	83 ec 08             	sub    $0x8,%esp
f010abd3:	ff 75 0c             	pushl  0xc(%ebp)
f010abd6:	ff 75 08             	pushl  0x8(%ebp)
f010abd9:	e8 10 1c 00 00       	call   f010c7ee <waitSemaphore>
f010abde:	83 c4 10             	add    $0x10,%esp
}
f010abe1:	90                   	nop
f010abe2:	c9                   	leave  
f010abe3:	c3                   	ret    

f010abe4 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010abe4:	55                   	push   %ebp
f010abe5:	89 e5                	mov    %esp,%ebp
f010abe7:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010abea:	83 ec 08             	sub    $0x8,%esp
f010abed:	ff 75 0c             	pushl  0xc(%ebp)
f010abf0:	ff 75 08             	pushl  0x8(%ebp)
f010abf3:	e8 13 1c 00 00       	call   f010c80b <signalSemaphore>
f010abf8:	83 c4 10             	add    $0x10,%esp
}
f010abfb:	90                   	nop
f010abfc:	c9                   	leave  
f010abfd:	c3                   	ret    

f010abfe <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010abfe:	55                   	push   %ebp
f010abff:	89 e5                	mov    %esp,%ebp
f010ac01:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010ac04:	83 ec 08             	sub    $0x8,%esp
f010ac07:	ff 75 0c             	pushl  0xc(%ebp)
f010ac0a:	ff 75 08             	pushl  0x8(%ebp)
f010ac0d:	e8 37 1a 00 00       	call   f010c649 <get_semaphore_object_ID>
f010ac12:	83 c4 10             	add    $0x10,%esp
f010ac15:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010ac18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ac1c:	78 0c                	js     f010ac2a <sys_getSemaphoreValue+0x2c>
f010ac1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac21:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010ac26:	39 c2                	cmp    %eax,%edx
f010ac28:	72 19                	jb     f010ac43 <sys_getSemaphoreValue+0x45>
f010ac2a:	68 18 15 12 f0       	push   $0xf0121518
f010ac2f:	68 3d 15 12 f0       	push   $0xf012153d
f010ac34:	68 59 01 00 00       	push   $0x159
f010ac39:	68 e6 14 12 f0       	push   $0xf01214e6
f010ac3e:	e8 6c 55 ff ff       	call   f01001af <_panic>

	return semaphores[semID].value ;
f010ac43:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010ac49:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ac4c:	89 d0                	mov    %edx,%eax
f010ac4e:	c1 e0 02             	shl    $0x2,%eax
f010ac51:	01 d0                	add    %edx,%eax
f010ac53:	01 c0                	add    %eax,%eax
f010ac55:	01 d0                	add    %edx,%eax
f010ac57:	01 c0                	add    %eax,%eax
f010ac59:	01 d0                	add    %edx,%eax
f010ac5b:	c1 e0 02             	shl    $0x2,%eax
f010ac5e:	01 c8                	add    %ecx,%eax
f010ac60:	8b 40 54             	mov    0x54(%eax),%eax
}
f010ac63:	c9                   	leave  
f010ac64:	c3                   	ret    

f010ac65 <sys_createSharedObject>:

int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010ac65:	55                   	push   %ebp
f010ac66:	89 e5                	mov    %esp,%ebp
f010ac68:	83 ec 18             	sub    $0x18,%esp
f010ac6b:	8b 45 10             	mov    0x10(%ebp),%eax
f010ac6e:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010ac71:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010ac75:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010ac7a:	8b 40 4c             	mov    0x4c(%eax),%eax
f010ac7d:	83 ec 0c             	sub    $0xc,%esp
f010ac80:	ff 75 14             	pushl  0x14(%ebp)
f010ac83:	52                   	push   %edx
f010ac84:	ff 75 0c             	pushl  0xc(%ebp)
f010ac87:	ff 75 08             	pushl  0x8(%ebp)
f010ac8a:	50                   	push   %eax
f010ac8b:	e8 61 1f 00 00       	call   f010cbf1 <createSharedObject>
f010ac90:	83 c4 20             	add    $0x20,%esp
}
f010ac93:	c9                   	leave  
f010ac94:	c3                   	ret    

f010ac95 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010ac95:	55                   	push   %ebp
f010ac96:	89 e5                	mov    %esp,%ebp
f010ac98:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010ac9b:	83 ec 08             	sub    $0x8,%esp
f010ac9e:	ff 75 0c             	pushl  0xc(%ebp)
f010aca1:	ff 75 08             	pushl  0x8(%ebp)
f010aca4:	e8 47 1e 00 00       	call   f010caf0 <getSizeOfSharedObject>
f010aca9:	83 c4 10             	add    $0x10,%esp
}
f010acac:	c9                   	leave  
f010acad:	c3                   	ret    

f010acae <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010acae:	55                   	push   %ebp
f010acaf:	89 e5                	mov    %esp,%ebp
f010acb1:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010acb4:	83 ec 04             	sub    $0x4,%esp
f010acb7:	ff 75 10             	pushl  0x10(%ebp)
f010acba:	ff 75 0c             	pushl  0xc(%ebp)
f010acbd:	ff 75 08             	pushl  0x8(%ebp)
f010acc0:	e8 4f 1f 00 00       	call   f010cc14 <getSharedObject>
f010acc5:	83 c4 10             	add    $0x10,%esp
}
f010acc8:	c9                   	leave  
f010acc9:	c3                   	ret    

f010acca <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010acca:	55                   	push   %ebp
f010accb:	89 e5                	mov    %esp,%ebp
f010accd:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010acd0:	83 ec 08             	sub    $0x8,%esp
f010acd3:	ff 75 0c             	pushl  0xc(%ebp)
f010acd6:	ff 75 08             	pushl  0x8(%ebp)
f010acd9:	e8 53 1f 00 00       	call   f010cc31 <freeSharedObject>
f010acde:	83 c4 10             	add    $0x10,%esp
}
f010ace1:	c9                   	leave  
f010ace2:	c3                   	ret    

f010ace3 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010ace3:	55                   	push   %ebp
f010ace4:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010ace6:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
}
f010aceb:	5d                   	pop    %ebp
f010acec:	c3                   	ret    

f010aced <sys_create_env>:

//=========

int sys_create_env(char* programName, unsigned int page_WS_size, unsigned int percent_WS_pages_to_remove)
{
f010aced:	55                   	push   %ebp
f010acee:	89 e5                	mov    %esp,%ebp
f010acf0:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, percent_WS_pages_to_remove);
f010acf3:	83 ec 04             	sub    $0x4,%esp
f010acf6:	ff 75 10             	pushl  0x10(%ebp)
f010acf9:	ff 75 0c             	pushl  0xc(%ebp)
f010acfc:	ff 75 08             	pushl  0x8(%ebp)
f010acff:	e8 fc af ff ff       	call   f0105d00 <env_create>
f010ad04:	83 c4 10             	add    $0x10,%esp
f010ad07:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010ad0a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ad0e:	75 07                	jne    f010ad17 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ad10:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ad15:	eb 14                	jmp    f010ad2b <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010ad17:	83 ec 0c             	sub    $0xc,%esp
f010ad1a:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad1d:	e8 50 f0 ff ff       	call   f0109d72 <sched_new_env>
f010ad22:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010ad25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad28:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010ad2b:	c9                   	leave  
f010ad2c:	c3                   	ret    

f010ad2d <sys_run_env>:

void sys_run_env(int32 envId)
{
f010ad2d:	55                   	push   %ebp
f010ad2e:	89 e5                	mov    %esp,%ebp
f010ad30:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ad33:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad36:	83 ec 0c             	sub    $0xc,%esp
f010ad39:	50                   	push   %eax
f010ad3a:	e8 4a f0 ff ff       	call   f0109d89 <sched_run_env>
f010ad3f:	83 c4 10             	add    $0x10,%esp
}
f010ad42:	90                   	nop
f010ad43:	c9                   	leave  
f010ad44:	c3                   	ret    

f010ad45 <sys_free_env>:

void sys_free_env(int32 envId)
{
f010ad45:	55                   	push   %ebp
f010ad46:	89 e5                	mov    %esp,%ebp
f010ad48:	83 ec 08             	sub    $0x8,%esp
	//2015
	sched_kill_env(envId);
f010ad4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad4e:	83 ec 0c             	sub    $0xc,%esp
f010ad51:	50                   	push   %eax
f010ad52:	e8 0d f4 ff ff       	call   f010a164 <sched_kill_env>
f010ad57:	83 c4 10             	add    $0x10,%esp
}
f010ad5a:	90                   	nop
f010ad5b:	c9                   	leave  
f010ad5c:	c3                   	ret    

f010ad5d <sys_get_virtual_time>:

struct uint64 sys_get_virtual_time()
{
f010ad5d:	55                   	push   %ebp
f010ad5e:	89 e5                	mov    %esp,%ebp
f010ad60:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010ad63:	0f 31                	rdtsc  
f010ad65:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ad68:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010ad6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ad6e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ad71:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ad74:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ad77:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad7a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ad7d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ad80:	89 01                	mov    %eax,(%ecx)
f010ad82:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010ad85:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad88:	c9                   	leave  
f010ad89:	c2 04 00             	ret    $0x4

f010ad8c <sys_moveMem>:

//2014
void sys_moveMem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010ad8c:	55                   	push   %ebp
f010ad8d:	89 e5                	mov    %esp,%ebp
f010ad8f:	83 ec 08             	sub    $0x8,%esp
	moveMem(curenv, src_virtual_address, dst_virtual_address, size);
f010ad92:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010ad97:	ff 75 10             	pushl  0x10(%ebp)
f010ad9a:	ff 75 0c             	pushl  0xc(%ebp)
f010ad9d:	ff 75 08             	pushl  0x8(%ebp)
f010ada0:	50                   	push   %eax
f010ada1:	e8 73 96 ff ff       	call   f0104419 <moveMem>
f010ada6:	83 c4 10             	add    $0x10,%esp
	return;
f010ada9:	90                   	nop
}
f010adaa:	c9                   	leave  
f010adab:	c3                   	ret    

f010adac <sys_rcr2>:
uint32 sys_rcr2()
{
f010adac:	55                   	push   %ebp
f010adad:	89 e5                	mov    %esp,%ebp
f010adaf:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010adb2:	0f 20 d0             	mov    %cr2,%eax
f010adb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010adb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010adbb:	90                   	nop
}
f010adbc:	c9                   	leave  
f010adbd:	c3                   	ret    

f010adbe <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010adbe:	55                   	push   %ebp
f010adbf:	89 e5                	mov    %esp,%ebp
f010adc1:	83 ec 04             	sub    $0x4,%esp
f010adc4:	8b 45 08             	mov    0x8(%ebp),%eax
f010adc7:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010adca:	8a 45 fc             	mov    -0x4(%ebp),%al
f010adcd:	a2 c0 1f 7e f0       	mov    %al,0xf07e1fc0
}
f010add2:	90                   	nop
f010add3:	c9                   	leave  
f010add4:	c3                   	ret    

f010add5 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010add5:	55                   	push   %ebp
f010add6:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010add8:	c7 05 3c 0d 80 f0 00 	movl   $0x0,0xf0800d3c
f010addf:	00 00 00 
}
f010ade2:	90                   	nop
f010ade3:	5d                   	pop    %ebp
f010ade4:	c3                   	ret    

f010ade5 <inctst>:
void inctst()
{
f010ade5:	55                   	push   %ebp
f010ade6:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010ade8:	a1 3c 0d 80 f0       	mov    0xf0800d3c,%eax
f010aded:	40                   	inc    %eax
f010adee:	a3 3c 0d 80 f0       	mov    %eax,0xf0800d3c
}
f010adf3:	90                   	nop
f010adf4:	5d                   	pop    %ebp
f010adf5:	c3                   	ret    

f010adf6 <gettst>:
uint32 gettst()
{
f010adf6:	55                   	push   %ebp
f010adf7:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010adf9:	a1 3c 0d 80 f0       	mov    0xf0800d3c,%eax
}
f010adfe:	5d                   	pop    %ebp
f010adff:	c3                   	ret    

f010ae00 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010ae00:	55                   	push   %ebp
f010ae01:	89 e5                	mov    %esp,%ebp
f010ae03:	83 ec 28             	sub    $0x28,%esp
f010ae06:	8b 45 14             	mov    0x14(%ebp),%eax
f010ae09:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010ae0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010ae13:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010ae17:	83 f8 65             	cmp    $0x65,%eax
f010ae1a:	74 5d                	je     f010ae79 <tst+0x79>
f010ae1c:	83 f8 65             	cmp    $0x65,%eax
f010ae1f:	7f 0a                	jg     f010ae2b <tst+0x2b>
f010ae21:	83 f8 62             	cmp    $0x62,%eax
f010ae24:	74 73                	je     f010ae99 <tst+0x99>
f010ae26:	e9 91 00 00 00       	jmp    f010aebc <tst+0xbc>
f010ae2b:	83 f8 67             	cmp    $0x67,%eax
f010ae2e:	74 29                	je     f010ae59 <tst+0x59>
f010ae30:	83 f8 6c             	cmp    $0x6c,%eax
f010ae33:	0f 85 83 00 00 00    	jne    f010aebc <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010ae39:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae3c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae3f:	73 09                	jae    f010ae4a <tst+0x4a>
			chk = 1;
f010ae41:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ae48:	eb 68                	jmp    f010aeb2 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010ae4a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ae4e:	74 62                	je     f010aeb2 <tst+0xb2>
			chk = 1;
f010ae50:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ae57:	eb 59                	jmp    f010aeb2 <tst+0xb2>
	case 'g':
		if (n > v1)
f010ae59:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae5c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae5f:	76 09                	jbe    f010ae6a <tst+0x6a>
			chk = 1;
f010ae61:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ae68:	eb 4b                	jmp    f010aeb5 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010ae6a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ae6e:	74 45                	je     f010aeb5 <tst+0xb5>
			chk = 1;
f010ae70:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ae77:	eb 3c                	jmp    f010aeb5 <tst+0xb5>
	case 'e':
		if (n == v1)
f010ae79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae7c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae7f:	75 09                	jne    f010ae8a <tst+0x8a>
			chk = 1;
f010ae81:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010ae88:	eb 2e                	jmp    f010aeb8 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010ae8a:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010ae8e:	74 28                	je     f010aeb8 <tst+0xb8>
			chk = 1;
f010ae90:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010ae97:	eb 1f                	jmp    f010aeb8 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010ae99:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae9c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010ae9f:	72 1a                	jb     f010aebb <tst+0xbb>
f010aea1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aea4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010aea7:	77 12                	ja     f010aebb <tst+0xbb>
			chk = 1;
f010aea9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010aeb0:	eb 09                	jmp    f010aebb <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010aeb2:	90                   	nop
f010aeb3:	eb 07                	jmp    f010aebc <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010aeb5:	90                   	nop
f010aeb6:	eb 04                	jmp    f010aebc <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010aeb8:	90                   	nop
f010aeb9:	eb 01                	jmp    f010aebc <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010aebb:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010aebc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010aec0:	75 17                	jne    f010aed9 <tst+0xd9>
f010aec2:	83 ec 04             	sub    $0x4,%esp
f010aec5:	68 52 15 12 f0       	push   $0xf0121552
f010aeca:	68 d2 01 00 00       	push   $0x1d2
f010aecf:	68 e6 14 12 f0       	push   $0xf01214e6
f010aed4:	e8 d6 52 ff ff       	call   f01001af <_panic>
	tstcnt++ ;
f010aed9:	a1 3c 0d 80 f0       	mov    0xf0800d3c,%eax
f010aede:	40                   	inc    %eax
f010aedf:	a3 3c 0d 80 f0       	mov    %eax,0xf0800d3c
	return;
f010aee4:	90                   	nop
}
f010aee5:	c9                   	leave  
f010aee6:	c3                   	ret    

f010aee7 <chktst>:

void chktst(uint32 n)
{
f010aee7:	55                   	push   %ebp
f010aee8:	89 e5                	mov    %esp,%ebp
f010aeea:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010aeed:	a1 3c 0d 80 f0       	mov    0xf0800d3c,%eax
f010aef2:	3b 45 08             	cmp    0x8(%ebp),%eax
f010aef5:	75 12                	jne    f010af09 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010aef7:	83 ec 0c             	sub    $0xc,%esp
f010aefa:	68 68 15 12 f0       	push   $0xf0121568
f010aeff:	e8 00 c3 ff ff       	call   f0107204 <cprintf>
f010af04:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010af07:	eb 17                	jmp    f010af20 <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010af09:	83 ec 04             	sub    $0x4,%esp
f010af0c:	68 94 15 12 f0       	push   $0xf0121594
f010af11:	68 dc 01 00 00       	push   $0x1dc
f010af16:	68 e6 14 12 f0       	push   $0xf01214e6
f010af1b:	e8 8f 52 ff ff       	call   f01001af <_panic>
}
f010af20:	c9                   	leave  
f010af21:	c3                   	ret    

f010af22 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010af22:	55                   	push   %ebp
f010af23:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010af25:	a1 88 28 7e f0       	mov    0xf07e2888,%eax
}
f010af2a:	5d                   	pop    %ebp
f010af2b:	c3                   	ret    

f010af2c <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010af2c:	55                   	push   %ebp
f010af2d:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010af2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010af32:	a3 88 28 7e f0       	mov    %eax,0xf07e2888
}
f010af37:	90                   	nop
f010af38:	5d                   	pop    %ebp
f010af39:	c3                   	ret    

f010af3a <syscall>:


// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010af3a:	55                   	push   %ebp
f010af3b:	89 e5                	mov    %esp,%ebp
f010af3d:	56                   	push   %esi
f010af3e:	53                   	push   %ebx
f010af3f:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010af42:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
f010af46:	0f 87 ec 03 00 00    	ja     f010b338 <syscall+0x3fe>
f010af4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010af4f:	c1 e0 02             	shl    $0x2,%eax
f010af52:	05 b0 15 12 f0       	add    $0xf01215b0,%eax
f010af57:	8b 00                	mov    (%eax),%eax
f010af59:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010af5b:	8b 45 14             	mov    0x14(%ebp),%eax
f010af5e:	0f b6 d0             	movzbl %al,%edx
f010af61:	8b 45 0c             	mov    0xc(%ebp),%eax
f010af64:	83 ec 04             	sub    $0x4,%esp
f010af67:	52                   	push   %edx
f010af68:	ff 75 10             	pushl  0x10(%ebp)
f010af6b:	50                   	push   %eax
f010af6c:	e8 e6 f7 ff ff       	call   f010a757 <sys_cputs>
f010af71:	83 c4 10             	add    $0x10,%esp
		return 0;
f010af74:	b8 00 00 00 00       	mov    $0x0,%eax
f010af79:	e9 bf 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010af7e:	e8 49 f8 ff ff       	call   f010a7cc <sys_cgetc>
f010af83:	e9 b5 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010af88:	e8 5f f8 ff ff       	call   f010a7ec <sys_getenvindex>
f010af8d:	e9 ab 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010af92:	e8 48 f8 ff ff       	call   f010a7df <sys_getenvid>
f010af97:	e9 a1 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010af9c:	e8 96 f8 ff ff       	call   f010a837 <sys_getparentenvid>
f010afa1:	e9 97 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_env_destroy:
		return sys_env_destroy(a1);
f010afa6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010afa9:	83 ec 0c             	sub    $0xc,%esp
f010afac:	50                   	push   %eax
f010afad:	e8 92 f8 ff ff       	call   f010a844 <sys_env_destroy>
f010afb2:	83 c4 10             	add    $0x10,%esp
f010afb5:	e9 83 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_env_exit:
		sys_env_exit();
f010afba:	e8 0d f9 ff ff       	call   f010a8cc <sys_env_exit>
		return 0;
f010afbf:	b8 00 00 00 00       	mov    $0x0,%eax
f010afc4:	e9 74 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010afc9:	83 ec 08             	sub    $0x8,%esp
f010afcc:	ff 75 10             	pushl  0x10(%ebp)
f010afcf:	ff 75 0c             	pushl  0xc(%ebp)
f010afd2:	e8 55 fa ff ff       	call   f010aa2c <sys_calculate_required_frames>
f010afd7:	83 c4 10             	add    $0x10,%esp
f010afda:	e9 5e 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010afdf:	e8 6a fa ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010afe4:	e9 54 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010afe9:	e8 7f fa ff ff       	call   f010aa6d <sys_calculate_modified_frames>
f010afee:	e9 4a 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010aff3:	e8 8f fa ff ff       	call   f010aa87 <sys_calculate_notmod_frames>
f010aff8:	e9 40 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010affd:	e8 9f fa ff ff       	call   f010aaa1 <sys_pf_calculate_allocated_pages>
f010b002:	e9 36 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010b007:	83 ec 0c             	sub    $0xc,%esp
f010b00a:	ff 75 0c             	pushl  0xc(%ebp)
f010b00d:	e8 a8 fa ff ff       	call   f010aaba <sys_calculate_pages_tobe_removed_ready_exit>
f010b012:	83 c4 10             	add    $0x10,%esp
f010b015:	e9 23 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010b01a:	e8 b1 fa ff ff       	call   f010aad0 <sys_scarce_memory>
		return 0;
f010b01f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b024:	e9 14 03 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_freeMem:
		sys_freeMem(a1, a2);
f010b029:	83 ec 08             	sub    $0x8,%esp
f010b02c:	ff 75 10             	pushl  0x10(%ebp)
f010b02f:	ff 75 0c             	pushl  0xc(%ebp)
f010b032:	e8 a7 fa ff ff       	call   f010aade <sys_freeMem>
f010b037:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b03a:	b8 00 00 00 00       	mov    $0x0,%eax
f010b03f:	e9 f9 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010b044:	8b 55 10             	mov    0x10(%ebp),%edx
f010b047:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b04a:	83 ec 08             	sub    $0x8,%esp
f010b04d:	52                   	push   %edx
f010b04e:	50                   	push   %eax
f010b04f:	e8 86 f8 ff ff       	call   f010a8da <__sys_allocate_page>
f010b054:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b057:	b8 00 00 00 00       	mov    $0x0,%eax
f010b05c:	e9 dc 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010b061:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010b064:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010b067:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010b06a:	8b 55 10             	mov    0x10(%ebp),%edx
f010b06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b070:	83 ec 0c             	sub    $0xc,%esp
f010b073:	56                   	push   %esi
f010b074:	53                   	push   %ebx
f010b075:	51                   	push   %ecx
f010b076:	52                   	push   %edx
f010b077:	50                   	push   %eax
f010b078:	e8 75 f9 ff ff       	call   f010a9f2 <__sys_map_frame>
f010b07d:	83 c4 20             	add    $0x20,%esp
		return 0;
f010b080:	b8 00 00 00 00       	mov    $0x0,%eax
f010b085:	e9 b3 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010b08a:	8b 55 10             	mov    0x10(%ebp),%edx
f010b08d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b090:	83 ec 08             	sub    $0x8,%esp
f010b093:	52                   	push   %edx
f010b094:	50                   	push   %eax
f010b095:	e8 75 f9 ff ff       	call   f010aa0f <__sys_unmap_frame>
f010b09a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b09d:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0a2:	e9 96 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_allocateMem:
		//LOG_STATMENT(cprintf("KERNEL syscall: a2 %x\n", a2));
		sys_allocateMem(a1, (uint32)a2);
f010b0a7:	83 ec 08             	sub    $0x8,%esp
f010b0aa:	ff 75 10             	pushl  0x10(%ebp)
f010b0ad:	ff 75 0c             	pushl  0xc(%ebp)
f010b0b0:	e8 6b fa ff ff       	call   f010ab20 <sys_allocateMem>
f010b0b5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0b8:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0bd:	e9 7b 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010b0c2:	e8 79 fa ff ff       	call   f010ab40 <sys_disable_interrupt>
		return 0;
f010b0c7:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0cc:	e9 6c 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010b0d1:	e8 84 fa ff ff       	call   f010ab5a <sys_enable_interrupt>
		return 0;
f010b0d6:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0db:	e9 5d 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010b0e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0e3:	0f be c0             	movsbl %al,%eax
f010b0e6:	83 ec 0c             	sub    $0xc,%esp
f010b0e9:	50                   	push   %eax
f010b0ea:	e8 b9 f6 ff ff       	call   f010a7a8 <sys_cputc>
f010b0ef:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b0f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010b0f7:	e9 41 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010b0fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b0ff:	0f be c0             	movsbl %al,%eax
f010b102:	83 ec 0c             	sub    $0xc,%esp
f010b105:	50                   	push   %eax
f010b106:	e8 69 fa ff ff       	call   f010ab74 <sys_clearFFL>
f010b10b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b10e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b113:	e9 25 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010b118:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b11b:	83 ec 08             	sub    $0x8,%esp
f010b11e:	ff 75 10             	pushl  0x10(%ebp)
f010b121:	50                   	push   %eax
f010b122:	e8 81 fa ff ff       	call   f010aba8 <sys_createSemaphore>
f010b127:	83 c4 10             	add    $0x10,%esp
f010b12a:	e9 0e 02 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010b12f:	8b 55 10             	mov    0x10(%ebp),%edx
f010b132:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b135:	83 ec 08             	sub    $0x8,%esp
f010b138:	52                   	push   %edx
f010b139:	50                   	push   %eax
f010b13a:	e8 8b fa ff ff       	call   f010abca <sys_waitSemaphore>
f010b13f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b142:	b8 00 00 00 00       	mov    $0x0,%eax
f010b147:	e9 f1 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010b14c:	8b 55 10             	mov    0x10(%ebp),%edx
f010b14f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b152:	83 ec 08             	sub    $0x8,%esp
f010b155:	52                   	push   %edx
f010b156:	50                   	push   %eax
f010b157:	e8 88 fa ff ff       	call   f010abe4 <sys_signalSemaphore>
f010b15c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b15f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b164:	e9 d4 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010b169:	8b 55 10             	mov    0x10(%ebp),%edx
f010b16c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b16f:	83 ec 08             	sub    $0x8,%esp
f010b172:	52                   	push   %edx
f010b173:	50                   	push   %eax
f010b174:	e8 85 fa ff ff       	call   f010abfe <sys_getSemaphoreValue>
f010b179:	83 c4 10             	add    $0x10,%esp
f010b17c:	e9 bc 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010b181:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010b184:	8b 45 14             	mov    0x14(%ebp),%eax
f010b187:	0f b6 d0             	movzbl %al,%edx
f010b18a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b18d:	51                   	push   %ecx
f010b18e:	52                   	push   %edx
f010b18f:	ff 75 10             	pushl  0x10(%ebp)
f010b192:	50                   	push   %eax
f010b193:	e8 cd fa ff ff       	call   f010ac65 <sys_createSharedObject>
f010b198:	83 c4 10             	add    $0x10,%esp
f010b19b:	e9 9d 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010b1a0:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010b1a3:	8b 55 10             	mov    0x10(%ebp),%edx
f010b1a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1a9:	83 ec 04             	sub    $0x4,%esp
f010b1ac:	51                   	push   %ecx
f010b1ad:	52                   	push   %edx
f010b1ae:	50                   	push   %eax
f010b1af:	e8 fa fa ff ff       	call   f010acae <sys_getSharedObject>
f010b1b4:	83 c4 10             	add    $0x10,%esp
f010b1b7:	e9 81 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010b1bc:	8b 55 10             	mov    0x10(%ebp),%edx
f010b1bf:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1c2:	83 ec 08             	sub    $0x8,%esp
f010b1c5:	52                   	push   %edx
f010b1c6:	50                   	push   %eax
f010b1c7:	e8 fe fa ff ff       	call   f010acca <sys_freeSharedObject>
f010b1cc:	83 c4 10             	add    $0x10,%esp
f010b1cf:	e9 69 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010b1d4:	8b 55 10             	mov    0x10(%ebp),%edx
f010b1d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1da:	83 ec 08             	sub    $0x8,%esp
f010b1dd:	52                   	push   %edx
f010b1de:	50                   	push   %eax
f010b1df:	e8 b1 fa ff ff       	call   f010ac95 <sys_getSizeOfSharedObject>
f010b1e4:	83 c4 10             	add    $0x10,%esp
f010b1e7:	e9 51 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010b1ec:	e8 f2 fa ff ff       	call   f010ace3 <sys_getMaxShares>
f010b1f1:	e9 47 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3);
f010b1f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b1f9:	83 ec 04             	sub    $0x4,%esp
f010b1fc:	ff 75 14             	pushl  0x14(%ebp)
f010b1ff:	ff 75 10             	pushl  0x10(%ebp)
f010b202:	50                   	push   %eax
f010b203:	e8 e5 fa ff ff       	call   f010aced <sys_create_env>
f010b208:	83 c4 10             	add    $0x10,%esp
f010b20b:	e9 2d 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_free_env:
		sys_free_env((int32)a1);
f010b210:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b213:	83 ec 0c             	sub    $0xc,%esp
f010b216:	50                   	push   %eax
f010b217:	e8 29 fb ff ff       	call   f010ad45 <sys_free_env>
f010b21c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b21f:	b8 00 00 00 00       	mov    $0x0,%eax
f010b224:	e9 14 01 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010b229:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b22c:	83 ec 0c             	sub    $0xc,%esp
f010b22f:	50                   	push   %eax
f010b230:	e8 f8 fa ff ff       	call   f010ad2d <sys_run_env>
f010b235:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b238:	b8 00 00 00 00       	mov    $0x0,%eax
f010b23d:	e9 fb 00 00 00       	jmp    f010b33d <syscall+0x403>
		break;

	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010b242:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010b245:	83 ec 0c             	sub    $0xc,%esp
f010b248:	50                   	push   %eax
f010b249:	e8 0f fb ff ff       	call   f010ad5d <sys_get_virtual_time>
f010b24e:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010b251:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b254:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010b257:	8b 45 10             	mov    0x10(%ebp),%eax
f010b25a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010b25d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b260:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b263:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010b265:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b268:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b26b:	89 10                	mov    %edx,(%eax)
		return 0;
f010b26d:	b8 00 00 00 00       	mov    $0x0,%eax
f010b272:	e9 c6 00 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	}
	case SYS_moveMem:
		sys_moveMem(a1, a2, a3);
f010b277:	83 ec 04             	sub    $0x4,%esp
f010b27a:	ff 75 14             	pushl  0x14(%ebp)
f010b27d:	ff 75 10             	pushl  0x10(%ebp)
f010b280:	ff 75 0c             	pushl  0xc(%ebp)
f010b283:	e8 04 fb ff ff       	call   f010ad8c <sys_moveMem>
f010b288:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b28b:	b8 00 00 00 00       	mov    $0x0,%eax
f010b290:	e9 a8 00 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010b295:	e8 12 fb ff ff       	call   f010adac <sys_rcr2>
f010b29a:	e9 9e 00 00 00       	jmp    f010b33d <syscall+0x403>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010b29f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b2a2:	0f b6 c0             	movzbl %al,%eax
f010b2a5:	83 ec 0c             	sub    $0xc,%esp
f010b2a8:	50                   	push   %eax
f010b2a9:	e8 10 fb ff ff       	call   f010adbe <sys_bypassPageFault>
f010b2ae:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b2b1:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2b6:	e9 82 00 00 00       	jmp    f010b33d <syscall+0x403>

	case SYS_rsttst:
		rsttst();
f010b2bb:	e8 15 fb ff ff       	call   f010add5 <rsttst>
		return 0;
f010b2c0:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2c5:	eb 76                	jmp    f010b33d <syscall+0x403>
	case SYS_inctst:
		inctst();
f010b2c7:	e8 19 fb ff ff       	call   f010ade5 <inctst>
		return 0;
f010b2cc:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2d1:	eb 6a                	jmp    f010b33d <syscall+0x403>
	case SYS_chktst:
		chktst(a1);
f010b2d3:	83 ec 0c             	sub    $0xc,%esp
f010b2d6:	ff 75 0c             	pushl  0xc(%ebp)
f010b2d9:	e8 09 fc ff ff       	call   f010aee7 <chktst>
f010b2de:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b2e1:	b8 00 00 00 00       	mov    $0x0,%eax
f010b2e6:	eb 55                	jmp    f010b33d <syscall+0x403>
	case SYS_gettst:
		return gettst();
f010b2e8:	e8 09 fb ff ff       	call   f010adf6 <gettst>
f010b2ed:	eb 4e                	jmp    f010b33d <syscall+0x403>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010b2ef:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010b2f2:	8b 45 18             	mov    0x18(%ebp),%eax
f010b2f5:	0f be c0             	movsbl %al,%eax
f010b2f8:	83 ec 0c             	sub    $0xc,%esp
f010b2fb:	52                   	push   %edx
f010b2fc:	50                   	push   %eax
f010b2fd:	ff 75 14             	pushl  0x14(%ebp)
f010b300:	ff 75 10             	pushl  0x10(%ebp)
f010b303:	ff 75 0c             	pushl  0xc(%ebp)
f010b306:	e8 f5 fa ff ff       	call   f010ae00 <tst>
f010b30b:	83 c4 20             	add    $0x20,%esp
		return 0;
f010b30e:	b8 00 00 00 00       	mov    $0x0,%eax
f010b313:	eb 28                	jmp    f010b33d <syscall+0x403>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010b315:	e8 08 fc ff ff       	call   f010af22 <sys_get_heap_strategy>
f010b31a:	eb 21                	jmp    f010b33d <syscall+0x403>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010b31c:	83 ec 0c             	sub    $0xc,%esp
f010b31f:	ff 75 0c             	pushl  0xc(%ebp)
f010b322:	e8 05 fc ff ff       	call   f010af2c <sys_set_uheap_strategy>
f010b327:	83 c4 10             	add    $0x10,%esp
		return 0;
f010b32a:	b8 00 00 00 00       	mov    $0x0,%eax
f010b32f:	eb 0c                	jmp    f010b33d <syscall+0x403>

	case NSYSCALLS:
		return 	-E_INVAL;
f010b331:	b8 03 00 00 00       	mov    $0x3,%eax
f010b336:	eb 05                	jmp    f010b33d <syscall+0x403>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010b338:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010b33d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010b340:	5b                   	pop    %ebx
f010b341:	5e                   	pop    %esi
f010b342:	5d                   	pop    %ebp
f010b343:	c3                   	ret    

f010b344 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010b344:	55                   	push   %ebp
f010b345:	89 e5                	mov    %esp,%ebp
f010b347:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010b34a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b34d:	8b 00                	mov    (%eax),%eax
f010b34f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b352:	8b 45 10             	mov    0x10(%ebp),%eax
f010b355:	8b 00                	mov    (%eax),%eax
f010b357:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b35a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	
	while (l <= r) {
f010b361:	e9 ca 00 00 00       	jmp    f010b430 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010b366:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b369:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010b36c:	01 d0                	add    %edx,%eax
f010b36e:	89 c2                	mov    %eax,%edx
f010b370:	c1 ea 1f             	shr    $0x1f,%edx
f010b373:	01 d0                	add    %edx,%eax
f010b375:	d1 f8                	sar    %eax
f010b377:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010b37a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b37d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010b380:	eb 03                	jmp    f010b385 <stab_binsearch+0x41>
			m--;
f010b382:	ff 4d f0             	decl   -0x10(%ebp)
	
	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;
		
		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010b385:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b388:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b38b:	7c 1e                	jl     f010b3ab <stab_binsearch+0x67>
f010b38d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b390:	89 d0                	mov    %edx,%eax
f010b392:	01 c0                	add    %eax,%eax
f010b394:	01 d0                	add    %edx,%eax
f010b396:	c1 e0 02             	shl    $0x2,%eax
f010b399:	89 c2                	mov    %eax,%edx
f010b39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b39e:	01 d0                	add    %edx,%eax
f010b3a0:	8a 40 04             	mov    0x4(%eax),%al
f010b3a3:	0f b6 c0             	movzbl %al,%eax
f010b3a6:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b3a9:	75 d7                	jne    f010b382 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010b3ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b3ae:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b3b1:	7d 09                	jge    f010b3bc <stab_binsearch+0x78>
			l = true_m + 1;
f010b3b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3b6:	40                   	inc    %eax
f010b3b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010b3ba:	eb 74                	jmp    f010b430 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010b3bc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010b3c3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b3c6:	89 d0                	mov    %edx,%eax
f010b3c8:	01 c0                	add    %eax,%eax
f010b3ca:	01 d0                	add    %edx,%eax
f010b3cc:	c1 e0 02             	shl    $0x2,%eax
f010b3cf:	89 c2                	mov    %eax,%edx
f010b3d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b3d4:	01 d0                	add    %edx,%eax
f010b3d6:	8b 40 08             	mov    0x8(%eax),%eax
f010b3d9:	3b 45 18             	cmp    0x18(%ebp),%eax
f010b3dc:	73 11                	jae    f010b3ef <stab_binsearch+0xab>
			*region_left = m;
f010b3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3e1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b3e4:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010b3e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b3e9:	40                   	inc    %eax
f010b3ea:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b3ed:	eb 41                	jmp    f010b430 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010b3ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b3f2:	89 d0                	mov    %edx,%eax
f010b3f4:	01 c0                	add    %eax,%eax
f010b3f6:	01 d0                	add    %edx,%eax
f010b3f8:	c1 e0 02             	shl    $0x2,%eax
f010b3fb:	89 c2                	mov    %eax,%edx
f010b3fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b400:	01 d0                	add    %edx,%eax
f010b402:	8b 40 08             	mov    0x8(%eax),%eax
f010b405:	3b 45 18             	cmp    0x18(%ebp),%eax
f010b408:	76 14                	jbe    f010b41e <stab_binsearch+0xda>
			*region_right = m - 1;
f010b40a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b40d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b410:	8b 45 10             	mov    0x10(%ebp),%eax
f010b413:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010b415:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b418:	48                   	dec    %eax
f010b419:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010b41c:	eb 12                	jmp    f010b430 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010b41e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b421:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b424:	89 10                	mov    %edx,(%eax)
			l = m;
f010b426:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b429:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010b42c:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;
	
	while (l <= r) {
f010b430:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010b433:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010b436:	0f 8e 2a ff ff ff    	jle    f010b366 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010b43c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b440:	75 0f                	jne    f010b451 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010b442:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b445:	8b 00                	mov    (%eax),%eax
f010b447:	8d 50 ff             	lea    -0x1(%eax),%edx
f010b44a:	8b 45 10             	mov    0x10(%ebp),%eax
f010b44d:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010b44f:	eb 3d                	jmp    f010b48e <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010b451:	8b 45 10             	mov    0x10(%ebp),%eax
f010b454:	8b 00                	mov    (%eax),%eax
f010b456:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010b459:	eb 03                	jmp    f010b45e <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010b45b:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010b45e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b461:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010b463:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010b466:	7d 1e                	jge    f010b486 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010b468:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b46b:	89 d0                	mov    %edx,%eax
f010b46d:	01 c0                	add    %eax,%eax
f010b46f:	01 d0                	add    %edx,%eax
f010b471:	c1 e0 02             	shl    $0x2,%eax
f010b474:	89 c2                	mov    %eax,%edx
f010b476:	8b 45 08             	mov    0x8(%ebp),%eax
f010b479:	01 d0                	add    %edx,%eax
f010b47b:	8a 40 04             	mov    0x4(%eax),%al
f010b47e:	0f b6 c0             	movzbl %al,%eax
f010b481:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b484:	75 d5                	jne    f010b45b <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010b486:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b489:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010b48c:	89 10                	mov    %edx,(%eax)
	}
}
f010b48e:	90                   	nop
f010b48f:	c9                   	leave  
f010b490:	c3                   	ret    

f010b491 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010b491:	55                   	push   %ebp
f010b492:	89 e5                	mov    %esp,%ebp
f010b494:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010b497:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b49a:	c7 00 6c 16 12 f0    	movl   $0xf012166c,(%eax)
	info->eip_line = 0;
f010b4a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010b4aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4ad:	c7 40 08 6c 16 12 f0 	movl   $0xf012166c,0x8(%eax)
	info->eip_fn_namelen = 9;
f010b4b4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4b7:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010b4be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4c1:	8b 55 08             	mov    0x8(%ebp),%edx
f010b4c4:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010b4c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b4ca:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010b4d1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4d4:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010b4d9:	76 1e                	jbe    f010b4f9 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010b4db:	c7 45 f4 70 32 12 f0 	movl   $0xf0123270,-0xc(%ebp)
		stab_end = __STAB_END__;
f010b4e2:	c7 45 f0 f8 a1 14 f0 	movl   $0xf014a1f8,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010b4e9:	c7 45 ec f9 a1 14 f0 	movl   $0xf014a1f9,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010b4f0:	c7 45 e8 d7 30 15 f0 	movl   $0xf01530d7,-0x18(%ebp)
f010b4f7:	eb 2a                	jmp    f010b523 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010b4f9:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.
		
		stabs = usd->stabs;
f010b500:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b503:	8b 00                	mov    (%eax),%eax
f010b505:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010b508:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b50b:	8b 40 04             	mov    0x4(%eax),%eax
f010b50e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010b511:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b514:	8b 40 08             	mov    0x8(%eax),%eax
f010b517:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010b51a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010b51d:	8b 40 0c             	mov    0xc(%eax),%eax
f010b520:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010b523:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b526:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010b529:	76 0a                	jbe    f010b535 <debuginfo_eip+0xa4>
f010b52b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b52e:	48                   	dec    %eax
f010b52f:	8a 00                	mov    (%eax),%al
f010b531:	84 c0                	test   %al,%al
f010b533:	74 0a                	je     f010b53f <debuginfo_eip+0xae>
		return -1;
f010b535:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010b53a:	e9 01 02 00 00       	jmp    f010b740 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.
	
	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010b53f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010b546:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b549:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b54c:	29 c2                	sub    %eax,%edx
f010b54e:	89 d0                	mov    %edx,%eax
f010b550:	c1 f8 02             	sar    $0x2,%eax
f010b553:	89 c2                	mov    %eax,%edx
f010b555:	89 d0                	mov    %edx,%eax
f010b557:	c1 e0 02             	shl    $0x2,%eax
f010b55a:	01 d0                	add    %edx,%eax
f010b55c:	c1 e0 02             	shl    $0x2,%eax
f010b55f:	01 d0                	add    %edx,%eax
f010b561:	c1 e0 02             	shl    $0x2,%eax
f010b564:	01 d0                	add    %edx,%eax
f010b566:	89 c1                	mov    %eax,%ecx
f010b568:	c1 e1 08             	shl    $0x8,%ecx
f010b56b:	01 c8                	add    %ecx,%eax
f010b56d:	89 c1                	mov    %eax,%ecx
f010b56f:	c1 e1 10             	shl    $0x10,%ecx
f010b572:	01 c8                	add    %ecx,%eax
f010b574:	01 c0                	add    %eax,%eax
f010b576:	01 d0                	add    %edx,%eax
f010b578:	48                   	dec    %eax
f010b579:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010b57c:	ff 75 08             	pushl  0x8(%ebp)
f010b57f:	6a 64                	push   $0x64
f010b581:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010b584:	50                   	push   %eax
f010b585:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010b588:	50                   	push   %eax
f010b589:	ff 75 f4             	pushl  -0xc(%ebp)
f010b58c:	e8 b3 fd ff ff       	call   f010b344 <stab_binsearch>
f010b591:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010b594:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b597:	85 c0                	test   %eax,%eax
f010b599:	75 0a                	jne    f010b5a5 <debuginfo_eip+0x114>
		return -1;
f010b59b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010b5a0:	e9 9b 01 00 00       	jmp    f010b740 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010b5a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b5a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010b5ab:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010b5ae:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010b5b1:	ff 75 08             	pushl  0x8(%ebp)
f010b5b4:	6a 24                	push   $0x24
f010b5b6:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010b5b9:	50                   	push   %eax
f010b5ba:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010b5bd:	50                   	push   %eax
f010b5be:	ff 75 f4             	pushl  -0xc(%ebp)
f010b5c1:	e8 7e fd ff ff       	call   f010b344 <stab_binsearch>
f010b5c6:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010b5c9:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010b5cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b5cf:	39 c2                	cmp    %eax,%edx
f010b5d1:	0f 8f 86 00 00 00    	jg     f010b65d <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010b5d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b5da:	89 c2                	mov    %eax,%edx
f010b5dc:	89 d0                	mov    %edx,%eax
f010b5de:	01 c0                	add    %eax,%eax
f010b5e0:	01 d0                	add    %edx,%eax
f010b5e2:	c1 e0 02             	shl    $0x2,%eax
f010b5e5:	89 c2                	mov    %eax,%edx
f010b5e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b5ea:	01 d0                	add    %edx,%eax
f010b5ec:	8b 00                	mov    (%eax),%eax
f010b5ee:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010b5f1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b5f4:	29 d1                	sub    %edx,%ecx
f010b5f6:	89 ca                	mov    %ecx,%edx
f010b5f8:	39 d0                	cmp    %edx,%eax
f010b5fa:	73 22                	jae    f010b61e <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010b5fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b5ff:	89 c2                	mov    %eax,%edx
f010b601:	89 d0                	mov    %edx,%eax
f010b603:	01 c0                	add    %eax,%eax
f010b605:	01 d0                	add    %edx,%eax
f010b607:	c1 e0 02             	shl    $0x2,%eax
f010b60a:	89 c2                	mov    %eax,%edx
f010b60c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b60f:	01 d0                	add    %edx,%eax
f010b611:	8b 10                	mov    (%eax),%edx
f010b613:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b616:	01 c2                	add    %eax,%edx
f010b618:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b61b:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010b61e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b621:	89 c2                	mov    %eax,%edx
f010b623:	89 d0                	mov    %edx,%eax
f010b625:	01 c0                	add    %eax,%eax
f010b627:	01 d0                	add    %edx,%eax
f010b629:	c1 e0 02             	shl    $0x2,%eax
f010b62c:	89 c2                	mov    %eax,%edx
f010b62e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b631:	01 d0                	add    %edx,%eax
f010b633:	8b 50 08             	mov    0x8(%eax),%edx
f010b636:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b639:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010b63c:	8b 55 08             	mov    0x8(%ebp),%edx
f010b63f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b642:	8b 40 10             	mov    0x10(%eax),%eax
f010b645:	29 c2                	sub    %eax,%edx
f010b647:	89 d0                	mov    %edx,%eax
f010b649:	c1 f8 02             	sar    $0x2,%eax
f010b64c:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010b64f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010b652:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010b655:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b658:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010b65b:	eb 15                	jmp    f010b672 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010b65d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b660:	8b 55 08             	mov    0x8(%ebp),%edx
f010b663:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010b666:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b669:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010b66c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010b66f:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010b672:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b675:	8b 40 08             	mov    0x8(%eax),%eax
f010b678:	83 ec 08             	sub    $0x8,%esp
f010b67b:	6a 3a                	push   $0x3a
f010b67d:	50                   	push   %eax
f010b67e:	e8 bc 18 01 00       	call   f011cf3f <strfind>
f010b683:	83 c4 10             	add    $0x10,%esp
f010b686:	89 c2                	mov    %eax,%edx
f010b688:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b68b:	8b 40 08             	mov    0x8(%eax),%eax
f010b68e:	29 c2                	sub    %eax,%edx
f010b690:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b693:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010b696:	eb 03                	jmp    f010b69b <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010b698:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010b69b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b69e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b6a1:	7c 4e                	jl     f010b6f1 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010b6a3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b6a6:	89 d0                	mov    %edx,%eax
f010b6a8:	01 c0                	add    %eax,%eax
f010b6aa:	01 d0                	add    %edx,%eax
f010b6ac:	c1 e0 02             	shl    $0x2,%eax
f010b6af:	89 c2                	mov    %eax,%edx
f010b6b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6b4:	01 d0                	add    %edx,%eax
f010b6b6:	8a 40 04             	mov    0x4(%eax),%al
f010b6b9:	3c 84                	cmp    $0x84,%al
f010b6bb:	74 34                	je     f010b6f1 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010b6bd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b6c0:	89 d0                	mov    %edx,%eax
f010b6c2:	01 c0                	add    %eax,%eax
f010b6c4:	01 d0                	add    %edx,%eax
f010b6c6:	c1 e0 02             	shl    $0x2,%eax
f010b6c9:	89 c2                	mov    %eax,%edx
f010b6cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6ce:	01 d0                	add    %edx,%eax
f010b6d0:	8a 40 04             	mov    0x4(%eax),%al
f010b6d3:	3c 64                	cmp    $0x64,%al
f010b6d5:	75 c1                	jne    f010b698 <debuginfo_eip+0x207>
f010b6d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b6da:	89 d0                	mov    %edx,%eax
f010b6dc:	01 c0                	add    %eax,%eax
f010b6de:	01 d0                	add    %edx,%eax
f010b6e0:	c1 e0 02             	shl    $0x2,%eax
f010b6e3:	89 c2                	mov    %eax,%edx
f010b6e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b6e8:	01 d0                	add    %edx,%eax
f010b6ea:	8b 40 08             	mov    0x8(%eax),%eax
f010b6ed:	85 c0                	test   %eax,%eax
f010b6ef:	74 a7                	je     f010b698 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010b6f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010b6f4:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010b6f7:	7c 42                	jl     f010b73b <debuginfo_eip+0x2aa>
f010b6f9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b6fc:	89 d0                	mov    %edx,%eax
f010b6fe:	01 c0                	add    %eax,%eax
f010b700:	01 d0                	add    %edx,%eax
f010b702:	c1 e0 02             	shl    $0x2,%eax
f010b705:	89 c2                	mov    %eax,%edx
f010b707:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b70a:	01 d0                	add    %edx,%eax
f010b70c:	8b 00                	mov    (%eax),%eax
f010b70e:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010b711:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b714:	29 d1                	sub    %edx,%ecx
f010b716:	89 ca                	mov    %ecx,%edx
f010b718:	39 d0                	cmp    %edx,%eax
f010b71a:	73 1f                	jae    f010b73b <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010b71c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010b71f:	89 d0                	mov    %edx,%eax
f010b721:	01 c0                	add    %eax,%eax
f010b723:	01 d0                	add    %edx,%eax
f010b725:	c1 e0 02             	shl    $0x2,%eax
f010b728:	89 c2                	mov    %eax,%edx
f010b72a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b72d:	01 d0                	add    %edx,%eax
f010b72f:	8b 10                	mov    (%eax),%edx
f010b731:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b734:	01 c2                	add    %eax,%edx
f010b736:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b739:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.

	
	return 0;
f010b73b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b740:	c9                   	leave  
f010b741:	c3                   	ret    

f010b742 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f010b742:	55                   	push   %ebp
f010b743:	89 e5                	mov    %esp,%ebp
f010b745:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010b748:	8b 45 08             	mov    0x8(%ebp),%eax
f010b74b:	05 00 14 00 00       	add    $0x1400,%eax
f010b750:	c1 e0 03             	shl    $0x3,%eax
f010b753:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010b756:	83 ec 04             	sub    $0x4,%esp
f010b759:	6a 08                	push   $0x8
f010b75b:	ff 75 0c             	pushl  0xc(%ebp)
f010b75e:	ff 75 f4             	pushl  -0xc(%ebp)
f010b761:	e8 6a 1d 01 00       	call   f011d4d0 <ide_read>
f010b766:	83 c4 10             	add    $0x10,%esp
f010b769:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f010b76c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b76f:	c9                   	leave  
f010b770:	c3                   	ret    

f010b771 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f010b771:	55                   	push   %ebp
f010b772:	89 e5                	mov    %esp,%ebp
f010b774:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f010b777:	8b 45 08             	mov    0x8(%ebp),%eax
f010b77a:	05 00 14 00 00       	add    $0x1400,%eax
f010b77f:	c1 e0 03             	shl    $0x3,%eax
f010b782:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f010b785:	83 ec 04             	sub    $0x4,%esp
f010b788:	6a 08                	push   $0x8
f010b78a:	ff 75 0c             	pushl  0xc(%ebp)
f010b78d:	ff 75 f4             	pushl  -0xc(%ebp)
f010b790:	e8 7b 1e 01 00       	call   f011d610 <ide_write>
f010b795:	83 c4 10             	add    $0x10,%esp
f010b798:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f010b79b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b79f:	74 14                	je     f010b7b5 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f010b7a1:	83 ec 04             	sub    $0x4,%esp
f010b7a4:	68 78 16 12 f0       	push   $0xf0121678
f010b7a9:	6a 37                	push   $0x37
f010b7ab:	68 8f 16 12 f0       	push   $0xf012168f
f010b7b0:	e8 fa 49 ff ff       	call   f01001af <_panic>
	return success;
f010b7b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010b7b8:	c9                   	leave  
f010b7b9:	c3                   	ret    

f010b7ba <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f010b7ba:	55                   	push   %ebp
f010b7bb:	89 e5                	mov    %esp,%ebp
f010b7bd:	53                   	push   %ebx
f010b7be:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f010b7c1:	c7 05 44 0d 80 f0 00 	movl   $0x0,0xf0800d44
f010b7c8:	00 00 00 
f010b7cb:	c7 05 48 0d 80 f0 00 	movl   $0x0,0xf0800d48
f010b7d2:	00 00 00 
f010b7d5:	c7 05 50 0d 80 f0 00 	movl   $0x0,0xf0800d50
f010b7dc:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010b7df:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f010b7e6:	e9 bc 00 00 00       	jmp    f010b8a7 <initialize_disk_page_file+0xed>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f010b7eb:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b7f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7f4:	89 d0                	mov    %edx,%eax
f010b7f6:	01 c0                	add    %eax,%eax
f010b7f8:	01 d0                	add    %edx,%eax
f010b7fa:	c1 e0 03             	shl    $0x3,%eax
f010b7fd:	01 c8                	add    %ecx,%eax
f010b7ff:	83 ec 0c             	sub    $0xc,%esp
f010b802:	50                   	push   %eax
f010b803:	e8 39 82 ff ff       	call   f0103a41 <initialize_frame_info>
f010b808:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010b80b:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b811:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b814:	89 d0                	mov    %edx,%eax
f010b816:	01 c0                	add    %eax,%eax
f010b818:	01 d0                	add    %edx,%eax
f010b81a:	c1 e0 03             	shl    $0x3,%eax
f010b81d:	01 c8                	add    %ecx,%eax
f010b81f:	8b 15 44 0d 80 f0    	mov    0xf0800d44,%edx
f010b825:	89 10                	mov    %edx,(%eax)
f010b827:	8b 00                	mov    (%eax),%eax
f010b829:	85 c0                	test   %eax,%eax
f010b82b:	74 1f                	je     f010b84c <initialize_disk_page_file+0x92>
f010b82d:	8b 15 44 0d 80 f0    	mov    0xf0800d44,%edx
f010b833:	8b 1d 10 0d 80 f0    	mov    0xf0800d10,%ebx
f010b839:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010b83c:	89 c8                	mov    %ecx,%eax
f010b83e:	01 c0                	add    %eax,%eax
f010b840:	01 c8                	add    %ecx,%eax
f010b842:	c1 e0 03             	shl    $0x3,%eax
f010b845:	01 d8                	add    %ebx,%eax
f010b847:	89 42 04             	mov    %eax,0x4(%edx)
f010b84a:	eb 19                	jmp    f010b865 <initialize_disk_page_file+0xab>
f010b84c:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b852:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b855:	89 d0                	mov    %edx,%eax
f010b857:	01 c0                	add    %eax,%eax
f010b859:	01 d0                	add    %edx,%eax
f010b85b:	c1 e0 03             	shl    $0x3,%eax
f010b85e:	01 c8                	add    %ecx,%eax
f010b860:	a3 48 0d 80 f0       	mov    %eax,0xf0800d48
f010b865:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b86b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b86e:	89 d0                	mov    %edx,%eax
f010b870:	01 c0                	add    %eax,%eax
f010b872:	01 d0                	add    %edx,%eax
f010b874:	c1 e0 03             	shl    $0x3,%eax
f010b877:	01 c8                	add    %ecx,%eax
f010b879:	a3 44 0d 80 f0       	mov    %eax,0xf0800d44
f010b87e:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b884:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b887:	89 d0                	mov    %edx,%eax
f010b889:	01 c0                	add    %eax,%eax
f010b88b:	01 d0                	add    %edx,%eax
f010b88d:	c1 e0 03             	shl    $0x3,%eax
f010b890:	01 c8                	add    %ecx,%eax
f010b892:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b899:	a1 50 0d 80 f0       	mov    0xf0800d50,%eax
f010b89e:	40                   	inc    %eax
f010b89f:	a3 50 0d 80 f0       	mov    %eax,0xf0800d50
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f010b8a4:	ff 45 f4             	incl   -0xc(%ebp)
f010b8a7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f010b8ae:	0f 8e 37 ff ff ff    	jle    f010b7eb <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f010b8b4:	90                   	nop
f010b8b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b8b8:	c9                   	leave  
f010b8b9:	c3                   	ret    

f010b8ba <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct Frame_Info *ptr_frame_info)
{
f010b8ba:	55                   	push   %ebp
f010b8bb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f010b8bd:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8c0:	8b 15 10 0d 80 f0    	mov    0xf0800d10,%edx
f010b8c6:	29 d0                	sub    %edx,%eax
f010b8c8:	c1 f8 03             	sar    $0x3,%eax
f010b8cb:	89 c2                	mov    %eax,%edx
f010b8cd:	89 d0                	mov    %edx,%eax
f010b8cf:	c1 e0 02             	shl    $0x2,%eax
f010b8d2:	01 d0                	add    %edx,%eax
f010b8d4:	c1 e0 02             	shl    $0x2,%eax
f010b8d7:	01 d0                	add    %edx,%eax
f010b8d9:	c1 e0 02             	shl    $0x2,%eax
f010b8dc:	01 d0                	add    %edx,%eax
f010b8de:	89 c1                	mov    %eax,%ecx
f010b8e0:	c1 e1 08             	shl    $0x8,%ecx
f010b8e3:	01 c8                	add    %ecx,%eax
f010b8e5:	89 c1                	mov    %eax,%ecx
f010b8e7:	c1 e1 10             	shl    $0x10,%ecx
f010b8ea:	01 c8                	add    %ecx,%eax
f010b8ec:	01 c0                	add    %eax,%eax
f010b8ee:	01 d0                	add    %edx,%eax
}
f010b8f0:	5d                   	pop    %ebp
f010b8f1:	c3                   	ret    

f010b8f2 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f010b8f2:	55                   	push   %ebp
f010b8f3:	89 e5                	mov    %esp,%ebp
f010b8f5:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct Frame_Info *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f010b8f8:	a1 44 0d 80 f0       	mov    0xf0800d44,%eax
f010b8fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f010b900:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b904:	75 0a                	jne    f010b910 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f010b906:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010b90b:	e9 8d 00 00 00       	jmp    f010b99d <allocate_disk_frame+0xab>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f010b910:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b913:	8b 00                	mov    (%eax),%eax
f010b915:	85 c0                	test   %eax,%eax
f010b917:	74 10                	je     f010b929 <allocate_disk_frame+0x37>
f010b919:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b91c:	8b 00                	mov    (%eax),%eax
f010b91e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b921:	8b 52 04             	mov    0x4(%edx),%edx
f010b924:	89 50 04             	mov    %edx,0x4(%eax)
f010b927:	eb 0b                	jmp    f010b934 <allocate_disk_frame+0x42>
f010b929:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b92c:	8b 40 04             	mov    0x4(%eax),%eax
f010b92f:	a3 48 0d 80 f0       	mov    %eax,0xf0800d48
f010b934:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b937:	8b 40 04             	mov    0x4(%eax),%eax
f010b93a:	85 c0                	test   %eax,%eax
f010b93c:	74 0f                	je     f010b94d <allocate_disk_frame+0x5b>
f010b93e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b941:	8b 40 04             	mov    0x4(%eax),%eax
f010b944:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b947:	8b 12                	mov    (%edx),%edx
f010b949:	89 10                	mov    %edx,(%eax)
f010b94b:	eb 0a                	jmp    f010b957 <allocate_disk_frame+0x65>
f010b94d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b950:	8b 00                	mov    (%eax),%eax
f010b952:	a3 44 0d 80 f0       	mov    %eax,0xf0800d44
f010b957:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b95a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b960:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b963:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010b96a:	a1 50 0d 80 f0       	mov    0xf0800d50,%eax
f010b96f:	48                   	dec    %eax
f010b970:	a3 50 0d 80 f0       	mov    %eax,0xf0800d50
	initialize_frame_info(ptr_frame_info);
f010b975:	83 ec 0c             	sub    $0xc,%esp
f010b978:	ff 75 f4             	pushl  -0xc(%ebp)
f010b97b:	e8 c1 80 ff ff       	call   f0103a41 <initialize_frame_info>
f010b980:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f010b983:	83 ec 0c             	sub    $0xc,%esp
f010b986:	ff 75 f4             	pushl  -0xc(%ebp)
f010b989:	e8 2c ff ff ff       	call   f010b8ba <to_disk_frame_number>
f010b98e:	83 c4 10             	add    $0x10,%esp
f010b991:	89 c2                	mov    %eax,%edx
f010b993:	8b 45 08             	mov    0x8(%ebp),%eax
f010b996:	89 10                	mov    %edx,(%eax)
	return 0;
f010b998:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b99d:	c9                   	leave  
f010b99e:	c3                   	ret    

f010b99f <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f010b99f:	55                   	push   %ebp
f010b9a0:	89 e5                	mov    %esp,%ebp
f010b9a2:	53                   	push   %ebx
	// Fill this function in
	if(dfn == 0) return;
f010b9a3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010b9a7:	0f 84 9b 00 00 00    	je     f010ba48 <free_disk_frame+0xa9>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f010b9ad:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b9b3:	8b 55 08             	mov    0x8(%ebp),%edx
f010b9b6:	89 d0                	mov    %edx,%eax
f010b9b8:	01 c0                	add    %eax,%eax
f010b9ba:	01 d0                	add    %edx,%eax
f010b9bc:	c1 e0 03             	shl    $0x3,%eax
f010b9bf:	01 c8                	add    %ecx,%eax
f010b9c1:	8b 15 44 0d 80 f0    	mov    0xf0800d44,%edx
f010b9c7:	89 10                	mov    %edx,(%eax)
f010b9c9:	8b 00                	mov    (%eax),%eax
f010b9cb:	85 c0                	test   %eax,%eax
f010b9cd:	74 1f                	je     f010b9ee <free_disk_frame+0x4f>
f010b9cf:	8b 15 44 0d 80 f0    	mov    0xf0800d44,%edx
f010b9d5:	8b 1d 10 0d 80 f0    	mov    0xf0800d10,%ebx
f010b9db:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b9de:	89 c8                	mov    %ecx,%eax
f010b9e0:	01 c0                	add    %eax,%eax
f010b9e2:	01 c8                	add    %ecx,%eax
f010b9e4:	c1 e0 03             	shl    $0x3,%eax
f010b9e7:	01 d8                	add    %ebx,%eax
f010b9e9:	89 42 04             	mov    %eax,0x4(%edx)
f010b9ec:	eb 19                	jmp    f010ba07 <free_disk_frame+0x68>
f010b9ee:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010b9f4:	8b 55 08             	mov    0x8(%ebp),%edx
f010b9f7:	89 d0                	mov    %edx,%eax
f010b9f9:	01 c0                	add    %eax,%eax
f010b9fb:	01 d0                	add    %edx,%eax
f010b9fd:	c1 e0 03             	shl    $0x3,%eax
f010ba00:	01 c8                	add    %ecx,%eax
f010ba02:	a3 48 0d 80 f0       	mov    %eax,0xf0800d48
f010ba07:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010ba0d:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba10:	89 d0                	mov    %edx,%eax
f010ba12:	01 c0                	add    %eax,%eax
f010ba14:	01 d0                	add    %edx,%eax
f010ba16:	c1 e0 03             	shl    $0x3,%eax
f010ba19:	01 c8                	add    %ecx,%eax
f010ba1b:	a3 44 0d 80 f0       	mov    %eax,0xf0800d44
f010ba20:	8b 0d 10 0d 80 f0    	mov    0xf0800d10,%ecx
f010ba26:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba29:	89 d0                	mov    %edx,%eax
f010ba2b:	01 c0                	add    %eax,%eax
f010ba2d:	01 d0                	add    %edx,%eax
f010ba2f:	c1 e0 03             	shl    $0x3,%eax
f010ba32:	01 c8                	add    %ecx,%eax
f010ba34:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010ba3b:	a1 50 0d 80 f0       	mov    0xf0800d50,%eax
f010ba40:	40                   	inc    %eax
f010ba41:	a3 50 0d 80 f0       	mov    %eax,0xf0800d50
f010ba46:	eb 01                	jmp    f010ba49 <free_disk_frame+0xaa>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f010ba48:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f010ba49:	5b                   	pop    %ebx
f010ba4a:	5d                   	pop    %ebp
f010ba4b:	c3                   	ret    

f010ba4c <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const void *virtual_address, int create, uint32 **ptr_disk_page_table)
{
f010ba4c:	55                   	push   %ebp
f010ba4d:	89 e5                	mov    %esp,%ebp
f010ba4f:	53                   	push   %ebx
f010ba50:	83 ec 14             	sub    $0x14,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f010ba53:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ba56:	c1 e8 16             	shr    $0x16,%eax
f010ba59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ba60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba63:	01 d0                	add    %edx,%eax
f010ba65:	8b 00                	mov    (%eax),%eax
f010ba67:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(USE_KHEAP && !CHECK_IF_KERNEL_ADDRESS(virtual_address))
f010ba6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ba6d:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010ba72:	77 1d                	ja     f010ba91 <get_disk_page_table+0x45>
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
f010ba74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba77:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ba7c:	83 ec 0c             	sub    $0xc,%esp
f010ba7f:	50                   	push   %eax
f010ba80:	e8 6d 15 00 00       	call   f010cff2 <kheap_virtual_address>
f010ba85:	83 c4 10             	add    $0x10,%esp
f010ba88:	89 c2                	mov    %eax,%edx
f010ba8a:	8b 45 14             	mov    0x14(%ebp),%eax
f010ba8d:	89 10                	mov    %edx,(%eax)
f010ba8f:	eb 44                	jmp    f010bad5 <get_disk_page_table+0x89>
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f010ba91:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ba94:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010ba99:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ba9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba9f:	c1 e8 0c             	shr    $0xc,%eax
f010baa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010baa5:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f010baaa:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f010baad:	72 17                	jb     f010bac6 <get_disk_page_table+0x7a>
f010baaf:	ff 75 f0             	pushl  -0x10(%ebp)
f010bab2:	68 a4 16 12 f0       	push   $0xf01216a4
f010bab7:	68 9b 00 00 00       	push   $0x9b
f010babc:	68 8f 16 12 f0       	push   $0xf012168f
f010bac1:	e8 e9 46 ff ff       	call   f01001af <_panic>
f010bac6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bac9:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010bace:	89 c2                	mov    %eax,%edx
f010bad0:	8b 45 14             	mov    0x14(%ebp),%eax
f010bad3:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010bad5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bad9:	0f 85 80 00 00 00    	jne    f010bb5f <get_disk_page_table+0x113>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f010badf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010bae3:	74 6a                	je     f010bb4f <get_disk_page_table+0x103>
		{

			if(USE_KHEAP)
			{
				*ptr_disk_page_table = (uint32*)kmalloc(PAGE_SIZE);
f010bae5:	83 ec 0c             	sub    $0xc,%esp
f010bae8:	68 00 10 00 00       	push   $0x1000
f010baed:	e8 a3 13 00 00       	call   f010ce95 <kmalloc>
f010baf2:	83 c4 10             	add    $0x10,%esp
f010baf5:	89 c2                	mov    %eax,%edx
f010baf7:	8b 45 14             	mov    0x14(%ebp),%eax
f010bafa:	89 10                	mov    %edx,(%eax)
				if(*ptr_disk_page_table == NULL)
f010bafc:	8b 45 14             	mov    0x14(%ebp),%eax
f010baff:	8b 00                	mov    (%eax),%eax
f010bb01:	85 c0                	test   %eax,%eax
f010bb03:	75 07                	jne    f010bb0c <get_disk_page_table+0xc0>
				{
					return E_NO_VM;
f010bb05:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010bb0a:	eb 58                	jmp    f010bb64 <get_disk_page_table+0x118>
				}
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(
f010bb0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb0f:	c1 e8 16             	shr    $0x16,%eax
f010bb12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010bb19:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb1c:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
f010bb1f:	8b 45 14             	mov    0x14(%ebp),%eax
f010bb22:	8b 00                	mov    (%eax),%eax
f010bb24:	83 ec 0c             	sub    $0xc,%esp
f010bb27:	50                   	push   %eax
f010bb28:	e8 25 15 00 00       	call   f010d052 <kheap_physical_address>
f010bb2d:	83 c4 10             	add    $0x10,%esp
f010bb30:	83 c8 01             	or     $0x1,%eax
f010bb33:	89 03                	mov    %eax,(%ebx)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
				ptr_frame_info->references = 1;
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
			}
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f010bb35:	8b 45 14             	mov    0x14(%ebp),%eax
f010bb38:	8b 00                	mov    (%eax),%eax
f010bb3a:	83 ec 04             	sub    $0x4,%esp
f010bb3d:	68 00 10 00 00       	push   $0x1000
f010bb42:	6a 00                	push   $0x0
f010bb44:	50                   	push   %eax
f010bb45:	e8 21 14 01 00       	call   f011cf6b <memset>
f010bb4a:	83 c4 10             	add    $0x10,%esp
f010bb4d:	eb 10                	jmp    f010bb5f <get_disk_page_table+0x113>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f010bb4f:	8b 45 14             	mov    0x14(%ebp),%eax
f010bb52:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010bb58:	b8 00 00 00 00       	mov    $0x0,%eax
f010bb5d:	eb 05                	jmp    f010bb64 <get_disk_page_table+0x118>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f010bb5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bb64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bb67:	c9                   	leave  
f010bb68:	c3                   	ret    

f010bb69 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010bb69:	55                   	push   %ebp
f010bb6a:	89 e5                	mov    %esp,%ebp
f010bb6c:	83 ec 28             	sub    $0x28,%esp
f010bb6f:	8b 45 10             	mov    0x10(%ebp),%eax
f010bb72:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f010bb75:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010bb79:	74 1c                	je     f010bb97 <pf_add_empty_env_page+0x2e>
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010bb7b:	a1 28 0d 80 f0       	mov    0xf0800d28,%eax
f010bb80:	83 ec 04             	sub    $0x4,%esp
f010bb83:	50                   	push   %eax
f010bb84:	ff 75 0c             	pushl  0xc(%ebp)
f010bb87:	ff 75 08             	pushl  0x8(%ebp)
f010bb8a:	e8 b3 00 00 00       	call   f010bc42 <pf_add_env_page>
f010bb8f:	83 c4 10             	add    $0x10,%esp
f010bb92:	e9 a9 00 00 00       	jmp    f010bc40 <pf_add_empty_env_page+0xd7>

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010bb97:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010bb9e:	76 19                	jbe    f010bbb9 <pf_add_empty_env_page+0x50>
f010bba0:	68 d4 16 12 f0       	push   $0xf01216d4
f010bba5:	68 fa 16 12 f0       	push   $0xf01216fa
f010bbaa:	68 d3 00 00 00       	push   $0xd3
f010bbaf:	68 8f 16 12 f0       	push   $0xf012168f
f010bbb4:	e8 f6 45 ff ff       	call   f01001af <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010bbb9:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbbc:	83 c0 64             	add    $0x64,%eax
f010bbbf:	83 ec 08             	sub    $0x8,%esp
f010bbc2:	50                   	push   %eax
f010bbc3:	ff 75 08             	pushl  0x8(%ebp)
f010bbc6:	e8 96 04 00 00       	call   f010c061 <get_disk_page_directory>
f010bbcb:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010bbce:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bbd1:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd4:	8b 40 64             	mov    0x64(%eax),%eax
f010bbd7:	8d 4d f4             	lea    -0xc(%ebp),%ecx
f010bbda:	51                   	push   %ecx
f010bbdb:	6a 01                	push   $0x1
f010bbdd:	52                   	push   %edx
f010bbde:	50                   	push   %eax
f010bbdf:	e8 68 fe ff ff       	call   f010ba4c <get_disk_page_table>
f010bbe4:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bbe7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bbea:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bbed:	c1 ea 0c             	shr    $0xc,%edx
f010bbf0:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bbf6:	c1 e2 02             	shl    $0x2,%edx
f010bbf9:	01 d0                	add    %edx,%eax
f010bbfb:	8b 00                	mov    (%eax),%eax
f010bbfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010bc00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc03:	85 c0                	test   %eax,%eax
f010bc05:	75 34                	jne    f010bc3b <pf_add_empty_env_page+0xd2>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010bc07:	83 ec 0c             	sub    $0xc,%esp
f010bc0a:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010bc0d:	50                   	push   %eax
f010bc0e:	e8 df fc ff ff       	call   f010b8f2 <allocate_disk_frame>
f010bc13:	83 c4 10             	add    $0x10,%esp
f010bc16:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010bc19:	75 07                	jne    f010bc22 <pf_add_empty_env_page+0xb9>
f010bc1b:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010bc20:	eb 1e                	jmp    f010bc40 <pf_add_empty_env_page+0xd7>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010bc22:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc25:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bc28:	c1 ea 0c             	shr    $0xc,%edx
f010bc2b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bc31:	c1 e2 02             	shl    $0x2,%edx
f010bc34:	01 c2                	add    %eax,%edx
f010bc36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc39:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010bc3b:	b8 00 00 00 00       	mov    $0x0,%eax

}
f010bc40:	c9                   	leave  
f010bc41:	c3                   	ret    

f010bc42 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f010bc42:	55                   	push   %ebp
f010bc43:	89 e5                	mov    %esp,%ebp
f010bc45:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010bc48:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010bc4f:	76 19                	jbe    f010bc6a <pf_add_env_page+0x28>
f010bc51:	68 d4 16 12 f0       	push   $0xf01216d4
f010bc56:	68 fa 16 12 f0       	push   $0xf01216fa
f010bc5b:	68 e8 00 00 00       	push   $0xe8
f010bc60:	68 8f 16 12 f0       	push   $0xf012168f
f010bc65:	e8 45 45 ff ff       	call   f01001af <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010bc6a:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc6d:	83 c0 64             	add    $0x64,%eax
f010bc70:	83 ec 08             	sub    $0x8,%esp
f010bc73:	50                   	push   %eax
f010bc74:	ff 75 08             	pushl  0x8(%ebp)
f010bc77:	e8 e5 03 00 00       	call   f010c061 <get_disk_page_directory>
f010bc7c:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, (void*) virtual_address, 1, &ptr_disk_page_table) ;
f010bc7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bc82:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc85:	8b 40 64             	mov    0x64(%eax),%eax
f010bc88:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010bc8b:	51                   	push   %ecx
f010bc8c:	6a 01                	push   $0x1
f010bc8e:	52                   	push   %edx
f010bc8f:	50                   	push   %eax
f010bc90:	e8 b7 fd ff ff       	call   f010ba4c <get_disk_page_table>
f010bc95:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bc98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bc9b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bc9e:	c1 ea 0c             	shr    $0xc,%edx
f010bca1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bca7:	c1 e2 02             	shl    $0x2,%edx
f010bcaa:	01 d0                	add    %edx,%eax
f010bcac:	8b 00                	mov    (%eax),%eax
f010bcae:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f010bcb1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bcb4:	85 c0                	test   %eax,%eax
f010bcb6:	75 34                	jne    f010bcec <pf_add_env_page+0xaa>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010bcb8:	83 ec 0c             	sub    $0xc,%esp
f010bcbb:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010bcbe:	50                   	push   %eax
f010bcbf:	e8 2e fc ff ff       	call   f010b8f2 <allocate_disk_frame>
f010bcc4:	83 c4 10             	add    $0x10,%esp
f010bcc7:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010bcca:	75 07                	jne    f010bcd3 <pf_add_env_page+0x91>
f010bccc:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010bcd1:	eb 31                	jmp    f010bd04 <pf_add_env_page+0xc2>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f010bcd3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bcd6:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bcd9:	c1 ea 0c             	shr    $0xc,%edx
f010bcdc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bce2:	c1 e2 02             	shl    $0x2,%edx
f010bce5:	01 c2                	add    %eax,%edx
f010bce7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bcea:	89 02                	mov    %eax,(%edx)
//	uint32 oldDir = rcr3();
//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
//	int ret = write_disk_page(dfn, (void*)dataSrc);
//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f010bcec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bcef:	83 ec 08             	sub    $0x8,%esp
f010bcf2:	ff 75 10             	pushl  0x10(%ebp)
f010bcf5:	50                   	push   %eax
f010bcf6:	e8 76 fa ff ff       	call   f010b771 <write_disk_page>
f010bcfb:	83 c4 10             	add    $0x10,%esp
f010bcfe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f010bd01:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010bd04:	c9                   	leave  
f010bd05:	c3                   	ret    

f010bd06 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, void *virtual_address, struct Frame_Info* modified_page_frame_info)
{
f010bd06:	55                   	push   %ebp
f010bd07:	89 e5                	mov    %esp,%ebp
f010bd09:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f010bd0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd0f:	3d ff ff ff ef       	cmp    $0xefffffff,%eax
f010bd14:	76 19                	jbe    f010bd2f <pf_update_env_page+0x29>
f010bd16:	68 d4 16 12 f0       	push   $0xf01216d4
f010bd1b:	68 fa 16 12 f0       	push   $0xf01216fa
f010bd20:	68 09 01 00 00       	push   $0x109
f010bd25:	68 8f 16 12 f0       	push   $0xf012168f
f010bd2a:	e8 80 44 ff ff       	call   f01001af <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010bd2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd32:	83 c0 64             	add    $0x64,%eax
f010bd35:	83 ec 08             	sub    $0x8,%esp
f010bd38:	50                   	push   %eax
f010bd39:	ff 75 08             	pushl  0x8(%ebp)
f010bd3c:	e8 20 03 00 00       	call   f010c061 <get_disk_page_directory>
f010bd41:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010bd44:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd47:	8b 40 64             	mov    0x64(%eax),%eax
f010bd4a:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010bd4d:	52                   	push   %edx
f010bd4e:	6a 00                	push   $0x0
f010bd50:	ff 75 0c             	pushl  0xc(%ebp)
f010bd53:	50                   	push   %eax
f010bd54:	e8 f3 fc ff ff       	call   f010ba4c <get_disk_page_table>
f010bd59:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010bd5c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd5f:	85 c0                	test   %eax,%eax
f010bd61:	75 0a                	jne    f010bd6d <pf_update_env_page+0x67>
f010bd63:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010bd68:	e9 96 00 00 00       	jmp    f010be03 <pf_update_env_page+0xfd>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bd6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd70:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bd73:	c1 ea 0c             	shr    $0xc,%edx
f010bd76:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bd7c:	c1 e2 02             	shl    $0x2,%edx
f010bd7f:	01 d0                	add    %edx,%eax
f010bd81:	8b 00                	mov    (%eax),%eax
f010bd83:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010bd86:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bd8a:	75 07                	jne    f010bd93 <pf_update_env_page+0x8d>
f010bd8c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010bd91:	eb 70                	jmp    f010be03 <pf_update_env_page+0xfd>
	if(USE_KHEAP)
	{
		//FIX: we should implement a better solution for this, but for now
			//		we are using an unused VA in the invalid area of kernel at 0xef800000 (the current USER_LIMIT)
			//		to do temp initialization of a frame.
		map_frame(ptr_env->env_page_directory, modified_page_frame_info, (void*)USER_LIMIT, 0);
f010bd93:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd96:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bd99:	6a 00                	push   $0x0
f010bd9b:	68 00 00 80 ef       	push   $0xef800000
f010bda0:	ff 75 10             	pushl  0x10(%ebp)
f010bda3:	50                   	push   %eax
f010bda4:	e8 2e 80 ff ff       	call   f0103dd7 <map_frame>
f010bda9:	83 c4 10             	add    $0x10,%esp
		ret = write_disk_page(dfn, (void*)ROUNDDOWN(USER_LIMIT, PAGE_SIZE));
f010bdac:	c7 45 f0 00 00 80 ef 	movl   $0xef800000,-0x10(%ebp)
f010bdb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bdb6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bdbb:	83 ec 08             	sub    $0x8,%esp
f010bdbe:	50                   	push   %eax
f010bdbf:	ff 75 f4             	pushl  -0xc(%ebp)
f010bdc2:	e8 aa f9 ff ff       	call   f010b771 <write_disk_page>
f010bdc7:	83 c4 10             	add    $0x10,%esp
f010bdca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		// TEMPORARILY increase the references to prevent unmap_frame from removing the frame
		modified_page_frame_info->references += 1;
f010bdcd:	8b 45 10             	mov    0x10(%ebp),%eax
f010bdd0:	8b 40 08             	mov    0x8(%eax),%eax
f010bdd3:	40                   	inc    %eax
f010bdd4:	8b 55 10             	mov    0x10(%ebp),%edx
f010bdd7:	66 89 42 08          	mov    %ax,0x8(%edx)
		unmap_frame(ptr_env->env_page_directory, (void*)USER_LIMIT);
f010bddb:	8b 45 08             	mov    0x8(%ebp),%eax
f010bdde:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bde1:	83 ec 08             	sub    $0x8,%esp
f010bde4:	68 00 00 80 ef       	push   $0xef800000
f010bde9:	50                   	push   %eax
f010bdea:	e8 17 81 ff ff       	call   f0103f06 <unmap_frame>
f010bdef:	83 c4 10             	add    $0x10,%esp
		// Return it to its original status
		modified_page_frame_info->references -= 1;
f010bdf2:	8b 45 10             	mov    0x10(%ebp),%eax
f010bdf5:	8b 40 08             	mov    0x8(%eax),%eax
f010bdf8:	48                   	dec    %eax
f010bdf9:	8b 55 10             	mov    0x10(%ebp),%edx
f010bdfc:	66 89 42 08          	mov    %ax,0x8(%edx)
	else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
	return ret;
f010be00:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010be03:	c9                   	leave  
f010be04:	c3                   	ret    

f010be05 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
*/
int pf_read_env_page(struct Env* ptr_env, void *virtual_address)
{
f010be05:	55                   	push   %ebp
f010be06:	89 e5                	mov    %esp,%ebp
f010be08:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = (void*) ROUNDDOWN((uint32)virtual_address, PAGE_SIZE);
f010be0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010be0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010be11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be14:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010be19:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010be1c:	8b 45 08             	mov    0x8(%ebp),%eax
f010be1f:	8b 40 64             	mov    0x64(%eax),%eax
f010be22:	85 c0                	test   %eax,%eax
f010be24:	75 07                	jne    f010be2d <pf_read_env_page+0x28>
f010be26:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010be2b:	eb 79                	jmp    f010bea6 <pf_read_env_page+0xa1>

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f010be2d:	8b 45 08             	mov    0x8(%ebp),%eax
f010be30:	8b 40 64             	mov    0x64(%eax),%eax
f010be33:	8d 55 e8             	lea    -0x18(%ebp),%edx
f010be36:	52                   	push   %edx
f010be37:	6a 00                	push   $0x0
f010be39:	ff 75 0c             	pushl  0xc(%ebp)
f010be3c:	50                   	push   %eax
f010be3d:	e8 0a fc ff ff       	call   f010ba4c <get_disk_page_table>
f010be42:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010be45:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010be48:	85 c0                	test   %eax,%eax
f010be4a:	75 07                	jne    f010be53 <pf_read_env_page+0x4e>
f010be4c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010be51:	eb 53                	jmp    f010bea6 <pf_read_env_page+0xa1>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010be53:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010be56:	8b 55 0c             	mov    0xc(%ebp),%edx
f010be59:	c1 ea 0c             	shr    $0xc,%edx
f010be5c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010be62:	c1 e2 02             	shl    $0x2,%edx
f010be65:	01 d0                	add    %edx,%eax
f010be67:	8b 00                	mov    (%eax),%eax
f010be69:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010be6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010be70:	75 07                	jne    f010be79 <pf_read_env_page+0x74>
f010be72:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010be77:	eb 2d                	jmp    f010bea6 <pf_read_env_page+0xa1>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010be79:	83 ec 08             	sub    $0x8,%esp
f010be7c:	ff 75 0c             	pushl  0xc(%ebp)
f010be7f:	ff 75 f0             	pushl  -0x10(%ebp)
f010be82:	e8 bb f8 ff ff       	call   f010b742 <read_disk_page>
f010be87:	83 c4 10             	add    $0x10,%esp
f010be8a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(curenv, (uint32)virtual_address, 0, PERM_MODIFIED);
f010be8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f010be90:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010be95:	6a 40                	push   $0x40
f010be97:	6a 00                	push   $0x0
f010be99:	52                   	push   %edx
f010be9a:	50                   	push   %eax
f010be9b:	e8 eb 90 ff ff       	call   f0104f8b <pt_set_page_permissions>
f010bea0:	83 c4 10             	add    $0x10,%esp

	return disk_read_error;
f010bea3:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010bea6:	c9                   	leave  
f010bea7:	c3                   	ret    

f010bea8 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f010bea8:	55                   	push   %ebp
f010bea9:	89 e5                	mov    %esp,%ebp
f010beab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010beae:	8b 45 08             	mov    0x8(%ebp),%eax
f010beb1:	8b 40 64             	mov    0x64(%eax),%eax
f010beb4:	85 c0                	test   %eax,%eax
f010beb6:	74 63                	je     f010bf1b <pf_remove_env_page+0x73>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
f010beb8:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bebb:	8b 45 08             	mov    0x8(%ebp),%eax
f010bebe:	8b 40 64             	mov    0x64(%eax),%eax
f010bec1:	8d 4d f0             	lea    -0x10(%ebp),%ecx
f010bec4:	51                   	push   %ecx
f010bec5:	6a 00                	push   $0x0
f010bec7:	52                   	push   %edx
f010bec8:	50                   	push   %eax
f010bec9:	e8 7e fb ff ff       	call   f010ba4c <get_disk_page_table>
f010bece:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f010bed1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bed4:	85 c0                	test   %eax,%eax
f010bed6:	74 46                	je     f010bf1e <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010bed8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bedb:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bede:	c1 ea 0c             	shr    $0xc,%edx
f010bee1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bee7:	c1 e2 02             	shl    $0x2,%edx
f010beea:	01 d0                	add    %edx,%eax
f010beec:	8b 00                	mov    (%eax),%eax
f010beee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f010bef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bef4:	8b 55 0c             	mov    0xc(%ebp),%edx
f010bef7:	c1 ea 0c             	shr    $0xc,%edx
f010befa:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010bf00:	c1 e2 02             	shl    $0x2,%edx
f010bf03:	01 d0                	add    %edx,%eax
f010bf05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010bf0b:	83 ec 0c             	sub    $0xc,%esp
f010bf0e:	ff 75 f4             	pushl  -0xc(%ebp)
f010bf11:	e8 89 fa ff ff       	call   f010b99f <free_disk_frame>
f010bf16:	83 c4 10             	add    $0x10,%esp
f010bf19:	eb 04                	jmp    f010bf1f <pf_remove_env_page+0x77>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010bf1b:	90                   	nop
f010bf1c:	eb 01                	jmp    f010bf1f <pf_remove_env_page+0x77>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, (void*)virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f010bf1e:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010bf1f:	c9                   	leave  
f010bf20:	c3                   	ret    

f010bf21 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010bf21:	55                   	push   %ebp
f010bf22:	89 e5                	mov    %esp,%ebp
f010bf24:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010bf27:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bf2e:	e9 b8 00 00 00       	jmp    f010bfeb <pf_free_env+0xca>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010bf33:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf36:	8b 40 64             	mov    0x64(%eax),%eax
f010bf39:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf3c:	c1 e2 02             	shl    $0x2,%edx
f010bf3f:	01 d0                	add    %edx,%eax
f010bf41:	8b 00                	mov    (%eax),%eax
f010bf43:	83 e0 01             	and    $0x1,%eax
f010bf46:	85 c0                	test   %eax,%eax
f010bf48:	0f 84 99 00 00 00    	je     f010bfe7 <pf_free_env+0xc6>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f010bf4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf51:	8b 40 64             	mov    0x64(%eax),%eax
f010bf54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf57:	c1 e2 02             	shl    $0x2,%edx
f010bf5a:	01 d0                	add    %edx,%eax
f010bf5c:	8b 00                	mov    (%eax),%eax
f010bf5e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010bf63:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32 *pt;
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010bf66:	83 ec 0c             	sub    $0xc,%esp
f010bf69:	ff 75 ec             	pushl  -0x14(%ebp)
f010bf6c:	e8 81 10 00 00       	call   f010cff2 <kheap_virtual_address>
f010bf71:	83 c4 10             	add    $0x10,%esp
f010bf74:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010bf77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010bf7e:	eb 3a                	jmp    f010bfba <pf_free_env+0x99>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f010bf80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bf83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010bf8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bf8d:	01 d0                	add    %edx,%eax
f010bf8f:	8b 00                	mov    (%eax),%eax
f010bf91:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			pt[pteno] = 0;
f010bf94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bf97:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010bf9e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bfa1:	01 d0                	add    %edx,%eax
f010bfa3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f010bfa9:	83 ec 0c             	sub    $0xc,%esp
f010bfac:	ff 75 e4             	pushl  -0x1c(%ebp)
f010bfaf:	e8 eb f9 ff ff       	call   f010b99f <free_disk_frame>
f010bfb4:	83 c4 10             	add    $0x10,%esp
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010bfb7:	ff 45 f0             	incl   -0x10(%ebp)
f010bfba:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f010bfc1:	76 bd                	jbe    f010bf80 <pf_free_env+0x5f>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f010bfc3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfc6:	8b 40 64             	mov    0x64(%eax),%eax
f010bfc9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfcc:	c1 e2 02             	shl    $0x2,%edx
f010bfcf:	01 d0                	add    %edx,%eax
f010bfd1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if(USE_KHEAP)
		{
			kfree(pt);
f010bfd7:	83 ec 0c             	sub    $0xc,%esp
f010bfda:	ff 75 e8             	pushl  -0x18(%ebp)
f010bfdd:	e8 fe 0e 00 00       	call   f010cee0 <kfree>
f010bfe2:	83 c4 10             	add    $0x10,%esp
f010bfe5:	eb 01                	jmp    f010bfe8 <pf_free_env+0xc7>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f010bfe7:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010bfe8:	ff 45 f4             	incl   -0xc(%ebp)
f010bfeb:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010bff2:	0f 86 3b ff ff ff    	jbe    f010bf33 <pf_free_env+0x12>
	}

	// free the disk page directory of the environment
	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_pgdir);
f010bff8:	8b 45 08             	mov    0x8(%ebp),%eax
f010bffb:	8b 40 64             	mov    0x64(%eax),%eax
f010bffe:	83 ec 0c             	sub    $0xc,%esp
f010c001:	50                   	push   %eax
f010c002:	e8 d9 0e 00 00       	call   f010cee0 <kfree>
f010c007:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
	}
	ptr_env->disk_env_pgdir = 0;
f010c00a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c00d:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f010c014:	8b 45 08             	mov    0x8(%ebp),%eax
f010c017:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010c01e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c021:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c024:	85 c0                	test   %eax,%eax
f010c026:	74 36                	je     f010c05e <pf_free_env+0x13d>
		return;
	__pf_remove_env_all_tables(ptr_env);
f010c028:	83 ec 0c             	sub    $0xc,%esp
f010c02b:	ff 75 08             	pushl  0x8(%ebp)
f010c02e:	e8 05 03 00 00       	call   f010c338 <__pf_remove_env_all_tables>
f010c033:	83 c4 10             	add    $0x10,%esp


	if(USE_KHEAP)
	{
		kfree(ptr_env->disk_env_tabledir);
f010c036:	8b 45 08             	mov    0x8(%ebp),%eax
f010c039:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c03c:	83 ec 0c             	sub    $0xc,%esp
f010c03f:	50                   	push   %eax
f010c040:	e8 9b 0e 00 00       	call   f010cee0 <kfree>
f010c045:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
f010c048:	8b 45 08             	mov    0x8(%ebp),%eax
f010c04b:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010c052:	8b 45 08             	mov    0x8(%ebp),%eax
f010c055:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f010c05c:	eb 01                	jmp    f010c05f <pf_free_env+0x13e>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010c05e:	90                   	nop
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
	}
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010c05f:	c9                   	leave  
f010c060:	c3                   	ret    

f010c061 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f010c061:	55                   	push   %ebp
f010c062:	89 e5                	mov    %esp,%ebp
f010c064:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f010c067:	8b 45 08             	mov    0x8(%ebp),%eax
f010c06a:	8b 50 64             	mov    0x64(%eax),%edx
f010c06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c070:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f010c072:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c075:	8b 00                	mov    (%eax),%eax
f010c077:	85 c0                	test   %eax,%eax
f010c079:	75 58                	jne    f010c0d3 <get_disk_page_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_page_directory = kmalloc(PAGE_SIZE);
f010c07b:	83 ec 0c             	sub    $0xc,%esp
f010c07e:	68 00 10 00 00       	push   $0x1000
f010c083:	e8 0d 0e 00 00       	call   f010ce95 <kmalloc>
f010c088:	83 c4 10             	add    $0x10,%esp
f010c08b:	89 c2                	mov    %eax,%edx
f010c08d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c090:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_page_directory == NULL)
f010c092:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c095:	8b 00                	mov    (%eax),%eax
f010c097:	85 c0                	test   %eax,%eax
f010c099:	75 07                	jne    f010c0a2 <get_disk_page_directory+0x41>
			{
				return E_NO_VM;
f010c09b:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010c0a0:	eb 36                	jmp    f010c0d8 <get_disk_page_directory+0x77>
			}
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
f010c0a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0a5:	8b 00                	mov    (%eax),%eax
f010c0a7:	83 ec 0c             	sub    $0xc,%esp
f010c0aa:	50                   	push   %eax
f010c0ab:	e8 a2 0f 00 00       	call   f010d052 <kheap_physical_address>
f010c0b0:	83 c4 10             	add    $0x10,%esp
f010c0b3:	89 c2                	mov    %eax,%edx
f010c0b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0b8:	89 50 68             	mov    %edx,0x68(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f010c0bb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c0be:	8b 00                	mov    (%eax),%eax
f010c0c0:	83 ec 04             	sub    $0x4,%esp
f010c0c3:	68 00 10 00 00       	push   $0x1000
f010c0c8:	6a 00                	push   $0x0
f010c0ca:	50                   	push   %eax
f010c0cb:	e8 9b 0e 01 00       	call   f011cf6b <memset>
f010c0d0:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010c0d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c0d8:	c9                   	leave  
f010c0d9:	c3                   	ret    

f010c0da <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010c0da:	55                   	push   %ebp
f010c0db:	89 e5                	mov    %esp,%ebp
f010c0dd:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f010c0e0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010c0e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c0ee:	eb 78                	jmp    f010c168 <pf_calculate_allocated_pages+0x8e>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f010c0f0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c0f3:	8b 40 64             	mov    0x64(%eax),%eax
f010c0f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0f9:	c1 e2 02             	shl    $0x2,%edx
f010c0fc:	01 d0                	add    %edx,%eax
f010c0fe:	8b 00                	mov    (%eax),%eax
f010c100:	83 e0 01             	and    $0x1,%eax
f010c103:	85 c0                	test   %eax,%eax
f010c105:	74 5d                	je     f010c164 <pf_calculate_allocated_pages+0x8a>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f010c107:	8b 45 08             	mov    0x8(%ebp),%eax
f010c10a:	8b 40 64             	mov    0x64(%eax),%eax
f010c10d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c110:	c1 e2 02             	shl    $0x2,%edx
f010c113:	01 d0                	add    %edx,%eax
f010c115:	8b 00                	mov    (%eax),%eax
f010c117:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c11c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if(USE_KHEAP)
		{
			pt = (uint32*) kheap_virtual_address(pa);
f010c11f:	83 ec 0c             	sub    $0xc,%esp
f010c122:	ff 75 e8             	pushl  -0x18(%ebp)
f010c125:	e8 c8 0e 00 00       	call   f010cff2 <kheap_virtual_address>
f010c12a:	83 c4 10             	add    $0x10,%esp
f010c12d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010c130:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010c137:	eb 20                	jmp    f010c159 <pf_calculate_allocated_pages+0x7f>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f010c139:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c13c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010c143:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c146:	01 d0                	add    %edx,%eax
f010c148:	8b 00                	mov    (%eax),%eax
f010c14a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if(dfn != 0)
f010c14d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010c151:	74 03                	je     f010c156 <pf_calculate_allocated_pages+0x7c>
				counter ++;
f010c153:	ff 45 f0             	incl   -0x10(%ebp)
		}


		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010c156:	ff 45 ec             	incl   -0x14(%ebp)
f010c159:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f010c160:	76 d7                	jbe    f010c139 <pf_calculate_allocated_pages+0x5f>
f010c162:	eb 01                	jmp    f010c165 <pf_calculate_allocated_pages+0x8b>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010c164:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010c165:	ff 45 f4             	incl   -0xc(%ebp)
f010c168:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f010c16f:	0f 86 7b ff ff ff    	jbe    f010c0f0 <pf_calculate_allocated_pages+0x16>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010c175:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010c178:	c9                   	leave  
f010c179:	c3                   	ret    

f010c17a <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f010c17a:	55                   	push   %ebp
f010c17b:	89 e5                	mov    %esp,%ebp
f010c17d:	83 ec 10             	sub    $0x10,%esp
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f010c180:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010c187:	a1 44 0d 80 f0       	mov    0xf0800d44,%eax
f010c18c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c18f:	eb 0b                	jmp    f010c19c <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f010c191:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct Frame_Info *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f010c194:	a1 4c 0d 80 f0       	mov    0xf0800d4c,%eax
f010c199:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010c19c:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c1a0:	74 07                	je     f010c1a9 <pf_calculate_free_frames+0x2f>
f010c1a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c1a5:	8b 00                	mov    (%eax),%eax
f010c1a7:	eb 05                	jmp    f010c1ae <pf_calculate_free_frames+0x34>
f010c1a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010c1ae:	a3 4c 0d 80 f0       	mov    %eax,0xf0800d4c
f010c1b3:	a1 4c 0d 80 f0       	mov    0xf0800d4c,%eax
f010c1b8:	85 c0                	test   %eax,%eax
f010c1ba:	75 d5                	jne    f010c191 <pf_calculate_free_frames+0x17>
f010c1bc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c1c0:	75 cf                	jne    f010c191 <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f010c1c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010c1c5:	c9                   	leave  
f010c1c6:	c3                   	ret    

f010c1c7 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f010c1c7:	55                   	push   %ebp
f010c1c8:	89 e5                	mov    %esp,%ebp
f010c1ca:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f010c1cd:	8b 45 08             	mov    0x8(%ebp),%eax
f010c1d0:	8b 50 6c             	mov    0x6c(%eax),%edx
f010c1d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1d6:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f010c1d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1db:	8b 00                	mov    (%eax),%eax
f010c1dd:	85 c0                	test   %eax,%eax
f010c1df:	75 58                	jne    f010c239 <get_disk_table_directory+0x72>
	{
		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> disk directory not found, creating one ...\n"););
		if(USE_KHEAP)
		{
			*ptr_disk_table_directory = kmalloc(PAGE_SIZE);
f010c1e1:	83 ec 0c             	sub    $0xc,%esp
f010c1e4:	68 00 10 00 00       	push   $0x1000
f010c1e9:	e8 a7 0c 00 00       	call   f010ce95 <kmalloc>
f010c1ee:	83 c4 10             	add    $0x10,%esp
f010c1f1:	89 c2                	mov    %eax,%edx
f010c1f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1f6:	89 10                	mov    %edx,(%eax)
			if(*ptr_disk_table_directory == NULL)
f010c1f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c1fb:	8b 00                	mov    (%eax),%eax
f010c1fd:	85 c0                	test   %eax,%eax
f010c1ff:	75 07                	jne    f010c208 <get_disk_table_directory+0x41>
			{
				return E_NO_VM;
f010c201:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
f010c206:	eb 36                	jmp    f010c23e <get_disk_table_directory+0x77>
			}
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
f010c208:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c20b:	8b 00                	mov    (%eax),%eax
f010c20d:	83 ec 0c             	sub    $0xc,%esp
f010c210:	50                   	push   %eax
f010c211:	e8 3c 0e 00 00       	call   f010d052 <kheap_physical_address>
f010c216:	83 c4 10             	add    $0x10,%esp
f010c219:	89 c2                	mov    %eax,%edx
f010c21b:	8b 45 08             	mov    0x8(%ebp),%eax
f010c21e:	89 50 70             	mov    %edx,0x70(%eax)
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
		}

		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f010c221:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c224:	8b 00                	mov    (%eax),%eax
f010c226:	83 ec 04             	sub    $0x4,%esp
f010c229:	68 00 10 00 00       	push   $0x1000
f010c22e:	6a 00                	push   $0x0
f010c230:	50                   	push   %eax
f010c231:	e8 35 0d 01 00       	call   f011cf6b <memset>
f010c236:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010c239:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c23e:	c9                   	leave  
f010c23f:	c3                   	ret    

f010c240 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010c240:	55                   	push   %ebp
f010c241:	89 e5                	mov    %esp,%ebp
f010c243:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010c246:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f010c24d:	76 19                	jbe    f010c268 <__pf_write_env_table+0x28>
f010c24f:	68 d4 16 12 f0       	push   $0xf01216d4
f010c254:	68 fa 16 12 f0       	push   $0xf01216fa
f010c259:	68 3d 02 00 00       	push   $0x23d
f010c25e:	68 8f 16 12 f0       	push   $0xf012168f
f010c263:	e8 47 3f ff ff       	call   f01001af <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010c268:	8b 45 08             	mov    0x8(%ebp),%eax
f010c26b:	83 c0 6c             	add    $0x6c,%eax
f010c26e:	83 ec 08             	sub    $0x8,%esp
f010c271:	50                   	push   %eax
f010c272:	ff 75 08             	pushl  0x8(%ebp)
f010c275:	e8 4d ff ff ff       	call   f010c1c7 <get_disk_table_directory>
f010c27a:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c27d:	8b 45 08             	mov    0x8(%ebp),%eax
f010c280:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c283:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c286:	c1 ea 16             	shr    $0x16,%edx
f010c289:	c1 e2 02             	shl    $0x2,%edx
f010c28c:	01 d0                	add    %edx,%eax
f010c28e:	8b 00                	mov    (%eax),%eax
f010c290:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f010c293:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c296:	85 c0                	test   %eax,%eax
f010c298:	75 31                	jne    f010c2cb <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010c29a:	83 ec 0c             	sub    $0xc,%esp
f010c29d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c2a0:	50                   	push   %eax
f010c2a1:	e8 4c f6 ff ff       	call   f010b8f2 <allocate_disk_frame>
f010c2a6:	83 c4 10             	add    $0x10,%esp
f010c2a9:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010c2ac:	75 07                	jne    f010c2b5 <__pf_write_env_table+0x75>
f010c2ae:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010c2b3:	eb 2e                	jmp    f010c2e3 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f010c2b5:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2b8:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c2bb:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c2be:	c1 ea 16             	shr    $0x16,%edx
f010c2c1:	c1 e2 02             	shl    $0x2,%edx
f010c2c4:	01 c2                	add    %eax,%edx
f010c2c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2c9:	89 02                	mov    %eax,(%edx)
//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f010c2cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c2ce:	83 ec 08             	sub    $0x8,%esp
f010c2d1:	ff 75 10             	pushl  0x10(%ebp)
f010c2d4:	50                   	push   %eax
f010c2d5:	e8 97 f4 ff ff       	call   f010b771 <write_disk_page>
f010c2da:	83 c4 10             	add    $0x10,%esp
f010c2dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f010c2e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c2e3:	c9                   	leave  
f010c2e4:	c3                   	ret    

f010c2e5 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f010c2e5:	55                   	push   %ebp
f010c2e6:	89 e5                	mov    %esp,%ebp
f010c2e8:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010c2eb:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ee:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c2f1:	85 c0                	test   %eax,%eax
f010c2f3:	75 07                	jne    f010c2fc <__pf_read_env_table+0x17>
f010c2f5:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010c2fa:	eb 3a                	jmp    f010c336 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c2fc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c2ff:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c302:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c305:	c1 ea 16             	shr    $0x16,%edx
f010c308:	c1 e2 02             	shl    $0x2,%edx
f010c30b:	01 d0                	add    %edx,%eax
f010c30d:	8b 00                	mov    (%eax),%eax
f010c30f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f010c312:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c316:	75 07                	jne    f010c31f <__pf_read_env_table+0x3a>
f010c318:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f010c31d:	eb 17                	jmp    f010c336 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f010c31f:	83 ec 08             	sub    $0x8,%esp
f010c322:	ff 75 10             	pushl  0x10(%ebp)
f010c325:	ff 75 f4             	pushl  -0xc(%ebp)
f010c328:	e8 15 f4 ff ff       	call   f010b742 <read_disk_page>
f010c32d:	83 c4 10             	add    $0x10,%esp
f010c330:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f010c333:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010c336:	c9                   	leave  
f010c337:	c3                   	ret    

f010c338 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f010c338:	55                   	push   %ebp
f010c339:	89 e5                	mov    %esp,%ebp
f010c33b:	83 ec 10             	sub    $0x10,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010c33e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c341:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c344:	85 c0                	test   %eax,%eax
f010c346:	74 49                	je     f010c391 <__pf_remove_env_all_tables+0x59>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c348:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010c34f:	eb 35                	jmp    f010c386 <__pf_remove_env_all_tables+0x4e>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f010c351:	8b 45 08             	mov    0x8(%ebp),%eax
f010c354:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c357:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c35a:	c1 e2 02             	shl    $0x2,%edx
f010c35d:	01 d0                	add    %edx,%eax
f010c35f:	8b 00                	mov    (%eax),%eax
f010c361:	89 45 f8             	mov    %eax,-0x8(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f010c364:	8b 45 08             	mov    0x8(%ebp),%eax
f010c367:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c36a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c36d:	c1 e2 02             	shl    $0x2,%edx
f010c370:	01 d0                	add    %edx,%eax
f010c372:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f010c378:	ff 75 f8             	pushl  -0x8(%ebp)
f010c37b:	e8 1f f6 ff ff       	call   f010b99f <free_disk_frame>
f010c380:	83 c4 04             	add    $0x4,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010c383:	ff 45 fc             	incl   -0x4(%ebp)
f010c386:	81 7d fc ba 03 00 00 	cmpl   $0x3ba,-0x4(%ebp)
f010c38d:	76 c2                	jbe    f010c351 <__pf_remove_env_all_tables+0x19>
f010c38f:	eb 01                	jmp    f010c392 <__pf_remove_env_all_tables+0x5a>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f010c391:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f010c392:	c9                   	leave  
f010c393:	c3                   	ret    

f010c394 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f010c394:	55                   	push   %ebp
f010c395:	89 e5                	mov    %esp,%ebp
f010c397:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f010c39a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c39e:	75 10                	jne    f010c3b0 <__pf_remove_env_table+0x1c>
			cprintf("REMOVING table 0 from page file\n");
f010c3a0:	83 ec 0c             	sub    $0xc,%esp
f010c3a3:	68 10 17 12 f0       	push   $0xf0121710
f010c3a8:	e8 57 ae ff ff       	call   f0107204 <cprintf>
f010c3ad:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f010c3b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3b3:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c3b6:	85 c0                	test   %eax,%eax
f010c3b8:	74 3d                	je     f010c3f7 <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f010c3ba:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3bd:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c3c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c3c3:	c1 ea 16             	shr    $0x16,%edx
f010c3c6:	c1 e2 02             	shl    $0x2,%edx
f010c3c9:	01 d0                	add    %edx,%eax
f010c3cb:	8b 00                	mov    (%eax),%eax
f010c3cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f010c3d0:	8b 45 08             	mov    0x8(%ebp),%eax
f010c3d3:	8b 40 6c             	mov    0x6c(%eax),%eax
f010c3d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f010c3d9:	c1 ea 16             	shr    $0x16,%edx
f010c3dc:	c1 e2 02             	shl    $0x2,%edx
f010c3df:	01 d0                	add    %edx,%eax
f010c3e1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f010c3e7:	83 ec 0c             	sub    $0xc,%esp
f010c3ea:	ff 75 f4             	pushl  -0xc(%ebp)
f010c3ed:	e8 ad f5 ff ff       	call   f010b99f <free_disk_frame>
f010c3f2:	83 c4 10             	add    $0x10,%esp
f010c3f5:	eb 01                	jmp    f010c3f8 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
			cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f010c3f7:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f010c3f8:	c9                   	leave  
f010c3f9:	c3                   	ret    

f010c3fa <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f010c3fa:	55                   	push   %ebp
f010c3fb:	89 e5                	mov    %esp,%ebp
f010c3fd:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f010c400:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f010c407:	eb 1f                	jmp    f010c428 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f010c409:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c40c:	83 ec 04             	sub    $0x4,%esp
f010c40f:	6a 08                	push   $0x8
f010c411:	ff 75 08             	pushl  0x8(%ebp)
f010c414:	50                   	push   %eax
f010c415:	e8 f6 11 01 00       	call   f011d610 <ide_write>
f010c41a:	83 c4 10             	add    $0x10,%esp
f010c41d:	85 c0                	test   %eax,%eax
f010c41f:	75 12                	jne    f010c433 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f010c421:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f010c428:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f010c42f:	7e d8                	jle    f010c409 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010c431:	eb 01                	jmp    f010c434 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f010c433:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f010c434:	90                   	nop
f010c435:	c9                   	leave  
f010c436:	c3                   	ret    

f010c437 <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010c437:	55                   	push   %ebp
f010c438:	89 e5                	mov    %esp,%ebp
f010c43a:	83 ec 18             	sub    $0x18,%esp
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
f010c43d:	8b 55 08             	mov    0x8(%ebp),%edx
f010c440:	89 d0                	mov    %edx,%eax
f010c442:	c1 e0 02             	shl    $0x2,%eax
f010c445:	01 d0                	add    %edx,%eax
f010c447:	01 c0                	add    %eax,%eax
f010c449:	01 d0                	add    %edx,%eax
f010c44b:	01 c0                	add    %eax,%eax
f010c44d:	01 d0                	add    %edx,%eax
f010c44f:	c1 e0 02             	shl    $0x2,%eax
f010c452:	83 ec 0c             	sub    $0xc,%esp
f010c455:	50                   	push   %eax
f010c456:	e8 3a 0a 00 00       	call   f010ce95 <kmalloc>
f010c45b:	83 c4 10             	add    $0x10,%esp
f010c45e:	a3 78 28 7e f0       	mov    %eax,0xf07e2878
	if (semaphores == NULL)
f010c463:	a1 78 28 7e f0       	mov    0xf07e2878,%eax
f010c468:	85 c0                	test   %eax,%eax
f010c46a:	75 14                	jne    f010c480 <create_semaphores_array+0x49>
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
f010c46c:	83 ec 04             	sub    $0x4,%esp
f010c46f:	68 34 17 12 f0       	push   $0xf0121734
f010c474:	6a 2e                	push   $0x2e
f010c476:	68 74 17 12 f0       	push   $0xf0121774
f010c47b:	e8 2f 3d ff ff       	call   f01001af <_panic>
	}
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c480:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c487:	e9 bd 00 00 00       	jmp    f010c549 <create_semaphores_array+0x112>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010c48c:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c492:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c495:	89 d0                	mov    %edx,%eax
f010c497:	c1 e0 02             	shl    $0x2,%eax
f010c49a:	01 d0                	add    %edx,%eax
f010c49c:	01 c0                	add    %eax,%eax
f010c49e:	01 d0                	add    %edx,%eax
f010c4a0:	01 c0                	add    %eax,%eax
f010c4a2:	01 d0                	add    %edx,%eax
f010c4a4:	c1 e0 02             	shl    $0x2,%eax
f010c4a7:	01 c8                	add    %ecx,%eax
f010c4a9:	83 ec 04             	sub    $0x4,%esp
f010c4ac:	6a 5c                	push   $0x5c
f010c4ae:	6a 00                	push   $0x0
f010c4b0:	50                   	push   %eax
f010c4b1:	e8 b5 0a 01 00       	call   f011cf6b <memset>
f010c4b6:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010c4b9:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c4bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c4c2:	89 d0                	mov    %edx,%eax
f010c4c4:	c1 e0 02             	shl    $0x2,%eax
f010c4c7:	01 d0                	add    %edx,%eax
f010c4c9:	01 c0                	add    %eax,%eax
f010c4cb:	01 d0                	add    %edx,%eax
f010c4cd:	01 c0                	add    %eax,%eax
f010c4cf:	01 d0                	add    %edx,%eax
f010c4d1:	c1 e0 02             	shl    $0x2,%eax
f010c4d4:	01 c8                	add    %ecx,%eax
f010c4d6:	c6 40 58 01          	movb   $0x1,0x58(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010c4da:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c4e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c4e3:	89 d0                	mov    %edx,%eax
f010c4e5:	c1 e0 02             	shl    $0x2,%eax
f010c4e8:	01 d0                	add    %edx,%eax
f010c4ea:	01 c0                	add    %eax,%eax
f010c4ec:	01 d0                	add    %edx,%eax
f010c4ee:	01 c0                	add    %eax,%eax
f010c4f0:	01 d0                	add    %edx,%eax
f010c4f2:	c1 e0 02             	shl    $0x2,%eax
f010c4f5:	01 c8                	add    %ecx,%eax
f010c4f7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010c4fe:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c504:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c507:	89 d0                	mov    %edx,%eax
f010c509:	c1 e0 02             	shl    $0x2,%eax
f010c50c:	01 d0                	add    %edx,%eax
f010c50e:	01 c0                	add    %eax,%eax
f010c510:	01 d0                	add    %edx,%eax
f010c512:	01 c0                	add    %eax,%eax
f010c514:	01 d0                	add    %edx,%eax
f010c516:	c1 e0 02             	shl    $0x2,%eax
f010c519:	01 c8                	add    %ecx,%eax
f010c51b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010c522:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c528:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c52b:	89 d0                	mov    %edx,%eax
f010c52d:	c1 e0 02             	shl    $0x2,%eax
f010c530:	01 d0                	add    %edx,%eax
f010c532:	01 c0                	add    %eax,%eax
f010c534:	01 d0                	add    %edx,%eax
f010c536:	01 c0                	add    %eax,%eax
f010c538:	01 d0                	add    %edx,%eax
f010c53a:	c1 e0 02             	shl    $0x2,%eax
f010c53d:	01 c8                	add    %ecx,%eax
f010c53f:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
	semaphores = (struct Semaphore*) kmalloc(numOfSemaphores*sizeof(struct Semaphore));
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c546:	ff 45 f4             	incl   -0xc(%ebp)
f010c549:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c54c:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c551:	39 c2                	cmp    %eax,%edx
f010c553:	0f 82 33 ff ff ff    	jb     f010c48c <create_semaphores_array+0x55>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}
}
f010c559:	90                   	nop
f010c55a:	c9                   	leave  
f010c55b:	c3                   	ret    

f010c55c <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010c55c:	55                   	push   %ebp
f010c55d:	89 e5                	mov    %esp,%ebp
f010c55f:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010c562:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c569:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c570:	eb 2f                	jmp    f010c5a1 <allocate_semaphore_object+0x45>
	{
		if (semaphores[i].empty)
f010c572:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c578:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c57b:	89 d0                	mov    %edx,%eax
f010c57d:	c1 e0 02             	shl    $0x2,%eax
f010c580:	01 d0                	add    %edx,%eax
f010c582:	01 c0                	add    %eax,%eax
f010c584:	01 d0                	add    %edx,%eax
f010c586:	01 c0                	add    %eax,%eax
f010c588:	01 d0                	add    %edx,%eax
f010c58a:	c1 e0 02             	shl    $0x2,%eax
f010c58d:	01 c8                	add    %ecx,%eax
f010c58f:	8a 40 58             	mov    0x58(%eax),%al
f010c592:	84 c0                	test   %al,%al
f010c594:	74 08                	je     f010c59e <allocate_semaphore_object+0x42>
		{
			semaphoreObjectID = i;
f010c596:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c599:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010c59c:	eb 0f                	jmp    f010c5ad <allocate_semaphore_object+0x51>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010c59e:	ff 45 f0             	incl   -0x10(%ebp)
f010c5a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c5a4:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c5a9:	39 c2                	cmp    %eax,%edx
f010c5ab:	72 c5                	jb     f010c572 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010c5ad:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010c5b1:	75 4d                	jne    f010c600 <allocate_semaphore_object+0xa4>
	{
		//try to double the size of the "semaphores" array
		if (USE_KHEAP == 1)
		{
			semaphores = (struct Semaphore*) krealloc(semaphores, 2*MAX_SEMAPHORES);
f010c5b3:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c5b8:	01 c0                	add    %eax,%eax
f010c5ba:	89 c2                	mov    %eax,%edx
f010c5bc:	a1 78 28 7e f0       	mov    0xf07e2878,%eax
f010c5c1:	83 ec 08             	sub    $0x8,%esp
f010c5c4:	52                   	push   %edx
f010c5c5:	50                   	push   %eax
f010c5c6:	e8 fc 0a 00 00       	call   f010d0c7 <krealloc>
f010c5cb:	83 c4 10             	add    $0x10,%esp
f010c5ce:	a3 78 28 7e f0       	mov    %eax,0xf07e2878
			if (semaphores == NULL)
f010c5d3:	a1 78 28 7e f0       	mov    0xf07e2878,%eax
f010c5d8:	85 c0                	test   %eax,%eax
f010c5da:	75 10                	jne    f010c5ec <allocate_semaphore_object+0x90>
			{
				*allocatedObject = NULL;
f010c5dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SEMAPHORE;
f010c5e5:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
f010c5ea:	eb 5b                	jmp    f010c647 <allocate_semaphore_object+0xeb>
			}
			else
			{
				semaphoreObjectID = MAX_SEMAPHORES;
f010c5ec:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c5f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SEMAPHORES *= 2;
f010c5f4:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c5f9:	01 c0                	add    %eax,%eax
f010c5fb:	a3 50 28 7e f0       	mov    %eax,0xf07e2850
			*allocatedObject = NULL;
			return E_NO_SEMAPHORE;
		}
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010c600:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c606:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c609:	89 d0                	mov    %edx,%eax
f010c60b:	c1 e0 02             	shl    $0x2,%eax
f010c60e:	01 d0                	add    %edx,%eax
f010c610:	01 c0                	add    %eax,%eax
f010c612:	01 d0                	add    %edx,%eax
f010c614:	01 c0                	add    %eax,%eax
f010c616:	01 d0                	add    %edx,%eax
f010c618:	c1 e0 02             	shl    $0x2,%eax
f010c61b:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010c61e:	8b 45 08             	mov    0x8(%ebp),%eax
f010c621:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010c623:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c629:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c62c:	89 d0                	mov    %edx,%eax
f010c62e:	c1 e0 02             	shl    $0x2,%eax
f010c631:	01 d0                	add    %edx,%eax
f010c633:	01 c0                	add    %eax,%eax
f010c635:	01 d0                	add    %edx,%eax
f010c637:	01 c0                	add    %eax,%eax
f010c639:	01 d0                	add    %edx,%eax
f010c63b:	c1 e0 02             	shl    $0x2,%eax
f010c63e:	01 c8                	add    %ecx,%eax
f010c640:	c6 40 58 00          	movb   $0x0,0x58(%eax)

	return semaphoreObjectID;
f010c644:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c647:	c9                   	leave  
f010c648:	c3                   	ret    

f010c649 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010c649:	55                   	push   %ebp
f010c64a:	89 e5                	mov    %esp,%ebp
f010c64c:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010c64f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010c656:	e9 84 00 00 00       	jmp    f010c6df <get_semaphore_object_ID+0x96>
	{
		if (semaphores[i].empty)
f010c65b:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c661:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c664:	89 d0                	mov    %edx,%eax
f010c666:	c1 e0 02             	shl    $0x2,%eax
f010c669:	01 d0                	add    %edx,%eax
f010c66b:	01 c0                	add    %eax,%eax
f010c66d:	01 d0                	add    %edx,%eax
f010c66f:	01 c0                	add    %eax,%eax
f010c671:	01 d0                	add    %edx,%eax
f010c673:	c1 e0 02             	shl    $0x2,%eax
f010c676:	01 c8                	add    %ecx,%eax
f010c678:	8a 40 58             	mov    0x58(%eax),%al
f010c67b:	84 c0                	test   %al,%al
f010c67d:	75 5c                	jne    f010c6db <get_semaphore_object_ID+0x92>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010c67f:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c685:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c688:	89 d0                	mov    %edx,%eax
f010c68a:	c1 e0 02             	shl    $0x2,%eax
f010c68d:	01 d0                	add    %edx,%eax
f010c68f:	01 c0                	add    %eax,%eax
f010c691:	01 d0                	add    %edx,%eax
f010c693:	01 c0                	add    %eax,%eax
f010c695:	01 d0                	add    %edx,%eax
f010c697:	c1 e0 02             	shl    $0x2,%eax
f010c69a:	01 c8                	add    %ecx,%eax
f010c69c:	8b 00                	mov    (%eax),%eax
f010c69e:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c6a1:	75 39                	jne    f010c6dc <get_semaphore_object_ID+0x93>
f010c6a3:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c6a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c6ac:	89 d0                	mov    %edx,%eax
f010c6ae:	c1 e0 02             	shl    $0x2,%eax
f010c6b1:	01 d0                	add    %edx,%eax
f010c6b3:	01 c0                	add    %eax,%eax
f010c6b5:	01 d0                	add    %edx,%eax
f010c6b7:	01 c0                	add    %eax,%eax
f010c6b9:	01 d0                	add    %edx,%eax
f010c6bb:	c1 e0 02             	shl    $0x2,%eax
f010c6be:	01 c8                	add    %ecx,%eax
f010c6c0:	83 c0 04             	add    $0x4,%eax
f010c6c3:	83 ec 08             	sub    $0x8,%esp
f010c6c6:	50                   	push   %eax
f010c6c7:	ff 75 0c             	pushl  0xc(%ebp)
f010c6ca:	e8 ba 07 01 00       	call   f011ce89 <strcmp>
f010c6cf:	83 c4 10             	add    $0x10,%esp
f010c6d2:	85 c0                	test   %eax,%eax
f010c6d4:	75 06                	jne    f010c6dc <get_semaphore_object_ID+0x93>
		{
			return i;
f010c6d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c6d9:	eb 19                	jmp    f010c6f4 <get_semaphore_object_ID+0xab>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010c6db:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010c6dc:	ff 45 f4             	incl   -0xc(%ebp)
f010c6df:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c6e2:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c6e7:	39 c2                	cmp    %eax,%edx
f010c6e9:	0f 82 6c ff ff ff    	jb     f010c65b <get_semaphore_object_ID+0x12>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010c6ef:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010c6f4:	c9                   	leave  
f010c6f5:	c3                   	ret    

f010c6f6 <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010c6f6:	55                   	push   %ebp
f010c6f7:	89 e5                	mov    %esp,%ebp
f010c6f9:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010c6fc:	a1 50 28 7e f0       	mov    0xf07e2850,%eax
f010c701:	39 45 08             	cmp    %eax,0x8(%ebp)
f010c704:	72 0a                	jb     f010c710 <free_semaphore_object+0x1a>
		return E_SEMAPHORE_NOT_EXISTS;
f010c706:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010c70b:	e9 bf 00 00 00       	jmp    f010c7cf <free_semaphore_object+0xd9>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010c710:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c716:	8b 55 08             	mov    0x8(%ebp),%edx
f010c719:	89 d0                	mov    %edx,%eax
f010c71b:	c1 e0 02             	shl    $0x2,%eax
f010c71e:	01 d0                	add    %edx,%eax
f010c720:	01 c0                	add    %eax,%eax
f010c722:	01 d0                	add    %edx,%eax
f010c724:	01 c0                	add    %eax,%eax
f010c726:	01 d0                	add    %edx,%eax
f010c728:	c1 e0 02             	shl    $0x2,%eax
f010c72b:	01 c8                	add    %ecx,%eax
f010c72d:	83 ec 04             	sub    $0x4,%esp
f010c730:	6a 5c                	push   $0x5c
f010c732:	6a 00                	push   $0x0
f010c734:	50                   	push   %eax
f010c735:	e8 31 08 01 00       	call   f011cf6b <memset>
f010c73a:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010c73d:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c743:	8b 55 08             	mov    0x8(%ebp),%edx
f010c746:	89 d0                	mov    %edx,%eax
f010c748:	c1 e0 02             	shl    $0x2,%eax
f010c74b:	01 d0                	add    %edx,%eax
f010c74d:	01 c0                	add    %eax,%eax
f010c74f:	01 d0                	add    %edx,%eax
f010c751:	01 c0                	add    %eax,%eax
f010c753:	01 d0                	add    %edx,%eax
f010c755:	c1 e0 02             	shl    $0x2,%eax
f010c758:	01 c8                	add    %ecx,%eax
f010c75a:	c6 40 58 01          	movb   $0x1,0x58(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010c75e:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c764:	8b 55 08             	mov    0x8(%ebp),%edx
f010c767:	89 d0                	mov    %edx,%eax
f010c769:	c1 e0 02             	shl    $0x2,%eax
f010c76c:	01 d0                	add    %edx,%eax
f010c76e:	01 c0                	add    %eax,%eax
f010c770:	01 d0                	add    %edx,%eax
f010c772:	01 c0                	add    %eax,%eax
f010c774:	01 d0                	add    %edx,%eax
f010c776:	c1 e0 02             	shl    $0x2,%eax
f010c779:	01 c8                	add    %ecx,%eax
f010c77b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010c782:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c788:	8b 55 08             	mov    0x8(%ebp),%edx
f010c78b:	89 d0                	mov    %edx,%eax
f010c78d:	c1 e0 02             	shl    $0x2,%eax
f010c790:	01 d0                	add    %edx,%eax
f010c792:	01 c0                	add    %eax,%eax
f010c794:	01 d0                	add    %edx,%eax
f010c796:	01 c0                	add    %eax,%eax
f010c798:	01 d0                	add    %edx,%eax
f010c79a:	c1 e0 02             	shl    $0x2,%eax
f010c79d:	01 c8                	add    %ecx,%eax
f010c79f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010c7a6:	8b 0d 78 28 7e f0    	mov    0xf07e2878,%ecx
f010c7ac:	8b 55 08             	mov    0x8(%ebp),%edx
f010c7af:	89 d0                	mov    %edx,%eax
f010c7b1:	c1 e0 02             	shl    $0x2,%eax
f010c7b4:	01 d0                	add    %edx,%eax
f010c7b6:	01 c0                	add    %eax,%eax
f010c7b8:	01 d0                	add    %edx,%eax
f010c7ba:	01 c0                	add    %eax,%eax
f010c7bc:	01 d0                	add    %edx,%eax
f010c7be:	c1 e0 02             	shl    $0x2,%eax
f010c7c1:	01 c8                	add    %ecx,%eax
f010c7c3:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)

	return 0;
f010c7ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c7cf:	c9                   	leave  
f010c7d0:	c3                   	ret    

f010c7d1 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010c7d1:	55                   	push   %ebp
f010c7d2:	89 e5                	mov    %esp,%ebp
f010c7d4:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010c7d7:	83 ec 04             	sub    $0x4,%esp
f010c7da:	68 90 17 12 f0       	push   $0xf0121790
f010c7df:	68 a0 00 00 00       	push   $0xa0
f010c7e4:	68 74 17 12 f0       	push   $0xf0121774
f010c7e9:	e8 c1 39 ff ff       	call   f01001af <_panic>

f010c7ee <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c7ee:	55                   	push   %ebp
f010c7ef:	89 e5                	mov    %esp,%ebp
f010c7f1:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010c7f4:	83 ec 04             	sub    $0x4,%esp
f010c7f7:	68 c0 17 12 f0       	push   $0xf01217c0
f010c7fc:	68 b2 00 00 00       	push   $0xb2
f010c801:	68 74 17 12 f0       	push   $0xf0121774
f010c806:	e8 a4 39 ff ff       	call   f01001af <_panic>

f010c80b <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010c80b:	55                   	push   %ebp
f010c80c:	89 e5                	mov    %esp,%ebp
f010c80e:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010c811:	83 ec 04             	sub    $0x4,%esp
f010c814:	68 ec 17 12 f0       	push   $0xf01217ec
f010c819:	68 c8 00 00 00       	push   $0xc8
f010c81e:	68 74 17 12 f0       	push   $0xf0121774
f010c823:	e8 87 39 ff ff       	call   f01001af <_panic>

f010c828 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f010c828:	55                   	push   %ebp
f010c829:	89 e5                	mov    %esp,%ebp
f010c82b:	83 ec 18             	sub    $0x18,%esp
	shares = kmalloc(numOfElements*sizeof(struct Share));
f010c82e:	8b 55 08             	mov    0x8(%ebp),%edx
f010c831:	89 d0                	mov    %edx,%eax
f010c833:	c1 e0 02             	shl    $0x2,%eax
f010c836:	01 d0                	add    %edx,%eax
f010c838:	c1 e0 02             	shl    $0x2,%eax
f010c83b:	01 d0                	add    %edx,%eax
f010c83d:	c1 e0 02             	shl    $0x2,%eax
f010c840:	83 ec 0c             	sub    $0xc,%esp
f010c843:	50                   	push   %eax
f010c844:	e8 4c 06 00 00       	call   f010ce95 <kmalloc>
f010c849:	83 c4 10             	add    $0x10,%esp
f010c84c:	a3 5c 28 7e f0       	mov    %eax,0xf07e285c
	if (shares == NULL)
f010c851:	a1 5c 28 7e f0       	mov    0xf07e285c,%eax
f010c856:	85 c0                	test   %eax,%eax
f010c858:	75 14                	jne    f010c86e <create_shares_array+0x46>
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
f010c85a:	83 ec 04             	sub    $0x4,%esp
f010c85d:	68 1c 18 12 f0       	push   $0xf012181c
f010c862:	6a 1c                	push   $0x1c
f010c864:	68 60 18 12 f0       	push   $0xf0121860
f010c869:	e8 41 39 ff ff       	call   f01001af <_panic>
	}
	for (int i = 0; i < MAX_SHARES; ++i)
f010c86e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c875:	eb 4b                	jmp    f010c8c2 <create_shares_array+0x9a>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f010c877:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c87d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c880:	89 d0                	mov    %edx,%eax
f010c882:	c1 e0 02             	shl    $0x2,%eax
f010c885:	01 d0                	add    %edx,%eax
f010c887:	c1 e0 02             	shl    $0x2,%eax
f010c88a:	01 d0                	add    %edx,%eax
f010c88c:	c1 e0 02             	shl    $0x2,%eax
f010c88f:	01 c8                	add    %ecx,%eax
f010c891:	83 ec 04             	sub    $0x4,%esp
f010c894:	6a 54                	push   $0x54
f010c896:	6a 00                	push   $0x0
f010c898:	50                   	push   %eax
f010c899:	e8 cd 06 01 00       	call   f011cf6b <memset>
f010c89e:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f010c8a1:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c8a7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c8aa:	89 d0                	mov    %edx,%eax
f010c8ac:	c1 e0 02             	shl    $0x2,%eax
f010c8af:	01 d0                	add    %edx,%eax
f010c8b1:	c1 e0 02             	shl    $0x2,%eax
f010c8b4:	01 d0                	add    %edx,%eax
f010c8b6:	c1 e0 02             	shl    $0x2,%eax
f010c8b9:	01 c8                	add    %ecx,%eax
f010c8bb:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)
	shares = kmalloc(numOfElements*sizeof(struct Share));
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
	for (int i = 0; i < MAX_SHARES; ++i)
f010c8bf:	ff 45 f4             	incl   -0xc(%ebp)
f010c8c2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c8c5:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010c8ca:	39 c2                	cmp    %eax,%edx
f010c8cc:	72 a9                	jb     f010c877 <create_shares_array+0x4f>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f010c8ce:	90                   	nop
f010c8cf:	c9                   	leave  
f010c8d0:	c3                   	ret    

f010c8d1 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f010c8d1:	55                   	push   %ebp
f010c8d2:	89 e5                	mov    %esp,%ebp
f010c8d4:	53                   	push   %ebx
f010c8d5:	83 ec 14             	sub    $0x14,%esp
	int32 sharedObjectID = -1 ;
f010c8d8:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f010c8df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c8e6:	eb 2c                	jmp    f010c914 <allocate_share_object+0x43>
	{
		if (shares[i].empty)
f010c8e8:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c8ee:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c8f1:	89 d0                	mov    %edx,%eax
f010c8f3:	c1 e0 02             	shl    $0x2,%eax
f010c8f6:	01 d0                	add    %edx,%eax
f010c8f8:	c1 e0 02             	shl    $0x2,%eax
f010c8fb:	01 d0                	add    %edx,%eax
f010c8fd:	c1 e0 02             	shl    $0x2,%eax
f010c900:	01 c8                	add    %ecx,%eax
f010c902:	8a 40 4d             	mov    0x4d(%eax),%al
f010c905:	84 c0                	test   %al,%al
f010c907:	74 08                	je     f010c911 <allocate_share_object+0x40>
		{
			sharedObjectID = i;
f010c909:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c90c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010c90f:	eb 0f                	jmp    f010c920 <allocate_share_object+0x4f>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f010c911:	ff 45 f0             	incl   -0x10(%ebp)
f010c914:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c917:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010c91c:	39 c2                	cmp    %eax,%edx
f010c91e:	72 c8                	jb     f010c8e8 <allocate_share_object+0x17>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f010c920:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010c924:	75 50                	jne    f010c976 <allocate_share_object+0xa5>
	{
		//try to increase double the size of the "shares" array
		if (USE_KHEAP == 1)
		{
			shares = krealloc(shares, 2*MAX_SHARES);
f010c926:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010c92b:	01 c0                	add    %eax,%eax
f010c92d:	89 c2                	mov    %eax,%edx
f010c92f:	a1 5c 28 7e f0       	mov    0xf07e285c,%eax
f010c934:	83 ec 08             	sub    $0x8,%esp
f010c937:	52                   	push   %edx
f010c938:	50                   	push   %eax
f010c939:	e8 89 07 00 00       	call   f010d0c7 <krealloc>
f010c93e:	83 c4 10             	add    $0x10,%esp
f010c941:	a3 5c 28 7e f0       	mov    %eax,0xf07e285c
			if (shares == NULL)
f010c946:	a1 5c 28 7e f0       	mov    0xf07e285c,%eax
f010c94b:	85 c0                	test   %eax,%eax
f010c94d:	75 13                	jne    f010c962 <allocate_share_object+0x91>
			{
				*allocatedObject = NULL;
f010c94f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c952:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				return E_NO_SHARE;
f010c958:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
f010c95d:	e9 e8 00 00 00       	jmp    f010ca4a <allocate_share_object+0x179>
			}
			else
			{
				sharedObjectID = MAX_SHARES;
f010c962:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010c967:	89 45 f4             	mov    %eax,-0xc(%ebp)
				MAX_SHARES *= 2;
f010c96a:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010c96f:	01 c0                	add    %eax,%eax
f010c971:	a3 80 28 7e f0       	mov    %eax,0xf07e2880
			*allocatedObject = NULL;
			return E_NO_SHARE;
		}
	}

	*allocatedObject = &(shares[sharedObjectID]);
f010c976:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c97c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c97f:	89 d0                	mov    %edx,%eax
f010c981:	c1 e0 02             	shl    $0x2,%eax
f010c984:	01 d0                	add    %edx,%eax
f010c986:	c1 e0 02             	shl    $0x2,%eax
f010c989:	01 d0                	add    %edx,%eax
f010c98b:	c1 e0 02             	shl    $0x2,%eax
f010c98e:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010c991:	8b 45 08             	mov    0x8(%ebp),%eax
f010c994:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010c996:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c99c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c99f:	89 d0                	mov    %edx,%eax
f010c9a1:	c1 e0 02             	shl    $0x2,%eax
f010c9a4:	01 d0                	add    %edx,%eax
f010c9a6:	c1 e0 02             	shl    $0x2,%eax
f010c9a9:	01 d0                	add    %edx,%eax
f010c9ab:	c1 e0 02             	shl    $0x2,%eax
f010c9ae:	01 c8                	add    %ecx,%eax
f010c9b0:	c6 40 4d 00          	movb   $0x0,0x4d(%eax)

	if (USE_KHEAP == 1)
	{
		shares[sharedObjectID].framesStorage = kmalloc(PAGE_SIZE);
f010c9b4:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c9ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9bd:	89 d0                	mov    %edx,%eax
f010c9bf:	c1 e0 02             	shl    $0x2,%eax
f010c9c2:	01 d0                	add    %edx,%eax
f010c9c4:	c1 e0 02             	shl    $0x2,%eax
f010c9c7:	01 d0                	add    %edx,%eax
f010c9c9:	c1 e0 02             	shl    $0x2,%eax
f010c9cc:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
f010c9cf:	83 ec 0c             	sub    $0xc,%esp
f010c9d2:	68 00 10 00 00       	push   $0x1000
f010c9d7:	e8 b9 04 00 00       	call   f010ce95 <kmalloc>
f010c9dc:	83 c4 10             	add    $0x10,%esp
f010c9df:	89 43 50             	mov    %eax,0x50(%ebx)
		if (shares[sharedObjectID].framesStorage == NULL)
f010c9e2:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010c9e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c9eb:	89 d0                	mov    %edx,%eax
f010c9ed:	c1 e0 02             	shl    $0x2,%eax
f010c9f0:	01 d0                	add    %edx,%eax
f010c9f2:	c1 e0 02             	shl    $0x2,%eax
f010c9f5:	01 d0                	add    %edx,%eax
f010c9f7:	c1 e0 02             	shl    $0x2,%eax
f010c9fa:	01 c8                	add    %ecx,%eax
f010c9fc:	8b 40 50             	mov    0x50(%eax),%eax
f010c9ff:	85 c0                	test   %eax,%eax
f010ca01:	75 14                	jne    f010ca17 <allocate_share_object+0x146>
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
f010ca03:	83 ec 04             	sub    $0x4,%esp
f010ca06:	68 80 18 12 f0       	push   $0xf0121880
f010ca0b:	6a 5b                	push   $0x5b
f010ca0d:	68 60 18 12 f0       	push   $0xf0121860
f010ca12:	e8 98 37 ff ff       	call   f01001af <_panic>
		}
		memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f010ca17:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010ca1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca20:	89 d0                	mov    %edx,%eax
f010ca22:	c1 e0 02             	shl    $0x2,%eax
f010ca25:	01 d0                	add    %edx,%eax
f010ca27:	c1 e0 02             	shl    $0x2,%eax
f010ca2a:	01 d0                	add    %edx,%eax
f010ca2c:	c1 e0 02             	shl    $0x2,%eax
f010ca2f:	01 c8                	add    %ecx,%eax
f010ca31:	8b 40 50             	mov    0x50(%eax),%eax
f010ca34:	83 ec 04             	sub    $0x4,%esp
f010ca37:	68 00 10 00 00       	push   $0x1000
f010ca3c:	6a 00                	push   $0x0
f010ca3e:	50                   	push   %eax
f010ca3f:	e8 27 05 01 00       	call   f011cf6b <memset>
f010ca44:	83 c4 10             	add    $0x10,%esp
	}
	return sharedObjectID;
f010ca47:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ca4a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ca4d:	c9                   	leave  
f010ca4e:	c3                   	ret    

f010ca4f <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f010ca4f:	55                   	push   %ebp
f010ca50:	89 e5                	mov    %esp,%ebp
f010ca52:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010ca55:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i< MAX_SHARES; ++i)
f010ca5c:	eb 7b                	jmp    f010cad9 <get_share_object_ID+0x8a>
	{
		if (shares[i].empty)
f010ca5e:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010ca64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca67:	89 d0                	mov    %edx,%eax
f010ca69:	c1 e0 02             	shl    $0x2,%eax
f010ca6c:	01 d0                	add    %edx,%eax
f010ca6e:	c1 e0 02             	shl    $0x2,%eax
f010ca71:	01 d0                	add    %edx,%eax
f010ca73:	c1 e0 02             	shl    $0x2,%eax
f010ca76:	01 c8                	add    %ecx,%eax
f010ca78:	8a 40 4d             	mov    0x4d(%eax),%al
f010ca7b:	84 c0                	test   %al,%al
f010ca7d:	75 56                	jne    f010cad5 <get_share_object_ID+0x86>
			continue;

		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f010ca7f:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010ca85:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ca88:	89 d0                	mov    %edx,%eax
f010ca8a:	c1 e0 02             	shl    $0x2,%eax
f010ca8d:	01 d0                	add    %edx,%eax
f010ca8f:	c1 e0 02             	shl    $0x2,%eax
f010ca92:	01 d0                	add    %edx,%eax
f010ca94:	c1 e0 02             	shl    $0x2,%eax
f010ca97:	01 c8                	add    %ecx,%eax
f010ca99:	8b 00                	mov    (%eax),%eax
f010ca9b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010ca9e:	75 36                	jne    f010cad6 <get_share_object_ID+0x87>
f010caa0:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010caa6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010caa9:	89 d0                	mov    %edx,%eax
f010caab:	c1 e0 02             	shl    $0x2,%eax
f010caae:	01 d0                	add    %edx,%eax
f010cab0:	c1 e0 02             	shl    $0x2,%eax
f010cab3:	01 d0                	add    %edx,%eax
f010cab5:	c1 e0 02             	shl    $0x2,%eax
f010cab8:	01 c8                	add    %ecx,%eax
f010caba:	83 c0 04             	add    $0x4,%eax
f010cabd:	83 ec 08             	sub    $0x8,%esp
f010cac0:	50                   	push   %eax
f010cac1:	ff 75 0c             	pushl  0xc(%ebp)
f010cac4:	e8 c0 03 01 00       	call   f011ce89 <strcmp>
f010cac9:	83 c4 10             	add    $0x10,%esp
f010cacc:	85 c0                	test   %eax,%eax
f010cace:	75 06                	jne    f010cad6 <get_share_object_ID+0x87>
		{
			return i;
f010cad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cad3:	eb 19                	jmp    f010caee <get_share_object_ID+0x9f>
{
	int i=0;
	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f010cad5:	90                   	nop
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i< MAX_SHARES; ++i)
f010cad6:	ff 45 f4             	incl   -0xc(%ebp)
f010cad9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cadc:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010cae1:	39 c2                	cmp    %eax,%edx
f010cae3:	0f 82 75 ff ff ff    	jb     f010ca5e <get_share_object_ID+0xf>
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
		{
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f010cae9:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f010caee:	c9                   	leave  
f010caef:	c3                   	ret    

f010caf0 <getSizeOfSharedObject>:
//Search for the given shared object in the "shares" array
//Return:
//	a) If found, return size of shared object
//	b) Else, return E_SHARED_MEM_NOT_EXISTS
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010caf0:	55                   	push   %ebp
f010caf1:	89 e5                	mov    %esp,%ebp
f010caf3:	83 ec 18             	sub    $0x18,%esp
	int shareObjectID = get_share_object_ID(ownerID, shareName);
f010caf6:	83 ec 08             	sub    $0x8,%esp
f010caf9:	ff 75 0c             	pushl  0xc(%ebp)
f010cafc:	ff 75 08             	pushl  0x8(%ebp)
f010caff:	e8 4b ff ff ff       	call   f010ca4f <get_share_object_ID>
f010cb04:	83 c4 10             	add    $0x10,%esp
f010cb07:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shareObjectID == E_SHARED_MEM_NOT_EXISTS)
f010cb0a:	83 7d f4 f0          	cmpl   $0xfffffff0,-0xc(%ebp)
f010cb0e:	75 07                	jne    f010cb17 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f010cb10:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010cb15:	eb 1d                	jmp    f010cb34 <getSizeOfSharedObject+0x44>
	else
		return shares[shareObjectID].size;
f010cb17:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010cb1d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cb20:	89 d0                	mov    %edx,%eax
f010cb22:	c1 e0 02             	shl    $0x2,%eax
f010cb25:	01 d0                	add    %edx,%eax
f010cb27:	c1 e0 02             	shl    $0x2,%eax
f010cb2a:	01 d0                	add    %edx,%eax
f010cb2c:	c1 e0 02             	shl    $0x2,%eax
f010cb2f:	01 c8                	add    %ecx,%eax
f010cb31:	8b 40 44             	mov    0x44(%eax),%eax

	return 0;
}
f010cb34:	c9                   	leave  
f010cb35:	c3                   	ret    

f010cb36 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f010cb36:	55                   	push   %ebp
f010cb37:	89 e5                	mov    %esp,%ebp
f010cb39:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010cb3c:	a1 80 28 7e f0       	mov    0xf07e2880,%eax
f010cb41:	39 45 08             	cmp    %eax,0x8(%ebp)
f010cb44:	72 0a                	jb     f010cb50 <free_share_object+0x1a>
		return E_SHARED_MEM_NOT_EXISTS;
f010cb46:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f010cb4b:	e9 9f 00 00 00       	jmp    f010cbef <free_share_object+0xb9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010cb50:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010cb56:	8b 55 08             	mov    0x8(%ebp),%edx
f010cb59:	89 d0                	mov    %edx,%eax
f010cb5b:	c1 e0 02             	shl    $0x2,%eax
f010cb5e:	01 d0                	add    %edx,%eax
f010cb60:	c1 e0 02             	shl    $0x2,%eax
f010cb63:	01 d0                	add    %edx,%eax
f010cb65:	c1 e0 02             	shl    $0x2,%eax
f010cb68:	01 c8                	add    %ecx,%eax
f010cb6a:	8b 40 50             	mov    0x50(%eax),%eax
f010cb6d:	83 ec 0c             	sub    $0xc,%esp
f010cb70:	50                   	push   %eax
f010cb71:	e8 55 89 ff ff       	call   f01054cb <clear_frames_storage>
f010cb76:	83 c4 10             	add    $0x10,%esp
	if (USE_KHEAP == 1)
		kfree(shares[sharedObjectID].framesStorage);
f010cb79:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010cb7f:	8b 55 08             	mov    0x8(%ebp),%edx
f010cb82:	89 d0                	mov    %edx,%eax
f010cb84:	c1 e0 02             	shl    $0x2,%eax
f010cb87:	01 d0                	add    %edx,%eax
f010cb89:	c1 e0 02             	shl    $0x2,%eax
f010cb8c:	01 d0                	add    %edx,%eax
f010cb8e:	c1 e0 02             	shl    $0x2,%eax
f010cb91:	01 c8                	add    %ecx,%eax
f010cb93:	8b 40 50             	mov    0x50(%eax),%eax
f010cb96:	83 ec 0c             	sub    $0xc,%esp
f010cb99:	50                   	push   %eax
f010cb9a:	e8 41 03 00 00       	call   f010cee0 <kfree>
f010cb9f:	83 c4 10             	add    $0x10,%esp

	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f010cba2:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010cba8:	8b 55 08             	mov    0x8(%ebp),%edx
f010cbab:	89 d0                	mov    %edx,%eax
f010cbad:	c1 e0 02             	shl    $0x2,%eax
f010cbb0:	01 d0                	add    %edx,%eax
f010cbb2:	c1 e0 02             	shl    $0x2,%eax
f010cbb5:	01 d0                	add    %edx,%eax
f010cbb7:	c1 e0 02             	shl    $0x2,%eax
f010cbba:	01 c8                	add    %ecx,%eax
f010cbbc:	83 ec 04             	sub    $0x4,%esp
f010cbbf:	6a 54                	push   $0x54
f010cbc1:	6a 00                	push   $0x0
f010cbc3:	50                   	push   %eax
f010cbc4:	e8 a2 03 01 00       	call   f011cf6b <memset>
f010cbc9:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f010cbcc:	8b 0d 5c 28 7e f0    	mov    0xf07e285c,%ecx
f010cbd2:	8b 55 08             	mov    0x8(%ebp),%edx
f010cbd5:	89 d0                	mov    %edx,%eax
f010cbd7:	c1 e0 02             	shl    $0x2,%eax
f010cbda:	01 d0                	add    %edx,%eax
f010cbdc:	c1 e0 02             	shl    $0x2,%eax
f010cbdf:	01 d0                	add    %edx,%eax
f010cbe1:	c1 e0 02             	shl    $0x2,%eax
f010cbe4:	01 c8                	add    %ecx,%eax
f010cbe6:	c6 40 4d 01          	movb   $0x1,0x4d(%eax)

	return 0;
f010cbea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010cbef:	c9                   	leave  
f010cbf0:	c3                   	ret    

f010cbf1 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010cbf1:	55                   	push   %ebp
f010cbf2:	89 e5                	mov    %esp,%ebp
f010cbf4:	83 ec 18             	sub    $0x18,%esp
f010cbf7:	8b 45 14             	mov    0x14(%ebp),%eax
f010cbfa:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f010cbfd:	83 ec 04             	sub    $0x4,%esp
f010cc00:	68 bc 18 12 f0       	push   $0xf01218bc
f010cc05:	68 ae 00 00 00       	push   $0xae
f010cc0a:	68 60 18 12 f0       	push   $0xf0121860
f010cc0f:	e8 9b 35 ff ff       	call   f01001af <_panic>

f010cc14 <getSharedObject>:

//======================
// [2] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010cc14:	55                   	push   %ebp
f010cc15:	89 e5                	mov    %esp,%ebp
f010cc17:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f010cc1a:	83 ec 04             	sub    $0x4,%esp
f010cc1d:	68 f0 18 12 f0       	push   $0xf01218f0
f010cc22:	68 d1 00 00 00       	push   $0xd1
f010cc27:	68 60 18 12 f0       	push   $0xf0121860
f010cc2c:	e8 7e 35 ff ff       	call   f01001af <_panic>

f010cc31 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010cc31:	55                   	push   %ebp
f010cc32:	89 e5                	mov    %esp,%ebp
f010cc34:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f010cc37:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f010cc3c:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not required...!!");
f010cc3f:	83 ec 04             	sub    $0x4,%esp
f010cc42:	68 20 19 12 f0       	push   $0xf0121920
f010cc47:	68 f6 00 00 00       	push   $0xf6
f010cc4c:	68 60 18 12 f0       	push   $0xf0121860
f010cc51:	e8 59 35 ff ff       	call   f01001af <_panic>

f010cc56 <to_frame_number>:
struct Frame_Info *get_frame_info(uint32 *ptr_page_directory, void *virtual_address, uint32 **ptr_page_table);
void decrement_references(struct Frame_Info* ptr_frame_info);
void initialize_frame_info(struct Frame_Info *ptr_frame_info);

static inline uint32 to_frame_number(struct Frame_Info *ptr_frame_info)
{
f010cc56:	55                   	push   %ebp
f010cc57:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010cc59:	8b 45 08             	mov    0x8(%ebp),%eax
f010cc5c:	8b 15 24 0d 80 f0    	mov    0xf0800d24,%edx
f010cc62:	29 d0                	sub    %edx,%eax
f010cc64:	c1 f8 03             	sar    $0x3,%eax
f010cc67:	89 c2                	mov    %eax,%edx
f010cc69:	89 d0                	mov    %edx,%eax
f010cc6b:	c1 e0 02             	shl    $0x2,%eax
f010cc6e:	01 d0                	add    %edx,%eax
f010cc70:	c1 e0 02             	shl    $0x2,%eax
f010cc73:	01 d0                	add    %edx,%eax
f010cc75:	c1 e0 02             	shl    $0x2,%eax
f010cc78:	01 d0                	add    %edx,%eax
f010cc7a:	89 c1                	mov    %eax,%ecx
f010cc7c:	c1 e1 08             	shl    $0x8,%ecx
f010cc7f:	01 c8                	add    %ecx,%eax
f010cc81:	89 c1                	mov    %eax,%ecx
f010cc83:	c1 e1 10             	shl    $0x10,%ecx
f010cc86:	01 c8                	add    %ecx,%eax
f010cc88:	01 c0                	add    %eax,%eax
f010cc8a:	01 d0                	add    %edx,%eax
}
f010cc8c:	5d                   	pop    %ebp
f010cc8d:	c3                   	ret    

f010cc8e <to_physical_address>:

static inline uint32 to_physical_address(struct Frame_Info *ptr_frame_info)
{
f010cc8e:	55                   	push   %ebp
f010cc8f:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010cc91:	ff 75 08             	pushl  0x8(%ebp)
f010cc94:	e8 bd ff ff ff       	call   f010cc56 <to_frame_number>
f010cc99:	83 c4 04             	add    $0x4,%esp
f010cc9c:	c1 e0 0c             	shl    $0xc,%eax
}
f010cc9f:	c9                   	leave  
f010cca0:	c3                   	ret    

f010cca1 <to_frame_info>:

static inline struct Frame_Info* to_frame_info(uint32 physical_address)
{
f010cca1:	55                   	push   %ebp
f010cca2:	89 e5                	mov    %esp,%ebp
f010cca4:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010cca7:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccaa:	c1 e8 0c             	shr    $0xc,%eax
f010ccad:	89 c2                	mov    %eax,%edx
f010ccaf:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f010ccb4:	39 c2                	cmp    %eax,%edx
f010ccb6:	72 14                	jb     f010cccc <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010ccb8:	83 ec 04             	sub    $0x4,%esp
f010ccbb:	68 48 19 12 f0       	push   $0xf0121948
f010ccc0:	6a 78                	push   $0x78
f010ccc2:	68 6d 19 12 f0       	push   $0xf012196d
f010ccc7:	e8 e3 34 ff ff       	call   f01001af <_panic>
	return &frames_info[PPN(physical_address)];
f010cccc:	8b 15 24 0d 80 f0    	mov    0xf0800d24,%edx
f010ccd2:	8b 45 08             	mov    0x8(%ebp),%eax
f010ccd5:	c1 e8 0c             	shr    $0xc,%eax
f010ccd8:	89 c1                	mov    %eax,%ecx
f010ccda:	89 c8                	mov    %ecx,%eax
f010ccdc:	01 c0                	add    %eax,%eax
f010ccde:	01 c8                	add    %ecx,%eax
f010cce0:	c1 e0 03             	shl    $0x3,%eax
f010cce3:	01 d0                	add    %edx,%eax
}
f010cce5:	c9                   	leave  
f010cce6:	c3                   	ret    

f010cce7 <findBestFitRegion>:
// Array to store all kmalloc allocations
struct allocation allocations[MAX_HEAP_ALLOCATIONS];
int allocationsCnt = 0;

// TODO: try to optimize using some sort of hashing... "SHARQAWY SHARQAWY SHARQAWY"
int findBestFitRegion(unsigned int szNeeded) {
f010cce7:	55                   	push   %ebp
f010cce8:	89 e5                	mov    %esp,%ebp
f010ccea:	83 ec 28             	sub    $0x28,%esp
    int minFit = 268435456, bestGuy = -1, // the most fit space with its address
f010cced:	c7 45 f4 00 00 00 10 	movl   $0x10000000,-0xc(%ebp)
f010ccf4:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    curntPageCnt = 0; // how many free pages in the curntFreeSpace
f010ccfb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

    for (int va = KERNEL_HEAP_START; va < KERNEL_HEAP_MAX; va += PAGE_SIZE) {
f010cd02:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f010cd09:	eb 78                	jmp    f010cd83 <findBestFitRegion+0x9c>
        uint32* dummyPT = NULL; // m4 3ayzk aslan
f010cd0b:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
        struct Frame_Info* frameInfo = get_frame_info(ptr_page_directory, (void*)va, &dummyPT); // get the info for the frame in the current va to check if it is available or not
f010cd12:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cd15:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010cd1a:	83 ec 04             	sub    $0x4,%esp
f010cd1d:	8d 4d d8             	lea    -0x28(%ebp),%ecx
f010cd20:	51                   	push   %ecx
f010cd21:	52                   	push   %edx
f010cd22:	50                   	push   %eax
f010cd23:	e8 6e 71 ff ff       	call   f0103e96 <get_frame_info>
f010cd28:	83 c4 10             	add    $0x10,%esp
f010cd2b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if (frameInfo == NULL) { // Yesss, i found a free page, count it !!!
f010cd2e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010cd32:	75 05                	jne    f010cd39 <findBestFitRegion+0x52>
//        	curntFreeSpace += PAGE_SIZE;
        	curntPageCnt++;
f010cd34:	ff 45 ec             	incl   -0x14(%ebp)
f010cd37:	eb 43                	jmp    f010cd7c <findBestFitRegion+0x95>
        } else { // my bad!! the contigios part has ended, so check it and reset the counters
            int curntFreeSpace = curntPageCnt * PAGE_SIZE;
f010cd39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd3c:	c1 e0 0c             	shl    $0xc,%eax
f010cd3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
            if (curntFreeSpace >= szNeeded && curntFreeSpace < minFit) {
f010cd42:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd45:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cd48:	72 2b                	jb     f010cd75 <findBestFitRegion+0x8e>
f010cd4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd4d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010cd50:	7d 23                	jge    f010cd75 <findBestFitRegion+0x8e>
                bestGuy = va - (curntPageCnt * PAGE_SIZE);
f010cd52:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd55:	c1 e0 0c             	shl    $0xc,%eax
f010cd58:	89 c2                	mov    %eax,%edx
f010cd5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd5d:	29 d0                	sub    %edx,%eax
f010cd5f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                minFit = curntFreeSpace;
f010cd62:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd65:	89 45 f4             	mov    %eax,-0xc(%ebp)

                if(curntFreeSpace == szNeeded) return bestGuy; // YOU ARE THE GIGA CHAD BLOCK, NO BLOCK IS BETTER THAN YOU
f010cd68:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cd6b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cd6e:	75 05                	jne    f010cd75 <findBestFitRegion+0x8e>
f010cd70:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cd73:	eb 4a                	jmp    f010cdbf <findBestFitRegion+0xd8>
            }
            // Reset counters
//            curntFreeSpace = 0;
            curntPageCnt = 0;
f010cd75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
int findBestFitRegion(unsigned int szNeeded) {
    int minFit = 268435456, bestGuy = -1, // the most fit space with its address

    curntPageCnt = 0; // how many free pages in the curntFreeSpace

    for (int va = KERNEL_HEAP_START; va < KERNEL_HEAP_MAX; va += PAGE_SIZE) {
f010cd7c:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
f010cd83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cd86:	3d ff ef ff ff       	cmp    $0xffffefff,%eax
f010cd8b:	0f 86 7a ff ff ff    	jbe    f010cd0b <findBestFitRegion+0x24>
            curntPageCnt = 0;
        }
    }

    // because the poor loop misses the last block and do not check it
    int curntFreeSpace = curntPageCnt * PAGE_SIZE;
f010cd91:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cd94:	c1 e0 0c             	shl    $0xc,%eax
f010cd97:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (curntFreeSpace >= szNeeded && curntFreeSpace < minFit) {
f010cd9a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cd9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f010cda0:	72 1a                	jb     f010cdbc <findBestFitRegion+0xd5>
f010cda2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010cda5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010cda8:	7d 12                	jge    f010cdbc <findBestFitRegion+0xd5>
        bestGuy = KERNEL_HEAP_MAX - (curntPageCnt * PAGE_SIZE);
f010cdaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cdad:	c1 e0 0c             	shl    $0xc,%eax
f010cdb0:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f010cdb5:	29 c2                	sub    %eax,%edx
f010cdb7:	89 d0                	mov    %edx,%eax
f010cdb9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    return bestGuy; // I AM THE SIGMA ADDRESS o_O
f010cdbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010cdbf:	c9                   	leave  
f010cdc0:	c3                   	ret    

f010cdc1 <allocateAndMap>:

// I think here we do not need to check anything becuase we already found a space from the best fit = sharqawy
void allocateAndMap(int startAddress, unsigned int requestedSize) {
f010cdc1:	55                   	push   %ebp
f010cdc2:	89 e5                	mov    %esp,%ebp
f010cdc4:	83 ec 28             	sub    $0x28,%esp
    int endAddress = startAddress + ROUNDUP(requestedSize, PAGE_SIZE); // now we have the start and end adresses
f010cdc7:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f010cdce:	8b 55 0c             	mov    0xc(%ebp),%edx
f010cdd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cdd4:	01 d0                	add    %edx,%eax
f010cdd6:	48                   	dec    %eax
f010cdd7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010cdda:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cddd:	ba 00 00 00 00       	mov    $0x0,%edx
f010cde2:	f7 75 f0             	divl   -0x10(%ebp)
f010cde5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cde8:	29 d0                	sub    %edx,%eax
f010cdea:	89 c2                	mov    %eax,%edx
f010cdec:	8b 45 08             	mov    0x8(%ebp),%eax
f010cdef:	01 d0                	add    %edx,%eax
f010cdf1:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (int va = startAddress; va < endAddress; va += PAGE_SIZE) {
f010cdf4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cdf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010cdfa:	eb 3e                	jmp    f010ce3a <allocateAndMap+0x79>
        struct Frame_Info* newFrame = NULL;
f010cdfc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

        // remember from the labs?
        allocate_frame(&newFrame);
f010ce03:	83 ec 0c             	sub    $0xc,%esp
f010ce06:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010ce09:	50                   	push   %eax
f010ce0a:	e8 4d 6c ff ff       	call   f0103a5c <allocate_frame>
f010ce0f:	83 c4 10             	add    $0x10,%esp
        newFrame->va = (uint32)va;
f010ce12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ce15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ce18:	89 50 0c             	mov    %edx,0xc(%eax)
        map_frame(ptr_page_directory, newFrame, (void*)va, PERM_WRITEABLE);
f010ce1b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010ce1e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ce21:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010ce26:	6a 02                	push   $0x2
f010ce28:	51                   	push   %ecx
f010ce29:	52                   	push   %edx
f010ce2a:	50                   	push   %eax
f010ce2b:	e8 a7 6f ff ff       	call   f0103dd7 <map_frame>
f010ce30:	83 c4 10             	add    $0x10,%esp

// I think here we do not need to check anything becuase we already found a space from the best fit = sharqawy
void allocateAndMap(int startAddress, unsigned int requestedSize) {
    int endAddress = startAddress + ROUNDUP(requestedSize, PAGE_SIZE); // now we have the start and end adresses

    for (int va = startAddress; va < endAddress; va += PAGE_SIZE) {
f010ce33:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010ce3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ce3d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010ce40:	7c ba                	jl     f010cdfc <allocateAndMap+0x3b>
        // remember from the labs?
        allocate_frame(&newFrame);
        newFrame->va = (uint32)va;
        map_frame(ptr_page_directory, newFrame, (void*)va, PERM_WRITEABLE);
    }
}
f010ce42:	90                   	nop
f010ce43:	c9                   	leave  
f010ce44:	c3                   	ret    

f010ce45 <saveAllocationInfo>:

// For the above struct
void saveAllocationInfo(int startAddress, unsigned int szNeeded) {
f010ce45:	55                   	push   %ebp
f010ce46:	89 e5                	mov    %esp,%ebp
f010ce48:	83 ec 10             	sub    $0x10,%esp
        allocations[allocationsCnt].vaStart = (uint32*)startAddress;
f010ce4b:	a1 48 28 7e f0       	mov    0xf07e2848,%eax
f010ce50:	8b 55 08             	mov    0x8(%ebp),%edx
f010ce53:	89 14 c5 64 0d 80 f0 	mov    %edx,-0xf7ff29c(,%eax,8)
        allocations[allocationsCnt++].szInByts = ROUNDUP(szNeeded, PAGE_SIZE);
f010ce5a:	8b 0d 48 28 7e f0    	mov    0xf07e2848,%ecx
f010ce60:	8d 41 01             	lea    0x1(%ecx),%eax
f010ce63:	a3 48 28 7e f0       	mov    %eax,0xf07e2848
f010ce68:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%ebp)
f010ce6f:	8b 55 0c             	mov    0xc(%ebp),%edx
f010ce72:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ce75:	01 d0                	add    %edx,%eax
f010ce77:	48                   	dec    %eax
f010ce78:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ce7b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce7e:	ba 00 00 00 00       	mov    $0x0,%edx
f010ce83:	f7 75 fc             	divl   -0x4(%ebp)
f010ce86:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce89:	29 d0                	sub    %edx,%eax
f010ce8b:	89 04 cd 60 0d 80 f0 	mov    %eax,-0xf7ff2a0(,%ecx,8)
}
f010ce92:	90                   	nop
f010ce93:	c9                   	leave  
f010ce94:	c3                   	ret    

f010ce95 <kmalloc>:


// As a kmalloc, WHAT ACTUALLY I DO??? Ask Sharqawy ^_^
void* kmalloc(unsigned int size) {
f010ce95:	55                   	push   %ebp
f010ce96:	89 e5                	mov    %esp,%ebp
f010ce98:	83 ec 18             	sub    $0x18,%esp
    // 1- find an address in kheap using best fit in kernel heap
    int allocationStart = findBestFitRegion(size);
f010ce9b:	83 ec 0c             	sub    $0xc,%esp
f010ce9e:	ff 75 08             	pushl  0x8(%ebp)
f010cea1:	e8 41 fe ff ff       	call   f010cce7 <findBestFitRegion>
f010cea6:	83 c4 10             	add    $0x10,%esp
f010cea9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 2- NULL if no good space found
    if (allocationStart == -1)
f010ceac:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010ceb0:	75 07                	jne    f010ceb9 <kmalloc+0x24>
        return NULL; // eshtry ram ziada ya wala!!!
f010ceb2:	b8 00 00 00 00       	mov    $0x0,%eax
f010ceb7:	eb 25                	jmp    f010cede <kmalloc+0x49>

    // 3- allocate and map in the location u found
    allocateAndMap(allocationStart, size);
f010ceb9:	83 ec 08             	sub    $0x8,%esp
f010cebc:	ff 75 08             	pushl  0x8(%ebp)
f010cebf:	ff 75 f4             	pushl  -0xc(%ebp)
f010cec2:	e8 fa fe ff ff       	call   f010cdc1 <allocateAndMap>
f010cec7:	83 c4 10             	add    $0x10,%esp

    // 4- save this allocation data
    saveAllocationInfo(allocationStart, size);
f010ceca:	83 ec 08             	sub    $0x8,%esp
f010cecd:	ff 75 08             	pushl  0x8(%ebp)
f010ced0:	ff 75 f4             	pushl  -0xc(%ebp)
f010ced3:	e8 6d ff ff ff       	call   f010ce45 <saveAllocationInfo>
f010ced8:	83 c4 10             	add    $0x10,%esp

    // 5- pointer for the start of this allocated block
    return (void*)allocationStart;
f010cedb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010cede:	c9                   	leave  
f010cedf:	c3                   	ret    

f010cee0 <kfree>:


// ==================================== kfree ====================================
void kfree(void* virtual_address)
{
f010cee0:	55                   	push   %ebp
f010cee1:	89 e5                	mov    %esp,%ebp
f010cee3:	83 ec 28             	sub    $0x28,%esp
	//TODO: [PROJECT 2025 - MS1 - [1] Kernel Heap] kfree()
	// Write your code here, remove the panic and write your code
	 int size;
	 int found=0;
f010cee6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	 int index=0;
f010ceed:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	 uint32 va1 = (uint32)virtual_address;
f010cef4:	8b 45 08             	mov    0x8(%ebp),%eax
f010cef7:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	 for(int i=0;i<MAX_HEAP_ALLOCATIONS;i++){ // By Sharqawy
	 for(int i=0;i < allocationsCnt; i++){
f010cefa:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010cf01:	eb 5e                	jmp    f010cf61 <kfree+0x81>
		 if ((uint32)virtual_address >= (uint32)allocations[i].vaStart &&
f010cf03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf06:	8b 04 c5 64 0d 80 f0 	mov    -0xf7ff29c(,%eax,8),%eax
f010cf0d:	89 c2                	mov    %eax,%edx
f010cf0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf12:	39 c2                	cmp    %eax,%edx
f010cf14:	77 48                	ja     f010cf5e <kfree+0x7e>
		     (uint32)virtual_address < (uint32)allocations[i].vaStart + allocations[i].szInByts)
f010cf16:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf19:	8b 04 c5 64 0d 80 f0 	mov    -0xf7ff29c(,%eax,8),%eax
f010cf20:	89 c2                	mov    %eax,%edx
f010cf22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf25:	8b 04 c5 60 0d 80 f0 	mov    -0xf7ff2a0(,%eax,8),%eax
f010cf2c:	01 c2                	add    %eax,%edx
f010cf2e:	8b 45 08             	mov    0x8(%ebp),%eax
	 int found=0;
	 int index=0;
	 uint32 va1 = (uint32)virtual_address;
//	 for(int i=0;i<MAX_HEAP_ALLOCATIONS;i++){ // By Sharqawy
	 for(int i=0;i < allocationsCnt; i++){
		 if ((uint32)virtual_address >= (uint32)allocations[i].vaStart &&
f010cf31:	39 c2                	cmp    %eax,%edx
f010cf33:	76 29                	jbe    f010cf5e <kfree+0x7e>
		     (uint32)virtual_address < (uint32)allocations[i].vaStart + allocations[i].szInByts)
		 {
			 size=allocations[i].szInByts;
f010cf35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf38:	8b 04 c5 60 0d 80 f0 	mov    -0xf7ff2a0(,%eax,8),%eax
f010cf3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
			 found=1;
f010cf42:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			 index=i;
f010cf49:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
			 va1 = (uint32)allocations[i].vaStart;
f010cf4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010cf52:	8b 04 c5 64 0d 80 f0 	mov    -0xf7ff29c(,%eax,8),%eax
f010cf59:	89 45 e8             	mov    %eax,-0x18(%ebp)
			 break;
f010cf5c:	eb 0d                	jmp    f010cf6b <kfree+0x8b>
	 int size;
	 int found=0;
	 int index=0;
	 uint32 va1 = (uint32)virtual_address;
//	 for(int i=0;i<MAX_HEAP_ALLOCATIONS;i++){ // By Sharqawy
	 for(int i=0;i < allocationsCnt; i++){
f010cf5e:	ff 45 e4             	incl   -0x1c(%ebp)
f010cf61:	a1 48 28 7e f0       	mov    0xf07e2848,%eax
f010cf66:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010cf69:	7c 98                	jl     f010cf03 <kfree+0x23>
			 index=i;
			 va1 = (uint32)allocations[i].vaStart;
			 break;
		 }
	 }
	 if(!found)
f010cf6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010cf6f:	74 7e                	je     f010cfef <kfree+0x10f>
		 return;
	 uint32 va2=va1+size;
f010cf71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010cf74:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf77:	01 d0                	add    %edx,%eax
f010cf79:	89 45 dc             	mov    %eax,-0x24(%ebp)
	 while(va1<va2){
f010cf7c:	eb 1c                	jmp    f010cf9a <kfree+0xba>
		 unmap_frame(ptr_page_directory, (void*)va1);
f010cf7e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010cf81:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010cf86:	83 ec 08             	sub    $0x8,%esp
f010cf89:	52                   	push   %edx
f010cf8a:	50                   	push   %eax
f010cf8b:	e8 76 6f ff ff       	call   f0103f06 <unmap_frame>
f010cf90:	83 c4 10             	add    $0x10,%esp
		 va1+=PAGE_SIZE;
f010cf93:	81 45 e8 00 10 00 00 	addl   $0x1000,-0x18(%ebp)
		 }
	 }
	 if(!found)
		 return;
	 uint32 va2=va1+size;
	 while(va1<va2){
f010cf9a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cf9d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010cfa0:	72 dc                	jb     f010cf7e <kfree+0x9e>
		 unmap_frame(ptr_page_directory, (void*)va1);
		 va1+=PAGE_SIZE;
	 }

	for(int i=index;i<allocationsCnt-1;i++)
f010cfa2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010cfa5:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010cfa8:	eb 2d                	jmp    f010cfd7 <kfree+0xf7>
	{
		allocations[i].szInByts=allocations[i+1].szInByts;
f010cfaa:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfad:	40                   	inc    %eax
f010cfae:	8b 14 c5 60 0d 80 f0 	mov    -0xf7ff2a0(,%eax,8),%edx
f010cfb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfb8:	89 14 c5 60 0d 80 f0 	mov    %edx,-0xf7ff2a0(,%eax,8)
		allocations[i].vaStart=allocations[i+1].vaStart;
f010cfbf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfc2:	40                   	inc    %eax
f010cfc3:	8b 14 c5 64 0d 80 f0 	mov    -0xf7ff29c(,%eax,8),%edx
f010cfca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfcd:	89 14 c5 64 0d 80 f0 	mov    %edx,-0xf7ff29c(,%eax,8)
	 while(va1<va2){
		 unmap_frame(ptr_page_directory, (void*)va1);
		 va1+=PAGE_SIZE;
	 }

	for(int i=index;i<allocationsCnt-1;i++)
f010cfd4:	ff 45 e0             	incl   -0x20(%ebp)
f010cfd7:	a1 48 28 7e f0       	mov    0xf07e2848,%eax
f010cfdc:	48                   	dec    %eax
f010cfdd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010cfe0:	7f c8                	jg     f010cfaa <kfree+0xca>
	{
		allocations[i].szInByts=allocations[i+1].szInByts;
		allocations[i].vaStart=allocations[i+1].vaStart;
	}
	allocationsCnt--;
f010cfe2:	a1 48 28 7e f0       	mov    0xf07e2848,%eax
f010cfe7:	48                   	dec    %eax
f010cfe8:	a3 48 28 7e f0       	mov    %eax,0xf07e2848
f010cfed:	eb 01                	jmp    f010cff0 <kfree+0x110>
			 va1 = (uint32)allocations[i].vaStart;
			 break;
		 }
	 }
	 if(!found)
		 return;
f010cfef:	90                   	nop
	{
		allocations[i].szInByts=allocations[i+1].szInByts;
		allocations[i].vaStart=allocations[i+1].vaStart;
	}
	allocationsCnt--;
}
f010cff0:	c9                   	leave  
f010cff1:	c3                   	ret    

f010cff2 <kheap_virtual_address>:


// ==================================== kheapVA ====================================
unsigned int kheap_virtual_address(unsigned int physical_address)
{
f010cff2:	55                   	push   %ebp
f010cff3:	89 e5                	mov    %esp,%ebp
f010cff5:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT 2025 - MS1 - [1] Kernel Heap] kheap_virtual_address()
	// Write your code here, remove the panic and write your code

	uint32 mask = (PAGE_SIZE - 1);
f010cff8:	c7 45 f4 ff 0f 00 00 	movl   $0xfff,-0xc(%ebp)
	uint32 offset = mask & physical_address;
f010cfff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d002:	23 45 08             	and    0x8(%ebp),%eax
f010d005:	89 45 f0             	mov    %eax,-0x10(%ebp)

	struct Frame_Info *ptr_frame_info = to_frame_info(physical_address);
f010d008:	83 ec 0c             	sub    $0xc,%esp
f010d00b:	ff 75 08             	pushl  0x8(%ebp)
f010d00e:	e8 8e fc ff ff       	call   f010cca1 <to_frame_info>
f010d013:	83 c4 10             	add    $0x10,%esp
f010d016:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if ((unsigned int)ptr_frame_info->va >= KERNEL_HEAP_START &&
f010d019:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d01c:	8b 40 0c             	mov    0xc(%eax),%eax
f010d01f:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f010d024:	76 25                	jbe    f010d04b <kheap_virtual_address+0x59>
		(unsigned int)ptr_frame_info->va < KERNEL_HEAP_MAX &&
f010d026:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d029:	8b 40 0c             	mov    0xc(%eax),%eax
	uint32 mask = (PAGE_SIZE - 1);
	uint32 offset = mask & physical_address;

	struct Frame_Info *ptr_frame_info = to_frame_info(physical_address);

	if ((unsigned int)ptr_frame_info->va >= KERNEL_HEAP_START &&
f010d02c:	3d ff ef ff ff       	cmp    $0xffffefff,%eax
f010d031:	77 18                	ja     f010d04b <kheap_virtual_address+0x59>
		(unsigned int)ptr_frame_info->va < KERNEL_HEAP_MAX &&
		ptr_frame_info->references != 0)
f010d033:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d036:	8b 40 08             	mov    0x8(%eax),%eax
	uint32 offset = mask & physical_address;

	struct Frame_Info *ptr_frame_info = to_frame_info(physical_address);

	if ((unsigned int)ptr_frame_info->va >= KERNEL_HEAP_START &&
		(unsigned int)ptr_frame_info->va < KERNEL_HEAP_MAX &&
f010d039:	66 85 c0             	test   %ax,%ax
f010d03c:	74 0d                	je     f010d04b <kheap_virtual_address+0x59>
		ptr_frame_info->references != 0)
		return (unsigned int)ptr_frame_info->va + offset;
f010d03e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d041:	8b 50 0c             	mov    0xc(%eax),%edx
f010d044:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d047:	01 d0                	add    %edx,%eax
f010d049:	eb 05                	jmp    f010d050 <kheap_virtual_address+0x5e>
	//ptr_frame_info return the start reference of the frame so we should add the offset ;

	return 0;
f010d04b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d050:	c9                   	leave  
f010d051:	c3                   	ret    

f010d052 <kheap_physical_address>:


// ==================================== kheapPA ====================================
unsigned int kheap_physical_address(unsigned int virtual_address)
{
f010d052:	55                   	push   %ebp
f010d053:	89 e5                	mov    %esp,%ebp
f010d055:	83 ec 18             	sub    $0x18,%esp
	if(virtual_address>=KERNEL_HEAP_START&&virtual_address< KERNEL_HEAP_MAX){
f010d058:	81 7d 08 ff ff ff f5 	cmpl   $0xf5ffffff,0x8(%ebp)
f010d05f:	76 5f                	jbe    f010d0c0 <kheap_physical_address+0x6e>
f010d061:	81 7d 08 ff ef ff ff 	cmpl   $0xffffefff,0x8(%ebp)
f010d068:	77 56                	ja     f010d0c0 <kheap_physical_address+0x6e>
		uint32 *ptr_table = NULL;
f010d06a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		struct Frame_Info *finfo = get_frame_info(ptr_page_directory,(void*)virtual_address, &ptr_table );
f010d071:	8b 55 08             	mov    0x8(%ebp),%edx
f010d074:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010d079:	83 ec 04             	sub    $0x4,%esp
f010d07c:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f010d07f:	51                   	push   %ecx
f010d080:	52                   	push   %edx
f010d081:	50                   	push   %eax
f010d082:	e8 0f 6e ff ff       	call   f0103e96 <get_frame_info>
f010d087:	83 c4 10             	add    $0x10,%esp
f010d08a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(finfo==NULL){return 0;}
f010d08d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d091:	75 07                	jne    f010d09a <kheap_physical_address+0x48>
f010d093:	b8 00 00 00 00       	mov    $0x0,%eax
f010d098:	eb 2b                	jmp    f010d0c5 <kheap_physical_address+0x73>
		uint32 PA=to_physical_address(finfo);
f010d09a:	83 ec 0c             	sub    $0xc,%esp
f010d09d:	ff 75 f4             	pushl  -0xc(%ebp)
f010d0a0:	e8 e9 fb ff ff       	call   f010cc8e <to_physical_address>
f010d0a5:	83 c4 10             	add    $0x10,%esp
f010d0a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 offset= virtual_address & 0xFFF;
f010d0ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010d0ae:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d0b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		return PA+offset;
f010d0b6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d0b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0bc:	01 d0                	add    %edx,%eax
f010d0be:	eb 05                	jmp    f010d0c5 <kheap_physical_address+0x73>
	}
	return 0;
f010d0c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d0c5:	c9                   	leave  
f010d0c6:	c3                   	ret    

f010d0c7 <krealloc>:

// ==================================== krealloc ====================================
void *krealloc(void *virtual_address, uint32 new_size)
{
f010d0c7:	55                   	push   %ebp
f010d0c8:	89 e5                	mov    %esp,%ebp
f010d0ca:	83 ec 08             	sub    $0x8,%esp
	panic("krealloc() is not required...!!");
f010d0cd:	83 ec 04             	sub    $0x4,%esp
f010d0d0:	68 88 19 12 f0       	push   $0xf0121988
f010d0d5:	68 ae 00 00 00       	push   $0xae
f010d0da:	68 a8 19 12 f0       	push   $0xf01219a8
f010d0df:	e8 cb 30 ff ff       	call   f01001af <_panic>

f010d0e4 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f010d0e4:	55                   	push   %ebp
f010d0e5:	89 e5                	mov    %esp,%ebp
f010d0e7:	57                   	push   %edi
f010d0e8:	53                   	push   %ebx
f010d0e9:	81 ec 70 01 00 00    	sub    $0x170,%esp
	cprintf("==============================================\n");
f010d0ef:	83 ec 0c             	sub    $0xc,%esp
f010d0f2:	68 b8 19 12 f0       	push   $0xf01219b8
f010d0f7:	e8 08 a1 ff ff       	call   f0107204 <cprintf>
f010d0fc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010d0ff:	83 ec 0c             	sub    $0xc,%esp
f010d102:	68 e8 19 12 f0       	push   $0xf01219e8
f010d107:	e8 f8 a0 ff ff       	call   f0107204 <cprintf>
f010d10c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010d10f:	83 ec 0c             	sub    $0xc,%esp
f010d112:	68 b8 19 12 f0       	push   $0xf01219b8
f010d117:	e8 e8 a0 ff ff       	call   f0107204 <cprintf>
f010d11c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f010d11f:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f010d123:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f010d127:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f010d12d:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f010d133:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f010d13a:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f010d141:	e8 08 d9 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d146:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f010d149:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f010d14f:	b9 14 00 00 00       	mov    $0x14,%ecx
f010d154:	b8 00 00 00 00       	mov    $0x0,%eax
f010d159:	89 d7                	mov    %edx,%edi
f010d15b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f010d15d:	e8 ec d8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d162:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f010d165:	e8 10 f0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d16a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f010d16d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010d174:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d179:	0f b6 d0             	movzbl %al,%edx
f010d17c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d17f:	01 d0                	add    %edx,%eax
f010d181:	48                   	dec    %eax
f010d182:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010d185:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d188:	ba 00 00 00 00       	mov    $0x0,%edx
f010d18d:	f7 75 d4             	divl   -0x2c(%ebp)
f010d190:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d193:	29 d0                	sub    %edx,%eax
f010d195:	89 c1                	mov    %eax,%ecx
f010d197:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010d19e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d1a3:	0f b6 c0             	movzbl %al,%eax
f010d1a6:	c1 e0 04             	shl    $0x4,%eax
f010d1a9:	89 c2                	mov    %eax,%edx
f010d1ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d1ae:	01 d0                	add    %edx,%eax
f010d1b0:	48                   	dec    %eax
f010d1b1:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010d1b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d1b7:	ba 00 00 00 00       	mov    $0x0,%edx
f010d1bc:	f7 75 cc             	divl   -0x34(%ebp)
f010d1bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d1c2:	29 d0                	sub    %edx,%eax
f010d1c4:	01 c8                	add    %ecx,%eax
f010d1c6:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f010d1cb:	29 c2                	sub    %eax,%edx
f010d1cd:	89 d0                	mov    %edx,%eax
f010d1cf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f010d1d2:	83 ec 0c             	sub    $0xc,%esp
f010d1d5:	ff 75 c4             	pushl  -0x3c(%ebp)
f010d1d8:	e8 b8 fc ff ff       	call   f010ce95 <kmalloc>
f010d1dd:	83 c4 10             	add    $0x10,%esp
f010d1e0:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f010d1e6:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010d1ec:	85 c0                	test   %eax,%eax
f010d1ee:	74 14                	je     f010d204 <test_kmalloc+0x120>
f010d1f0:	83 ec 04             	sub    $0x4,%esp
f010d1f3:	68 44 1a 12 f0       	push   $0xf0121a44
f010d1f8:	6a 41                	push   $0x41
f010d1fa:	68 76 1a 12 f0       	push   $0xf0121a76
f010d1ff:	e8 ab 2f ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d204:	e8 71 ef ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d209:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d20c:	74 14                	je     f010d222 <test_kmalloc+0x13e>
f010d20e:	83 ec 04             	sub    $0x4,%esp
f010d211:	68 88 1a 12 f0       	push   $0xf0121a88
f010d216:	6a 42                	push   $0x42
f010d218:	68 76 1a 12 f0       	push   $0xf0121a76
f010d21d:	e8 8d 2f ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d222:	e8 27 d8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d227:	89 c2                	mov    %eax,%edx
f010d229:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d22c:	39 c2                	cmp    %eax,%edx
f010d22e:	74 14                	je     f010d244 <test_kmalloc+0x160>
f010d230:	83 ec 04             	sub    $0x4,%esp
f010d233:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d238:	6a 43                	push   $0x43
f010d23a:	68 76 1a 12 f0       	push   $0xf0121a76
f010d23f:	e8 6b 2f ff ff       	call   f01001af <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f010d244:	83 ec 0c             	sub    $0xc,%esp
f010d247:	68 30 1b 12 f0       	push   $0xf0121b30
f010d24c:	e8 b3 9f ff ff       	call   f0107204 <cprintf>
f010d251:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010d254:	e8 f5 d7 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d259:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d25c:	e8 19 ef ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d261:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f010d264:	83 ec 0c             	sub    $0xc,%esp
f010d267:	68 00 fc 1f 00       	push   $0x1ffc00
f010d26c:	e8 24 fc ff ff       	call   f010ce95 <kmalloc>
f010d271:	83 c4 10             	add    $0x10,%esp
f010d274:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d27a:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010d280:	89 c1                	mov    %eax,%ecx
f010d282:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010d289:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d28e:	0f b6 d0             	movzbl %al,%edx
f010d291:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d294:	01 d0                	add    %edx,%eax
f010d296:	48                   	dec    %eax
f010d297:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010d29a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d29d:	ba 00 00 00 00       	mov    $0x0,%edx
f010d2a2:	f7 75 c0             	divl   -0x40(%ebp)
f010d2a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010d2a8:	29 d0                	sub    %edx,%eax
f010d2aa:	89 c3                	mov    %eax,%ebx
f010d2ac:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010d2b3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d2b8:	0f b6 c0             	movzbl %al,%eax
f010d2bb:	c1 e0 04             	shl    $0x4,%eax
f010d2be:	89 c2                	mov    %eax,%edx
f010d2c0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010d2c3:	01 d0                	add    %edx,%eax
f010d2c5:	48                   	dec    %eax
f010d2c6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010d2c9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d2cc:	ba 00 00 00 00       	mov    $0x0,%edx
f010d2d1:	f7 75 b8             	divl   -0x48(%ebp)
f010d2d4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010d2d7:	29 d0                	sub    %edx,%eax
f010d2d9:	01 d8                	add    %ebx,%eax
f010d2db:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010d2e0:	39 c1                	cmp    %eax,%ecx
f010d2e2:	74 14                	je     f010d2f8 <test_kmalloc+0x214>
f010d2e4:	83 ec 04             	sub    $0x4,%esp
f010d2e7:	68 54 1b 12 f0       	push   $0xf0121b54
f010d2ec:	6a 4a                	push   $0x4a
f010d2ee:	68 76 1a 12 f0       	push   $0xf0121a76
f010d2f3:	e8 b7 2e ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d2f8:	e8 7d ee ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d2fd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d300:	74 14                	je     f010d316 <test_kmalloc+0x232>
f010d302:	83 ec 04             	sub    $0x4,%esp
f010d305:	68 88 1a 12 f0       	push   $0xf0121a88
f010d30a:	6a 4b                	push   $0x4b
f010d30c:	68 76 1a 12 f0       	push   $0xf0121a76
f010d311:	e8 99 2e ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d316:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d319:	e8 30 d7 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d31e:	29 c3                	sub    %eax,%ebx
f010d320:	89 d8                	mov    %ebx,%eax
f010d322:	3d 00 02 00 00       	cmp    $0x200,%eax
f010d327:	74 14                	je     f010d33d <test_kmalloc+0x259>
f010d329:	83 ec 04             	sub    $0x4,%esp
f010d32c:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d331:	6a 4c                	push   $0x4c
f010d333:	68 76 1a 12 f0       	push   $0xf0121a76
f010d338:	e8 72 2e ff ff       	call   f01001af <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f010d33d:	e8 0c d7 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d342:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d345:	e8 30 ee ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d34a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f010d34d:	83 ec 0c             	sub    $0xc,%esp
f010d350:	68 00 fc 1f 00       	push   $0x1ffc00
f010d355:	e8 3b fb ff ff       	call   f010ce95 <kmalloc>
f010d35a:	83 c4 10             	add    $0x10,%esp
f010d35d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d363:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010d369:	89 c1                	mov    %eax,%ecx
f010d36b:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010d372:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d377:	0f b6 d0             	movzbl %al,%edx
f010d37a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010d37d:	01 d0                	add    %edx,%eax
f010d37f:	48                   	dec    %eax
f010d380:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010d383:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d386:	ba 00 00 00 00       	mov    $0x0,%edx
f010d38b:	f7 75 b0             	divl   -0x50(%ebp)
f010d38e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010d391:	29 d0                	sub    %edx,%eax
f010d393:	89 c3                	mov    %eax,%ebx
f010d395:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010d39c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d3a1:	0f b6 c0             	movzbl %al,%eax
f010d3a4:	c1 e0 04             	shl    $0x4,%eax
f010d3a7:	89 c2                	mov    %eax,%edx
f010d3a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010d3ac:	01 d0                	add    %edx,%eax
f010d3ae:	48                   	dec    %eax
f010d3af:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010d3b2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d3b5:	ba 00 00 00 00       	mov    $0x0,%edx
f010d3ba:	f7 75 a8             	divl   -0x58(%ebp)
f010d3bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010d3c0:	29 d0                	sub    %edx,%eax
f010d3c2:	01 d8                	add    %ebx,%eax
f010d3c4:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f010d3c9:	39 c1                	cmp    %eax,%ecx
f010d3cb:	74 14                	je     f010d3e1 <test_kmalloc+0x2fd>
f010d3cd:	83 ec 04             	sub    $0x4,%esp
f010d3d0:	68 54 1b 12 f0       	push   $0xf0121b54
f010d3d5:	6a 52                	push   $0x52
f010d3d7:	68 76 1a 12 f0       	push   $0xf0121a76
f010d3dc:	e8 ce 2d ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d3e1:	e8 94 ed ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d3e6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d3e9:	74 14                	je     f010d3ff <test_kmalloc+0x31b>
f010d3eb:	83 ec 04             	sub    $0x4,%esp
f010d3ee:	68 88 1a 12 f0       	push   $0xf0121a88
f010d3f3:	6a 53                	push   $0x53
f010d3f5:	68 76 1a 12 f0       	push   $0xf0121a76
f010d3fa:	e8 b0 2d ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d3ff:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d402:	e8 47 d6 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d407:	29 c3                	sub    %eax,%ebx
f010d409:	89 d8                	mov    %ebx,%eax
f010d40b:	3d 00 02 00 00       	cmp    $0x200,%eax
f010d410:	74 14                	je     f010d426 <test_kmalloc+0x342>
f010d412:	83 ec 04             	sub    $0x4,%esp
f010d415:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d41a:	6a 54                	push   $0x54
f010d41c:	68 76 1a 12 f0       	push   $0xf0121a76
f010d421:	e8 89 2d ff ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010d426:	e8 23 d6 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d42b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d42e:	e8 47 ed ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d433:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f010d436:	83 ec 0c             	sub    $0xc,%esp
f010d439:	68 00 08 00 00       	push   $0x800
f010d43e:	e8 52 fa ff ff       	call   f010ce95 <kmalloc>
f010d443:	83 c4 10             	add    $0x10,%esp
f010d446:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d44c:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010d452:	89 c1                	mov    %eax,%ecx
f010d454:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010d45b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d460:	0f b6 d0             	movzbl %al,%edx
f010d463:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010d466:	01 d0                	add    %edx,%eax
f010d468:	48                   	dec    %eax
f010d469:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010d46c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d46f:	ba 00 00 00 00       	mov    $0x0,%edx
f010d474:	f7 75 a0             	divl   -0x60(%ebp)
f010d477:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010d47a:	29 d0                	sub    %edx,%eax
f010d47c:	89 c3                	mov    %eax,%ebx
f010d47e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010d485:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d48a:	0f b6 c0             	movzbl %al,%eax
f010d48d:	c1 e0 04             	shl    $0x4,%eax
f010d490:	89 c2                	mov    %eax,%edx
f010d492:	8b 45 98             	mov    -0x68(%ebp),%eax
f010d495:	01 d0                	add    %edx,%eax
f010d497:	48                   	dec    %eax
f010d498:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010d49b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d49e:	ba 00 00 00 00       	mov    $0x0,%edx
f010d4a3:	f7 75 98             	divl   -0x68(%ebp)
f010d4a6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010d4a9:	29 d0                	sub    %edx,%eax
f010d4ab:	01 d8                	add    %ebx,%eax
f010d4ad:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f010d4b2:	39 c1                	cmp    %eax,%ecx
f010d4b4:	74 14                	je     f010d4ca <test_kmalloc+0x3e6>
f010d4b6:	83 ec 04             	sub    $0x4,%esp
f010d4b9:	68 54 1b 12 f0       	push   $0xf0121b54
f010d4be:	6a 5a                	push   $0x5a
f010d4c0:	68 76 1a 12 f0       	push   $0xf0121a76
f010d4c5:	e8 e5 2c ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d4ca:	e8 ab ec ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d4cf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d4d2:	74 14                	je     f010d4e8 <test_kmalloc+0x404>
f010d4d4:	83 ec 04             	sub    $0x4,%esp
f010d4d7:	68 88 1a 12 f0       	push   $0xf0121a88
f010d4dc:	6a 5b                	push   $0x5b
f010d4de:	68 76 1a 12 f0       	push   $0xf0121a76
f010d4e3:	e8 c7 2c ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d4e8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d4eb:	e8 5e d5 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d4f0:	29 c3                	sub    %eax,%ebx
f010d4f2:	89 d8                	mov    %ebx,%eax
f010d4f4:	83 f8 01             	cmp    $0x1,%eax
f010d4f7:	74 14                	je     f010d50d <test_kmalloc+0x429>
f010d4f9:	83 ec 04             	sub    $0x4,%esp
f010d4fc:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d501:	6a 5c                	push   $0x5c
f010d503:	68 76 1a 12 f0       	push   $0xf0121a76
f010d508:	e8 a2 2c ff ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f010d50d:	e8 3c d5 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d512:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d515:	e8 60 ec ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d51a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f010d51d:	83 ec 0c             	sub    $0xc,%esp
f010d520:	68 00 08 00 00       	push   $0x800
f010d525:	e8 6b f9 ff ff       	call   f010ce95 <kmalloc>
f010d52a:	83 c4 10             	add    $0x10,%esp
f010d52d:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d533:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f010d539:	89 c1                	mov    %eax,%ecx
f010d53b:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010d542:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d547:	0f b6 d0             	movzbl %al,%edx
f010d54a:	8b 45 90             	mov    -0x70(%ebp),%eax
f010d54d:	01 d0                	add    %edx,%eax
f010d54f:	48                   	dec    %eax
f010d550:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010d553:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d556:	ba 00 00 00 00       	mov    $0x0,%edx
f010d55b:	f7 75 90             	divl   -0x70(%ebp)
f010d55e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010d561:	29 d0                	sub    %edx,%eax
f010d563:	89 c3                	mov    %eax,%ebx
f010d565:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010d56c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d571:	0f b6 c0             	movzbl %al,%eax
f010d574:	c1 e0 04             	shl    $0x4,%eax
f010d577:	89 c2                	mov    %eax,%edx
f010d579:	8b 45 88             	mov    -0x78(%ebp),%eax
f010d57c:	01 d0                	add    %edx,%eax
f010d57e:	48                   	dec    %eax
f010d57f:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010d582:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d585:	ba 00 00 00 00       	mov    $0x0,%edx
f010d58a:	f7 75 88             	divl   -0x78(%ebp)
f010d58d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010d590:	29 d0                	sub    %edx,%eax
f010d592:	01 d8                	add    %ebx,%eax
f010d594:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f010d599:	39 c1                	cmp    %eax,%ecx
f010d59b:	74 14                	je     f010d5b1 <test_kmalloc+0x4cd>
f010d59d:	83 ec 04             	sub    $0x4,%esp
f010d5a0:	68 54 1b 12 f0       	push   $0xf0121b54
f010d5a5:	6a 62                	push   $0x62
f010d5a7:	68 76 1a 12 f0       	push   $0xf0121a76
f010d5ac:	e8 fe 2b ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d5b1:	e8 c4 eb ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d5b6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d5b9:	74 14                	je     f010d5cf <test_kmalloc+0x4eb>
f010d5bb:	83 ec 04             	sub    $0x4,%esp
f010d5be:	68 88 1a 12 f0       	push   $0xf0121a88
f010d5c3:	6a 63                	push   $0x63
f010d5c5:	68 76 1a 12 f0       	push   $0xf0121a76
f010d5ca:	e8 e0 2b ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d5cf:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d5d2:	e8 77 d4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d5d7:	29 c3                	sub    %eax,%ebx
f010d5d9:	89 d8                	mov    %ebx,%eax
f010d5db:	83 f8 01             	cmp    $0x1,%eax
f010d5de:	74 14                	je     f010d5f4 <test_kmalloc+0x510>
f010d5e0:	83 ec 04             	sub    $0x4,%esp
f010d5e3:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d5e8:	6a 64                	push   $0x64
f010d5ea:	68 76 1a 12 f0       	push   $0xf0121a76
f010d5ef:	e8 bb 2b ff ff       	call   f01001af <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f010d5f4:	e8 55 d4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d5f9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d5fc:	e8 79 eb ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d601:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f010d604:	83 ec 0c             	sub    $0xc,%esp
f010d607:	68 00 1c 00 00       	push   $0x1c00
f010d60c:	e8 84 f8 ff ff       	call   f010ce95 <kmalloc>
f010d611:	83 c4 10             	add    $0x10,%esp
f010d614:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d61a:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010d620:	89 c1                	mov    %eax,%ecx
f010d622:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010d629:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d62e:	0f b6 d0             	movzbl %al,%edx
f010d631:	8b 45 80             	mov    -0x80(%ebp),%eax
f010d634:	01 d0                	add    %edx,%eax
f010d636:	48                   	dec    %eax
f010d637:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010d63d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d643:	ba 00 00 00 00       	mov    $0x0,%edx
f010d648:	f7 75 80             	divl   -0x80(%ebp)
f010d64b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010d651:	29 d0                	sub    %edx,%eax
f010d653:	89 c3                	mov    %eax,%ebx
f010d655:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010d65c:	10 00 00 
f010d65f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d664:	0f b6 c0             	movzbl %al,%eax
f010d667:	c1 e0 04             	shl    $0x4,%eax
f010d66a:	89 c2                	mov    %eax,%edx
f010d66c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010d672:	01 d0                	add    %edx,%eax
f010d674:	48                   	dec    %eax
f010d675:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010d67b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d681:	ba 00 00 00 00       	mov    $0x0,%edx
f010d686:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010d68c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010d692:	29 d0                	sub    %edx,%eax
f010d694:	01 d8                	add    %ebx,%eax
f010d696:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f010d69b:	39 c1                	cmp    %eax,%ecx
f010d69d:	74 14                	je     f010d6b3 <test_kmalloc+0x5cf>
f010d69f:	83 ec 04             	sub    $0x4,%esp
f010d6a2:	68 54 1b 12 f0       	push   $0xf0121b54
f010d6a7:	6a 6a                	push   $0x6a
f010d6a9:	68 76 1a 12 f0       	push   $0xf0121a76
f010d6ae:	e8 fc 2a ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d6b3:	e8 c2 ea ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d6b8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d6bb:	74 14                	je     f010d6d1 <test_kmalloc+0x5ed>
f010d6bd:	83 ec 04             	sub    $0x4,%esp
f010d6c0:	68 88 1a 12 f0       	push   $0xf0121a88
f010d6c5:	6a 6b                	push   $0x6b
f010d6c7:	68 76 1a 12 f0       	push   $0xf0121a76
f010d6cc:	e8 de 2a ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d6d1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d6d4:	e8 75 d3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d6d9:	29 c3                	sub    %eax,%ebx
f010d6db:	89 d8                	mov    %ebx,%eax
f010d6dd:	83 f8 02             	cmp    $0x2,%eax
f010d6e0:	74 14                	je     f010d6f6 <test_kmalloc+0x612>
f010d6e2:	83 ec 04             	sub    $0x4,%esp
f010d6e5:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d6ea:	6a 6c                	push   $0x6c
f010d6ec:	68 76 1a 12 f0       	push   $0xf0121a76
f010d6f1:	e8 b9 2a ff ff       	call   f01001af <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f010d6f6:	e8 53 d3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d6fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d6fe:	e8 77 ea ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d703:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f010d706:	83 ec 0c             	sub    $0xc,%esp
f010d709:	68 00 fc 2f 00       	push   $0x2ffc00
f010d70e:	e8 82 f7 ff ff       	call   f010ce95 <kmalloc>
f010d713:	83 c4 10             	add    $0x10,%esp
f010d716:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d71c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010d722:	89 c1                	mov    %eax,%ecx
f010d724:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010d72b:	10 00 00 
f010d72e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d733:	0f b6 d0             	movzbl %al,%edx
f010d736:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010d73c:	01 d0                	add    %edx,%eax
f010d73e:	48                   	dec    %eax
f010d73f:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010d745:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d74b:	ba 00 00 00 00       	mov    $0x0,%edx
f010d750:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010d756:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010d75c:	29 d0                	sub    %edx,%eax
f010d75e:	89 c3                	mov    %eax,%ebx
f010d760:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010d767:	10 00 00 
f010d76a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d76f:	0f b6 c0             	movzbl %al,%eax
f010d772:	c1 e0 04             	shl    $0x4,%eax
f010d775:	89 c2                	mov    %eax,%edx
f010d777:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010d77d:	01 d0                	add    %edx,%eax
f010d77f:	48                   	dec    %eax
f010d780:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010d786:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d78c:	ba 00 00 00 00       	mov    $0x0,%edx
f010d791:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010d797:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010d79d:	29 d0                	sub    %edx,%eax
f010d79f:	01 d8                	add    %ebx,%eax
f010d7a1:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f010d7a6:	39 c1                	cmp    %eax,%ecx
f010d7a8:	74 14                	je     f010d7be <test_kmalloc+0x6da>
f010d7aa:	83 ec 04             	sub    $0x4,%esp
f010d7ad:	68 54 1b 12 f0       	push   $0xf0121b54
f010d7b2:	6a 72                	push   $0x72
f010d7b4:	68 76 1a 12 f0       	push   $0xf0121a76
f010d7b9:	e8 f1 29 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d7be:	e8 b7 e9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d7c3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d7c6:	74 14                	je     f010d7dc <test_kmalloc+0x6f8>
f010d7c8:	83 ec 04             	sub    $0x4,%esp
f010d7cb:	68 88 1a 12 f0       	push   $0xf0121a88
f010d7d0:	6a 73                	push   $0x73
f010d7d2:	68 76 1a 12 f0       	push   $0xf0121a76
f010d7d7:	e8 d3 29 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d7dc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d7df:	e8 6a d2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d7e4:	29 c3                	sub    %eax,%ebx
f010d7e6:	89 d8                	mov    %ebx,%eax
f010d7e8:	3d 00 03 00 00       	cmp    $0x300,%eax
f010d7ed:	74 14                	je     f010d803 <test_kmalloc+0x71f>
f010d7ef:	83 ec 04             	sub    $0x4,%esp
f010d7f2:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d7f7:	6a 74                	push   $0x74
f010d7f9:	68 76 1a 12 f0       	push   $0xf0121a76
f010d7fe:	e8 ac 29 ff ff       	call   f01001af <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f010d803:	e8 46 d2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d808:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d80b:	e8 6a e9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d810:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f010d813:	83 ec 0c             	sub    $0xc,%esp
f010d816:	68 00 fc 5f 00       	push   $0x5ffc00
f010d81b:	e8 75 f6 ff ff       	call   f010ce95 <kmalloc>
f010d820:	83 c4 10             	add    $0x10,%esp
f010d823:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d829:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010d82f:	89 c1                	mov    %eax,%ecx
f010d831:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010d838:	10 00 00 
f010d83b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d840:	0f b6 d0             	movzbl %al,%edx
f010d843:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010d849:	01 d0                	add    %edx,%eax
f010d84b:	48                   	dec    %eax
f010d84c:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010d852:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d858:	ba 00 00 00 00       	mov    $0x0,%edx
f010d85d:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010d863:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010d869:	29 d0                	sub    %edx,%eax
f010d86b:	89 c3                	mov    %eax,%ebx
f010d86d:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010d874:	10 00 00 
f010d877:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d87c:	0f b6 c0             	movzbl %al,%eax
f010d87f:	c1 e0 04             	shl    $0x4,%eax
f010d882:	89 c2                	mov    %eax,%edx
f010d884:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010d88a:	01 d0                	add    %edx,%eax
f010d88c:	48                   	dec    %eax
f010d88d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010d893:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d899:	ba 00 00 00 00       	mov    $0x0,%edx
f010d89e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010d8a4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010d8aa:	29 d0                	sub    %edx,%eax
f010d8ac:	01 d8                	add    %ebx,%eax
f010d8ae:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f010d8b3:	39 c1                	cmp    %eax,%ecx
f010d8b5:	74 14                	je     f010d8cb <test_kmalloc+0x7e7>
f010d8b7:	83 ec 04             	sub    $0x4,%esp
f010d8ba:	68 54 1b 12 f0       	push   $0xf0121b54
f010d8bf:	6a 7a                	push   $0x7a
f010d8c1:	68 76 1a 12 f0       	push   $0xf0121a76
f010d8c6:	e8 e4 28 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d8cb:	e8 aa e8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d8d0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d8d3:	74 14                	je     f010d8e9 <test_kmalloc+0x805>
f010d8d5:	83 ec 04             	sub    $0x4,%esp
f010d8d8:	68 88 1a 12 f0       	push   $0xf0121a88
f010d8dd:	6a 7b                	push   $0x7b
f010d8df:	68 76 1a 12 f0       	push   $0xf0121a76
f010d8e4:	e8 c6 28 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d8e9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d8ec:	e8 5d d1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d8f1:	29 c3                	sub    %eax,%ebx
f010d8f3:	89 d8                	mov    %ebx,%eax
f010d8f5:	3d 00 06 00 00       	cmp    $0x600,%eax
f010d8fa:	74 14                	je     f010d910 <test_kmalloc+0x82c>
f010d8fc:	83 ec 04             	sub    $0x4,%esp
f010d8ff:	68 f0 1a 12 f0       	push   $0xf0121af0
f010d904:	6a 7c                	push   $0x7c
f010d906:	68 76 1a 12 f0       	push   $0xf0121a76
f010d90b:	e8 9f 28 ff ff       	call   f01001af <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f010d910:	e8 39 d1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010d915:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010d918:	e8 5d e8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d91d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f010d920:	83 ec 0c             	sub    $0xc,%esp
f010d923:	68 00 38 00 00       	push   $0x3800
f010d928:	e8 68 f5 ff ff       	call   f010ce95 <kmalloc>
f010d92d:	83 c4 10             	add    $0x10,%esp
f010d930:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f010d936:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010d93c:	89 c1                	mov    %eax,%ecx
f010d93e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010d945:	10 00 00 
f010d948:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d94d:	0f b6 d0             	movzbl %al,%edx
f010d950:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010d956:	01 d0                	add    %edx,%eax
f010d958:	48                   	dec    %eax
f010d959:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010d95f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d965:	ba 00 00 00 00       	mov    $0x0,%edx
f010d96a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010d970:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010d976:	29 d0                	sub    %edx,%eax
f010d978:	89 c3                	mov    %eax,%ebx
f010d97a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010d981:	10 00 00 
f010d984:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010d989:	0f b6 c0             	movzbl %al,%eax
f010d98c:	c1 e0 04             	shl    $0x4,%eax
f010d98f:	89 c2                	mov    %eax,%edx
f010d991:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010d997:	01 d0                	add    %edx,%eax
f010d999:	48                   	dec    %eax
f010d99a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010d9a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d9a6:	ba 00 00 00 00       	mov    $0x0,%edx
f010d9ab:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010d9b1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010d9b7:	29 d0                	sub    %edx,%eax
f010d9b9:	01 d8                	add    %ebx,%eax
f010d9bb:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f010d9c0:	39 c1                	cmp    %eax,%ecx
f010d9c2:	74 17                	je     f010d9db <test_kmalloc+0x8f7>
f010d9c4:	83 ec 04             	sub    $0x4,%esp
f010d9c7:	68 54 1b 12 f0       	push   $0xf0121b54
f010d9cc:	68 82 00 00 00       	push   $0x82
f010d9d1:	68 76 1a 12 f0       	push   $0xf0121a76
f010d9d6:	e8 d4 27 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010d9db:	e8 9a e7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010d9e0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010d9e3:	74 17                	je     f010d9fc <test_kmalloc+0x918>
f010d9e5:	83 ec 04             	sub    $0x4,%esp
f010d9e8:	68 88 1a 12 f0       	push   $0xf0121a88
f010d9ed:	68 83 00 00 00       	push   $0x83
f010d9f2:	68 76 1a 12 f0       	push   $0xf0121a76
f010d9f7:	e8 b3 27 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f010d9fc:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f010d9ff:	e8 4a d0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010da04:	29 c3                	sub    %eax,%ebx
f010da06:	89 d8                	mov    %ebx,%eax
f010da08:	83 f8 04             	cmp    $0x4,%eax
f010da0b:	74 17                	je     f010da24 <test_kmalloc+0x940>
f010da0d:	83 ec 04             	sub    $0x4,%esp
f010da10:	68 f0 1a 12 f0       	push   $0xf0121af0
f010da15:	68 84 00 00 00       	push   $0x84
f010da1a:	68 76 1a 12 f0       	push   $0xf0121a76
f010da1f:	e8 8b 27 ff ff       	call   f01001af <_panic>

		cprintf("\b\b\b50%");
f010da24:	83 ec 0c             	sub    $0xc,%esp
f010da27:	68 ba 1b 12 f0       	push   $0xf0121bba
f010da2c:	e8 d3 97 ff ff       	call   f0107204 <cprintf>
f010da31:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f010da34:	e8 15 d0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010da39:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f010da3c:	e8 39 e7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010da41:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f010da44:	c7 85 40 ff ff ff ff 	movl   $0x1ffbff,-0xc0(%ebp)
f010da4b:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f010da4e:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f010da54:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
			byteArr[0] = minByte ;
f010da5a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010da60:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010da63:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f010da65:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010da6b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010da71:	01 c2                	add    %eax,%edx
f010da73:	8a 45 f2             	mov    -0xe(%ebp),%al
f010da76:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f010da78:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f010da7e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f010da84:	c7 85 34 ff ff ff ff 	movl   $0xffdff,-0xcc(%ebp)
f010da8b:	fd 0f 00 
			shortArr[0] = minShort;
f010da8e:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f010da94:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da97:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f010da9a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010daa0:	01 c0                	add    %eax,%eax
f010daa2:	89 c2                	mov    %eax,%edx
f010daa4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010daaa:	01 c2                	add    %eax,%edx
f010daac:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010dab0:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f010dab3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f010dab9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f010dabf:	c7 85 2c ff ff ff ff 	movl   $0x1ff,-0xd4(%ebp)
f010dac6:	01 00 00 
			intArr[0] = minInt;
f010dac9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dacf:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010dad2:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f010dad4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010dada:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dae1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dae7:	01 c2                	add    %eax,%edx
f010dae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010daec:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f010daee:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010daf4:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f010dafa:	c7 85 24 ff ff ff 7f 	movl   $0x37f,-0xdc(%ebp)
f010db01:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f010db04:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010db0a:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010db0d:	88 10                	mov    %dl,(%eax)
f010db0f:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f010db15:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010db18:	66 89 42 02          	mov    %ax,0x2(%edx)
f010db1c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010db22:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010db25:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f010db28:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010db2e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010db35:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010db3b:	01 c2                	add    %eax,%edx
f010db3d:	8a 45 f2             	mov    -0xe(%ebp),%al
f010db40:	88 02                	mov    %al,(%edx)
f010db42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010db48:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010db4f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010db55:	01 c2                	add    %eax,%edx
f010db57:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010db5b:	66 89 42 02          	mov    %ax,0x2(%edx)
f010db5f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010db65:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010db6c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010db72:	01 c2                	add    %eax,%edx
f010db74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010db77:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f010db7a:	c7 85 20 ff ff ff ff 	movl   $0x5ffbff,-0xe0(%ebp)
f010db81:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f010db84:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010db8a:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
			byteArr2[0] = minByte ;
f010db90:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010db96:	8a 55 f3             	mov    -0xd(%ebp),%dl
f010db99:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f010db9b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010dba1:	89 c2                	mov    %eax,%edx
f010dba3:	c1 ea 1f             	shr    $0x1f,%edx
f010dba6:	01 d0                	add    %edx,%eax
f010dba8:	d1 f8                	sar    %eax
f010dbaa:	89 c2                	mov    %eax,%edx
f010dbac:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010dbb2:	01 c2                	add    %eax,%edx
f010dbb4:	8a 45 f2             	mov    -0xe(%ebp),%al
f010dbb7:	88 c1                	mov    %al,%cl
f010dbb9:	c0 e9 07             	shr    $0x7,%cl
f010dbbc:	01 c8                	add    %ecx,%eax
f010dbbe:	d0 f8                	sar    %al
f010dbc0:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f010dbc2:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010dbc8:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010dbce:	01 c2                	add    %eax,%edx
f010dbd0:	8a 45 f2             	mov    -0xe(%ebp),%al
f010dbd3:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f010dbd5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010dbdb:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f010dbe1:	c7 85 14 ff ff ff ff 	movl   $0x1bff,-0xec(%ebp)
f010dbe8:	1b 00 00 
			shortArr2[0] = minShort;
f010dbeb:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010dbf1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dbf4:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f010dbf7:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010dbfd:	01 c0                	add    %eax,%eax
f010dbff:	89 c2                	mov    %eax,%edx
f010dc01:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010dc07:	01 c2                	add    %eax,%edx
f010dc09:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f010dc0d:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010dc10:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010dc16:	8a 00                	mov    (%eax),%al
f010dc18:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010dc1b:	75 15                	jne    f010dc32 <test_kmalloc+0xb4e>
f010dc1d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010dc23:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010dc29:	01 d0                	add    %edx,%eax
f010dc2b:	8a 00                	mov    (%eax),%al
f010dc2d:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010dc30:	74 17                	je     f010dc49 <test_kmalloc+0xb65>
f010dc32:	83 ec 04             	sub    $0x4,%esp
f010dc35:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dc3a:	68 b3 00 00 00       	push   $0xb3
f010dc3f:	68 76 1a 12 f0       	push   $0xf0121a76
f010dc44:	e8 66 25 ff ff       	call   f01001af <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010dc49:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dc4f:	66 8b 00             	mov    (%eax),%ax
f010dc52:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010dc56:	75 1b                	jne    f010dc73 <test_kmalloc+0xb8f>
f010dc58:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010dc5e:	01 c0                	add    %eax,%eax
f010dc60:	89 c2                	mov    %eax,%edx
f010dc62:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010dc68:	01 d0                	add    %edx,%eax
f010dc6a:	66 8b 00             	mov    (%eax),%ax
f010dc6d:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010dc71:	74 17                	je     f010dc8a <test_kmalloc+0xba6>
f010dc73:	83 ec 04             	sub    $0x4,%esp
f010dc76:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dc7b:	68 b4 00 00 00       	push   $0xb4
f010dc80:	68 76 1a 12 f0       	push   $0xf0121a76
f010dc85:	e8 25 25 ff ff       	call   f01001af <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f010dc8a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dc90:	8b 00                	mov    (%eax),%eax
f010dc92:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010dc95:	75 1c                	jne    f010dcb3 <test_kmalloc+0xbcf>
f010dc97:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010dc9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010dca4:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010dcaa:	01 d0                	add    %edx,%eax
f010dcac:	8b 00                	mov    (%eax),%eax
f010dcae:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010dcb1:	74 17                	je     f010dcca <test_kmalloc+0xbe6>
f010dcb3:	83 ec 04             	sub    $0x4,%esp
f010dcb6:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dcbb:	68 b5 00 00 00       	push   $0xb5
f010dcc0:	68 76 1a 12 f0       	push   $0xf0121a76
f010dcc5:	e8 e5 24 ff ff       	call   f01001af <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f010dcca:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dcd0:	8a 00                	mov    (%eax),%al
f010dcd2:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010dcd5:	75 1c                	jne    f010dcf3 <test_kmalloc+0xc0f>
f010dcd7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dcdd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dce4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dcea:	01 d0                	add    %edx,%eax
f010dcec:	8a 00                	mov    (%eax),%al
f010dcee:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010dcf1:	74 17                	je     f010dd0a <test_kmalloc+0xc26>
f010dcf3:	83 ec 04             	sub    $0x4,%esp
f010dcf6:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dcfb:	68 b7 00 00 00       	push   $0xb7
f010dd00:	68 76 1a 12 f0       	push   $0xf0121a76
f010dd05:	e8 a5 24 ff ff       	call   f01001af <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f010dd0a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dd10:	66 8b 40 02          	mov    0x2(%eax),%ax
f010dd14:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010dd18:	75 1f                	jne    f010dd39 <test_kmalloc+0xc55>
f010dd1a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dd20:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dd27:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dd2d:	01 d0                	add    %edx,%eax
f010dd2f:	66 8b 40 02          	mov    0x2(%eax),%ax
f010dd33:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010dd37:	74 17                	je     f010dd50 <test_kmalloc+0xc6c>
f010dd39:	83 ec 04             	sub    $0x4,%esp
f010dd3c:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dd41:	68 b8 00 00 00       	push   $0xb8
f010dd46:	68 76 1a 12 f0       	push   $0xf0121a76
f010dd4b:	e8 5f 24 ff ff       	call   f01001af <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f010dd50:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dd56:	8b 40 04             	mov    0x4(%eax),%eax
f010dd59:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010dd5c:	75 1d                	jne    f010dd7b <test_kmalloc+0xc97>
f010dd5e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010dd64:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010dd6b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010dd71:	01 d0                	add    %edx,%eax
f010dd73:	8b 40 04             	mov    0x4(%eax),%eax
f010dd76:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010dd79:	74 17                	je     f010dd92 <test_kmalloc+0xcae>
f010dd7b:	83 ec 04             	sub    $0x4,%esp
f010dd7e:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dd83:	68 b9 00 00 00       	push   $0xb9
f010dd88:	68 76 1a 12 f0       	push   $0xf0121a76
f010dd8d:	e8 1d 24 ff ff       	call   f01001af <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f010dd92:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010dd98:	8a 00                	mov    (%eax),%al
f010dd9a:	3a 45 f3             	cmp    -0xd(%ebp),%al
f010dd9d:	75 40                	jne    f010dddf <test_kmalloc+0xcfb>
f010dd9f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010dda5:	89 c2                	mov    %eax,%edx
f010dda7:	c1 ea 1f             	shr    $0x1f,%edx
f010ddaa:	01 d0                	add    %edx,%eax
f010ddac:	d1 f8                	sar    %eax
f010ddae:	89 c2                	mov    %eax,%edx
f010ddb0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010ddb6:	01 d0                	add    %edx,%eax
f010ddb8:	8a 10                	mov    (%eax),%dl
f010ddba:	8a 45 f2             	mov    -0xe(%ebp),%al
f010ddbd:	88 c1                	mov    %al,%cl
f010ddbf:	c0 e9 07             	shr    $0x7,%cl
f010ddc2:	01 c8                	add    %ecx,%eax
f010ddc4:	d0 f8                	sar    %al
f010ddc6:	38 c2                	cmp    %al,%dl
f010ddc8:	75 15                	jne    f010dddf <test_kmalloc+0xcfb>
f010ddca:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f010ddd0:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010ddd6:	01 d0                	add    %edx,%eax
f010ddd8:	8a 00                	mov    (%eax),%al
f010ddda:	3a 45 f2             	cmp    -0xe(%ebp),%al
f010dddd:	74 17                	je     f010ddf6 <test_kmalloc+0xd12>
f010dddf:	83 ec 04             	sub    $0x4,%esp
f010dde2:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010dde7:	68 bb 00 00 00       	push   $0xbb
f010ddec:	68 76 1a 12 f0       	push   $0xf0121a76
f010ddf1:	e8 b9 23 ff ff       	call   f01001af <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f010ddf6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010ddfc:	66 8b 00             	mov    (%eax),%ax
f010ddff:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f010de03:	75 1b                	jne    f010de20 <test_kmalloc+0xd3c>
f010de05:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010de0b:	01 c0                	add    %eax,%eax
f010de0d:	89 c2                	mov    %eax,%edx
f010de0f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010de15:	01 d0                	add    %edx,%eax
f010de17:	66 8b 00             	mov    (%eax),%ax
f010de1a:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f010de1e:	74 17                	je     f010de37 <test_kmalloc+0xd53>
f010de20:	83 ec 04             	sub    $0x4,%esp
f010de23:	68 c4 1b 12 f0       	push   $0xf0121bc4
f010de28:	68 bc 00 00 00       	push   $0xbc
f010de2d:	68 76 1a 12 f0       	push   $0xf0121a76
f010de32:	e8 78 23 ff ff       	call   f01001af <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010de37:	e8 12 cc ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010de3c:	89 c2                	mov    %eax,%edx
f010de3e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010de41:	39 c2                	cmp    %eax,%edx
f010de43:	74 17                	je     f010de5c <test_kmalloc+0xd78>
f010de45:	83 ec 04             	sub    $0x4,%esp
f010de48:	68 f0 1a 12 f0       	push   $0xf0121af0
f010de4d:	68 be 00 00 00       	push   $0xbe
f010de52:	68 76 1a 12 f0       	push   $0xf0121a76
f010de57:	e8 53 23 ff ff       	call   f01001af <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010de5c:	e8 19 e3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010de61:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010de64:	74 17                	je     f010de7d <test_kmalloc+0xd99>
f010de66:	83 ec 04             	sub    $0x4,%esp
f010de69:	68 88 1a 12 f0       	push   $0xf0121a88
f010de6e:	68 bf 00 00 00       	push   $0xbf
f010de73:	68 76 1a 12 f0       	push   $0xf0121a76
f010de78:	e8 32 23 ff ff       	call   f01001af <_panic>
		}

		cprintf("\b\b\b80%");
f010de7d:	83 ec 0c             	sub    $0xc,%esp
f010de80:	68 f9 1b 12 f0       	push   $0xf0121bf9
f010de85:	e8 7a 93 ff ff       	call   f0107204 <cprintf>
f010de8a:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f010de8d:	e8 bc cb ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010de92:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010de95:	e8 e0 e2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010de9a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f010de9d:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f010dea4:	10 00 00 
f010dea7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010deac:	0f b6 d0             	movzbl %al,%edx
f010deaf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010deb5:	01 d0                	add    %edx,%eax
f010deb7:	48                   	dec    %eax
f010deb8:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f010debe:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010dec4:	ba 00 00 00 00       	mov    $0x0,%edx
f010dec9:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f010decf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010ded5:	29 d0                	sub    %edx,%eax
f010ded7:	89 c1                	mov    %eax,%ecx
f010ded9:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f010dee0:	10 00 00 
f010dee3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010dee8:	0f b6 c0             	movzbl %al,%eax
f010deeb:	c1 e0 04             	shl    $0x4,%eax
f010deee:	89 c2                	mov    %eax,%edx
f010def0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010def6:	01 d0                	add    %edx,%eax
f010def8:	48                   	dec    %eax
f010def9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f010deff:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010df05:	ba 00 00 00 00       	mov    $0x0,%edx
f010df0a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f010df10:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010df16:	29 d0                	sub    %edx,%eax
f010df18:	01 c8                	add    %ecx,%eax
f010df1a:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f010df1f:	29 c2                	sub    %eax,%edx
f010df21:	89 d0                	mov    %edx,%eax
f010df23:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f010df29:	83 ec 0c             	sub    $0xc,%esp
f010df2c:	ff b5 00 ff ff ff    	pushl  -0x100(%ebp)
f010df32:	e8 5e ef ff ff       	call   f010ce95 <kmalloc>
f010df37:	83 c4 10             	add    $0x10,%esp
f010df3a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f010df40:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010df46:	85 c0                	test   %eax,%eax
f010df48:	74 17                	je     f010df61 <test_kmalloc+0xe7d>
f010df4a:	83 ec 04             	sub    $0x4,%esp
f010df4d:	68 44 1a 12 f0       	push   $0xf0121a44
f010df52:	68 c9 00 00 00       	push   $0xc9
f010df57:	68 76 1a 12 f0       	push   $0xf0121a76
f010df5c:	e8 4e 22 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010df61:	e8 14 e2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010df66:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010df69:	74 17                	je     f010df82 <test_kmalloc+0xe9e>
f010df6b:	83 ec 04             	sub    $0x4,%esp
f010df6e:	68 88 1a 12 f0       	push   $0xf0121a88
f010df73:	68 ca 00 00 00       	push   $0xca
f010df78:	68 76 1a 12 f0       	push   $0xf0121a76
f010df7d:	e8 2d 22 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f010df82:	e8 c7 ca ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010df87:	89 c2                	mov    %eax,%edx
f010df89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df8c:	39 c2                	cmp    %eax,%edx
f010df8e:	74 17                	je     f010dfa7 <test_kmalloc+0xec3>
f010df90:	83 ec 04             	sub    $0x4,%esp
f010df93:	68 f0 1a 12 f0       	push   $0xf0121af0
f010df98:	68 cb 00 00 00       	push   $0xcb
f010df9d:	68 76 1a 12 f0       	push   $0xf0121a76
f010dfa2:	e8 08 22 ff ff       	call   f01001af <_panic>

		cprintf("\b\b\b90%");
f010dfa7:	83 ec 0c             	sub    $0xc,%esp
f010dfaa:	68 00 1c 12 f0       	push   $0xf0121c00
f010dfaf:	e8 50 92 ff ff       	call   f0107204 <cprintf>
f010dfb4:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f010dfb7:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010dfbd:	05 00 40 00 00       	add    $0x4000,%eax
f010dfc2:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010dfc8:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f010dfcf:	10 00 00 
f010dfd2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010dfd7:	0f b6 d0             	movzbl %al,%edx
f010dfda:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010dfe0:	01 d0                	add    %edx,%eax
f010dfe2:	48                   	dec    %eax
f010dfe3:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f010dfe9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010dfef:	ba 00 00 00 00       	mov    $0x0,%edx
f010dff4:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f010dffa:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010e000:	29 d0                	sub    %edx,%eax
f010e002:	89 c1                	mov    %eax,%ecx
f010e004:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f010e00b:	10 00 00 
f010e00e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e013:	0f b6 c0             	movzbl %al,%eax
f010e016:	c1 e0 04             	shl    $0x4,%eax
f010e019:	89 c2                	mov    %eax,%edx
f010e01b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010e021:	01 d0                	add    %edx,%eax
f010e023:	48                   	dec    %eax
f010e024:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f010e02a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010e030:	ba 00 00 00 00       	mov    $0x0,%edx
f010e035:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f010e03b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010e041:	29 d0                	sub    %edx,%eax
f010e043:	01 c8                	add    %ecx,%eax
f010e045:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010e04a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010e04d:	eb 6b                	jmp    f010e0ba <test_kmalloc+0xfd6>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, (void*)va, &table);
f010e04f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e052:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f010e057:	83 ec 04             	sub    $0x4,%esp
f010e05a:	8d 8d 94 fe ff ff    	lea    -0x16c(%ebp),%ecx
f010e060:	51                   	push   %ecx
f010e061:	52                   	push   %edx
f010e062:	50                   	push   %eax
f010e063:	e8 73 5b ff ff       	call   f0103bdb <get_page_table>
f010e068:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f010e06b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f010e071:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010e074:	c1 ea 0c             	shr    $0xc,%edx
f010e077:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010e07d:	c1 e2 02             	shl    $0x2,%edx
f010e080:	01 d0                	add    %edx,%eax
f010e082:	8b 00                	mov    (%eax),%eax
f010e084:	25 ff 0f 00 00       	and    $0xfff,%eax
f010e089:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f010e08f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010e095:	83 e0 04             	and    $0x4,%eax
f010e098:	85 c0                	test   %eax,%eax
f010e09a:	74 17                	je     f010e0b3 <test_kmalloc+0xfcf>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f010e09c:	83 ec 04             	sub    $0x4,%esp
f010e09f:	68 08 1c 12 f0       	push   $0xf0121c08
f010e0a4:	68 d8 00 00 00       	push   $0xd8
f010e0a9:	68 76 1a 12 f0       	push   $0xf0121a76
f010e0ae:	e8 fc 20 ff ff       	call   f01001af <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f010e0b3:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010e0ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0bd:	3b 85 fc fe ff ff    	cmp    -0x104(%ebp),%eax
f010e0c3:	72 8a                	jb     f010e04f <test_kmalloc+0xf6b>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f010e0c5:	83 ec 0c             	sub    $0xc,%esp
f010e0c8:	68 52 1c 12 f0       	push   $0xf0121c52
f010e0cd:	e8 32 91 ff ff       	call   f0107204 <cprintf>
f010e0d2:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f010e0d5:	83 ec 0c             	sub    $0xc,%esp
f010e0d8:	68 5c 1c 12 f0       	push   $0xf0121c5c
f010e0dd:	e8 22 91 ff ff       	call   f0107204 <cprintf>
f010e0e2:	83 c4 10             	add    $0x10,%esp

	return 1;
f010e0e5:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010e0ea:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e0ed:	5b                   	pop    %ebx
f010e0ee:	5f                   	pop    %edi
f010e0ef:	5d                   	pop    %ebp
f010e0f0:	c3                   	ret    

f010e0f1 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f010e0f1:	55                   	push   %ebp
f010e0f2:	89 e5                	mov    %esp,%ebp
f010e0f4:	57                   	push   %edi
f010e0f5:	53                   	push   %ebx
f010e0f6:	81 ec d0 03 00 00    	sub    $0x3d0,%esp
	cprintf("==============================================\n");
f010e0fc:	83 ec 0c             	sub    $0xc,%esp
f010e0ff:	68 b8 19 12 f0       	push   $0xf01219b8
f010e104:	e8 fb 90 ff ff       	call   f0107204 <cprintf>
f010e109:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010e10c:	83 ec 0c             	sub    $0xc,%esp
f010e10f:	68 e8 19 12 f0       	push   $0xf01219e8
f010e114:	e8 eb 90 ff ff       	call   f0107204 <cprintf>
f010e119:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010e11c:	83 ec 0c             	sub    $0xc,%esp
f010e11f:	68 b8 19 12 f0       	push   $0xf01219b8
f010e124:	e8 db 90 ff ff       	call   f0107204 <cprintf>
f010e129:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f010e12c:	8d 95 28 fc ff ff    	lea    -0x3d8(%ebp),%edx
f010e132:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f010e137:	b8 00 00 00 00       	mov    $0x0,%eax
f010e13c:	89 d7                	mov    %edx,%edi
f010e13e:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f010e140:	83 ec 0c             	sub    $0xc,%esp
f010e143:	68 98 1c 12 f0       	push   $0xf0121c98
f010e148:	e8 b7 90 ff ff       	call   f0107204 <cprintf>
f010e14d:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f010e150:	e8 f9 c8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e155:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f010e158:	e8 1d e0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e15d:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010e160:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010e167:	eb 1f                	jmp    f010e188 <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f010e169:	83 ec 0c             	sub    $0xc,%esp
f010e16c:	68 00 00 20 00       	push   $0x200000
f010e171:	e8 1f ed ff ff       	call   f010ce95 <kmalloc>
f010e176:	83 c4 10             	add    $0x10,%esp
f010e179:	89 c2                	mov    %eax,%edx
f010e17b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e17e:	89 94 85 28 fc ff ff 	mov    %edx,-0x3d8(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f010e185:	ff 45 f4             	incl   -0xc(%ebp)
f010e188:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f010e18c:	7e db                	jle    f010e169 <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);
f010e18e:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f010e195:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e19a:	0f b6 d0             	movzbl %al,%edx
f010e19d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e1a0:	01 d0                	add    %edx,%eax
f010e1a2:	48                   	dec    %eax
f010e1a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010e1a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1ae:	f7 75 e8             	divl   -0x18(%ebp)
f010e1b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1b4:	29 d0                	sub    %edx,%eax
f010e1b6:	89 c1                	mov    %eax,%ecx
f010e1b8:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010e1bf:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e1c4:	0f b6 c0             	movzbl %al,%eax
f010e1c7:	c1 e0 04             	shl    $0x4,%eax
f010e1ca:	89 c2                	mov    %eax,%edx
f010e1cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e1cf:	01 d0                	add    %edx,%eax
f010e1d1:	48                   	dec    %eax
f010e1d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e1d5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e1d8:	ba 00 00 00 00       	mov    $0x0,%edx
f010e1dd:	f7 75 e0             	divl   -0x20(%ebp)
f010e1e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e1e3:	29 d0                	sub    %edx,%eax
f010e1e5:	01 c8                	add    %ecx,%eax
f010e1e7:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f010e1ec:	29 c2                	sub    %eax,%edx
f010e1ee:	89 d0                	mov    %edx,%eax
f010e1f0:	83 ec 0c             	sub    $0xc,%esp
f010e1f3:	50                   	push   %eax
f010e1f4:	e8 9c ec ff ff       	call   f010ce95 <kmalloc>
f010e1f9:	83 c4 10             	add    $0x10,%esp
f010e1fc:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010e202:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010e208:	89 c1                	mov    %eax,%ecx
f010e20a:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f010e211:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e216:	0f b6 d0             	movzbl %al,%edx
f010e219:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e21c:	01 d0                	add    %edx,%eax
f010e21e:	48                   	dec    %eax
f010e21f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f010e222:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e225:	ba 00 00 00 00       	mov    $0x0,%edx
f010e22a:	f7 75 d8             	divl   -0x28(%ebp)
f010e22d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e230:	29 d0                	sub    %edx,%eax
f010e232:	89 c3                	mov    %eax,%ebx
f010e234:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f010e23b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e240:	0f b6 c0             	movzbl %al,%eax
f010e243:	c1 e0 04             	shl    $0x4,%eax
f010e246:	89 c2                	mov    %eax,%edx
f010e248:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e24b:	01 d0                	add    %edx,%eax
f010e24d:	48                   	dec    %eax
f010e24e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010e251:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e254:	ba 00 00 00 00       	mov    $0x0,%edx
f010e259:	f7 75 d0             	divl   -0x30(%ebp)
f010e25c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e25f:	29 d0                	sub    %edx,%eax
f010e261:	01 d8                	add    %ebx,%eax
f010e263:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010e268:	39 c1                	cmp    %eax,%ecx
f010e26a:	0f 85 4f 03 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010e270:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010e276:	89 c1                	mov    %eax,%ecx
f010e278:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f010e27f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e284:	0f b6 d0             	movzbl %al,%edx
f010e287:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010e28a:	01 d0                	add    %edx,%eax
f010e28c:	48                   	dec    %eax
f010e28d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010e290:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e293:	ba 00 00 00 00       	mov    $0x0,%edx
f010e298:	f7 75 c8             	divl   -0x38(%ebp)
f010e29b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010e29e:	29 d0                	sub    %edx,%eax
f010e2a0:	89 c3                	mov    %eax,%ebx
f010e2a2:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f010e2a9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e2ae:	0f b6 c0             	movzbl %al,%eax
f010e2b1:	c1 e0 04             	shl    $0x4,%eax
f010e2b4:	89 c2                	mov    %eax,%edx
f010e2b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010e2b9:	01 d0                	add    %edx,%eax
f010e2bb:	48                   	dec    %eax
f010e2bc:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010e2bf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e2c2:	ba 00 00 00 00       	mov    $0x0,%edx
f010e2c7:	f7 75 c0             	divl   -0x40(%ebp)
f010e2ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010e2cd:	29 d0                	sub    %edx,%eax
f010e2cf:	01 d8                	add    %ebx,%eax
f010e2d1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f010e2d6:	39 c1                	cmp    %eax,%ecx
f010e2d8:	0f 85 e1 02 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010e2de:	8b 85 48 fc ff ff    	mov    -0x3b8(%ebp),%eax
f010e2e4:	89 c1                	mov    %eax,%ecx
f010e2e6:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f010e2ed:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e2f2:	0f b6 d0             	movzbl %al,%edx
f010e2f5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010e2f8:	01 d0                	add    %edx,%eax
f010e2fa:	48                   	dec    %eax
f010e2fb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f010e2fe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010e301:	ba 00 00 00 00       	mov    $0x0,%edx
f010e306:	f7 75 b8             	divl   -0x48(%ebp)
f010e309:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010e30c:	29 d0                	sub    %edx,%eax
f010e30e:	89 c3                	mov    %eax,%ebx
f010e310:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f010e317:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e31c:	0f b6 c0             	movzbl %al,%eax
f010e31f:	c1 e0 04             	shl    $0x4,%eax
f010e322:	89 c2                	mov    %eax,%edx
f010e324:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010e327:	01 d0                	add    %edx,%eax
f010e329:	48                   	dec    %eax
f010e32a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f010e32d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e330:	ba 00 00 00 00       	mov    $0x0,%edx
f010e335:	f7 75 b0             	divl   -0x50(%ebp)
f010e338:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010e33b:	29 d0                	sub    %edx,%eax
f010e33d:	01 d8                	add    %ebx,%eax
f010e33f:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f010e344:	39 c1                	cmp    %eax,%ecx
f010e346:	0f 85 73 02 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010e34c:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010e352:	89 c1                	mov    %eax,%ecx
f010e354:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f010e35b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e360:	0f b6 d0             	movzbl %al,%edx
f010e363:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010e366:	01 d0                	add    %edx,%eax
f010e368:	48                   	dec    %eax
f010e369:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f010e36c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010e36f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e374:	f7 75 a8             	divl   -0x58(%ebp)
f010e377:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010e37a:	29 d0                	sub    %edx,%eax
f010e37c:	89 c3                	mov    %eax,%ebx
f010e37e:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f010e385:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e38a:	0f b6 c0             	movzbl %al,%eax
f010e38d:	c1 e0 04             	shl    $0x4,%eax
f010e390:	89 c2                	mov    %eax,%edx
f010e392:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010e395:	01 d0                	add    %edx,%eax
f010e397:	48                   	dec    %eax
f010e398:	89 45 9c             	mov    %eax,-0x64(%ebp)
f010e39b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010e39e:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3a3:	f7 75 a0             	divl   -0x60(%ebp)
f010e3a6:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010e3a9:	29 d0                	sub    %edx,%eax
f010e3ab:	01 d8                	add    %ebx,%eax
f010e3ad:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f010e3b2:	39 c1                	cmp    %eax,%ecx
f010e3b4:	0f 85 05 02 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010e3ba:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010e3c0:	89 c1                	mov    %eax,%ecx
f010e3c2:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f010e3c9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e3ce:	0f b6 d0             	movzbl %al,%edx
f010e3d1:	8b 45 98             	mov    -0x68(%ebp),%eax
f010e3d4:	01 d0                	add    %edx,%eax
f010e3d6:	48                   	dec    %eax
f010e3d7:	89 45 94             	mov    %eax,-0x6c(%ebp)
f010e3da:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e3dd:	ba 00 00 00 00       	mov    $0x0,%edx
f010e3e2:	f7 75 98             	divl   -0x68(%ebp)
f010e3e5:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010e3e8:	29 d0                	sub    %edx,%eax
f010e3ea:	89 c3                	mov    %eax,%ebx
f010e3ec:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f010e3f3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e3f8:	0f b6 c0             	movzbl %al,%eax
f010e3fb:	c1 e0 04             	shl    $0x4,%eax
f010e3fe:	89 c2                	mov    %eax,%edx
f010e400:	8b 45 90             	mov    -0x70(%ebp),%eax
f010e403:	01 d0                	add    %edx,%eax
f010e405:	48                   	dec    %eax
f010e406:	89 45 8c             	mov    %eax,-0x74(%ebp)
f010e409:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010e40c:	ba 00 00 00 00       	mov    $0x0,%edx
f010e411:	f7 75 90             	divl   -0x70(%ebp)
f010e414:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010e417:	29 d0                	sub    %edx,%eax
f010e419:	01 d8                	add    %ebx,%eax
f010e41b:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f010e420:	39 c1                	cmp    %eax,%ecx
f010e422:	0f 85 97 01 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010e428:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010e42e:	89 c1                	mov    %eax,%ecx
f010e430:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f010e437:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e43c:	0f b6 d0             	movzbl %al,%edx
f010e43f:	8b 45 88             	mov    -0x78(%ebp),%eax
f010e442:	01 d0                	add    %edx,%eax
f010e444:	48                   	dec    %eax
f010e445:	89 45 84             	mov    %eax,-0x7c(%ebp)
f010e448:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010e44b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e450:	f7 75 88             	divl   -0x78(%ebp)
f010e453:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010e456:	29 d0                	sub    %edx,%eax
f010e458:	89 c3                	mov    %eax,%ebx
f010e45a:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f010e461:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e466:	0f b6 c0             	movzbl %al,%eax
f010e469:	c1 e0 04             	shl    $0x4,%eax
f010e46c:	89 c2                	mov    %eax,%edx
f010e46e:	8b 45 80             	mov    -0x80(%ebp),%eax
f010e471:	01 d0                	add    %edx,%eax
f010e473:	48                   	dec    %eax
f010e474:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f010e47a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010e480:	ba 00 00 00 00       	mov    $0x0,%edx
f010e485:	f7 75 80             	divl   -0x80(%ebp)
f010e488:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010e48e:	29 d0                	sub    %edx,%eax
f010e490:	01 d8                	add    %ebx,%eax
f010e492:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f010e497:	39 c1                	cmp    %eax,%ecx
f010e499:	0f 85 20 01 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010e49f:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010e4a5:	89 c1                	mov    %eax,%ecx
f010e4a7:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f010e4ae:	10 00 00 
f010e4b1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e4b6:	0f b6 d0             	movzbl %al,%edx
f010e4b9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010e4bf:	01 d0                	add    %edx,%eax
f010e4c1:	48                   	dec    %eax
f010e4c2:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010e4c8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010e4ce:	ba 00 00 00 00       	mov    $0x0,%edx
f010e4d3:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f010e4d9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010e4df:	29 d0                	sub    %edx,%eax
f010e4e1:	89 c3                	mov    %eax,%ebx
f010e4e3:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f010e4ea:	10 00 00 
f010e4ed:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e4f2:	0f b6 c0             	movzbl %al,%eax
f010e4f5:	c1 e0 04             	shl    $0x4,%eax
f010e4f8:	89 c2                	mov    %eax,%edx
f010e4fa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010e500:	01 d0                	add    %edx,%eax
f010e502:	48                   	dec    %eax
f010e503:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f010e509:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010e50f:	ba 00 00 00 00       	mov    $0x0,%edx
f010e514:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f010e51a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010e520:	29 d0                	sub    %edx,%eax
f010e522:	01 d8                	add    %ebx,%eax
f010e524:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f010e529:	39 c1                	cmp    %eax,%ecx
f010e52b:	0f 85 8e 00 00 00    	jne    f010e5bf <test_kmalloc_nextfit+0x4ce>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f010e531:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010e537:	89 c1                	mov    %eax,%ecx
f010e539:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f010e540:	10 00 00 
f010e543:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e548:	0f b6 d0             	movzbl %al,%edx
f010e54b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010e551:	01 d0                	add    %edx,%eax
f010e553:	48                   	dec    %eax
f010e554:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f010e55a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010e560:	ba 00 00 00 00       	mov    $0x0,%edx
f010e565:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f010e56b:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010e571:	29 d0                	sub    %edx,%eax
f010e573:	89 c3                	mov    %eax,%ebx
f010e575:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f010e57c:	10 00 00 
f010e57f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e584:	0f b6 c0             	movzbl %al,%eax
f010e587:	c1 e0 04             	shl    $0x4,%eax
f010e58a:	89 c2                	mov    %eax,%edx
f010e58c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010e592:	01 d0                	add    %edx,%eax
f010e594:	48                   	dec    %eax
f010e595:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f010e59b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010e5a1:	ba 00 00 00 00       	mov    $0x0,%edx
f010e5a6:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f010e5ac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010e5b2:	29 d0                	sub    %edx,%eax
f010e5b4:	01 d8                	add    %ebx,%eax
f010e5b6:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f010e5bb:	39 c1                	cmp    %eax,%ecx
f010e5bd:	74 17                	je     f010e5d6 <test_kmalloc_nextfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f010e5bf:	83 ec 04             	sub    $0x4,%esp
f010e5c2:	68 e8 1c 12 f0       	push   $0xf0121ce8
f010e5c7:	68 04 01 00 00       	push   $0x104
f010e5cc:	68 76 1a 12 f0       	push   $0xf0121a76
f010e5d1:	e8 d9 1b ff ff       	call   f01001af <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e5d6:	e8 9f db ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e5db:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e5de:	74 17                	je     f010e5f7 <test_kmalloc_nextfit+0x506>
f010e5e0:	83 ec 04             	sub    $0x4,%esp
f010e5e3:	68 88 1a 12 f0       	push   $0xf0121a88
f010e5e8:	68 06 01 00 00       	push   $0x106
f010e5ed:	68 76 1a 12 f0       	push   $0xf0121a76
f010e5f2:	e8 b8 1b ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f010e5f7:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e5fa:	e8 4f c4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e5ff:	29 c3                	sub    %eax,%ebx
f010e601:	89 d9                	mov    %ebx,%ecx
f010e603:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f010e60a:	10 00 00 
f010e60d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e612:	0f b6 d0             	movzbl %al,%edx
f010e615:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010e61b:	01 d0                	add    %edx,%eax
f010e61d:	48                   	dec    %eax
f010e61e:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f010e624:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010e62a:	ba 00 00 00 00       	mov    $0x0,%edx
f010e62f:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f010e635:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010e63b:	29 d0                	sub    %edx,%eax
f010e63d:	89 c3                	mov    %eax,%ebx
f010e63f:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f010e646:	10 00 00 
f010e649:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e64e:	0f b6 c0             	movzbl %al,%eax
f010e651:	c1 e0 04             	shl    $0x4,%eax
f010e654:	89 c2                	mov    %eax,%edx
f010e656:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010e65c:	01 d0                	add    %edx,%eax
f010e65e:	48                   	dec    %eax
f010e65f:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f010e665:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010e66b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e670:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f010e676:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010e67c:	29 d0                	sub    %edx,%eax
f010e67e:	01 d8                	add    %ebx,%eax
f010e680:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f010e685:	29 c2                	sub    %eax,%edx
f010e687:	89 d0                	mov    %edx,%eax
f010e689:	c1 e8 0c             	shr    $0xc,%eax
f010e68c:	39 c1                	cmp    %eax,%ecx
f010e68e:	74 17                	je     f010e6a7 <test_kmalloc_nextfit+0x5b6>
f010e690:	83 ec 04             	sub    $0x4,%esp
f010e693:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010e698:	68 07 01 00 00       	push   $0x107
f010e69d:	68 76 1a 12 f0       	push   $0xf0121a76
f010e6a2:	e8 08 1b ff ff       	call   f01001af <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f010e6a7:	e8 ce da ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e6ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e6af:	e8 9a c3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e6b4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f010e6b7:	8b 85 28 fc ff ff    	mov    -0x3d8(%ebp),%eax
f010e6bd:	83 ec 0c             	sub    $0xc,%esp
f010e6c0:	50                   	push   %eax
f010e6c1:	e8 1a e8 ff ff       	call   f010cee0 <kfree>
f010e6c6:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f010e6c9:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f010e6cf:	83 ec 0c             	sub    $0xc,%esp
f010e6d2:	50                   	push   %eax
f010e6d3:	e8 08 e8 ff ff       	call   f010cee0 <kfree>
f010e6d8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f010e6db:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f010e6e1:	83 ec 0c             	sub    $0xc,%esp
f010e6e4:	50                   	push   %eax
f010e6e5:	e8 f6 e7 ff ff       	call   f010cee0 <kfree>
f010e6ea:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f010e6ed:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f010e6f3:	83 ec 0c             	sub    $0xc,%esp
f010e6f6:	50                   	push   %eax
f010e6f7:	e8 e4 e7 ff ff       	call   f010cee0 <kfree>
f010e6fc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f010e6ff:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f010e705:	83 ec 0c             	sub    $0xc,%esp
f010e708:	50                   	push   %eax
f010e709:	e8 d2 e7 ff ff       	call   f010cee0 <kfree>
f010e70e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f010e711:	8b 85 58 fc ff ff    	mov    -0x3a8(%ebp),%eax
f010e717:	83 ec 0c             	sub    $0xc,%esp
f010e71a:	50                   	push   %eax
f010e71b:	e8 c0 e7 ff ff       	call   f010cee0 <kfree>
f010e720:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f010e723:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f010e729:	83 ec 0c             	sub    $0xc,%esp
f010e72c:	50                   	push   %eax
f010e72d:	e8 ae e7 ff ff       	call   f010cee0 <kfree>
f010e732:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f010e735:	8b 85 78 fc ff ff    	mov    -0x388(%ebp),%eax
f010e73b:	83 ec 0c             	sub    $0xc,%esp
f010e73e:	50                   	push   %eax
f010e73f:	e8 9c e7 ff ff       	call   f010cee0 <kfree>
f010e744:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f010e747:	8b 85 8c fc ff ff    	mov    -0x374(%ebp),%eax
f010e74d:	83 ec 0c             	sub    $0xc,%esp
f010e750:	50                   	push   %eax
f010e751:	e8 8a e7 ff ff       	call   f010cee0 <kfree>
f010e756:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f010e759:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f010e75f:	83 ec 0c             	sub    $0xc,%esp
f010e762:	50                   	push   %eax
f010e763:	e8 78 e7 ff ff       	call   f010cee0 <kfree>
f010e768:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e76b:	e8 0a da ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e770:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e773:	74 17                	je     f010e78c <test_kmalloc_nextfit+0x69b>
f010e775:	83 ec 04             	sub    $0x4,%esp
f010e778:	68 88 1a 12 f0       	push   $0xf0121a88
f010e77d:	68 18 01 00 00       	push   $0x118
f010e782:	68 76 1a 12 f0       	push   $0xf0121a76
f010e787:	e8 23 1a ff ff       	call   f01001af <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010e78c:	e8 bd c2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e791:	89 c2                	mov    %eax,%edx
f010e793:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e796:	89 d1                	mov    %edx,%ecx
f010e798:	29 c1                	sub    %eax,%ecx
f010e79a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f010e7a1:	10 00 00 
f010e7a4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e7a9:	0f b6 d0             	movzbl %al,%edx
f010e7ac:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010e7b2:	01 d0                	add    %edx,%eax
f010e7b4:	48                   	dec    %eax
f010e7b5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f010e7bb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010e7c1:	ba 00 00 00 00       	mov    $0x0,%edx
f010e7c6:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f010e7cc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010e7d2:	29 d0                	sub    %edx,%eax
f010e7d4:	89 c3                	mov    %eax,%ebx
f010e7d6:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f010e7dd:	10 00 00 
f010e7e0:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e7e5:	0f b6 c0             	movzbl %al,%eax
f010e7e8:	c1 e0 04             	shl    $0x4,%eax
f010e7eb:	89 c2                	mov    %eax,%edx
f010e7ed:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010e7f3:	01 d0                	add    %edx,%eax
f010e7f5:	48                   	dec    %eax
f010e7f6:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f010e7fc:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010e802:	ba 00 00 00 00       	mov    $0x0,%edx
f010e807:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f010e80d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f010e813:	29 d0                	sub    %edx,%eax
f010e815:	01 d8                	add    %ebx,%eax
f010e817:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f010e81c:	29 c2                	sub    %eax,%edx
f010e81e:	89 d0                	mov    %edx,%eax
f010e820:	c1 e8 0c             	shr    $0xc,%eax
f010e823:	39 c1                	cmp    %eax,%ecx
f010e825:	74 17                	je     f010e83e <test_kmalloc_nextfit+0x74d>
f010e827:	83 ec 04             	sub    $0x4,%esp
f010e82a:	68 3c 1d 12 f0       	push   $0xf0121d3c
f010e82f:	68 19 01 00 00       	push   $0x119
f010e834:	68 76 1a 12 f0       	push   $0xf0121a76
f010e839:	e8 71 19 ff ff       	call   f01001af <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f010e83e:	e8 37 d9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e843:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e846:	e8 03 c2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e84b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f010e84e:	83 ec 0c             	sub    $0xc,%esp
f010e851:	68 00 fc 0f 00       	push   $0xffc00
f010e856:	e8 3a e6 ff ff       	call   f010ce95 <kmalloc>
f010e85b:	83 c4 10             	add    $0x10,%esp
f010e85e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f010e864:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f010e86b:	10 00 00 
f010e86e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e873:	0f b6 d0             	movzbl %al,%edx
f010e876:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f010e87c:	01 d0                	add    %edx,%eax
f010e87e:	48                   	dec    %eax
f010e87f:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f010e885:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010e88b:	ba 00 00 00 00       	mov    $0x0,%edx
f010e890:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f010e896:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f010e89c:	29 d0                	sub    %edx,%eax
f010e89e:	89 c1                	mov    %eax,%ecx
f010e8a0:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f010e8a7:	10 00 00 
f010e8aa:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e8af:	0f b6 c0             	movzbl %al,%eax
f010e8b2:	c1 e0 04             	shl    $0x4,%eax
f010e8b5:	89 c2                	mov    %eax,%edx
f010e8b7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f010e8bd:	01 d0                	add    %edx,%eax
f010e8bf:	48                   	dec    %eax
f010e8c0:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f010e8c6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e8cc:	ba 00 00 00 00       	mov    $0x0,%edx
f010e8d1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f010e8d7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e8dd:	29 d0                	sub    %edx,%eax
f010e8df:	01 c8                	add    %ecx,%eax
f010e8e1:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f010e8e7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010e8ed:	39 c2                	cmp    %eax,%edx
f010e8ef:	74 17                	je     f010e908 <test_kmalloc_nextfit+0x817>
		panic("Next Fit not working correctly");
f010e8f1:	83 ec 04             	sub    $0x4,%esp
f010e8f4:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010e8f9:	68 20 01 00 00       	push   $0x120
f010e8fe:	68 76 1a 12 f0       	push   $0xf0121a76
f010e903:	e8 a7 18 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010e908:	e8 6d d8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e90d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e910:	74 17                	je     f010e929 <test_kmalloc_nextfit+0x838>
f010e912:	83 ec 04             	sub    $0x4,%esp
f010e915:	68 88 1a 12 f0       	push   $0xf0121a88
f010e91a:	68 21 01 00 00       	push   $0x121
f010e91f:	68 76 1a 12 f0       	push   $0xf0121a76
f010e924:	e8 86 18 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010e929:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010e92c:	e8 1d c1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e931:	29 c3                	sub    %eax,%ebx
f010e933:	89 d8                	mov    %ebx,%eax
f010e935:	3d 00 01 00 00       	cmp    $0x100,%eax
f010e93a:	74 17                	je     f010e953 <test_kmalloc_nextfit+0x862>
f010e93c:	83 ec 04             	sub    $0x4,%esp
f010e93f:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010e944:	68 22 01 00 00       	push   $0x122
f010e949:	68 76 1a 12 f0       	push   $0xf0121a76
f010e94e:	e8 5c 18 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010e953:	e8 22 d8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010e958:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010e95b:	e8 ee c0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010e960:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f010e963:	83 ec 0c             	sub    $0xc,%esp
f010e966:	68 00 04 00 00       	push   $0x400
f010e96b:	e8 25 e5 ff ff       	call   f010ce95 <kmalloc>
f010e970:	83 c4 10             	add    $0x10,%esp
f010e973:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f010e979:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f010e980:	10 00 00 
f010e983:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e988:	0f b6 d0             	movzbl %al,%edx
f010e98b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f010e991:	01 d0                	add    %edx,%eax
f010e993:	48                   	dec    %eax
f010e994:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f010e99a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010e9a0:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9a5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f010e9ab:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010e9b1:	29 d0                	sub    %edx,%eax
f010e9b3:	89 c1                	mov    %eax,%ecx
f010e9b5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f010e9bc:	10 00 00 
f010e9bf:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010e9c4:	0f b6 c0             	movzbl %al,%eax
f010e9c7:	c1 e0 04             	shl    $0x4,%eax
f010e9ca:	89 c2                	mov    %eax,%edx
f010e9cc:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010e9d2:	01 d0                	add    %edx,%eax
f010e9d4:	48                   	dec    %eax
f010e9d5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f010e9db:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010e9e1:	ba 00 00 00 00       	mov    $0x0,%edx
f010e9e6:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f010e9ec:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f010e9f2:	29 d0                	sub    %edx,%eax
f010e9f4:	01 c8                	add    %ecx,%eax
f010e9f6:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f010e9fc:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ea02:	39 c2                	cmp    %eax,%edx
f010ea04:	74 17                	je     f010ea1d <test_kmalloc_nextfit+0x92c>
		panic("Next Fit not working correctly");
f010ea06:	83 ec 04             	sub    $0x4,%esp
f010ea09:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010ea0e:	68 28 01 00 00       	push   $0x128
f010ea13:	68 76 1a 12 f0       	push   $0xf0121a76
f010ea18:	e8 92 17 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ea1d:	e8 58 d7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ea22:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ea25:	74 17                	je     f010ea3e <test_kmalloc_nextfit+0x94d>
f010ea27:	83 ec 04             	sub    $0x4,%esp
f010ea2a:	68 88 1a 12 f0       	push   $0xf0121a88
f010ea2f:	68 29 01 00 00       	push   $0x129
f010ea34:	68 76 1a 12 f0       	push   $0xf0121a76
f010ea39:	e8 71 17 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010ea3e:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ea41:	e8 08 c0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ea46:	29 c3                	sub    %eax,%ebx
f010ea48:	89 d8                	mov    %ebx,%eax
f010ea4a:	83 f8 01             	cmp    $0x1,%eax
f010ea4d:	74 17                	je     f010ea66 <test_kmalloc_nextfit+0x975>
f010ea4f:	83 ec 04             	sub    $0x4,%esp
f010ea52:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010ea57:	68 2a 01 00 00       	push   $0x12a
f010ea5c:	68 76 1a 12 f0       	push   $0xf0121a76
f010ea61:	e8 49 17 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ea66:	e8 0f d7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ea6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ea6e:	e8 db bf ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ea73:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f010ea76:	83 ec 0c             	sub    $0xc,%esp
f010ea79:	68 00 00 50 00       	push   $0x500000
f010ea7e:	e8 12 e4 ff ff       	call   f010ce95 <kmalloc>
f010ea83:	83 c4 10             	add    $0x10,%esp
f010ea86:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f010ea8c:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f010ea93:	10 00 00 
f010ea96:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ea9b:	0f b6 d0             	movzbl %al,%edx
f010ea9e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f010eaa4:	01 d0                	add    %edx,%eax
f010eaa6:	48                   	dec    %eax
f010eaa7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f010eaad:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eab3:	ba 00 00 00 00       	mov    $0x0,%edx
f010eab8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f010eabe:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010eac4:	29 d0                	sub    %edx,%eax
f010eac6:	89 c1                	mov    %eax,%ecx
f010eac8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f010eacf:	10 00 00 
f010ead2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ead7:	0f b6 c0             	movzbl %al,%eax
f010eada:	c1 e0 04             	shl    $0x4,%eax
f010eadd:	89 c2                	mov    %eax,%edx
f010eadf:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f010eae5:	01 d0                	add    %edx,%eax
f010eae7:	48                   	dec    %eax
f010eae8:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f010eaee:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010eaf4:	ba 00 00 00 00       	mov    $0x0,%edx
f010eaf9:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f010eaff:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f010eb05:	29 d0                	sub    %edx,%eax
f010eb07:	01 c8                	add    %ecx,%eax
f010eb09:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f010eb0f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010eb15:	39 c2                	cmp    %eax,%edx
f010eb17:	74 17                	je     f010eb30 <test_kmalloc_nextfit+0xa3f>
		panic("Next Fit not working correctly");
f010eb19:	83 ec 04             	sub    $0x4,%esp
f010eb1c:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010eb21:	68 30 01 00 00       	push   $0x130
f010eb26:	68 76 1a 12 f0       	push   $0xf0121a76
f010eb2b:	e8 7f 16 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eb30:	e8 45 d6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010eb35:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010eb38:	74 17                	je     f010eb51 <test_kmalloc_nextfit+0xa60>
f010eb3a:	83 ec 04             	sub    $0x4,%esp
f010eb3d:	68 88 1a 12 f0       	push   $0xf0121a88
f010eb42:	68 31 01 00 00       	push   $0x131
f010eb47:	68 76 1a 12 f0       	push   $0xf0121a76
f010eb4c:	e8 5e 16 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010eb51:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010eb54:	e8 f5 be ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010eb59:	29 c3                	sub    %eax,%ebx
f010eb5b:	89 d8                	mov    %ebx,%eax
f010eb5d:	3d 00 05 00 00       	cmp    $0x500,%eax
f010eb62:	74 17                	je     f010eb7b <test_kmalloc_nextfit+0xa8a>
f010eb64:	83 ec 04             	sub    $0x4,%esp
f010eb67:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010eb6c:	68 32 01 00 00       	push   $0x132
f010eb71:	68 76 1a 12 f0       	push   $0xf0121a76
f010eb76:	e8 34 16 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010eb7b:	e8 fa d5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010eb80:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010eb83:	e8 c6 be ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010eb88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f010eb8b:	83 ec 0c             	sub    $0xc,%esp
f010eb8e:	68 00 00 10 00       	push   $0x100000
f010eb93:	e8 fd e2 ff ff       	call   f010ce95 <kmalloc>
f010eb98:	83 c4 10             	add    $0x10,%esp
f010eb9b:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f010eba1:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f010eba8:	10 00 00 
f010ebab:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ebb0:	0f b6 d0             	movzbl %al,%edx
f010ebb3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f010ebb9:	01 d0                	add    %edx,%eax
f010ebbb:	48                   	dec    %eax
f010ebbc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f010ebc2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010ebc8:	ba 00 00 00 00       	mov    $0x0,%edx
f010ebcd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f010ebd3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f010ebd9:	29 d0                	sub    %edx,%eax
f010ebdb:	89 c1                	mov    %eax,%ecx
f010ebdd:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f010ebe4:	10 00 00 
f010ebe7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ebec:	0f b6 c0             	movzbl %al,%eax
f010ebef:	c1 e0 04             	shl    $0x4,%eax
f010ebf2:	89 c2                	mov    %eax,%edx
f010ebf4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f010ebfa:	01 d0                	add    %edx,%eax
f010ebfc:	48                   	dec    %eax
f010ebfd:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f010ec03:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010ec09:	ba 00 00 00 00       	mov    $0x0,%edx
f010ec0e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f010ec14:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010ec1a:	29 d0                	sub    %edx,%eax
f010ec1c:	01 c8                	add    %ecx,%eax
f010ec1e:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f010ec24:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010ec2a:	39 c2                	cmp    %eax,%edx
f010ec2c:	74 17                	je     f010ec45 <test_kmalloc_nextfit+0xb54>
		panic("Next Fit not working correctly");
f010ec2e:	83 ec 04             	sub    $0x4,%esp
f010ec31:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010ec36:	68 38 01 00 00       	push   $0x138
f010ec3b:	68 76 1a 12 f0       	push   $0xf0121a76
f010ec40:	e8 6a 15 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ec45:	e8 30 d5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ec4a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ec4d:	74 17                	je     f010ec66 <test_kmalloc_nextfit+0xb75>
f010ec4f:	83 ec 04             	sub    $0x4,%esp
f010ec52:	68 88 1a 12 f0       	push   $0xf0121a88
f010ec57:	68 39 01 00 00       	push   $0x139
f010ec5c:	68 76 1a 12 f0       	push   $0xf0121a76
f010ec61:	e8 49 15 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010ec66:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ec69:	e8 e0 bd ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ec6e:	29 c3                	sub    %eax,%ebx
f010ec70:	89 d8                	mov    %ebx,%eax
f010ec72:	3d 00 01 00 00       	cmp    $0x100,%eax
f010ec77:	74 17                	je     f010ec90 <test_kmalloc_nextfit+0xb9f>
f010ec79:	83 ec 04             	sub    $0x4,%esp
f010ec7c:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010ec81:	68 3a 01 00 00       	push   $0x13a
f010ec86:	68 76 1a 12 f0       	push   $0xf0121a76
f010ec8b:	e8 1f 15 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ec90:	e8 e5 d4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ec95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ec98:	e8 b1 bd ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ec9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f010eca0:	8b 85 64 fc ff ff    	mov    -0x39c(%ebp),%eax
f010eca6:	83 ec 0c             	sub    $0xc,%esp
f010eca9:	50                   	push   %eax
f010ecaa:	e8 31 e2 ff ff       	call   f010cee0 <kfree>
f010ecaf:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ecb2:	e8 c3 d4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ecb7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010ecba:	74 17                	je     f010ecd3 <test_kmalloc_nextfit+0xbe2>
f010ecbc:	83 ec 04             	sub    $0x4,%esp
f010ecbf:	68 88 1a 12 f0       	push   $0xf0121a88
f010ecc4:	68 3f 01 00 00       	push   $0x13f
f010ecc9:	68 76 1a 12 f0       	push   $0xf0121a76
f010ecce:	e8 dc 14 ff ff       	call   f01001af <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010ecd3:	e8 76 bd ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ecd8:	89 c2                	mov    %eax,%edx
f010ecda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ecdd:	29 c2                	sub    %eax,%edx
f010ecdf:	89 d0                	mov    %edx,%eax
f010ece1:	3d 00 02 00 00       	cmp    $0x200,%eax
f010ece6:	74 17                	je     f010ecff <test_kmalloc_nextfit+0xc0e>
f010ece8:	83 ec 04             	sub    $0x4,%esp
f010eceb:	68 3c 1d 12 f0       	push   $0xf0121d3c
f010ecf0:	68 40 01 00 00       	push   $0x140
f010ecf5:	68 76 1a 12 f0       	push   $0xf0121a76
f010ecfa:	e8 b0 14 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ecff:	e8 76 d4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ed04:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ed07:	e8 42 bd ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ed0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f010ed0f:	83 ec 0c             	sub    $0xc,%esp
f010ed12:	68 00 04 00 00       	push   $0x400
f010ed17:	e8 79 e1 ff ff       	call   f010ce95 <kmalloc>
f010ed1c:	83 c4 10             	add    $0x10,%esp
f010ed1f:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f010ed25:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f010ed2c:	10 00 00 
f010ed2f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ed34:	0f b6 d0             	movzbl %al,%edx
f010ed37:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010ed3d:	01 d0                	add    %edx,%eax
f010ed3f:	48                   	dec    %eax
f010ed40:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f010ed46:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010ed4c:	ba 00 00 00 00       	mov    $0x0,%edx
f010ed51:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f010ed57:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010ed5d:	29 d0                	sub    %edx,%eax
f010ed5f:	89 c1                	mov    %eax,%ecx
f010ed61:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f010ed68:	10 00 00 
f010ed6b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ed70:	0f b6 c0             	movzbl %al,%eax
f010ed73:	c1 e0 04             	shl    $0x4,%eax
f010ed76:	89 c2                	mov    %eax,%edx
f010ed78:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010ed7e:	01 d0                	add    %edx,%eax
f010ed80:	48                   	dec    %eax
f010ed81:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f010ed87:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010ed8d:	ba 00 00 00 00       	mov    $0x0,%edx
f010ed92:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f010ed98:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010ed9e:	29 d0                	sub    %edx,%eax
f010eda0:	01 c8                	add    %ecx,%eax
f010eda2:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f010eda8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010edae:	39 c2                	cmp    %eax,%edx
f010edb0:	74 17                	je     f010edc9 <test_kmalloc_nextfit+0xcd8>
		panic("Next Fit not working correctly");
f010edb2:	83 ec 04             	sub    $0x4,%esp
f010edb5:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010edba:	68 46 01 00 00       	push   $0x146
f010edbf:	68 76 1a 12 f0       	push   $0xf0121a76
f010edc4:	e8 e6 13 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010edc9:	e8 ac d3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010edce:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010edd1:	74 17                	je     f010edea <test_kmalloc_nextfit+0xcf9>
f010edd3:	83 ec 04             	sub    $0x4,%esp
f010edd6:	68 88 1a 12 f0       	push   $0xf0121a88
f010eddb:	68 47 01 00 00       	push   $0x147
f010ede0:	68 76 1a 12 f0       	push   $0xf0121a76
f010ede5:	e8 c5 13 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f010edea:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010eded:	e8 5c bc ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010edf2:	29 c3                	sub    %eax,%ebx
f010edf4:	89 d8                	mov    %ebx,%eax
f010edf6:	83 f8 01             	cmp    $0x1,%eax
f010edf9:	74 17                	je     f010ee12 <test_kmalloc_nextfit+0xd21>
f010edfb:	83 ec 04             	sub    $0x4,%esp
f010edfe:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010ee03:	68 48 01 00 00       	push   $0x148
f010ee08:	68 76 1a 12 f0       	push   $0xf0121a76
f010ee0d:	e8 9d 13 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ee12:	e8 63 d3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ee17:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ee1a:	e8 2f bc ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ee1f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f010ee22:	83 ec 0c             	sub    $0xc,%esp
f010ee25:	68 00 e0 1f 00       	push   $0x1fe000
f010ee2a:	e8 66 e0 ff ff       	call   f010ce95 <kmalloc>
f010ee2f:	83 c4 10             	add    $0x10,%esp
f010ee32:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f010ee38:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f010ee3f:	10 00 00 
f010ee42:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ee47:	0f b6 d0             	movzbl %al,%edx
f010ee4a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010ee50:	01 d0                	add    %edx,%eax
f010ee52:	48                   	dec    %eax
f010ee53:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f010ee59:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010ee5f:	ba 00 00 00 00       	mov    $0x0,%edx
f010ee64:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f010ee6a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010ee70:	29 d0                	sub    %edx,%eax
f010ee72:	89 c1                	mov    %eax,%ecx
f010ee74:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f010ee7b:	10 00 00 
f010ee7e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ee83:	0f b6 c0             	movzbl %al,%eax
f010ee86:	c1 e0 04             	shl    $0x4,%eax
f010ee89:	89 c2                	mov    %eax,%edx
f010ee8b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010ee91:	01 d0                	add    %edx,%eax
f010ee93:	48                   	dec    %eax
f010ee94:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f010ee9a:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010eea0:	ba 00 00 00 00       	mov    $0x0,%edx
f010eea5:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f010eeab:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010eeb1:	29 d0                	sub    %edx,%eax
f010eeb3:	01 c8                	add    %ecx,%eax
f010eeb5:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f010eebb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010eec1:	39 c2                	cmp    %eax,%edx
f010eec3:	74 17                	je     f010eedc <test_kmalloc_nextfit+0xdeb>
		panic("Next Fit not working correctly");
f010eec5:	83 ec 04             	sub    $0x4,%esp
f010eec8:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010eecd:	68 4e 01 00 00       	push   $0x14e
f010eed2:	68 76 1a 12 f0       	push   $0xf0121a76
f010eed7:	e8 d3 12 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eedc:	e8 99 d2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010eee1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010eee4:	74 17                	je     f010eefd <test_kmalloc_nextfit+0xe0c>
f010eee6:	83 ec 04             	sub    $0x4,%esp
f010eee9:	68 88 1a 12 f0       	push   $0xf0121a88
f010eeee:	68 4f 01 00 00       	push   $0x14f
f010eef3:	68 76 1a 12 f0       	push   $0xf0121a76
f010eef8:	e8 b2 12 ff ff       	call   f01001af <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010eefd:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010ef00:	e8 49 bb ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ef05:	29 c3                	sub    %eax,%ebx
f010ef07:	89 d8                	mov    %ebx,%eax
f010ef09:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f010ef0e:	74 17                	je     f010ef27 <test_kmalloc_nextfit+0xe36>
f010ef10:	83 ec 04             	sub    $0x4,%esp
f010ef13:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010ef18:	68 51 01 00 00       	push   $0x151
f010ef1d:	68 76 1a 12 f0       	push   $0xf0121a76
f010ef22:	e8 88 12 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010ef27:	e8 4e d2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ef2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010ef2f:	e8 1a bb ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ef34:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f010ef37:	83 ec 0c             	sub    $0xc,%esp
f010ef3a:	68 00 00 08 00       	push   $0x80000
f010ef3f:	e8 51 df ff ff       	call   f010ce95 <kmalloc>
f010ef44:	83 c4 10             	add    $0x10,%esp
f010ef47:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f010ef4d:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f010ef54:	10 00 00 
f010ef57:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ef5c:	0f b6 d0             	movzbl %al,%edx
f010ef5f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010ef65:	01 d0                	add    %edx,%eax
f010ef67:	48                   	dec    %eax
f010ef68:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f010ef6e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010ef74:	ba 00 00 00 00       	mov    $0x0,%edx
f010ef79:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f010ef7f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010ef85:	29 d0                	sub    %edx,%eax
f010ef87:	89 c1                	mov    %eax,%ecx
f010ef89:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f010ef90:	10 00 00 
f010ef93:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ef98:	0f b6 c0             	movzbl %al,%eax
f010ef9b:	c1 e0 04             	shl    $0x4,%eax
f010ef9e:	89 c2                	mov    %eax,%edx
f010efa0:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f010efa6:	01 d0                	add    %edx,%eax
f010efa8:	48                   	dec    %eax
f010efa9:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f010efaf:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010efb5:	ba 00 00 00 00       	mov    $0x0,%edx
f010efba:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f010efc0:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f010efc6:	29 d0                	sub    %edx,%eax
f010efc8:	01 c8                	add    %ecx,%eax
f010efca:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f010efd0:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010efd6:	39 c2                	cmp    %eax,%edx
f010efd8:	74 17                	je     f010eff1 <test_kmalloc_nextfit+0xf00>
		panic("Next Fit not working correctly");
f010efda:	83 ec 04             	sub    $0x4,%esp
f010efdd:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010efe2:	68 57 01 00 00       	push   $0x157
f010efe7:	68 76 1a 12 f0       	push   $0xf0121a76
f010efec:	e8 be 11 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010eff1:	e8 84 d1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010eff6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010eff9:	74 17                	je     f010f012 <test_kmalloc_nextfit+0xf21>
f010effb:	83 ec 04             	sub    $0x4,%esp
f010effe:	68 88 1a 12 f0       	push   $0xf0121a88
f010f003:	68 58 01 00 00       	push   $0x158
f010f008:	68 76 1a 12 f0       	push   $0xf0121a76
f010f00d:	e8 9d 11 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010f012:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010f015:	e8 34 ba ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f01a:	29 c3                	sub    %eax,%ebx
f010f01c:	89 d8                	mov    %ebx,%eax
f010f01e:	3d 80 00 00 00       	cmp    $0x80,%eax
f010f023:	74 17                	je     f010f03c <test_kmalloc_nextfit+0xf4b>
f010f025:	83 ec 04             	sub    $0x4,%esp
f010f028:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010f02d:	68 59 01 00 00       	push   $0x159
f010f032:	68 76 1a 12 f0       	push   $0xf0121a76
f010f037:	e8 73 11 ff ff       	call   f01001af <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f010f03c:	83 ec 0c             	sub    $0xc,%esp
f010f03f:	68 9c 1d 12 f0       	push   $0xf0121d9c
f010f044:	e8 bb 81 ff ff       	call   f0107204 <cprintf>
f010f049:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f010f04c:	e8 29 d1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f051:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f054:	e8 f5 b9 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f059:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f010f05c:	83 ec 0c             	sub    $0xc,%esp
f010f05f:	68 00 00 38 00       	push   $0x380000
f010f064:	e8 2c de ff ff       	call   f010ce95 <kmalloc>
f010f069:	83 c4 10             	add    $0x10,%esp
f010f06c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f010f072:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f010f079:	10 00 00 
f010f07c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f081:	0f b6 d0             	movzbl %al,%edx
f010f084:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f010f08a:	01 d0                	add    %edx,%eax
f010f08c:	48                   	dec    %eax
f010f08d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f010f093:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f099:	ba 00 00 00 00       	mov    $0x0,%edx
f010f09e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f010f0a4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f010f0aa:	29 d0                	sub    %edx,%eax
f010f0ac:	89 c1                	mov    %eax,%ecx
f010f0ae:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f010f0b5:	10 00 00 
f010f0b8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f0bd:	0f b6 c0             	movzbl %al,%eax
f010f0c0:	c1 e0 04             	shl    $0x4,%eax
f010f0c3:	89 c2                	mov    %eax,%edx
f010f0c5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f010f0cb:	01 d0                	add    %edx,%eax
f010f0cd:	48                   	dec    %eax
f010f0ce:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f010f0d4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010f0da:	ba 00 00 00 00       	mov    $0x0,%edx
f010f0df:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f010f0e5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f010f0eb:	29 d0                	sub    %edx,%eax
f010f0ed:	01 c8                	add    %ecx,%eax
f010f0ef:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f010f0f5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f0fb:	39 c2                	cmp    %eax,%edx
f010f0fd:	74 17                	je     f010f116 <test_kmalloc_nextfit+0x1025>
		panic("Next Fit not working correctly");
f010f0ff:	83 ec 04             	sub    $0x4,%esp
f010f102:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010f107:	68 63 01 00 00       	push   $0x163
f010f10c:	68 76 1a 12 f0       	push   $0xf0121a76
f010f111:	e8 99 10 ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f116:	e8 5f d0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f11b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f11e:	74 17                	je     f010f137 <test_kmalloc_nextfit+0x1046>
f010f120:	83 ec 04             	sub    $0x4,%esp
f010f123:	68 88 1a 12 f0       	push   $0xf0121a88
f010f128:	68 64 01 00 00       	push   $0x164
f010f12d:	68 76 1a 12 f0       	push   $0xf0121a76
f010f132:	e8 78 10 ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f010f137:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010f13a:	e8 0f b9 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f13f:	29 c3                	sub    %eax,%ebx
f010f141:	89 d8                	mov    %ebx,%eax
f010f143:	3d 80 03 00 00       	cmp    $0x380,%eax
f010f148:	74 17                	je     f010f161 <test_kmalloc_nextfit+0x1070>
f010f14a:	83 ec 04             	sub    $0x4,%esp
f010f14d:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010f152:	68 65 01 00 00       	push   $0x165
f010f157:	68 76 1a 12 f0       	push   $0xf0121a76
f010f15c:	e8 4e 10 ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010f161:	e8 14 d0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f166:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f169:	e8 e0 b8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f16e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f010f171:	8b 85 88 fc ff ff    	mov    -0x378(%ebp),%eax
f010f177:	83 ec 0c             	sub    $0xc,%esp
f010f17a:	50                   	push   %eax
f010f17b:	e8 60 dd ff ff       	call   f010cee0 <kfree>
f010f180:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f183:	e8 f2 cf ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f188:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f18b:	74 17                	je     f010f1a4 <test_kmalloc_nextfit+0x10b3>
f010f18d:	83 ec 04             	sub    $0x4,%esp
f010f190:	68 88 1a 12 f0       	push   $0xf0121a88
f010f195:	68 6a 01 00 00       	push   $0x16a
f010f19a:	68 76 1a 12 f0       	push   $0xf0121a76
f010f19f:	e8 0b 10 ff ff       	call   f01001af <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f010f1a4:	e8 a5 b8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f1a9:	89 c2                	mov    %eax,%edx
f010f1ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f1ae:	29 c2                	sub    %eax,%edx
f010f1b0:	89 d0                	mov    %edx,%eax
f010f1b2:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f1b7:	74 17                	je     f010f1d0 <test_kmalloc_nextfit+0x10df>
f010f1b9:	83 ec 04             	sub    $0x4,%esp
f010f1bc:	68 3c 1d 12 f0       	push   $0xf0121d3c
f010f1c1:	68 6b 01 00 00       	push   $0x16b
f010f1c6:	68 76 1a 12 f0       	push   $0xf0121a76
f010f1cb:	e8 df 0f ff ff       	call   f01001af <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f010f1d0:	e8 a5 cf ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f1d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f1d8:	e8 71 b8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f1dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f010f1e0:	83 ec 0c             	sub    $0xc,%esp
f010f1e3:	68 00 fc 3f 00       	push   $0x3ffc00
f010f1e8:	e8 a8 dc ff ff       	call   f010ce95 <kmalloc>
f010f1ed:	83 c4 10             	add    $0x10,%esp
f010f1f0:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f010f1f6:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f010f1fd:	10 00 00 
f010f200:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f205:	0f b6 d0             	movzbl %al,%edx
f010f208:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f010f20e:	01 d0                	add    %edx,%eax
f010f210:	48                   	dec    %eax
f010f211:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f010f217:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010f21d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f222:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f010f228:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f010f22e:	29 d0                	sub    %edx,%eax
f010f230:	89 c1                	mov    %eax,%ecx
f010f232:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f010f239:	10 00 00 
f010f23c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f241:	0f b6 c0             	movzbl %al,%eax
f010f244:	c1 e0 04             	shl    $0x4,%eax
f010f247:	89 c2                	mov    %eax,%edx
f010f249:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f010f24f:	01 d0                	add    %edx,%eax
f010f251:	48                   	dec    %eax
f010f252:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f010f258:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010f25e:	ba 00 00 00 00       	mov    $0x0,%edx
f010f263:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f010f269:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f010f26f:	29 d0                	sub    %edx,%eax
f010f271:	01 c8                	add    %ecx,%eax
f010f273:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f010f279:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f27f:	39 c2                	cmp    %eax,%edx
f010f281:	74 17                	je     f010f29a <test_kmalloc_nextfit+0x11a9>
		panic("Next Fit not working correctly");
f010f283:	83 ec 04             	sub    $0x4,%esp
f010f286:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010f28b:	68 71 01 00 00       	push   $0x171
f010f290:	68 76 1a 12 f0       	push   $0xf0121a76
f010f295:	e8 15 0f ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f29a:	e8 db ce ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f29f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f2a2:	74 17                	je     f010f2bb <test_kmalloc_nextfit+0x11ca>
f010f2a4:	83 ec 04             	sub    $0x4,%esp
f010f2a7:	68 88 1a 12 f0       	push   $0xf0121a88
f010f2ac:	68 72 01 00 00       	push   $0x172
f010f2b1:	68 76 1a 12 f0       	push   $0xf0121a76
f010f2b6:	e8 f4 0e ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f010f2bb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f010f2be:	e8 8b b7 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f2c3:	29 c3                	sub    %eax,%ebx
f010f2c5:	89 d8                	mov    %ebx,%eax
f010f2c7:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f2cc:	74 17                	je     f010f2e5 <test_kmalloc_nextfit+0x11f4>
f010f2ce:	83 ec 04             	sub    $0x4,%esp
f010f2d1:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010f2d6:	68 73 01 00 00       	push   $0x173
f010f2db:	68 76 1a 12 f0       	push   $0xf0121a76
f010f2e0:	e8 ca 0e ff ff       	call   f01001af <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f010f2e5:	83 ec 0c             	sub    $0xc,%esp
f010f2e8:	68 d8 1d 12 f0       	push   $0xf0121dd8
f010f2ed:	e8 12 7f ff ff       	call   f0107204 <cprintf>
f010f2f2:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f010f2f5:	e8 80 ce ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f2fa:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f010f2fd:	e8 4c b7 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f302:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f010f305:	83 ec 0c             	sub    $0xc,%esp
f010f308:	68 00 00 60 00       	push   $0x600000
f010f30d:	e8 83 db ff ff       	call   f010ce95 <kmalloc>
f010f312:	83 c4 10             	add    $0x10,%esp
f010f315:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
	if((uint32)tempAddress != 0x0)
f010f31b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f010f321:	85 c0                	test   %eax,%eax
f010f323:	74 17                	je     f010f33c <test_kmalloc_nextfit+0x124b>
		panic("Next Fit not working correctly");
f010f325:	83 ec 04             	sub    $0x4,%esp
f010f328:	68 7c 1d 12 f0       	push   $0xf0121d7c
f010f32d:	68 7d 01 00 00       	push   $0x17d
f010f332:	68 76 1a 12 f0       	push   $0xf0121a76
f010f337:	e8 73 0e ff ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f33c:	e8 39 ce ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f341:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010f344:	74 17                	je     f010f35d <test_kmalloc_nextfit+0x126c>
f010f346:	83 ec 04             	sub    $0x4,%esp
f010f349:	68 88 1a 12 f0       	push   $0xf0121a88
f010f34e:	68 7e 01 00 00       	push   $0x17e
f010f353:	68 76 1a 12 f0       	push   $0xf0121a76
f010f358:	e8 52 0e ff ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f010f35d:	e8 ec b6 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f362:	89 c2                	mov    %eax,%edx
f010f364:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010f367:	39 c2                	cmp    %eax,%edx
f010f369:	74 17                	je     f010f382 <test_kmalloc_nextfit+0x1291>
f010f36b:	83 ec 04             	sub    $0x4,%esp
f010f36e:	68 2b 1d 12 f0       	push   $0xf0121d2b
f010f373:	68 7f 01 00 00       	push   $0x17f
f010f378:	68 76 1a 12 f0       	push   $0xf0121a76
f010f37d:	e8 2d 0e ff ff       	call   f01001af <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f010f382:	83 ec 0c             	sub    $0xc,%esp
f010f385:	68 10 1e 12 f0       	push   $0xf0121e10
f010f38a:	e8 75 7e ff ff       	call   f0107204 <cprintf>
f010f38f:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f010f392:	83 ec 0c             	sub    $0xc,%esp
f010f395:	68 4c 1e 12 f0       	push   $0xf0121e4c
f010f39a:	e8 65 7e ff ff       	call   f0107204 <cprintf>
f010f39f:	83 c4 10             	add    $0x10,%esp
	return 1;
f010f3a2:	b8 01 00 00 00       	mov    $0x1,%eax

}
f010f3a7:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010f3aa:	5b                   	pop    %ebx
f010f3ab:	5f                   	pop    %edi
f010f3ac:	5d                   	pop    %ebp
f010f3ad:	c3                   	ret    

f010f3ae <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f010f3ae:	55                   	push   %ebp
f010f3af:	89 e5                	mov    %esp,%ebp
f010f3b1:	57                   	push   %edi
f010f3b2:	53                   	push   %ebx
f010f3b3:	81 ec 30 01 00 00    	sub    $0x130,%esp
	cprintf("==============================================\n");
f010f3b9:	83 ec 0c             	sub    $0xc,%esp
f010f3bc:	68 b8 19 12 f0       	push   $0xf01219b8
f010f3c1:	e8 3e 7e ff ff       	call   f0107204 <cprintf>
f010f3c6:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f010f3c9:	83 ec 0c             	sub    $0xc,%esp
f010f3cc:	68 e8 19 12 f0       	push   $0xf01219e8
f010f3d1:	e8 2e 7e ff ff       	call   f0107204 <cprintf>
f010f3d6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f010f3d9:	83 ec 0c             	sub    $0xc,%esp
f010f3dc:	68 b8 19 12 f0       	push   $0xf01219b8
f010f3e1:	e8 1e 7e ff ff       	call   f0107204 <cprintf>
f010f3e6:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f010f3e9:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f010f3ef:	b9 14 00 00 00       	mov    $0x14,%ecx
f010f3f4:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3f9:	89 d7                	mov    %edx,%edi
f010f3fb:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010f3fd:	e8 4c b6 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f402:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f405:	e8 70 cd ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f40a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f010f40d:	83 ec 0c             	sub    $0xc,%esp
f010f410:	68 00 fc 2f 00       	push   $0x2ffc00
f010f415:	e8 7b da ff ff       	call   f010ce95 <kmalloc>
f010f41a:	83 c4 10             	add    $0x10,%esp
f010f41d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f010f423:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f010f429:	89 c1                	mov    %eax,%ecx
f010f42b:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f010f432:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f437:	0f b6 d0             	movzbl %al,%edx
f010f43a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f43d:	01 d0                	add    %edx,%eax
f010f43f:	48                   	dec    %eax
f010f440:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010f443:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f446:	ba 00 00 00 00       	mov    $0x0,%edx
f010f44b:	f7 75 ec             	divl   -0x14(%ebp)
f010f44e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f451:	29 d0                	sub    %edx,%eax
f010f453:	89 c3                	mov    %eax,%ebx
f010f455:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f010f45c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f461:	0f b6 c0             	movzbl %al,%eax
f010f464:	c1 e0 04             	shl    $0x4,%eax
f010f467:	89 c2                	mov    %eax,%edx
f010f469:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010f46c:	01 d0                	add    %edx,%eax
f010f46e:	48                   	dec    %eax
f010f46f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010f472:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f475:	ba 00 00 00 00       	mov    $0x0,%edx
f010f47a:	f7 75 e4             	divl   -0x1c(%ebp)
f010f47d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010f480:	29 d0                	sub    %edx,%eax
f010f482:	01 d8                	add    %ebx,%eax
f010f484:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f010f489:	39 c1                	cmp    %eax,%ecx
f010f48b:	74 17                	je     f010f4a4 <test_kmalloc_bestfit1+0xf6>
f010f48d:	83 ec 04             	sub    $0x4,%esp
f010f490:	68 88 1e 12 f0       	push   $0xf0121e88
f010f495:	68 99 01 00 00       	push   $0x199
f010f49a:	68 76 1a 12 f0       	push   $0xf0121a76
f010f49f:	e8 0b 0d ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f4a4:	e8 d1 cc ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f4a9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f4ac:	74 17                	je     f010f4c5 <test_kmalloc_bestfit1+0x117>
f010f4ae:	83 ec 04             	sub    $0x4,%esp
f010f4b1:	68 88 1a 12 f0       	push   $0xf0121a88
f010f4b6:	68 9a 01 00 00       	push   $0x19a
f010f4bb:	68 76 1a 12 f0       	push   $0xf0121a76
f010f4c0:	e8 ea 0c ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f4c5:	e8 84 b5 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f4ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f4cd:	29 c2                	sub    %eax,%edx
f010f4cf:	89 d0                	mov    %edx,%eax
f010f4d1:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f4d6:	74 17                	je     f010f4ef <test_kmalloc_bestfit1+0x141>
f010f4d8:	83 ec 04             	sub    $0x4,%esp
f010f4db:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010f4e0:	68 9b 01 00 00       	push   $0x19b
f010f4e5:	68 76 1a 12 f0       	push   $0xf0121a76
f010f4ea:	e8 c0 0c ff ff       	call   f01001af <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f010f4ef:	e8 5a b5 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f4f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f4f7:	e8 7e cc ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f4fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f010f4ff:	83 ec 0c             	sub    $0xc,%esp
f010f502:	68 00 fc 2f 00       	push   $0x2ffc00
f010f507:	e8 89 d9 ff ff       	call   f010ce95 <kmalloc>
f010f50c:	83 c4 10             	add    $0x10,%esp
f010f50f:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f010f515:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010f51b:	89 c1                	mov    %eax,%ecx
f010f51d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010f524:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f529:	0f b6 d0             	movzbl %al,%edx
f010f52c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f52f:	01 d0                	add    %edx,%eax
f010f531:	48                   	dec    %eax
f010f532:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010f535:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f538:	ba 00 00 00 00       	mov    $0x0,%edx
f010f53d:	f7 75 dc             	divl   -0x24(%ebp)
f010f540:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010f543:	29 d0                	sub    %edx,%eax
f010f545:	89 c3                	mov    %eax,%ebx
f010f547:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f010f54e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f553:	0f b6 c0             	movzbl %al,%eax
f010f556:	c1 e0 04             	shl    $0x4,%eax
f010f559:	89 c2                	mov    %eax,%edx
f010f55b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010f55e:	01 d0                	add    %edx,%eax
f010f560:	48                   	dec    %eax
f010f561:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010f564:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f567:	ba 00 00 00 00       	mov    $0x0,%edx
f010f56c:	f7 75 d4             	divl   -0x2c(%ebp)
f010f56f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010f572:	29 d0                	sub    %edx,%eax
f010f574:	01 d8                	add    %ebx,%eax
f010f576:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f010f57b:	39 c1                	cmp    %eax,%ecx
f010f57d:	74 17                	je     f010f596 <test_kmalloc_bestfit1+0x1e8>
f010f57f:	83 ec 04             	sub    $0x4,%esp
f010f582:	68 88 1e 12 f0       	push   $0xf0121e88
f010f587:	68 a1 01 00 00       	push   $0x1a1
f010f58c:	68 76 1a 12 f0       	push   $0xf0121a76
f010f591:	e8 19 0c ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f596:	e8 df cb ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f59b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f59e:	74 17                	je     f010f5b7 <test_kmalloc_bestfit1+0x209>
f010f5a0:	83 ec 04             	sub    $0x4,%esp
f010f5a3:	68 88 1a 12 f0       	push   $0xf0121a88
f010f5a8:	68 a2 01 00 00       	push   $0x1a2
f010f5ad:	68 76 1a 12 f0       	push   $0xf0121a76
f010f5b2:	e8 f8 0b ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f5b7:	e8 92 b4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f5bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f5bf:	29 c2                	sub    %eax,%edx
f010f5c1:	89 d0                	mov    %edx,%eax
f010f5c3:	3d 00 03 00 00       	cmp    $0x300,%eax
f010f5c8:	74 17                	je     f010f5e1 <test_kmalloc_bestfit1+0x233>
f010f5ca:	83 ec 04             	sub    $0x4,%esp
f010f5cd:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010f5d2:	68 a3 01 00 00       	push   $0x1a3
f010f5d7:	68 76 1a 12 f0       	push   $0xf0121a76
f010f5dc:	e8 ce 0b ff ff       	call   f01001af <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f5e1:	e8 68 b4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f5e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f5e9:	e8 8c cb ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f5ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f010f5f1:	83 ec 0c             	sub    $0xc,%esp
f010f5f4:	68 00 fc 1f 00       	push   $0x1ffc00
f010f5f9:	e8 97 d8 ff ff       	call   f010ce95 <kmalloc>
f010f5fe:	83 c4 10             	add    $0x10,%esp
f010f601:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f010f607:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f010f60d:	89 c1                	mov    %eax,%ecx
f010f60f:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f010f616:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f61b:	0f b6 d0             	movzbl %al,%edx
f010f61e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010f621:	01 d0                	add    %edx,%eax
f010f623:	48                   	dec    %eax
f010f624:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010f627:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f62a:	ba 00 00 00 00       	mov    $0x0,%edx
f010f62f:	f7 75 cc             	divl   -0x34(%ebp)
f010f632:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010f635:	29 d0                	sub    %edx,%eax
f010f637:	89 c3                	mov    %eax,%ebx
f010f639:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010f640:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f645:	0f b6 c0             	movzbl %al,%eax
f010f648:	c1 e0 04             	shl    $0x4,%eax
f010f64b:	89 c2                	mov    %eax,%edx
f010f64d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010f650:	01 d0                	add    %edx,%eax
f010f652:	48                   	dec    %eax
f010f653:	89 45 c0             	mov    %eax,-0x40(%ebp)
f010f656:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f659:	ba 00 00 00 00       	mov    $0x0,%edx
f010f65e:	f7 75 c4             	divl   -0x3c(%ebp)
f010f661:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010f664:	29 d0                	sub    %edx,%eax
f010f666:	01 d8                	add    %ebx,%eax
f010f668:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f010f66d:	39 c1                	cmp    %eax,%ecx
f010f66f:	74 17                	je     f010f688 <test_kmalloc_bestfit1+0x2da>
f010f671:	83 ec 04             	sub    $0x4,%esp
f010f674:	68 88 1e 12 f0       	push   $0xf0121e88
f010f679:	68 a9 01 00 00       	push   $0x1a9
f010f67e:	68 76 1a 12 f0       	push   $0xf0121a76
f010f683:	e8 27 0b ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f688:	e8 ed ca ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f68d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f690:	74 17                	je     f010f6a9 <test_kmalloc_bestfit1+0x2fb>
f010f692:	83 ec 04             	sub    $0x4,%esp
f010f695:	68 88 1a 12 f0       	push   $0xf0121a88
f010f69a:	68 aa 01 00 00       	push   $0x1aa
f010f69f:	68 76 1a 12 f0       	push   $0xf0121a76
f010f6a4:	e8 06 0b ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f6a9:	e8 a0 b3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f6ae:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f6b1:	29 c2                	sub    %eax,%edx
f010f6b3:	89 d0                	mov    %edx,%eax
f010f6b5:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f6ba:	74 17                	je     f010f6d3 <test_kmalloc_bestfit1+0x325>
f010f6bc:	83 ec 04             	sub    $0x4,%esp
f010f6bf:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010f6c4:	68 ab 01 00 00       	push   $0x1ab
f010f6c9:	68 76 1a 12 f0       	push   $0xf0121a76
f010f6ce:	e8 dc 0a ff ff       	call   f01001af <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f010f6d3:	e8 76 b3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f6d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f6db:	e8 9a ca ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f6e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f010f6e3:	83 ec 0c             	sub    $0xc,%esp
f010f6e6:	68 00 fc 1f 00       	push   $0x1ffc00
f010f6eb:	e8 a5 d7 ff ff       	call   f010ce95 <kmalloc>
f010f6f0:	83 c4 10             	add    $0x10,%esp
f010f6f3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010f6f9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010f6ff:	89 c1                	mov    %eax,%ecx
f010f701:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f010f708:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f70d:	0f b6 d0             	movzbl %al,%edx
f010f710:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010f713:	01 d0                	add    %edx,%eax
f010f715:	48                   	dec    %eax
f010f716:	89 45 b8             	mov    %eax,-0x48(%ebp)
f010f719:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f71c:	ba 00 00 00 00       	mov    $0x0,%edx
f010f721:	f7 75 bc             	divl   -0x44(%ebp)
f010f724:	8b 45 b8             	mov    -0x48(%ebp),%eax
f010f727:	29 d0                	sub    %edx,%eax
f010f729:	89 c3                	mov    %eax,%ebx
f010f72b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f010f732:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f737:	0f b6 c0             	movzbl %al,%eax
f010f73a:	c1 e0 04             	shl    $0x4,%eax
f010f73d:	89 c2                	mov    %eax,%edx
f010f73f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010f742:	01 d0                	add    %edx,%eax
f010f744:	48                   	dec    %eax
f010f745:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010f748:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f74b:	ba 00 00 00 00       	mov    $0x0,%edx
f010f750:	f7 75 b4             	divl   -0x4c(%ebp)
f010f753:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010f756:	29 d0                	sub    %edx,%eax
f010f758:	01 d8                	add    %ebx,%eax
f010f75a:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f010f75f:	39 c1                	cmp    %eax,%ecx
f010f761:	74 17                	je     f010f77a <test_kmalloc_bestfit1+0x3cc>
f010f763:	83 ec 04             	sub    $0x4,%esp
f010f766:	68 88 1e 12 f0       	push   $0xf0121e88
f010f76b:	68 b1 01 00 00       	push   $0x1b1
f010f770:	68 76 1a 12 f0       	push   $0xf0121a76
f010f775:	e8 35 0a ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f77a:	e8 fb c9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f77f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f782:	74 17                	je     f010f79b <test_kmalloc_bestfit1+0x3ed>
f010f784:	83 ec 04             	sub    $0x4,%esp
f010f787:	68 88 1a 12 f0       	push   $0xf0121a88
f010f78c:	68 b2 01 00 00       	push   $0x1b2
f010f791:	68 76 1a 12 f0       	push   $0xf0121a76
f010f796:	e8 14 0a ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f010f79b:	e8 ae b2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f7a0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f7a3:	29 c2                	sub    %eax,%edx
f010f7a5:	89 d0                	mov    %edx,%eax
f010f7a7:	3d 00 02 00 00       	cmp    $0x200,%eax
f010f7ac:	74 17                	je     f010f7c5 <test_kmalloc_bestfit1+0x417>
f010f7ae:	83 ec 04             	sub    $0x4,%esp
f010f7b1:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010f7b6:	68 b3 01 00 00       	push   $0x1b3
f010f7bb:	68 76 1a 12 f0       	push   $0xf0121a76
f010f7c0:	e8 ea 09 ff ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f7c5:	e8 84 b2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f7ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f7cd:	e8 a8 c9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f7d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f010f7d5:	83 ec 0c             	sub    $0xc,%esp
f010f7d8:	68 00 fc 0f 00       	push   $0xffc00
f010f7dd:	e8 b3 d6 ff ff       	call   f010ce95 <kmalloc>
f010f7e2:	83 c4 10             	add    $0x10,%esp
f010f7e5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f010f7eb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f010f7f1:	89 c1                	mov    %eax,%ecx
f010f7f3:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f010f7fa:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f7ff:	0f b6 d0             	movzbl %al,%edx
f010f802:	8b 45 ac             	mov    -0x54(%ebp),%eax
f010f805:	01 d0                	add    %edx,%eax
f010f807:	48                   	dec    %eax
f010f808:	89 45 a8             	mov    %eax,-0x58(%ebp)
f010f80b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f80e:	ba 00 00 00 00       	mov    $0x0,%edx
f010f813:	f7 75 ac             	divl   -0x54(%ebp)
f010f816:	8b 45 a8             	mov    -0x58(%ebp),%eax
f010f819:	29 d0                	sub    %edx,%eax
f010f81b:	89 c3                	mov    %eax,%ebx
f010f81d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f010f824:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f829:	0f b6 c0             	movzbl %al,%eax
f010f82c:	c1 e0 04             	shl    $0x4,%eax
f010f82f:	89 c2                	mov    %eax,%edx
f010f831:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f010f834:	01 d0                	add    %edx,%eax
f010f836:	48                   	dec    %eax
f010f837:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010f83a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f83d:	ba 00 00 00 00       	mov    $0x0,%edx
f010f842:	f7 75 a4             	divl   -0x5c(%ebp)
f010f845:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010f848:	29 d0                	sub    %edx,%eax
f010f84a:	01 d8                	add    %ebx,%eax
f010f84c:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f010f851:	39 c1                	cmp    %eax,%ecx
f010f853:	74 17                	je     f010f86c <test_kmalloc_bestfit1+0x4be>
f010f855:	83 ec 04             	sub    $0x4,%esp
f010f858:	68 88 1e 12 f0       	push   $0xf0121e88
f010f85d:	68 b9 01 00 00       	push   $0x1b9
f010f862:	68 76 1a 12 f0       	push   $0xf0121a76
f010f867:	e8 43 09 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f86c:	e8 09 c9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f871:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f874:	74 17                	je     f010f88d <test_kmalloc_bestfit1+0x4df>
f010f876:	83 ec 04             	sub    $0x4,%esp
f010f879:	68 88 1a 12 f0       	push   $0xf0121a88
f010f87e:	68 ba 01 00 00       	push   $0x1ba
f010f883:	68 76 1a 12 f0       	push   $0xf0121a76
f010f888:	e8 22 09 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010f88d:	e8 bc b1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f892:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f895:	29 c2                	sub    %eax,%edx
f010f897:	89 d0                	mov    %edx,%eax
f010f899:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f89e:	74 17                	je     f010f8b7 <test_kmalloc_bestfit1+0x509>
f010f8a0:	83 ec 04             	sub    $0x4,%esp
f010f8a3:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010f8a8:	68 bb 01 00 00       	push   $0x1bb
f010f8ad:	68 76 1a 12 f0       	push   $0xf0121a76
f010f8b2:	e8 f8 08 ff ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f8b7:	e8 92 b1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f8bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f8bf:	e8 b6 c8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f8c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f010f8c7:	83 ec 0c             	sub    $0xc,%esp
f010f8ca:	68 00 fc 0f 00       	push   $0xffc00
f010f8cf:	e8 c1 d5 ff ff       	call   f010ce95 <kmalloc>
f010f8d4:	83 c4 10             	add    $0x10,%esp
f010f8d7:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010f8dd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010f8e3:	89 c1                	mov    %eax,%ecx
f010f8e5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f010f8ec:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f8f1:	0f b6 d0             	movzbl %al,%edx
f010f8f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010f8f7:	01 d0                	add    %edx,%eax
f010f8f9:	48                   	dec    %eax
f010f8fa:	89 45 98             	mov    %eax,-0x68(%ebp)
f010f8fd:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f900:	ba 00 00 00 00       	mov    $0x0,%edx
f010f905:	f7 75 9c             	divl   -0x64(%ebp)
f010f908:	8b 45 98             	mov    -0x68(%ebp),%eax
f010f90b:	29 d0                	sub    %edx,%eax
f010f90d:	89 c3                	mov    %eax,%ebx
f010f90f:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f010f916:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f91b:	0f b6 c0             	movzbl %al,%eax
f010f91e:	c1 e0 04             	shl    $0x4,%eax
f010f921:	89 c2                	mov    %eax,%edx
f010f923:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f926:	01 d0                	add    %edx,%eax
f010f928:	48                   	dec    %eax
f010f929:	89 45 90             	mov    %eax,-0x70(%ebp)
f010f92c:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f92f:	ba 00 00 00 00       	mov    $0x0,%edx
f010f934:	f7 75 94             	divl   -0x6c(%ebp)
f010f937:	8b 45 90             	mov    -0x70(%ebp),%eax
f010f93a:	29 d0                	sub    %edx,%eax
f010f93c:	01 d8                	add    %ebx,%eax
f010f93e:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f010f943:	39 c1                	cmp    %eax,%ecx
f010f945:	74 17                	je     f010f95e <test_kmalloc_bestfit1+0x5b0>
f010f947:	83 ec 04             	sub    $0x4,%esp
f010f94a:	68 88 1e 12 f0       	push   $0xf0121e88
f010f94f:	68 c1 01 00 00       	push   $0x1c1
f010f954:	68 76 1a 12 f0       	push   $0xf0121a76
f010f959:	e8 51 08 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010f95e:	e8 17 c8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f963:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f966:	74 17                	je     f010f97f <test_kmalloc_bestfit1+0x5d1>
f010f968:	83 ec 04             	sub    $0x4,%esp
f010f96b:	68 88 1a 12 f0       	push   $0xf0121a88
f010f970:	68 c2 01 00 00       	push   $0x1c2
f010f975:	68 76 1a 12 f0       	push   $0xf0121a76
f010f97a:	e8 30 08 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010f97f:	e8 ca b0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f984:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f987:	29 c2                	sub    %eax,%edx
f010f989:	89 d0                	mov    %edx,%eax
f010f98b:	3d 00 01 00 00       	cmp    $0x100,%eax
f010f990:	74 17                	je     f010f9a9 <test_kmalloc_bestfit1+0x5fb>
f010f992:	83 ec 04             	sub    $0x4,%esp
f010f995:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010f99a:	68 c3 01 00 00       	push   $0x1c3
f010f99f:	68 76 1a 12 f0       	push   $0xf0121a76
f010f9a4:	e8 06 08 ff ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010f9a9:	e8 a0 b0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010f9ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010f9b1:	e8 c4 c7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010f9b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f010f9b9:	83 ec 0c             	sub    $0xc,%esp
f010f9bc:	68 00 fc 0f 00       	push   $0xffc00
f010f9c1:	e8 cf d4 ff ff       	call   f010ce95 <kmalloc>
f010f9c6:	83 c4 10             	add    $0x10,%esp
f010f9c9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f010f9cf:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f010f9d5:	89 c1                	mov    %eax,%ecx
f010f9d7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f010f9de:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010f9e3:	0f b6 d0             	movzbl %al,%edx
f010f9e6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f010f9e9:	01 d0                	add    %edx,%eax
f010f9eb:	48                   	dec    %eax
f010f9ec:	89 45 88             	mov    %eax,-0x78(%ebp)
f010f9ef:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f9f2:	ba 00 00 00 00       	mov    $0x0,%edx
f010f9f7:	f7 75 8c             	divl   -0x74(%ebp)
f010f9fa:	8b 45 88             	mov    -0x78(%ebp),%eax
f010f9fd:	29 d0                	sub    %edx,%eax
f010f9ff:	89 c3                	mov    %eax,%ebx
f010fa01:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f010fa08:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fa0d:	0f b6 c0             	movzbl %al,%eax
f010fa10:	c1 e0 04             	shl    $0x4,%eax
f010fa13:	89 c2                	mov    %eax,%edx
f010fa15:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010fa18:	01 d0                	add    %edx,%eax
f010fa1a:	48                   	dec    %eax
f010fa1b:	89 45 80             	mov    %eax,-0x80(%ebp)
f010fa1e:	8b 45 80             	mov    -0x80(%ebp),%eax
f010fa21:	ba 00 00 00 00       	mov    $0x0,%edx
f010fa26:	f7 75 84             	divl   -0x7c(%ebp)
f010fa29:	8b 45 80             	mov    -0x80(%ebp),%eax
f010fa2c:	29 d0                	sub    %edx,%eax
f010fa2e:	01 d8                	add    %ebx,%eax
f010fa30:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f010fa35:	39 c1                	cmp    %eax,%ecx
f010fa37:	74 17                	je     f010fa50 <test_kmalloc_bestfit1+0x6a2>
f010fa39:	83 ec 04             	sub    $0x4,%esp
f010fa3c:	68 88 1e 12 f0       	push   $0xf0121e88
f010fa41:	68 c9 01 00 00       	push   $0x1c9
f010fa46:	68 76 1a 12 f0       	push   $0xf0121a76
f010fa4b:	e8 5f 07 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fa50:	e8 25 c7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fa55:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fa58:	74 17                	je     f010fa71 <test_kmalloc_bestfit1+0x6c3>
f010fa5a:	83 ec 04             	sub    $0x4,%esp
f010fa5d:	68 88 1a 12 f0       	push   $0xf0121a88
f010fa62:	68 ca 01 00 00       	push   $0x1ca
f010fa67:	68 76 1a 12 f0       	push   $0xf0121a76
f010fa6c:	e8 3e 07 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010fa71:	e8 d8 af ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fa76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fa79:	29 c2                	sub    %eax,%edx
f010fa7b:	89 d0                	mov    %edx,%eax
f010fa7d:	3d 00 01 00 00       	cmp    $0x100,%eax
f010fa82:	74 17                	je     f010fa9b <test_kmalloc_bestfit1+0x6ed>
f010fa84:	83 ec 04             	sub    $0x4,%esp
f010fa87:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010fa8c:	68 cb 01 00 00       	push   $0x1cb
f010fa91:	68 76 1a 12 f0       	push   $0xf0121a76
f010fa96:	e8 14 07 ff ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f010fa9b:	e8 ae af ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010faa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010faa3:	e8 d2 c6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010faa8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f010faab:	83 ec 0c             	sub    $0xc,%esp
f010faae:	68 00 fc 0f 00       	push   $0xffc00
f010fab3:	e8 dd d3 ff ff       	call   f010ce95 <kmalloc>
f010fab8:	83 c4 10             	add    $0x10,%esp
f010fabb:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f010fac1:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f010fac7:	89 c1                	mov    %eax,%ecx
f010fac9:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f010fad0:	10 00 00 
f010fad3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fad8:	0f b6 d0             	movzbl %al,%edx
f010fadb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f010fae1:	01 d0                	add    %edx,%eax
f010fae3:	48                   	dec    %eax
f010fae4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f010faea:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010faf0:	ba 00 00 00 00       	mov    $0x0,%edx
f010faf5:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f010fafb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010fb01:	29 d0                	sub    %edx,%eax
f010fb03:	89 c3                	mov    %eax,%ebx
f010fb05:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f010fb0c:	10 00 00 
f010fb0f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fb14:	0f b6 c0             	movzbl %al,%eax
f010fb17:	c1 e0 04             	shl    $0x4,%eax
f010fb1a:	89 c2                	mov    %eax,%edx
f010fb1c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010fb22:	01 d0                	add    %edx,%eax
f010fb24:	48                   	dec    %eax
f010fb25:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f010fb2b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010fb31:	ba 00 00 00 00       	mov    $0x0,%edx
f010fb36:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f010fb3c:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010fb42:	29 d0                	sub    %edx,%eax
f010fb44:	01 d8                	add    %ebx,%eax
f010fb46:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f010fb4b:	39 c1                	cmp    %eax,%ecx
f010fb4d:	74 17                	je     f010fb66 <test_kmalloc_bestfit1+0x7b8>
f010fb4f:	83 ec 04             	sub    $0x4,%esp
f010fb52:	68 88 1e 12 f0       	push   $0xf0121e88
f010fb57:	68 d1 01 00 00       	push   $0x1d1
f010fb5c:	68 76 1a 12 f0       	push   $0xf0121a76
f010fb61:	e8 49 06 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fb66:	e8 0f c6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fb6b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fb6e:	74 17                	je     f010fb87 <test_kmalloc_bestfit1+0x7d9>
f010fb70:	83 ec 04             	sub    $0x4,%esp
f010fb73:	68 88 1a 12 f0       	push   $0xf0121a88
f010fb78:	68 d2 01 00 00       	push   $0x1d2
f010fb7d:	68 76 1a 12 f0       	push   $0xf0121a76
f010fb82:	e8 28 06 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010fb87:	e8 c2 ae ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fb8c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fb8f:	29 c2                	sub    %eax,%edx
f010fb91:	89 d0                	mov    %edx,%eax
f010fb93:	3d 00 01 00 00       	cmp    $0x100,%eax
f010fb98:	74 17                	je     f010fbb1 <test_kmalloc_bestfit1+0x803>
f010fb9a:	83 ec 04             	sub    $0x4,%esp
f010fb9d:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010fba2:	68 d3 01 00 00       	push   $0x1d3
f010fba7:	68 76 1a 12 f0       	push   $0xf0121a76
f010fbac:	e8 fe 05 ff ff       	call   f01001af <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fbb1:	e8 98 ae ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fbb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fbb9:	e8 bc c5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fbbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f010fbc1:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f010fbc7:	83 ec 0c             	sub    $0xc,%esp
f010fbca:	50                   	push   %eax
f010fbcb:	e8 10 d3 ff ff       	call   f010cee0 <kfree>
f010fbd0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fbd3:	e8 a2 c5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fbd8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fbdb:	74 17                	je     f010fbf4 <test_kmalloc_bestfit1+0x846>
f010fbdd:	83 ec 04             	sub    $0x4,%esp
f010fbe0:	68 88 1a 12 f0       	push   $0xf0121a88
f010fbe5:	68 dc 01 00 00       	push   $0x1dc
f010fbea:	68 76 1a 12 f0       	push   $0xf0121a76
f010fbef:	e8 bb 05 ff ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010fbf4:	e8 55 ae ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fbf9:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fbfc:	3d 00 03 00 00       	cmp    $0x300,%eax
f010fc01:	74 17                	je     f010fc1a <test_kmalloc_bestfit1+0x86c>
f010fc03:	83 ec 04             	sub    $0x4,%esp
f010fc06:	68 cb 1e 12 f0       	push   $0xf0121ecb
f010fc0b:	68 dd 01 00 00       	push   $0x1dd
f010fc10:	68 76 1a 12 f0       	push   $0xf0121a76
f010fc15:	e8 95 05 ff ff       	call   f01001af <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fc1a:	e8 2f ae ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fc1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fc22:	e8 53 c5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fc27:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f010fc2a:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f010fc30:	83 ec 0c             	sub    $0xc,%esp
f010fc33:	50                   	push   %eax
f010fc34:	e8 a7 d2 ff ff       	call   f010cee0 <kfree>
f010fc39:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fc3c:	e8 39 c5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fc41:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fc44:	74 17                	je     f010fc5d <test_kmalloc_bestfit1+0x8af>
f010fc46:	83 ec 04             	sub    $0x4,%esp
f010fc49:	68 88 1a 12 f0       	push   $0xf0121a88
f010fc4e:	68 e3 01 00 00       	push   $0x1e3
f010fc53:	68 76 1a 12 f0       	push   $0xf0121a76
f010fc58:	e8 52 05 ff ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f010fc5d:	e8 ec ad ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fc62:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fc65:	3d 00 02 00 00       	cmp    $0x200,%eax
f010fc6a:	74 17                	je     f010fc83 <test_kmalloc_bestfit1+0x8d5>
f010fc6c:	83 ec 04             	sub    $0x4,%esp
f010fc6f:	68 cb 1e 12 f0       	push   $0xf0121ecb
f010fc74:	68 e4 01 00 00       	push   $0x1e4
f010fc79:	68 76 1a 12 f0       	push   $0xf0121a76
f010fc7e:	e8 2c 05 ff ff       	call   f01001af <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f010fc83:	e8 c6 ad ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fc88:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fc8b:	e8 ea c4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fc90:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f010fc93:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f010fc99:	83 ec 0c             	sub    $0xc,%esp
f010fc9c:	50                   	push   %eax
f010fc9d:	e8 3e d2 ff ff       	call   f010cee0 <kfree>
f010fca2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fca5:	e8 d0 c4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fcaa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fcad:	74 17                	je     f010fcc6 <test_kmalloc_bestfit1+0x918>
f010fcaf:	83 ec 04             	sub    $0x4,%esp
f010fcb2:	68 88 1a 12 f0       	push   $0xf0121a88
f010fcb7:	68 ea 01 00 00       	push   $0x1ea
f010fcbc:	68 76 1a 12 f0       	push   $0xf0121a76
f010fcc1:	e8 e9 04 ff ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f010fcc6:	e8 83 ad ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fccb:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010fcce:	3d 00 01 00 00       	cmp    $0x100,%eax
f010fcd3:	74 17                	je     f010fcec <test_kmalloc_bestfit1+0x93e>
f010fcd5:	83 ec 04             	sub    $0x4,%esp
f010fcd8:	68 cb 1e 12 f0       	push   $0xf0121ecb
f010fcdd:	68 eb 01 00 00       	push   $0x1eb
f010fce2:	68 76 1a 12 f0       	push   $0xf0121a76
f010fce7:	e8 c3 04 ff ff       	call   f01001af <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010fcec:	e8 5d ad ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fcf1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fcf4:	e8 81 c4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fcf9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f010fcfc:	83 ec 0c             	sub    $0xc,%esp
f010fcff:	68 00 00 08 00       	push   $0x80000
f010fd04:	e8 8c d1 ff ff       	call   f010ce95 <kmalloc>
f010fd09:	83 c4 10             	add    $0x10,%esp
f010fd0c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f010fd12:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f010fd18:	89 c1                	mov    %eax,%ecx
f010fd1a:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f010fd21:	10 00 00 
f010fd24:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fd29:	0f b6 d0             	movzbl %al,%edx
f010fd2c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f010fd32:	01 d0                	add    %edx,%eax
f010fd34:	48                   	dec    %eax
f010fd35:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f010fd3b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fd41:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd46:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f010fd4c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f010fd52:	29 d0                	sub    %edx,%eax
f010fd54:	89 c3                	mov    %eax,%ebx
f010fd56:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f010fd5d:	10 00 00 
f010fd60:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fd65:	0f b6 c0             	movzbl %al,%eax
f010fd68:	c1 e0 04             	shl    $0x4,%eax
f010fd6b:	89 c2                	mov    %eax,%edx
f010fd6d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f010fd73:	01 d0                	add    %edx,%eax
f010fd75:	48                   	dec    %eax
f010fd76:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f010fd7c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010fd82:	ba 00 00 00 00       	mov    $0x0,%edx
f010fd87:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f010fd8d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f010fd93:	29 d0                	sub    %edx,%eax
f010fd95:	01 d8                	add    %ebx,%eax
f010fd97:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f010fd9c:	39 c1                	cmp    %eax,%ecx
f010fd9e:	74 17                	je     f010fdb7 <test_kmalloc_bestfit1+0xa09>
f010fda0:	83 ec 04             	sub    $0x4,%esp
f010fda3:	68 88 1e 12 f0       	push   $0xf0121e88
f010fda8:	68 f4 01 00 00       	push   $0x1f4
f010fdad:	68 76 1a 12 f0       	push   $0xf0121a76
f010fdb2:	e8 f8 03 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fdb7:	e8 be c3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fdbc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fdbf:	74 17                	je     f010fdd8 <test_kmalloc_bestfit1+0xa2a>
f010fdc1:	83 ec 04             	sub    $0x4,%esp
f010fdc4:	68 88 1a 12 f0       	push   $0xf0121a88
f010fdc9:	68 f5 01 00 00       	push   $0x1f5
f010fdce:	68 76 1a 12 f0       	push   $0xf0121a76
f010fdd3:	e8 d7 03 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f010fdd8:	e8 71 ac ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fddd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fde0:	29 c2                	sub    %eax,%edx
f010fde2:	89 d0                	mov    %edx,%eax
f010fde4:	3d 80 00 00 00       	cmp    $0x80,%eax
f010fde9:	74 17                	je     f010fe02 <test_kmalloc_bestfit1+0xa54>
f010fdeb:	83 ec 04             	sub    $0x4,%esp
f010fdee:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010fdf3:	68 f6 01 00 00       	push   $0x1f6
f010fdf8:	68 76 1a 12 f0       	push   $0xf0121a76
f010fdfd:	e8 ad 03 ff ff       	call   f01001af <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f010fe02:	e8 47 ac ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fe07:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010fe0a:	e8 6b c3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fe0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f010fe12:	83 ec 0c             	sub    $0xc,%esp
f010fe15:	68 00 fc 0f 00       	push   $0xffc00
f010fe1a:	e8 76 d0 ff ff       	call   f010ce95 <kmalloc>
f010fe1f:	83 c4 10             	add    $0x10,%esp
f010fe22:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f010fe28:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f010fe2e:	89 c1                	mov    %eax,%ecx
f010fe30:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f010fe37:	10 00 00 
f010fe3a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fe3f:	0f b6 d0             	movzbl %al,%edx
f010fe42:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f010fe48:	01 d0                	add    %edx,%eax
f010fe4a:	48                   	dec    %eax
f010fe4b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f010fe51:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010fe57:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe5c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f010fe62:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f010fe68:	29 d0                	sub    %edx,%eax
f010fe6a:	89 c3                	mov    %eax,%ebx
f010fe6c:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f010fe73:	10 00 00 
f010fe76:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010fe7b:	0f b6 c0             	movzbl %al,%eax
f010fe7e:	c1 e0 04             	shl    $0x4,%eax
f010fe81:	89 c2                	mov    %eax,%edx
f010fe83:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f010fe89:	01 d0                	add    %edx,%eax
f010fe8b:	48                   	dec    %eax
f010fe8c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f010fe92:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010fe98:	ba 00 00 00 00       	mov    $0x0,%edx
f010fe9d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f010fea3:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f010fea9:	29 d0                	sub    %edx,%eax
f010feab:	01 d8                	add    %ebx,%eax
f010fead:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f010feb2:	39 c1                	cmp    %eax,%ecx
f010feb4:	74 17                	je     f010fecd <test_kmalloc_bestfit1+0xb1f>
f010feb6:	83 ec 04             	sub    $0x4,%esp
f010feb9:	68 88 1e 12 f0       	push   $0xf0121e88
f010febe:	68 fc 01 00 00       	push   $0x1fc
f010fec3:	68 76 1a 12 f0       	push   $0xf0121a76
f010fec8:	e8 e2 02 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010fecd:	e8 a8 c2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010fed2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fed5:	74 17                	je     f010feee <test_kmalloc_bestfit1+0xb40>
f010fed7:	83 ec 04             	sub    $0x4,%esp
f010feda:	68 88 1a 12 f0       	push   $0xf0121a88
f010fedf:	68 fd 01 00 00       	push   $0x1fd
f010fee4:	68 76 1a 12 f0       	push   $0xf0121a76
f010fee9:	e8 c1 02 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f010feee:	e8 5b ab ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010fef3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fef6:	29 c2                	sub    %eax,%edx
f010fef8:	89 d0                	mov    %edx,%eax
f010fefa:	3d 00 01 00 00       	cmp    $0x100,%eax
f010feff:	74 17                	je     f010ff18 <test_kmalloc_bestfit1+0xb6a>
f010ff01:	83 ec 04             	sub    $0x4,%esp
f010ff04:	68 b8 1e 12 f0       	push   $0xf0121eb8
f010ff09:	68 fe 01 00 00       	push   $0x1fe
f010ff0e:	68 76 1a 12 f0       	push   $0xf0121a76
f010ff13:	e8 97 02 ff ff       	call   f01001af <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f010ff18:	e8 31 ab ff ff       	call   f010aa4e <sys_calculate_free_frames>
f010ff1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f010ff20:	e8 55 c2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ff25:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f010ff28:	83 ec 0c             	sub    $0xc,%esp
f010ff2b:	68 00 fc 03 00       	push   $0x3fc00
f010ff30:	e8 60 cf ff ff       	call   f010ce95 <kmalloc>
f010ff35:	83 c4 10             	add    $0x10,%esp
f010ff38:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f010ff3e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f010ff44:	89 c1                	mov    %eax,%ecx
f010ff46:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f010ff4d:	10 00 00 
f010ff50:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ff55:	0f b6 d0             	movzbl %al,%edx
f010ff58:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f010ff5e:	01 d0                	add    %edx,%eax
f010ff60:	48                   	dec    %eax
f010ff61:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f010ff67:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010ff6d:	ba 00 00 00 00       	mov    $0x0,%edx
f010ff72:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f010ff78:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f010ff7e:	29 d0                	sub    %edx,%eax
f010ff80:	89 c3                	mov    %eax,%ebx
f010ff82:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f010ff89:	10 00 00 
f010ff8c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f010ff91:	0f b6 c0             	movzbl %al,%eax
f010ff94:	c1 e0 04             	shl    $0x4,%eax
f010ff97:	89 c2                	mov    %eax,%edx
f010ff99:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010ff9f:	01 d0                	add    %edx,%eax
f010ffa1:	48                   	dec    %eax
f010ffa2:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f010ffa8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010ffae:	ba 00 00 00 00       	mov    $0x0,%edx
f010ffb3:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f010ffb9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010ffbf:	29 d0                	sub    %edx,%eax
f010ffc1:	01 d8                	add    %ebx,%eax
f010ffc3:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f010ffc8:	39 c1                	cmp    %eax,%ecx
f010ffca:	74 17                	je     f010ffe3 <test_kmalloc_bestfit1+0xc35>
f010ffcc:	83 ec 04             	sub    $0x4,%esp
f010ffcf:	68 88 1e 12 f0       	push   $0xf0121e88
f010ffd4:	68 04 02 00 00       	push   $0x204
f010ffd9:	68 76 1a 12 f0       	push   $0xf0121a76
f010ffde:	e8 cc 01 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f010ffe3:	e8 92 c1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f010ffe8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ffeb:	74 17                	je     f0110004 <test_kmalloc_bestfit1+0xc56>
f010ffed:	83 ec 04             	sub    $0x4,%esp
f010fff0:	68 88 1a 12 f0       	push   $0xf0121a88
f010fff5:	68 05 02 00 00       	push   $0x205
f010fffa:	68 76 1a 12 f0       	push   $0xf0121a76
f010ffff:	e8 ab 01 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0110004:	e8 45 aa ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110009:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011000c:	29 c2                	sub    %eax,%edx
f011000e:	89 d0                	mov    %edx,%eax
f0110010:	83 f8 40             	cmp    $0x40,%eax
f0110013:	74 17                	je     f011002c <test_kmalloc_bestfit1+0xc7e>
f0110015:	83 ec 04             	sub    $0x4,%esp
f0110018:	68 b8 1e 12 f0       	push   $0xf0121eb8
f011001d:	68 06 02 00 00       	push   $0x206
f0110022:	68 76 1a 12 f0       	push   $0xf0121a76
f0110027:	e8 83 01 ff ff       	call   f01001af <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011002c:	e8 1d aa ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110031:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0110034:	e8 41 c1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110039:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011003c:	83 ec 0c             	sub    $0xc,%esp
f011003f:	68 00 fc 3f 00       	push   $0x3ffc00
f0110044:	e8 4c ce ff ff       	call   f010ce95 <kmalloc>
f0110049:	83 c4 10             	add    $0x10,%esp
f011004c:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f0110052:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0110058:	89 c1                	mov    %eax,%ecx
f011005a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0110061:	10 00 00 
f0110064:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110069:	0f b6 d0             	movzbl %al,%edx
f011006c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0110072:	01 d0                	add    %edx,%eax
f0110074:	48                   	dec    %eax
f0110075:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011007b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110081:	ba 00 00 00 00       	mov    $0x0,%edx
f0110086:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011008c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0110092:	29 d0                	sub    %edx,%eax
f0110094:	89 c3                	mov    %eax,%ebx
f0110096:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011009d:	10 00 00 
f01100a0:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01100a5:	0f b6 c0             	movzbl %al,%eax
f01100a8:	c1 e0 04             	shl    $0x4,%eax
f01100ab:	89 c2                	mov    %eax,%edx
f01100ad:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01100b3:	01 d0                	add    %edx,%eax
f01100b5:	48                   	dec    %eax
f01100b6:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01100bc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01100c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01100c7:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01100cd:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01100d3:	29 d0                	sub    %edx,%eax
f01100d5:	01 d8                	add    %ebx,%eax
f01100d7:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f01100dc:	39 c1                	cmp    %eax,%ecx
f01100de:	74 17                	je     f01100f7 <test_kmalloc_bestfit1+0xd49>
f01100e0:	83 ec 04             	sub    $0x4,%esp
f01100e3:	68 88 1e 12 f0       	push   $0xf0121e88
f01100e8:	68 0c 02 00 00       	push   $0x20c
f01100ed:	68 76 1a 12 f0       	push   $0xf0121a76
f01100f2:	e8 b8 00 ff ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01100f7:	e8 7e c0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01100fc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01100ff:	74 17                	je     f0110118 <test_kmalloc_bestfit1+0xd6a>
f0110101:	83 ec 04             	sub    $0x4,%esp
f0110104:	68 88 1a 12 f0       	push   $0xf0121a88
f0110109:	68 0d 02 00 00       	push   $0x20d
f011010e:	68 76 1a 12 f0       	push   $0xf0121a76
f0110113:	e8 97 00 ff ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f0110118:	e8 31 a9 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011011d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110120:	29 c2                	sub    %eax,%edx
f0110122:	89 d0                	mov    %edx,%eax
f0110124:	3d 00 04 00 00       	cmp    $0x400,%eax
f0110129:	74 17                	je     f0110142 <test_kmalloc_bestfit1+0xd94>
f011012b:	83 ec 04             	sub    $0x4,%esp
f011012e:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0110133:	68 0e 02 00 00       	push   $0x20e
f0110138:	68 76 1a 12 f0       	push   $0xf0121a76
f011013d:	e8 6d 00 ff ff       	call   f01001af <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f0110142:	e8 07 a9 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110147:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011014a:	e8 2b c0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011014f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f0110152:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110158:	83 ec 0c             	sub    $0xc,%esp
f011015b:	50                   	push   %eax
f011015c:	e8 7f cd ff ff       	call   f010cee0 <kfree>
f0110161:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110164:	e8 11 c0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110169:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011016c:	74 17                	je     f0110185 <test_kmalloc_bestfit1+0xdd7>
f011016e:	83 ec 04             	sub    $0x4,%esp
f0110171:	68 88 1a 12 f0       	push   $0xf0121a88
f0110176:	68 17 02 00 00       	push   $0x217
f011017b:	68 76 1a 12 f0       	push   $0xf0121a76
f0110180:	e8 2a 00 ff ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0110185:	e8 c4 a8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011018a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011018d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0110192:	74 17                	je     f01101ab <test_kmalloc_bestfit1+0xdfd>
f0110194:	83 ec 04             	sub    $0x4,%esp
f0110197:	68 cb 1e 12 f0       	push   $0xf0121ecb
f011019c:	68 18 02 00 00       	push   $0x218
f01101a1:	68 76 1a 12 f0       	push   $0xf0121a76
f01101a6:	e8 04 00 ff ff       	call   f01001af <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f01101ab:	e8 9e a8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01101b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01101b3:	e8 c2 bf ff ff       	call   f010c17a <pf_calculate_free_frames>
f01101b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f01101bb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01101c1:	83 ec 0c             	sub    $0xc,%esp
f01101c4:	50                   	push   %eax
f01101c5:	e8 16 cd ff ff       	call   f010cee0 <kfree>
f01101ca:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01101cd:	e8 a8 bf ff ff       	call   f010c17a <pf_calculate_free_frames>
f01101d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01101d5:	74 17                	je     f01101ee <test_kmalloc_bestfit1+0xe40>
f01101d7:	83 ec 04             	sub    $0x4,%esp
f01101da:	68 88 1a 12 f0       	push   $0xf0121a88
f01101df:	68 1e 02 00 00       	push   $0x21e
f01101e4:	68 76 1a 12 f0       	push   $0xf0121a76
f01101e9:	e8 c1 ff fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f01101ee:	e8 5b a8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01101f3:	2b 45 f4             	sub    -0xc(%ebp),%eax
f01101f6:	3d 80 00 00 00       	cmp    $0x80,%eax
f01101fb:	74 17                	je     f0110214 <test_kmalloc_bestfit1+0xe66>
f01101fd:	83 ec 04             	sub    $0x4,%esp
f0110200:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0110205:	68 1f 02 00 00       	push   $0x21f
f011020a:	68 76 1a 12 f0       	push   $0xf0121a76
f011020f:	e8 9b ff fe ff       	call   f01001af <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f0110214:	e8 35 a8 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110219:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011021c:	e8 59 bf ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110221:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f0110224:	83 ec 0c             	sub    $0xc,%esp
f0110227:	68 00 fc 1f 00       	push   $0x1ffc00
f011022c:	e8 64 cc ff ff       	call   f010ce95 <kmalloc>
f0110231:	83 c4 10             	add    $0x10,%esp
f0110234:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011023a:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0110240:	89 c1                	mov    %eax,%ecx
f0110242:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0110249:	10 00 00 
f011024c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110251:	0f b6 d0             	movzbl %al,%edx
f0110254:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011025a:	01 d0                	add    %edx,%eax
f011025c:	48                   	dec    %eax
f011025d:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0110263:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0110269:	ba 00 00 00 00       	mov    $0x0,%edx
f011026e:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0110274:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011027a:	29 d0                	sub    %edx,%eax
f011027c:	89 c3                	mov    %eax,%ebx
f011027e:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0110285:	10 00 00 
f0110288:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011028d:	0f b6 c0             	movzbl %al,%eax
f0110290:	c1 e0 04             	shl    $0x4,%eax
f0110293:	89 c2                	mov    %eax,%edx
f0110295:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011029b:	01 d0                	add    %edx,%eax
f011029d:	48                   	dec    %eax
f011029e:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01102a4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01102aa:	ba 00 00 00 00       	mov    $0x0,%edx
f01102af:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01102b5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01102bb:	29 d0                	sub    %edx,%eax
f01102bd:	01 d8                	add    %ebx,%eax
f01102bf:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f01102c4:	39 c1                	cmp    %eax,%ecx
f01102c6:	74 17                	je     f01102df <test_kmalloc_bestfit1+0xf31>
f01102c8:	83 ec 04             	sub    $0x4,%esp
f01102cb:	68 88 1e 12 f0       	push   $0xf0121e88
f01102d0:	68 28 02 00 00       	push   $0x228
f01102d5:	68 76 1a 12 f0       	push   $0xf0121a76
f01102da:	e8 d0 fe fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01102df:	e8 96 be ff ff       	call   f010c17a <pf_calculate_free_frames>
f01102e4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01102e7:	74 17                	je     f0110300 <test_kmalloc_bestfit1+0xf52>
f01102e9:	83 ec 04             	sub    $0x4,%esp
f01102ec:	68 88 1a 12 f0       	push   $0xf0121a88
f01102f1:	68 29 02 00 00       	push   $0x229
f01102f6:	68 76 1a 12 f0       	push   $0xf0121a76
f01102fb:	e8 af fe fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0110300:	e8 49 a7 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110305:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0110308:	29 c2                	sub    %eax,%edx
f011030a:	89 d0                	mov    %edx,%eax
f011030c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110311:	74 17                	je     f011032a <test_kmalloc_bestfit1+0xf7c>
f0110313:	83 ec 04             	sub    $0x4,%esp
f0110316:	68 b8 1e 12 f0       	push   $0xf0121eb8
f011031b:	68 2a 02 00 00       	push   $0x22a
f0110320:	68 76 1a 12 f0       	push   $0xf0121a76
f0110325:	e8 85 fe fe ff       	call   f01001af <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011032a:	83 ec 0c             	sub    $0xc,%esp
f011032d:	68 d8 1e 12 f0       	push   $0xf0121ed8
f0110332:	e8 cd 6e ff ff       	call   f0107204 <cprintf>
f0110337:	83 c4 10             	add    $0x10,%esp

	return 1;
f011033a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011033f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0110342:	5b                   	pop    %ebx
f0110343:	5f                   	pop    %edi
f0110344:	5d                   	pop    %ebp
f0110345:	c3                   	ret    

f0110346 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f0110346:	55                   	push   %ebp
f0110347:	89 e5                	mov    %esp,%ebp
f0110349:	57                   	push   %edi
f011034a:	53                   	push   %ebx
f011034b:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f0110351:	83 ec 0c             	sub    $0xc,%esp
f0110354:	68 b8 19 12 f0       	push   $0xf01219b8
f0110359:	e8 a6 6e ff ff       	call   f0107204 <cprintf>
f011035e:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0110361:	83 ec 0c             	sub    $0xc,%esp
f0110364:	68 e8 19 12 f0       	push   $0xf01219e8
f0110369:	e8 96 6e ff ff       	call   f0107204 <cprintf>
f011036e:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0110371:	83 ec 0c             	sub    $0xc,%esp
f0110374:	68 b8 19 12 f0       	push   $0xf01219b8
f0110379:	e8 86 6e ff ff       	call   f0107204 <cprintf>
f011037e:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0110381:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0110387:	b9 14 00 00 00       	mov    $0x14,%ecx
f011038c:	b8 00 00 00 00       	mov    $0x0,%eax
f0110391:	89 d7                	mov    %edx,%edi
f0110393:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0110395:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011039c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01103a1:	0f b6 d0             	movzbl %al,%edx
f01103a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01103a7:	01 d0                	add    %edx,%eax
f01103a9:	48                   	dec    %eax
f01103aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01103ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01103b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01103b5:	f7 75 f4             	divl   -0xc(%ebp)
f01103b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01103bb:	29 d0                	sub    %edx,%eax
f01103bd:	89 c1                	mov    %eax,%ecx
f01103bf:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01103c6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01103cb:	0f b6 c0             	movzbl %al,%eax
f01103ce:	c1 e0 04             	shl    $0x4,%eax
f01103d1:	89 c2                	mov    %eax,%edx
f01103d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103d6:	01 d0                	add    %edx,%eax
f01103d8:	48                   	dec    %eax
f01103d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01103dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01103df:	ba 00 00 00 00       	mov    $0x0,%edx
f01103e4:	f7 75 ec             	divl   -0x14(%ebp)
f01103e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01103ea:	29 d0                	sub    %edx,%eax
f01103ec:	01 c8                	add    %ecx,%eax
f01103ee:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f01103f3:	29 c2                	sub    %eax,%edx
f01103f5:	89 d0                	mov    %edx,%eax
f01103f7:	83 ec 0c             	sub    $0xc,%esp
f01103fa:	50                   	push   %eax
f01103fb:	e8 95 ca ff ff       	call   f010ce95 <kmalloc>
f0110400:	83 c4 10             	add    $0x10,%esp
f0110403:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f0110409:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011040f:	85 c0                	test   %eax,%eax
f0110411:	74 17                	je     f011042a <test_kmalloc_bestfit2+0xe4>
f0110413:	83 ec 04             	sub    $0x4,%esp
f0110416:	68 20 1f 12 f0       	push   $0xf0121f20
f011041b:	68 40 02 00 00       	push   $0x240
f0110420:	68 76 1a 12 f0       	push   $0xf0121a76
f0110425:	e8 85 fd fe ff       	call   f01001af <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011042a:	e8 1f a6 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011042f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110432:	e8 43 bd ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110437:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011043a:	83 ec 0c             	sub    $0xc,%esp
f011043d:	68 00 fc 1f 00       	push   $0x1ffc00
f0110442:	e8 4e ca ff ff       	call   f010ce95 <kmalloc>
f0110447:	83 c4 10             	add    $0x10,%esp
f011044a:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0110450:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0110456:	89 c1                	mov    %eax,%ecx
f0110458:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011045f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110464:	0f b6 d0             	movzbl %al,%edx
f0110467:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011046a:	01 d0                	add    %edx,%eax
f011046c:	48                   	dec    %eax
f011046d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0110470:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110473:	ba 00 00 00 00       	mov    $0x0,%edx
f0110478:	f7 75 dc             	divl   -0x24(%ebp)
f011047b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011047e:	29 d0                	sub    %edx,%eax
f0110480:	89 c3                	mov    %eax,%ebx
f0110482:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0110489:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011048e:	0f b6 c0             	movzbl %al,%eax
f0110491:	c1 e0 04             	shl    $0x4,%eax
f0110494:	89 c2                	mov    %eax,%edx
f0110496:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110499:	01 d0                	add    %edx,%eax
f011049b:	48                   	dec    %eax
f011049c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011049f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01104a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01104a7:	f7 75 d4             	divl   -0x2c(%ebp)
f01104aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01104ad:	29 d0                	sub    %edx,%eax
f01104af:	01 d8                	add    %ebx,%eax
f01104b1:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01104b6:	39 c1                	cmp    %eax,%ecx
f01104b8:	74 17                	je     f01104d1 <test_kmalloc_bestfit2+0x18b>
f01104ba:	83 ec 04             	sub    $0x4,%esp
f01104bd:	68 88 1e 12 f0       	push   $0xf0121e88
f01104c2:	68 4a 02 00 00       	push   $0x24a
f01104c7:	68 76 1a 12 f0       	push   $0xf0121a76
f01104cc:	e8 de fc fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01104d1:	e8 a4 bc ff ff       	call   f010c17a <pf_calculate_free_frames>
f01104d6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01104d9:	74 17                	je     f01104f2 <test_kmalloc_bestfit2+0x1ac>
f01104db:	83 ec 04             	sub    $0x4,%esp
f01104de:	68 88 1a 12 f0       	push   $0xf0121a88
f01104e3:	68 4b 02 00 00       	push   $0x24b
f01104e8:	68 76 1a 12 f0       	push   $0xf0121a76
f01104ed:	e8 bd fc fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f01104f2:	e8 57 a5 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01104f7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01104fa:	29 c2                	sub    %eax,%edx
f01104fc:	89 d0                	mov    %edx,%eax
f01104fe:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110503:	74 17                	je     f011051c <test_kmalloc_bestfit2+0x1d6>
f0110505:	83 ec 04             	sub    $0x4,%esp
f0110508:	68 b8 1e 12 f0       	push   $0xf0121eb8
f011050d:	68 4c 02 00 00       	push   $0x24c
f0110512:	68 76 1a 12 f0       	push   $0xf0121a76
f0110517:	e8 93 fc fe ff       	call   f01001af <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011051c:	e8 2d a5 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110521:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110524:	e8 51 bc ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110529:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011052c:	83 ec 0c             	sub    $0xc,%esp
f011052f:	68 00 fc 1f 00       	push   $0x1ffc00
f0110534:	e8 5c c9 ff ff       	call   f010ce95 <kmalloc>
f0110539:	83 c4 10             	add    $0x10,%esp
f011053c:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f0110542:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0110548:	89 c1                	mov    %eax,%ecx
f011054a:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0110551:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110556:	0f b6 d0             	movzbl %al,%edx
f0110559:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011055c:	01 d0                	add    %edx,%eax
f011055e:	48                   	dec    %eax
f011055f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0110562:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110565:	ba 00 00 00 00       	mov    $0x0,%edx
f011056a:	f7 75 cc             	divl   -0x34(%ebp)
f011056d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110570:	29 d0                	sub    %edx,%eax
f0110572:	89 c3                	mov    %eax,%ebx
f0110574:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011057b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110580:	0f b6 c0             	movzbl %al,%eax
f0110583:	c1 e0 04             	shl    $0x4,%eax
f0110586:	89 c2                	mov    %eax,%edx
f0110588:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011058b:	01 d0                	add    %edx,%eax
f011058d:	48                   	dec    %eax
f011058e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0110591:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110594:	ba 00 00 00 00       	mov    $0x0,%edx
f0110599:	f7 75 c4             	divl   -0x3c(%ebp)
f011059c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011059f:	29 d0                	sub    %edx,%eax
f01105a1:	01 d8                	add    %ebx,%eax
f01105a3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01105a8:	39 c1                	cmp    %eax,%ecx
f01105aa:	74 17                	je     f01105c3 <test_kmalloc_bestfit2+0x27d>
f01105ac:	83 ec 04             	sub    $0x4,%esp
f01105af:	68 88 1e 12 f0       	push   $0xf0121e88
f01105b4:	68 52 02 00 00       	push   $0x252
f01105b9:	68 76 1a 12 f0       	push   $0xf0121a76
f01105be:	e8 ec fb fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01105c3:	e8 b2 bb ff ff       	call   f010c17a <pf_calculate_free_frames>
f01105c8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01105cb:	74 17                	je     f01105e4 <test_kmalloc_bestfit2+0x29e>
f01105cd:	83 ec 04             	sub    $0x4,%esp
f01105d0:	68 88 1a 12 f0       	push   $0xf0121a88
f01105d5:	68 53 02 00 00       	push   $0x253
f01105da:	68 76 1a 12 f0       	push   $0xf0121a76
f01105df:	e8 cb fb fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f01105e4:	e8 65 a4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01105e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01105ec:	29 c2                	sub    %eax,%edx
f01105ee:	89 d0                	mov    %edx,%eax
f01105f0:	3d 00 02 00 00       	cmp    $0x200,%eax
f01105f5:	74 17                	je     f011060e <test_kmalloc_bestfit2+0x2c8>
f01105f7:	83 ec 04             	sub    $0x4,%esp
f01105fa:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01105ff:	68 54 02 00 00       	push   $0x254
f0110604:	68 76 1a 12 f0       	push   $0xf0121a76
f0110609:	e8 a1 fb fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011060e:	e8 3b a4 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110613:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110616:	e8 5f bb ff ff       	call   f010c17a <pf_calculate_free_frames>
f011061b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011061e:	83 ec 0c             	sub    $0xc,%esp
f0110621:	68 00 08 00 00       	push   $0x800
f0110626:	e8 6a c8 ff ff       	call   f010ce95 <kmalloc>
f011062b:	83 c4 10             	add    $0x10,%esp
f011062e:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0110634:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011063a:	89 c1                	mov    %eax,%ecx
f011063c:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0110643:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110648:	0f b6 d0             	movzbl %al,%edx
f011064b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011064e:	01 d0                	add    %edx,%eax
f0110650:	48                   	dec    %eax
f0110651:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0110654:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110657:	ba 00 00 00 00       	mov    $0x0,%edx
f011065c:	f7 75 bc             	divl   -0x44(%ebp)
f011065f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110662:	29 d0                	sub    %edx,%eax
f0110664:	89 c3                	mov    %eax,%ebx
f0110666:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011066d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110672:	0f b6 c0             	movzbl %al,%eax
f0110675:	c1 e0 04             	shl    $0x4,%eax
f0110678:	89 c2                	mov    %eax,%edx
f011067a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011067d:	01 d0                	add    %edx,%eax
f011067f:	48                   	dec    %eax
f0110680:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0110683:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110686:	ba 00 00 00 00       	mov    $0x0,%edx
f011068b:	f7 75 b4             	divl   -0x4c(%ebp)
f011068e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110691:	29 d0                	sub    %edx,%eax
f0110693:	01 d8                	add    %ebx,%eax
f0110695:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011069a:	39 c1                	cmp    %eax,%ecx
f011069c:	74 17                	je     f01106b5 <test_kmalloc_bestfit2+0x36f>
f011069e:	83 ec 04             	sub    $0x4,%esp
f01106a1:	68 88 1e 12 f0       	push   $0xf0121e88
f01106a6:	68 5a 02 00 00       	push   $0x25a
f01106ab:	68 76 1a 12 f0       	push   $0xf0121a76
f01106b0:	e8 fa fa fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01106b5:	e8 c0 ba ff ff       	call   f010c17a <pf_calculate_free_frames>
f01106ba:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01106bd:	74 17                	je     f01106d6 <test_kmalloc_bestfit2+0x390>
f01106bf:	83 ec 04             	sub    $0x4,%esp
f01106c2:	68 88 1a 12 f0       	push   $0xf0121a88
f01106c7:	68 5b 02 00 00       	push   $0x25b
f01106cc:	68 76 1a 12 f0       	push   $0xf0121a76
f01106d1:	e8 d9 fa fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f01106d6:	e8 73 a3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01106db:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01106de:	29 c2                	sub    %eax,%edx
f01106e0:	89 d0                	mov    %edx,%eax
f01106e2:	83 f8 01             	cmp    $0x1,%eax
f01106e5:	74 17                	je     f01106fe <test_kmalloc_bestfit2+0x3b8>
f01106e7:	83 ec 04             	sub    $0x4,%esp
f01106ea:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01106ef:	68 5c 02 00 00       	push   $0x25c
f01106f4:	68 76 1a 12 f0       	push   $0xf0121a76
f01106f9:	e8 b1 fa fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01106fe:	e8 4b a3 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110703:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110706:	e8 6f ba ff ff       	call   f010c17a <pf_calculate_free_frames>
f011070b:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011070e:	83 ec 0c             	sub    $0xc,%esp
f0110711:	68 00 08 00 00       	push   $0x800
f0110716:	e8 7a c7 ff ff       	call   f010ce95 <kmalloc>
f011071b:	83 c4 10             	add    $0x10,%esp
f011071e:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f0110724:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011072a:	89 c1                	mov    %eax,%ecx
f011072c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0110733:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110738:	0f b6 d0             	movzbl %al,%edx
f011073b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011073e:	01 d0                	add    %edx,%eax
f0110740:	48                   	dec    %eax
f0110741:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0110744:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110747:	ba 00 00 00 00       	mov    $0x0,%edx
f011074c:	f7 75 ac             	divl   -0x54(%ebp)
f011074f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110752:	29 d0                	sub    %edx,%eax
f0110754:	89 c3                	mov    %eax,%ebx
f0110756:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011075d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110762:	0f b6 c0             	movzbl %al,%eax
f0110765:	c1 e0 04             	shl    $0x4,%eax
f0110768:	89 c2                	mov    %eax,%edx
f011076a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011076d:	01 d0                	add    %edx,%eax
f011076f:	48                   	dec    %eax
f0110770:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0110773:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110776:	ba 00 00 00 00       	mov    $0x0,%edx
f011077b:	f7 75 a4             	divl   -0x5c(%ebp)
f011077e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110781:	29 d0                	sub    %edx,%eax
f0110783:	01 d8                	add    %ebx,%eax
f0110785:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011078a:	39 c1                	cmp    %eax,%ecx
f011078c:	74 17                	je     f01107a5 <test_kmalloc_bestfit2+0x45f>
f011078e:	83 ec 04             	sub    $0x4,%esp
f0110791:	68 88 1e 12 f0       	push   $0xf0121e88
f0110796:	68 62 02 00 00       	push   $0x262
f011079b:	68 76 1a 12 f0       	push   $0xf0121a76
f01107a0:	e8 0a fa fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01107a5:	e8 d0 b9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01107aa:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01107ad:	74 17                	je     f01107c6 <test_kmalloc_bestfit2+0x480>
f01107af:	83 ec 04             	sub    $0x4,%esp
f01107b2:	68 88 1a 12 f0       	push   $0xf0121a88
f01107b7:	68 63 02 00 00       	push   $0x263
f01107bc:	68 76 1a 12 f0       	push   $0xf0121a76
f01107c1:	e8 e9 f9 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f01107c6:	e8 83 a2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01107cb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01107ce:	29 c2                	sub    %eax,%edx
f01107d0:	89 d0                	mov    %edx,%eax
f01107d2:	83 f8 01             	cmp    $0x1,%eax
f01107d5:	74 17                	je     f01107ee <test_kmalloc_bestfit2+0x4a8>
f01107d7:	83 ec 04             	sub    $0x4,%esp
f01107da:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01107df:	68 64 02 00 00       	push   $0x264
f01107e4:	68 76 1a 12 f0       	push   $0xf0121a76
f01107e9:	e8 c1 f9 fe ff       	call   f01001af <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f01107ee:	e8 5b a2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01107f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01107f6:	e8 7f b9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01107fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f01107fe:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0110804:	83 ec 0c             	sub    $0xc,%esp
f0110807:	50                   	push   %eax
f0110808:	e8 d3 c6 ff ff       	call   f010cee0 <kfree>
f011080d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110810:	e8 65 b9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110815:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110818:	74 17                	je     f0110831 <test_kmalloc_bestfit2+0x4eb>
f011081a:	83 ec 04             	sub    $0x4,%esp
f011081d:	68 88 1a 12 f0       	push   $0xf0121a88
f0110822:	68 6a 02 00 00       	push   $0x26a
f0110827:	68 76 1a 12 f0       	push   $0xf0121a76
f011082c:	e8 7e f9 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f0110831:	e8 18 a2 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110836:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110839:	83 f8 01             	cmp    $0x1,%eax
f011083c:	74 17                	je     f0110855 <test_kmalloc_bestfit2+0x50f>
f011083e:	83 ec 04             	sub    $0x4,%esp
f0110841:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0110846:	68 6b 02 00 00       	push   $0x26b
f011084b:	68 76 1a 12 f0       	push   $0xf0121a76
f0110850:	e8 5a f9 fe ff       	call   f01001af <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0110855:	e8 f4 a1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011085a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011085d:	e8 18 b9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110862:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0110865:	83 ec 0c             	sub    $0xc,%esp
f0110868:	68 00 1c 00 00       	push   $0x1c00
f011086d:	e8 23 c6 ff ff       	call   f010ce95 <kmalloc>
f0110872:	83 c4 10             	add    $0x10,%esp
f0110875:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011087b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0110881:	89 c1                	mov    %eax,%ecx
f0110883:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011088a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011088f:	0f b6 d0             	movzbl %al,%edx
f0110892:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110895:	01 d0                	add    %edx,%eax
f0110897:	48                   	dec    %eax
f0110898:	89 45 98             	mov    %eax,-0x68(%ebp)
f011089b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011089e:	ba 00 00 00 00       	mov    $0x0,%edx
f01108a3:	f7 75 9c             	divl   -0x64(%ebp)
f01108a6:	8b 45 98             	mov    -0x68(%ebp),%eax
f01108a9:	29 d0                	sub    %edx,%eax
f01108ab:	89 c3                	mov    %eax,%ebx
f01108ad:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01108b4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01108b9:	0f b6 c0             	movzbl %al,%eax
f01108bc:	c1 e0 04             	shl    $0x4,%eax
f01108bf:	89 c2                	mov    %eax,%edx
f01108c1:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01108c4:	01 d0                	add    %edx,%eax
f01108c6:	48                   	dec    %eax
f01108c7:	89 45 90             	mov    %eax,-0x70(%ebp)
f01108ca:	8b 45 90             	mov    -0x70(%ebp),%eax
f01108cd:	ba 00 00 00 00       	mov    $0x0,%edx
f01108d2:	f7 75 94             	divl   -0x6c(%ebp)
f01108d5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01108d8:	29 d0                	sub    %edx,%eax
f01108da:	01 d8                	add    %ebx,%eax
f01108dc:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01108e1:	39 c1                	cmp    %eax,%ecx
f01108e3:	74 17                	je     f01108fc <test_kmalloc_bestfit2+0x5b6>
f01108e5:	83 ec 04             	sub    $0x4,%esp
f01108e8:	68 88 1e 12 f0       	push   $0xf0121e88
f01108ed:	68 71 02 00 00       	push   $0x271
f01108f2:	68 76 1a 12 f0       	push   $0xf0121a76
f01108f7:	e8 b3 f8 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01108fc:	e8 79 b8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110901:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110904:	74 17                	je     f011091d <test_kmalloc_bestfit2+0x5d7>
f0110906:	83 ec 04             	sub    $0x4,%esp
f0110909:	68 88 1a 12 f0       	push   $0xf0121a88
f011090e:	68 72 02 00 00       	push   $0x272
f0110913:	68 76 1a 12 f0       	push   $0xf0121a76
f0110918:	e8 92 f8 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011091d:	e8 2c a1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110922:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110925:	29 c2                	sub    %eax,%edx
f0110927:	89 d0                	mov    %edx,%eax
f0110929:	83 f8 02             	cmp    $0x2,%eax
f011092c:	74 17                	je     f0110945 <test_kmalloc_bestfit2+0x5ff>
f011092e:	83 ec 04             	sub    $0x4,%esp
f0110931:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0110936:	68 73 02 00 00       	push   $0x273
f011093b:	68 76 1a 12 f0       	push   $0xf0121a76
f0110940:	e8 6a f8 fe ff       	call   f01001af <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110945:	e8 04 a1 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011094a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011094d:	e8 28 b8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110952:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f0110955:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011095b:	83 ec 0c             	sub    $0xc,%esp
f011095e:	50                   	push   %eax
f011095f:	e8 7c c5 ff ff       	call   f010cee0 <kfree>
f0110964:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110967:	e8 0e b8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011096c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011096f:	74 17                	je     f0110988 <test_kmalloc_bestfit2+0x642>
f0110971:	83 ec 04             	sub    $0x4,%esp
f0110974:	68 88 1a 12 f0       	push   $0xf0121a88
f0110979:	68 79 02 00 00       	push   $0x279
f011097e:	68 76 1a 12 f0       	push   $0xf0121a76
f0110983:	e8 27 f8 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f0110988:	e8 c1 a0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011098d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110990:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110995:	74 17                	je     f01109ae <test_kmalloc_bestfit2+0x668>
f0110997:	83 ec 04             	sub    $0x4,%esp
f011099a:	68 3c 1d 12 f0       	push   $0xf0121d3c
f011099f:	68 7a 02 00 00       	push   $0x27a
f01109a4:	68 76 1a 12 f0       	push   $0xf0121a76
f01109a9:	e8 01 f8 fe ff       	call   f01001af <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01109ae:	e8 9b a0 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01109b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f01109b6:	e8 bf b7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01109bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01109be:	83 ec 0c             	sub    $0xc,%esp
f01109c1:	68 00 fc 2f 00       	push   $0x2ffc00
f01109c6:	e8 ca c4 ff ff       	call   f010ce95 <kmalloc>
f01109cb:	83 c4 10             	add    $0x10,%esp
f01109ce:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f01109d4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01109da:	89 c1                	mov    %eax,%ecx
f01109dc:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01109e3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01109e8:	0f b6 d0             	movzbl %al,%edx
f01109eb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01109ee:	01 d0                	add    %edx,%eax
f01109f0:	48                   	dec    %eax
f01109f1:	89 45 88             	mov    %eax,-0x78(%ebp)
f01109f4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01109f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01109fc:	f7 75 8c             	divl   -0x74(%ebp)
f01109ff:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110a02:	29 d0                	sub    %edx,%eax
f0110a04:	89 c3                	mov    %eax,%ebx
f0110a06:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0110a0d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110a12:	0f b6 c0             	movzbl %al,%eax
f0110a15:	c1 e0 04             	shl    $0x4,%eax
f0110a18:	89 c2                	mov    %eax,%edx
f0110a1a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110a1d:	01 d0                	add    %edx,%eax
f0110a1f:	48                   	dec    %eax
f0110a20:	89 45 80             	mov    %eax,-0x80(%ebp)
f0110a23:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110a26:	ba 00 00 00 00       	mov    $0x0,%edx
f0110a2b:	f7 75 84             	divl   -0x7c(%ebp)
f0110a2e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0110a31:	29 d0                	sub    %edx,%eax
f0110a33:	01 d8                	add    %ebx,%eax
f0110a35:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0110a3a:	39 c1                	cmp    %eax,%ecx
f0110a3c:	74 17                	je     f0110a55 <test_kmalloc_bestfit2+0x70f>
f0110a3e:	83 ec 04             	sub    $0x4,%esp
f0110a41:	68 88 1e 12 f0       	push   $0xf0121e88
f0110a46:	68 80 02 00 00       	push   $0x280
f0110a4b:	68 76 1a 12 f0       	push   $0xf0121a76
f0110a50:	e8 5a f7 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110a55:	e8 20 b7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110a5a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110a5d:	74 17                	je     f0110a76 <test_kmalloc_bestfit2+0x730>
f0110a5f:	83 ec 04             	sub    $0x4,%esp
f0110a62:	68 88 1a 12 f0       	push   $0xf0121a88
f0110a67:	68 81 02 00 00       	push   $0x281
f0110a6c:	68 76 1a 12 f0       	push   $0xf0121a76
f0110a71:	e8 39 f7 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f0110a76:	e8 d3 9f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110a7b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110a7e:	29 c2                	sub    %eax,%edx
f0110a80:	89 d0                	mov    %edx,%eax
f0110a82:	3d 00 03 00 00       	cmp    $0x300,%eax
f0110a87:	74 17                	je     f0110aa0 <test_kmalloc_bestfit2+0x75a>
f0110a89:	83 ec 04             	sub    $0x4,%esp
f0110a8c:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0110a91:	68 82 02 00 00       	push   $0x282
f0110a96:	68 76 1a 12 f0       	push   $0xf0121a76
f0110a9b:	e8 0f f7 fe ff       	call   f01001af <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0110aa0:	e8 a9 9f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110aa5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110aa8:	e8 cd b6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110aad:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0110ab0:	83 ec 0c             	sub    $0xc,%esp
f0110ab3:	68 00 18 20 00       	push   $0x201800
f0110ab8:	e8 d8 c3 ff ff       	call   f010ce95 <kmalloc>
f0110abd:	83 c4 10             	add    $0x10,%esp
f0110ac0:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110ac6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110acc:	89 c1                	mov    %eax,%ecx
f0110ace:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0110ad5:	10 00 00 
f0110ad8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110add:	0f b6 d0             	movzbl %al,%edx
f0110ae0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0110ae6:	01 d0                	add    %edx,%eax
f0110ae8:	48                   	dec    %eax
f0110ae9:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0110aef:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110af5:	ba 00 00 00 00       	mov    $0x0,%edx
f0110afa:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0110b00:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0110b06:	29 d0                	sub    %edx,%eax
f0110b08:	89 c3                	mov    %eax,%ebx
f0110b0a:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0110b11:	10 00 00 
f0110b14:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110b19:	0f b6 c0             	movzbl %al,%eax
f0110b1c:	c1 e0 04             	shl    $0x4,%eax
f0110b1f:	89 c2                	mov    %eax,%edx
f0110b21:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0110b27:	01 d0                	add    %edx,%eax
f0110b29:	48                   	dec    %eax
f0110b2a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0110b30:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110b36:	ba 00 00 00 00       	mov    $0x0,%edx
f0110b3b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0110b41:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110b47:	29 d0                	sub    %edx,%eax
f0110b49:	01 d8                	add    %ebx,%eax
f0110b4b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0110b50:	39 c1                	cmp    %eax,%ecx
f0110b52:	74 17                	je     f0110b6b <test_kmalloc_bestfit2+0x825>
f0110b54:	83 ec 04             	sub    $0x4,%esp
f0110b57:	68 88 1e 12 f0       	push   $0xf0121e88
f0110b5c:	68 88 02 00 00       	push   $0x288
f0110b61:	68 76 1a 12 f0       	push   $0xf0121a76
f0110b66:	e8 44 f6 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110b6b:	e8 0a b6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110b70:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110b73:	74 17                	je     f0110b8c <test_kmalloc_bestfit2+0x846>
f0110b75:	83 ec 04             	sub    $0x4,%esp
f0110b78:	68 88 1a 12 f0       	push   $0xf0121a88
f0110b7d:	68 89 02 00 00       	push   $0x289
f0110b82:	68 76 1a 12 f0       	push   $0xf0121a76
f0110b87:	e8 23 f6 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f0110b8c:	e8 bd 9e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110b91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110b94:	29 c2                	sub    %eax,%edx
f0110b96:	89 d0                	mov    %edx,%eax
f0110b98:	3d 02 02 00 00       	cmp    $0x202,%eax
f0110b9d:	74 17                	je     f0110bb6 <test_kmalloc_bestfit2+0x870>
f0110b9f:	83 ec 04             	sub    $0x4,%esp
f0110ba2:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0110ba7:	68 8a 02 00 00       	push   $0x28a
f0110bac:	68 76 1a 12 f0       	push   $0xf0121a76
f0110bb1:	e8 f9 f5 fe ff       	call   f01001af <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0110bb6:	e8 93 9e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110bbb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110bbe:	e8 b7 b5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110bc3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f0110bc6:	83 ec 0c             	sub    $0xc,%esp
f0110bc9:	68 00 fc 4f 00       	push   $0x4ffc00
f0110bce:	e8 c2 c2 ff ff       	call   f010ce95 <kmalloc>
f0110bd3:	83 c4 10             	add    $0x10,%esp
f0110bd6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f0110bdc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0110be2:	89 c1                	mov    %eax,%ecx
f0110be4:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0110beb:	10 00 00 
f0110bee:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110bf3:	0f b6 d0             	movzbl %al,%edx
f0110bf6:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110bfc:	01 d0                	add    %edx,%eax
f0110bfe:	48                   	dec    %eax
f0110bff:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0110c05:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110c0b:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c10:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0110c16:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110c1c:	29 d0                	sub    %edx,%eax
f0110c1e:	89 c3                	mov    %eax,%ebx
f0110c20:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0110c27:	10 00 00 
f0110c2a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110c2f:	0f b6 c0             	movzbl %al,%eax
f0110c32:	c1 e0 04             	shl    $0x4,%eax
f0110c35:	89 c2                	mov    %eax,%edx
f0110c37:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0110c3d:	01 d0                	add    %edx,%eax
f0110c3f:	48                   	dec    %eax
f0110c40:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0110c46:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110c4c:	ba 00 00 00 00       	mov    $0x0,%edx
f0110c51:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0110c57:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0110c5d:	29 d0                	sub    %edx,%eax
f0110c5f:	01 d8                	add    %ebx,%eax
f0110c61:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0110c66:	39 c1                	cmp    %eax,%ecx
f0110c68:	74 17                	je     f0110c81 <test_kmalloc_bestfit2+0x93b>
f0110c6a:	83 ec 04             	sub    $0x4,%esp
f0110c6d:	68 88 1e 12 f0       	push   $0xf0121e88
f0110c72:	68 90 02 00 00       	push   $0x290
f0110c77:	68 76 1a 12 f0       	push   $0xf0121a76
f0110c7c:	e8 2e f5 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110c81:	e8 f4 b4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110c86:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110c89:	74 17                	je     f0110ca2 <test_kmalloc_bestfit2+0x95c>
f0110c8b:	83 ec 04             	sub    $0x4,%esp
f0110c8e:	68 88 1a 12 f0       	push   $0xf0121a88
f0110c93:	68 91 02 00 00       	push   $0x291
f0110c98:	68 76 1a 12 f0       	push   $0xf0121a76
f0110c9d:	e8 0d f5 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0110ca2:	e8 a7 9d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110ca7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110caa:	29 c2                	sub    %eax,%edx
f0110cac:	89 d0                	mov    %edx,%eax
f0110cae:	3d 00 05 00 00       	cmp    $0x500,%eax
f0110cb3:	74 17                	je     f0110ccc <test_kmalloc_bestfit2+0x986>
f0110cb5:	83 ec 04             	sub    $0x4,%esp
f0110cb8:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0110cbd:	68 92 02 00 00       	push   $0x292
f0110cc2:	68 76 1a 12 f0       	push   $0xf0121a76
f0110cc7:	e8 e3 f4 fe ff       	call   f01001af <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110ccc:	e8 7d 9d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110cd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110cd4:	e8 a1 b4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110cd9:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[6]);
f0110cdc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0110ce2:	83 ec 0c             	sub    $0xc,%esp
f0110ce5:	50                   	push   %eax
f0110ce6:	e8 f5 c1 ff ff       	call   f010cee0 <kfree>
f0110ceb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110cee:	e8 87 b4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110cf3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110cf6:	74 17                	je     f0110d0f <test_kmalloc_bestfit2+0x9c9>
f0110cf8:	83 ec 04             	sub    $0x4,%esp
f0110cfb:	68 88 1a 12 f0       	push   $0xf0121a88
f0110d00:	68 98 02 00 00       	push   $0x298
f0110d05:	68 76 1a 12 f0       	push   $0xf0121a76
f0110d0a:	e8 a0 f4 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f0110d0f:	e8 3a 9d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110d14:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110d17:	3d 02 02 00 00       	cmp    $0x202,%eax
f0110d1c:	74 17                	je     f0110d35 <test_kmalloc_bestfit2+0x9ef>
f0110d1e:	83 ec 04             	sub    $0x4,%esp
f0110d21:	68 3c 1d 12 f0       	push   $0xf0121d3c
f0110d26:	68 99 02 00 00       	push   $0x299
f0110d2b:	68 76 1a 12 f0       	push   $0xf0121a76
f0110d30:	e8 7a f4 fe ff       	call   f01001af <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110d35:	e8 14 9d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110d3a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110d3d:	e8 38 b4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110d42:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f0110d45:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0110d4b:	83 ec 0c             	sub    $0xc,%esp
f0110d4e:	50                   	push   %eax
f0110d4f:	e8 8c c1 ff ff       	call   f010cee0 <kfree>
f0110d54:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110d57:	e8 1e b4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110d5c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110d5f:	74 17                	je     f0110d78 <test_kmalloc_bestfit2+0xa32>
f0110d61:	83 ec 04             	sub    $0x4,%esp
f0110d64:	68 88 1a 12 f0       	push   $0xf0121a88
f0110d69:	68 9f 02 00 00       	push   $0x29f
f0110d6e:	68 76 1a 12 f0       	push   $0xf0121a76
f0110d73:	e8 37 f4 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f0110d78:	e8 d1 9c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110d7d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0110d80:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110d85:	74 17                	je     f0110d9e <test_kmalloc_bestfit2+0xa58>
f0110d87:	83 ec 04             	sub    $0x4,%esp
f0110d8a:	68 68 1f 12 f0       	push   $0xf0121f68
f0110d8f:	68 a0 02 00 00       	push   $0x2a0
f0110d94:	68 76 1a 12 f0       	push   $0xf0121a76
f0110d99:	e8 11 f4 fe ff       	call   f01001af <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0110d9e:	e8 ab 9c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110da3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110da6:	e8 cf b3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110dab:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f0110dae:	83 ec 0c             	sub    $0xc,%esp
f0110db1:	68 00 fc 1f 00       	push   $0x1ffc00
f0110db6:	e8 da c0 ff ff       	call   f010ce95 <kmalloc>
f0110dbb:	83 c4 10             	add    $0x10,%esp
f0110dbe:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110dc4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0110dca:	89 c1                	mov    %eax,%ecx
f0110dcc:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0110dd3:	10 00 00 
f0110dd6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110ddb:	0f b6 d0             	movzbl %al,%edx
f0110dde:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0110de4:	01 d0                	add    %edx,%eax
f0110de6:	48                   	dec    %eax
f0110de7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0110ded:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110df3:	ba 00 00 00 00       	mov    $0x0,%edx
f0110df8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0110dfe:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0110e04:	29 d0                	sub    %edx,%eax
f0110e06:	89 c3                	mov    %eax,%ebx
f0110e08:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0110e0f:	10 00 00 
f0110e12:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110e17:	0f b6 c0             	movzbl %al,%eax
f0110e1a:	c1 e0 04             	shl    $0x4,%eax
f0110e1d:	89 c2                	mov    %eax,%edx
f0110e1f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0110e25:	01 d0                	add    %edx,%eax
f0110e27:	48                   	dec    %eax
f0110e28:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0110e2e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110e34:	ba 00 00 00 00       	mov    $0x0,%edx
f0110e39:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0110e3f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110e45:	29 d0                	sub    %edx,%eax
f0110e47:	01 d8                	add    %ebx,%eax
f0110e49:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0110e4e:	39 c1                	cmp    %eax,%ecx
f0110e50:	74 17                	je     f0110e69 <test_kmalloc_bestfit2+0xb23>
f0110e52:	83 ec 04             	sub    $0x4,%esp
f0110e55:	68 88 1e 12 f0       	push   $0xf0121e88
f0110e5a:	68 a6 02 00 00       	push   $0x2a6
f0110e5f:	68 76 1a 12 f0       	push   $0xf0121a76
f0110e64:	e8 46 f3 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110e69:	e8 0c b3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110e6e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110e71:	74 17                	je     f0110e8a <test_kmalloc_bestfit2+0xb44>
f0110e73:	83 ec 04             	sub    $0x4,%esp
f0110e76:	68 88 1a 12 f0       	push   $0xf0121a88
f0110e7b:	68 a7 02 00 00       	push   $0x2a7
f0110e80:	68 76 1a 12 f0       	push   $0xf0121a76
f0110e85:	e8 25 f3 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f0110e8a:	e8 bf 9b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110e8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110e92:	29 c2                	sub    %eax,%edx
f0110e94:	89 d0                	mov    %edx,%eax
f0110e96:	3d 00 02 00 00       	cmp    $0x200,%eax
f0110e9b:	74 17                	je     f0110eb4 <test_kmalloc_bestfit2+0xb6e>
f0110e9d:	83 ec 04             	sub    $0x4,%esp
f0110ea0:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0110ea5:	68 a8 02 00 00       	push   $0x2a8
f0110eaa:	68 76 1a 12 f0       	push   $0xf0121a76
f0110eaf:	e8 fb f2 fe ff       	call   f01001af <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f0110eb4:	e8 95 9b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110eb9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110ebc:	e8 b9 b2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110ec1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f0110ec4:	83 ec 0c             	sub    $0xc,%esp
f0110ec7:	68 00 18 00 00       	push   $0x1800
f0110ecc:	e8 c4 bf ff ff       	call   f010ce95 <kmalloc>
f0110ed1:	83 c4 10             	add    $0x10,%esp
f0110ed4:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0110eda:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0110ee0:	89 c1                	mov    %eax,%ecx
f0110ee2:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0110ee9:	10 00 00 
f0110eec:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110ef1:	0f b6 d0             	movzbl %al,%edx
f0110ef4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0110efa:	01 d0                	add    %edx,%eax
f0110efc:	48                   	dec    %eax
f0110efd:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0110f03:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110f09:	ba 00 00 00 00       	mov    $0x0,%edx
f0110f0e:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0110f14:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0110f1a:	29 d0                	sub    %edx,%eax
f0110f1c:	89 c3                	mov    %eax,%ebx
f0110f1e:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0110f25:	10 00 00 
f0110f28:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0110f2d:	0f b6 c0             	movzbl %al,%eax
f0110f30:	c1 e0 04             	shl    $0x4,%eax
f0110f33:	89 c2                	mov    %eax,%edx
f0110f35:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0110f3b:	01 d0                	add    %edx,%eax
f0110f3d:	48                   	dec    %eax
f0110f3e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0110f44:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110f4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0110f4f:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0110f55:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0110f5b:	29 d0                	sub    %edx,%eax
f0110f5d:	01 d8                	add    %ebx,%eax
f0110f5f:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0110f64:	39 c1                	cmp    %eax,%ecx
f0110f66:	74 17                	je     f0110f7f <test_kmalloc_bestfit2+0xc39>
f0110f68:	83 ec 04             	sub    $0x4,%esp
f0110f6b:	68 88 1e 12 f0       	push   $0xf0121e88
f0110f70:	68 ae 02 00 00       	push   $0x2ae
f0110f75:	68 76 1a 12 f0       	push   $0xf0121a76
f0110f7a:	e8 30 f2 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110f7f:	e8 f6 b1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110f84:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110f87:	74 17                	je     f0110fa0 <test_kmalloc_bestfit2+0xc5a>
f0110f89:	83 ec 04             	sub    $0x4,%esp
f0110f8c:	68 88 1a 12 f0       	push   $0xf0121a88
f0110f91:	68 af 02 00 00       	push   $0x2af
f0110f96:	68 76 1a 12 f0       	push   $0xf0121a76
f0110f9b:	e8 0f f2 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f0110fa0:	e8 a9 9a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110fa5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0110fa8:	29 c2                	sub    %eax,%edx
f0110faa:	89 d0                	mov    %edx,%eax
f0110fac:	83 f8 02             	cmp    $0x2,%eax
f0110faf:	74 17                	je     f0110fc8 <test_kmalloc_bestfit2+0xc82>
f0110fb1:	83 ec 04             	sub    $0x4,%esp
f0110fb4:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0110fb9:	68 b0 02 00 00       	push   $0x2b0
f0110fbe:	68 76 1a 12 f0       	push   $0xf0121a76
f0110fc3:	e8 e7 f1 fe ff       	call   f01001af <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0110fc8:	e8 81 9a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0110fcd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0110fd0:	e8 a5 b1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110fd5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0110fd8:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0110fde:	83 ec 0c             	sub    $0xc,%esp
f0110fe1:	50                   	push   %eax
f0110fe2:	e8 f9 be ff ff       	call   f010cee0 <kfree>
f0110fe7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0110fea:	e8 8b b1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0110fef:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0110ff2:	74 17                	je     f011100b <test_kmalloc_bestfit2+0xcc5>
f0110ff4:	83 ec 04             	sub    $0x4,%esp
f0110ff7:	68 88 1a 12 f0       	push   $0xf0121a88
f0110ffc:	68 b6 02 00 00       	push   $0x2b6
f0111001:	68 76 1a 12 f0       	push   $0xf0121a76
f0111006:	e8 a4 f1 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011100b:	e8 3e 9a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111010:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0111013:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111018:	74 17                	je     f0111031 <test_kmalloc_bestfit2+0xceb>
f011101a:	83 ec 04             	sub    $0x4,%esp
f011101d:	68 68 1f 12 f0       	push   $0xf0121f68
f0111022:	68 b7 02 00 00       	push   $0x2b7
f0111027:	68 76 1a 12 f0       	push   $0xf0121a76
f011102c:	e8 7e f1 fe ff       	call   f01001af <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111031:	e8 18 9a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111036:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f0111039:	e8 3c b1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011103e:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f0111041:	83 ec 0c             	sub    $0xc,%esp
f0111044:	68 00 fc 2f 00       	push   $0x2ffc00
f0111049:	e8 47 be ff ff       	call   f010ce95 <kmalloc>
f011104e:	83 c4 10             	add    $0x10,%esp
f0111051:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0111057:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011105d:	89 c1                	mov    %eax,%ecx
f011105f:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0111066:	10 00 00 
f0111069:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011106e:	0f b6 d0             	movzbl %al,%edx
f0111071:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111077:	01 d0                	add    %edx,%eax
f0111079:	48                   	dec    %eax
f011107a:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0111080:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111086:	ba 00 00 00 00       	mov    $0x0,%edx
f011108b:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0111091:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0111097:	29 d0                	sub    %edx,%eax
f0111099:	89 c3                	mov    %eax,%ebx
f011109b:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01110a2:	10 00 00 
f01110a5:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01110aa:	0f b6 c0             	movzbl %al,%eax
f01110ad:	c1 e0 04             	shl    $0x4,%eax
f01110b0:	89 c2                	mov    %eax,%edx
f01110b2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01110b8:	01 d0                	add    %edx,%eax
f01110ba:	48                   	dec    %eax
f01110bb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01110c1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01110c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01110cc:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01110d2:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01110d8:	29 d0                	sub    %edx,%eax
f01110da:	01 d8                	add    %ebx,%eax
f01110dc:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01110e1:	39 c1                	cmp    %eax,%ecx
f01110e3:	74 17                	je     f01110fc <test_kmalloc_bestfit2+0xdb6>
f01110e5:	83 ec 04             	sub    $0x4,%esp
f01110e8:	68 88 1e 12 f0       	push   $0xf0121e88
f01110ed:	68 bd 02 00 00       	push   $0x2bd
f01110f2:	68 76 1a 12 f0       	push   $0xf0121a76
f01110f7:	e8 b3 f0 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01110fc:	e8 79 b0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111101:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0111104:	74 17                	je     f011111d <test_kmalloc_bestfit2+0xdd7>
f0111106:	83 ec 04             	sub    $0x4,%esp
f0111109:	68 88 1a 12 f0       	push   $0xf0121a88
f011110e:	68 be 02 00 00       	push   $0x2be
f0111113:	68 76 1a 12 f0       	push   $0xf0121a76
f0111118:	e8 92 f0 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011111d:	e8 2c 99 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111122:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0111125:	29 c2                	sub    %eax,%edx
f0111127:	89 d0                	mov    %edx,%eax
f0111129:	3d 00 03 00 00       	cmp    $0x300,%eax
f011112e:	74 17                	je     f0111147 <test_kmalloc_bestfit2+0xe01>
f0111130:	83 ec 04             	sub    $0x4,%esp
f0111133:	68 68 1f 12 f0       	push   $0xf0121f68
f0111138:	68 bf 02 00 00       	push   $0x2bf
f011113d:	68 76 1a 12 f0       	push   $0xf0121a76
f0111142:	e8 68 f0 fe ff       	call   f01001af <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0111147:	e8 02 99 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011114c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011114f:	e8 26 b0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111154:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f0111157:	83 ec 0c             	sub    $0xc,%esp
f011115a:	68 00 fc 3f 00       	push   $0x3ffc00
f011115f:	e8 31 bd ff ff       	call   f010ce95 <kmalloc>
f0111164:	83 c4 10             	add    $0x10,%esp
f0111167:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011116d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111173:	89 c1                	mov    %eax,%ecx
f0111175:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011117c:	10 00 00 
f011117f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111184:	0f b6 d0             	movzbl %al,%edx
f0111187:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011118d:	01 d0                	add    %edx,%eax
f011118f:	48                   	dec    %eax
f0111190:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0111196:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011119c:	ba 00 00 00 00       	mov    $0x0,%edx
f01111a1:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01111a7:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01111ad:	29 d0                	sub    %edx,%eax
f01111af:	89 c3                	mov    %eax,%ebx
f01111b1:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01111b8:	10 00 00 
f01111bb:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01111c0:	0f b6 c0             	movzbl %al,%eax
f01111c3:	c1 e0 04             	shl    $0x4,%eax
f01111c6:	89 c2                	mov    %eax,%edx
f01111c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01111ce:	01 d0                	add    %edx,%eax
f01111d0:	48                   	dec    %eax
f01111d1:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01111d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01111dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01111e2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01111e8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01111ee:	29 d0                	sub    %edx,%eax
f01111f0:	01 d8                	add    %ebx,%eax
f01111f2:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01111f7:	39 c1                	cmp    %eax,%ecx
f01111f9:	74 17                	je     f0111212 <test_kmalloc_bestfit2+0xecc>
f01111fb:	83 ec 04             	sub    $0x4,%esp
f01111fe:	68 88 1e 12 f0       	push   $0xf0121e88
f0111203:	68 c5 02 00 00       	push   $0x2c5
f0111208:	68 76 1a 12 f0       	push   $0xf0121a76
f011120d:	e8 9d ef fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111212:	e8 63 af ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111217:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011121a:	74 17                	je     f0111233 <test_kmalloc_bestfit2+0xeed>
f011121c:	83 ec 04             	sub    $0x4,%esp
f011121f:	68 88 1a 12 f0       	push   $0xf0121a88
f0111224:	68 c6 02 00 00       	push   $0x2c6
f0111229:	68 76 1a 12 f0       	push   $0xf0121a76
f011122e:	e8 7c ef fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f0111233:	e8 16 98 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111238:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011123b:	29 c2                	sub    %eax,%edx
f011123d:	89 d0                	mov    %edx,%eax
f011123f:	3d 00 04 00 00       	cmp    $0x400,%eax
f0111244:	74 17                	je     f011125d <test_kmalloc_bestfit2+0xf17>
f0111246:	83 ec 04             	sub    $0x4,%esp
f0111249:	68 68 1f 12 f0       	push   $0xf0121f68
f011124e:	68 c7 02 00 00       	push   $0x2c7
f0111253:	68 76 1a 12 f0       	push   $0xf0121a76
f0111258:	e8 52 ef fe ff       	call   f01001af <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011125d:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0111264:	10 00 00 
f0111267:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011126c:	0f b6 d0             	movzbl %al,%edx
f011126f:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0111275:	01 d0                	add    %edx,%eax
f0111277:	48                   	dec    %eax
f0111278:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011127e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0111284:	ba 00 00 00 00       	mov    $0x0,%edx
f0111289:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011128f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0111295:	29 d0                	sub    %edx,%eax
f0111297:	89 c1                	mov    %eax,%ecx
f0111299:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01112a0:	10 00 00 
f01112a3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01112a8:	0f b6 c0             	movzbl %al,%eax
f01112ab:	c1 e0 04             	shl    $0x4,%eax
f01112ae:	89 c2                	mov    %eax,%edx
f01112b0:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01112b6:	01 d0                	add    %edx,%eax
f01112b8:	48                   	dec    %eax
f01112b9:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01112bf:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01112c5:	ba 00 00 00 00       	mov    $0x0,%edx
f01112ca:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01112d0:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01112d6:	29 d0                	sub    %edx,%eax
f01112d8:	01 c8                	add    %ecx,%eax
f01112da:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f01112df:	29 c2                	sub    %eax,%edx
f01112e1:	89 d0                	mov    %edx,%eax
f01112e3:	83 ec 0c             	sub    $0xc,%esp
f01112e6:	50                   	push   %eax
f01112e7:	e8 a9 bb ff ff       	call   f010ce95 <kmalloc>
f01112ec:	83 c4 10             	add    $0x10,%esp
f01112ef:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f01112f5:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01112fb:	85 c0                	test   %eax,%eax
f01112fd:	74 17                	je     f0111316 <test_kmalloc_bestfit2+0xfd0>
f01112ff:	83 ec 04             	sub    $0x4,%esp
f0111302:	68 b8 1f 12 f0       	push   $0xf0121fb8
f0111307:	68 cf 02 00 00       	push   $0x2cf
f011130c:	68 76 1a 12 f0       	push   $0xf0121a76
f0111311:	e8 99 ee fe ff       	call   f01001af <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f0111316:	83 ec 0c             	sub    $0xc,%esp
f0111319:	68 1c 20 12 f0       	push   $0xf012201c
f011131e:	e8 e1 5e ff ff       	call   f0107204 <cprintf>
f0111323:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0111326:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011132b:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011132e:	5b                   	pop    %ebx
f011132f:	5f                   	pop    %edi
f0111330:	5d                   	pop    %ebp
f0111331:	c3                   	ret    

f0111332 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f0111332:	55                   	push   %ebp
f0111333:	89 e5                	mov    %esp,%ebp
f0111335:	57                   	push   %edi
f0111336:	53                   	push   %ebx
f0111337:	81 ec 40 01 00 00    	sub    $0x140,%esp
	cprintf("==============================================\n");
f011133d:	83 ec 0c             	sub    $0xc,%esp
f0111340:	68 b8 19 12 f0       	push   $0xf01219b8
f0111345:	e8 ba 5e ff ff       	call   f0107204 <cprintf>
f011134a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011134d:	83 ec 0c             	sub    $0xc,%esp
f0111350:	68 e8 19 12 f0       	push   $0xf01219e8
f0111355:	e8 aa 5e ff ff       	call   f0107204 <cprintf>
f011135a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011135d:	83 ec 0c             	sub    $0xc,%esp
f0111360:	68 b8 19 12 f0       	push   $0xf01219b8
f0111365:	e8 9a 5e ff ff       	call   f0107204 <cprintf>
f011136a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011136d:	8d 95 c0 fe ff ff    	lea    -0x140(%ebp),%edx
f0111373:	b9 14 00 00 00       	mov    $0x14,%ecx
f0111378:	b8 00 00 00 00       	mov    $0x0,%eax
f011137d:	89 d7                	mov    %edx,%edi
f011137f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111381:	e8 c8 96 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111386:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111389:	e8 ec ad ff ff       	call   f010c17a <pf_calculate_free_frames>
f011138e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f0111391:	83 ec 0c             	sub    $0xc,%esp
f0111394:	68 00 fc 0f 00       	push   $0xffc00
f0111399:	e8 f7 ba ff ff       	call   f010ce95 <kmalloc>
f011139e:	83 c4 10             	add    $0x10,%esp
f01113a1:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01113a7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01113ad:	89 c1                	mov    %eax,%ecx
f01113af:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f01113b6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01113bb:	0f b6 d0             	movzbl %al,%edx
f01113be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113c1:	01 d0                	add    %edx,%eax
f01113c3:	48                   	dec    %eax
f01113c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01113c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01113ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01113cf:	f7 75 ec             	divl   -0x14(%ebp)
f01113d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01113d5:	29 d0                	sub    %edx,%eax
f01113d7:	89 c3                	mov    %eax,%ebx
f01113d9:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01113e0:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01113e5:	0f b6 c0             	movzbl %al,%eax
f01113e8:	c1 e0 04             	shl    $0x4,%eax
f01113eb:	89 c2                	mov    %eax,%edx
f01113ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01113f0:	01 d0                	add    %edx,%eax
f01113f2:	48                   	dec    %eax
f01113f3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01113f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01113f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01113fe:	f7 75 e4             	divl   -0x1c(%ebp)
f0111401:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111404:	29 d0                	sub    %edx,%eax
f0111406:	01 d8                	add    %ebx,%eax
f0111408:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011140d:	39 c1                	cmp    %eax,%ecx
f011140f:	74 17                	je     f0111428 <test_kmalloc_firstfit1+0xf6>
f0111411:	83 ec 04             	sub    $0x4,%esp
f0111414:	68 88 1e 12 f0       	push   $0xf0121e88
f0111419:	68 e7 02 00 00       	push   $0x2e7
f011141e:	68 76 1a 12 f0       	push   $0xf0121a76
f0111423:	e8 87 ed fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111428:	e8 4d ad ff ff       	call   f010c17a <pf_calculate_free_frames>
f011142d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111430:	74 17                	je     f0111449 <test_kmalloc_firstfit1+0x117>
f0111432:	83 ec 04             	sub    $0x4,%esp
f0111435:	68 88 1a 12 f0       	push   $0xf0121a88
f011143a:	68 e8 02 00 00       	push   $0x2e8
f011143f:	68 76 1a 12 f0       	push   $0xf0121a76
f0111444:	e8 66 ed fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111449:	e8 00 96 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011144e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111451:	29 c2                	sub    %eax,%edx
f0111453:	89 d0                	mov    %edx,%eax
f0111455:	3d 00 01 00 00       	cmp    $0x100,%eax
f011145a:	74 17                	je     f0111473 <test_kmalloc_firstfit1+0x141>
f011145c:	83 ec 04             	sub    $0x4,%esp
f011145f:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111464:	68 e9 02 00 00       	push   $0x2e9
f0111469:	68 76 1a 12 f0       	push   $0xf0121a76
f011146e:	e8 3c ed fe ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111473:	e8 d6 95 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111478:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011147b:	e8 fa ac ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111480:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f0111483:	83 ec 0c             	sub    $0xc,%esp
f0111486:	68 00 fc 0f 00       	push   $0xffc00
f011148b:	e8 05 ba ff ff       	call   f010ce95 <kmalloc>
f0111490:	83 c4 10             	add    $0x10,%esp
f0111493:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f0111499:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011149f:	89 c1                	mov    %eax,%ecx
f01114a1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01114a8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01114ad:	0f b6 d0             	movzbl %al,%edx
f01114b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01114b3:	01 d0                	add    %edx,%eax
f01114b5:	48                   	dec    %eax
f01114b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01114b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01114bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01114c1:	f7 75 dc             	divl   -0x24(%ebp)
f01114c4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01114c7:	29 d0                	sub    %edx,%eax
f01114c9:	89 c3                	mov    %eax,%ebx
f01114cb:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f01114d2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01114d7:	0f b6 c0             	movzbl %al,%eax
f01114da:	c1 e0 04             	shl    $0x4,%eax
f01114dd:	89 c2                	mov    %eax,%edx
f01114df:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01114e2:	01 d0                	add    %edx,%eax
f01114e4:	48                   	dec    %eax
f01114e5:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01114e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01114eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01114f0:	f7 75 d4             	divl   -0x2c(%ebp)
f01114f3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01114f6:	29 d0                	sub    %edx,%eax
f01114f8:	01 d8                	add    %ebx,%eax
f01114fa:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f01114ff:	39 c1                	cmp    %eax,%ecx
f0111501:	74 17                	je     f011151a <test_kmalloc_firstfit1+0x1e8>
f0111503:	83 ec 04             	sub    $0x4,%esp
f0111506:	68 88 1e 12 f0       	push   $0xf0121e88
f011150b:	68 ef 02 00 00       	push   $0x2ef
f0111510:	68 76 1a 12 f0       	push   $0xf0121a76
f0111515:	e8 95 ec fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011151a:	e8 5b ac ff ff       	call   f010c17a <pf_calculate_free_frames>
f011151f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111522:	74 17                	je     f011153b <test_kmalloc_firstfit1+0x209>
f0111524:	83 ec 04             	sub    $0x4,%esp
f0111527:	68 88 1a 12 f0       	push   $0xf0121a88
f011152c:	68 f0 02 00 00       	push   $0x2f0
f0111531:	68 76 1a 12 f0       	push   $0xf0121a76
f0111536:	e8 74 ec fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011153b:	e8 0e 95 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111540:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111543:	29 c2                	sub    %eax,%edx
f0111545:	89 d0                	mov    %edx,%eax
f0111547:	3d 00 01 00 00       	cmp    $0x100,%eax
f011154c:	74 17                	je     f0111565 <test_kmalloc_firstfit1+0x233>
f011154e:	83 ec 04             	sub    $0x4,%esp
f0111551:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111556:	68 f1 02 00 00       	push   $0x2f1
f011155b:	68 76 1a 12 f0       	push   $0xf0121a76
f0111560:	e8 4a ec fe ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111565:	e8 e4 94 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011156a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011156d:	e8 08 ac ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111572:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f0111575:	83 ec 0c             	sub    $0xc,%esp
f0111578:	68 00 fc 0f 00       	push   $0xffc00
f011157d:	e8 13 b9 ff ff       	call   f010ce95 <kmalloc>
f0111582:	83 c4 10             	add    $0x10,%esp
f0111585:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011158b:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0111591:	89 c1                	mov    %eax,%ecx
f0111593:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011159a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011159f:	0f b6 d0             	movzbl %al,%edx
f01115a2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01115a5:	01 d0                	add    %edx,%eax
f01115a7:	48                   	dec    %eax
f01115a8:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01115ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01115ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01115b3:	f7 75 cc             	divl   -0x34(%ebp)
f01115b6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01115b9:	29 d0                	sub    %edx,%eax
f01115bb:	89 c3                	mov    %eax,%ebx
f01115bd:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01115c4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01115c9:	0f b6 c0             	movzbl %al,%eax
f01115cc:	c1 e0 04             	shl    $0x4,%eax
f01115cf:	89 c2                	mov    %eax,%edx
f01115d1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01115d4:	01 d0                	add    %edx,%eax
f01115d6:	48                   	dec    %eax
f01115d7:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01115da:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01115dd:	ba 00 00 00 00       	mov    $0x0,%edx
f01115e2:	f7 75 c4             	divl   -0x3c(%ebp)
f01115e5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01115e8:	29 d0                	sub    %edx,%eax
f01115ea:	01 d8                	add    %ebx,%eax
f01115ec:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01115f1:	39 c1                	cmp    %eax,%ecx
f01115f3:	74 17                	je     f011160c <test_kmalloc_firstfit1+0x2da>
f01115f5:	83 ec 04             	sub    $0x4,%esp
f01115f8:	68 88 1e 12 f0       	push   $0xf0121e88
f01115fd:	68 f7 02 00 00       	push   $0x2f7
f0111602:	68 76 1a 12 f0       	push   $0xf0121a76
f0111607:	e8 a3 eb fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011160c:	e8 69 ab ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111611:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111614:	74 17                	je     f011162d <test_kmalloc_firstfit1+0x2fb>
f0111616:	83 ec 04             	sub    $0x4,%esp
f0111619:	68 88 1a 12 f0       	push   $0xf0121a88
f011161e:	68 f8 02 00 00       	push   $0x2f8
f0111623:	68 76 1a 12 f0       	push   $0xf0121a76
f0111628:	e8 82 eb fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011162d:	e8 1c 94 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111632:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111635:	29 c2                	sub    %eax,%edx
f0111637:	89 d0                	mov    %edx,%eax
f0111639:	3d 00 01 00 00       	cmp    $0x100,%eax
f011163e:	74 17                	je     f0111657 <test_kmalloc_firstfit1+0x325>
f0111640:	83 ec 04             	sub    $0x4,%esp
f0111643:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111648:	68 f9 02 00 00       	push   $0x2f9
f011164d:	68 76 1a 12 f0       	push   $0xf0121a76
f0111652:	e8 58 eb fe ff       	call   f01001af <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0111657:	e8 f2 93 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011165c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011165f:	e8 16 ab ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111664:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f0111667:	83 ec 0c             	sub    $0xc,%esp
f011166a:	68 00 fc 0f 00       	push   $0xffc00
f011166f:	e8 21 b8 ff ff       	call   f010ce95 <kmalloc>
f0111674:	83 c4 10             	add    $0x10,%esp
f0111677:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011167d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0111683:	89 c1                	mov    %eax,%ecx
f0111685:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011168c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111691:	0f b6 d0             	movzbl %al,%edx
f0111694:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111697:	01 d0                	add    %edx,%eax
f0111699:	48                   	dec    %eax
f011169a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011169d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01116a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01116a5:	f7 75 bc             	divl   -0x44(%ebp)
f01116a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01116ab:	29 d0                	sub    %edx,%eax
f01116ad:	89 c3                	mov    %eax,%ebx
f01116af:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01116b6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01116bb:	0f b6 c0             	movzbl %al,%eax
f01116be:	c1 e0 04             	shl    $0x4,%eax
f01116c1:	89 c2                	mov    %eax,%edx
f01116c3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01116c6:	01 d0                	add    %edx,%eax
f01116c8:	48                   	dec    %eax
f01116c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01116cc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01116cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01116d4:	f7 75 b4             	divl   -0x4c(%ebp)
f01116d7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01116da:	29 d0                	sub    %edx,%eax
f01116dc:	01 d8                	add    %ebx,%eax
f01116de:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01116e3:	39 c1                	cmp    %eax,%ecx
f01116e5:	74 17                	je     f01116fe <test_kmalloc_firstfit1+0x3cc>
f01116e7:	83 ec 04             	sub    $0x4,%esp
f01116ea:	68 88 1e 12 f0       	push   $0xf0121e88
f01116ef:	68 ff 02 00 00       	push   $0x2ff
f01116f4:	68 76 1a 12 f0       	push   $0xf0121a76
f01116f9:	e8 b1 ea fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01116fe:	e8 77 aa ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111703:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111706:	74 17                	je     f011171f <test_kmalloc_firstfit1+0x3ed>
f0111708:	83 ec 04             	sub    $0x4,%esp
f011170b:	68 88 1a 12 f0       	push   $0xf0121a88
f0111710:	68 00 03 00 00       	push   $0x300
f0111715:	68 76 1a 12 f0       	push   $0xf0121a76
f011171a:	e8 90 ea fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011171f:	e8 2a 93 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111724:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111727:	29 c2                	sub    %eax,%edx
f0111729:	89 d0                	mov    %edx,%eax
f011172b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111730:	74 17                	je     f0111749 <test_kmalloc_firstfit1+0x417>
f0111732:	83 ec 04             	sub    $0x4,%esp
f0111735:	68 b8 1e 12 f0       	push   $0xf0121eb8
f011173a:	68 01 03 00 00       	push   $0x301
f011173f:	68 76 1a 12 f0       	push   $0xf0121a76
f0111744:	e8 66 ea fe ff       	call   f01001af <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0111749:	e8 00 93 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011174e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111751:	e8 24 aa ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111756:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f0111759:	83 ec 0c             	sub    $0xc,%esp
f011175c:	68 00 fc 1f 00       	push   $0x1ffc00
f0111761:	e8 2f b7 ff ff       	call   f010ce95 <kmalloc>
f0111766:	83 c4 10             	add    $0x10,%esp
f0111769:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011176f:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0111775:	89 c1                	mov    %eax,%ecx
f0111777:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011177e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111783:	0f b6 d0             	movzbl %al,%edx
f0111786:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111789:	01 d0                	add    %edx,%eax
f011178b:	48                   	dec    %eax
f011178c:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011178f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111792:	ba 00 00 00 00       	mov    $0x0,%edx
f0111797:	f7 75 ac             	divl   -0x54(%ebp)
f011179a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011179d:	29 d0                	sub    %edx,%eax
f011179f:	89 c3                	mov    %eax,%ebx
f01117a1:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01117a8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01117ad:	0f b6 c0             	movzbl %al,%eax
f01117b0:	c1 e0 04             	shl    $0x4,%eax
f01117b3:	89 c2                	mov    %eax,%edx
f01117b5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01117b8:	01 d0                	add    %edx,%eax
f01117ba:	48                   	dec    %eax
f01117bb:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01117be:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01117c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01117c6:	f7 75 a4             	divl   -0x5c(%ebp)
f01117c9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01117cc:	29 d0                	sub    %edx,%eax
f01117ce:	01 d8                	add    %ebx,%eax
f01117d0:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01117d5:	39 c1                	cmp    %eax,%ecx
f01117d7:	74 17                	je     f01117f0 <test_kmalloc_firstfit1+0x4be>
f01117d9:	83 ec 04             	sub    $0x4,%esp
f01117dc:	68 88 1e 12 f0       	push   $0xf0121e88
f01117e1:	68 07 03 00 00       	push   $0x307
f01117e6:	68 76 1a 12 f0       	push   $0xf0121a76
f01117eb:	e8 bf e9 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01117f0:	e8 85 a9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01117f5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01117f8:	74 17                	je     f0111811 <test_kmalloc_firstfit1+0x4df>
f01117fa:	83 ec 04             	sub    $0x4,%esp
f01117fd:	68 88 1a 12 f0       	push   $0xf0121a88
f0111802:	68 08 03 00 00       	push   $0x308
f0111807:	68 76 1a 12 f0       	push   $0xf0121a76
f011180c:	e8 9e e9 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0111811:	e8 38 92 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111816:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111819:	29 c2                	sub    %eax,%edx
f011181b:	89 d0                	mov    %edx,%eax
f011181d:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111822:	74 17                	je     f011183b <test_kmalloc_firstfit1+0x509>
f0111824:	83 ec 04             	sub    $0x4,%esp
f0111827:	68 b8 1e 12 f0       	push   $0xf0121eb8
f011182c:	68 09 03 00 00       	push   $0x309
f0111831:	68 76 1a 12 f0       	push   $0xf0121a76
f0111836:	e8 74 e9 fe ff       	call   f01001af <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011183b:	e8 0e 92 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111840:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111843:	e8 32 a9 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111848:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011184b:	83 ec 0c             	sub    $0xc,%esp
f011184e:	68 00 fc 1f 00       	push   $0x1ffc00
f0111853:	e8 3d b6 ff ff       	call   f010ce95 <kmalloc>
f0111858:	83 c4 10             	add    $0x10,%esp
f011185b:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f0111861:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0111867:	89 c1                	mov    %eax,%ecx
f0111869:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0111870:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111875:	0f b6 d0             	movzbl %al,%edx
f0111878:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011187b:	01 d0                	add    %edx,%eax
f011187d:	48                   	dec    %eax
f011187e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0111881:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111884:	ba 00 00 00 00       	mov    $0x0,%edx
f0111889:	f7 75 9c             	divl   -0x64(%ebp)
f011188c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011188f:	29 d0                	sub    %edx,%eax
f0111891:	89 c3                	mov    %eax,%ebx
f0111893:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011189a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011189f:	0f b6 c0             	movzbl %al,%eax
f01118a2:	c1 e0 04             	shl    $0x4,%eax
f01118a5:	89 c2                	mov    %eax,%edx
f01118a7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01118aa:	01 d0                	add    %edx,%eax
f01118ac:	48                   	dec    %eax
f01118ad:	89 45 90             	mov    %eax,-0x70(%ebp)
f01118b0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01118b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01118b8:	f7 75 94             	divl   -0x6c(%ebp)
f01118bb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01118be:	29 d0                	sub    %edx,%eax
f01118c0:	01 d8                	add    %ebx,%eax
f01118c2:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f01118c7:	39 c1                	cmp    %eax,%ecx
f01118c9:	74 17                	je     f01118e2 <test_kmalloc_firstfit1+0x5b0>
f01118cb:	83 ec 04             	sub    $0x4,%esp
f01118ce:	68 88 1e 12 f0       	push   $0xf0121e88
f01118d3:	68 0f 03 00 00       	push   $0x30f
f01118d8:	68 76 1a 12 f0       	push   $0xf0121a76
f01118dd:	e8 cd e8 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01118e2:	e8 93 a8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01118e7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01118ea:	74 17                	je     f0111903 <test_kmalloc_firstfit1+0x5d1>
f01118ec:	83 ec 04             	sub    $0x4,%esp
f01118ef:	68 88 1a 12 f0       	push   $0xf0121a88
f01118f4:	68 10 03 00 00       	push   $0x310
f01118f9:	68 76 1a 12 f0       	push   $0xf0121a76
f01118fe:	e8 ac e8 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f0111903:	e8 46 91 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111908:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011190b:	29 c2                	sub    %eax,%edx
f011190d:	89 d0                	mov    %edx,%eax
f011190f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111914:	74 17                	je     f011192d <test_kmalloc_firstfit1+0x5fb>
f0111916:	83 ec 04             	sub    $0x4,%esp
f0111919:	68 b8 1e 12 f0       	push   $0xf0121eb8
f011191e:	68 11 03 00 00       	push   $0x311
f0111923:	68 76 1a 12 f0       	push   $0xf0121a76
f0111928:	e8 82 e8 fe ff       	call   f01001af <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011192d:	e8 1c 91 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111932:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111935:	e8 40 a8 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011193a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011193d:	83 ec 0c             	sub    $0xc,%esp
f0111940:	68 00 fc 2f 00       	push   $0x2ffc00
f0111945:	e8 4b b5 ff ff       	call   f010ce95 <kmalloc>
f011194a:	83 c4 10             	add    $0x10,%esp
f011194d:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0111953:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111959:	89 c1                	mov    %eax,%ecx
f011195b:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0111962:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111967:	0f b6 d0             	movzbl %al,%edx
f011196a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011196d:	01 d0                	add    %edx,%eax
f011196f:	48                   	dec    %eax
f0111970:	89 45 88             	mov    %eax,-0x78(%ebp)
f0111973:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111976:	ba 00 00 00 00       	mov    $0x0,%edx
f011197b:	f7 75 8c             	divl   -0x74(%ebp)
f011197e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0111981:	29 d0                	sub    %edx,%eax
f0111983:	89 c3                	mov    %eax,%ebx
f0111985:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011198c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111991:	0f b6 c0             	movzbl %al,%eax
f0111994:	c1 e0 04             	shl    $0x4,%eax
f0111997:	89 c2                	mov    %eax,%edx
f0111999:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011199c:	01 d0                	add    %edx,%eax
f011199e:	48                   	dec    %eax
f011199f:	89 45 80             	mov    %eax,-0x80(%ebp)
f01119a2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01119a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01119aa:	f7 75 84             	divl   -0x7c(%ebp)
f01119ad:	8b 45 80             	mov    -0x80(%ebp),%eax
f01119b0:	29 d0                	sub    %edx,%eax
f01119b2:	01 d8                	add    %ebx,%eax
f01119b4:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01119b9:	39 c1                	cmp    %eax,%ecx
f01119bb:	74 17                	je     f01119d4 <test_kmalloc_firstfit1+0x6a2>
f01119bd:	83 ec 04             	sub    $0x4,%esp
f01119c0:	68 88 1e 12 f0       	push   $0xf0121e88
f01119c5:	68 17 03 00 00       	push   $0x317
f01119ca:	68 76 1a 12 f0       	push   $0xf0121a76
f01119cf:	e8 db e7 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01119d4:	e8 a1 a7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01119d9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01119dc:	74 17                	je     f01119f5 <test_kmalloc_firstfit1+0x6c3>
f01119de:	83 ec 04             	sub    $0x4,%esp
f01119e1:	68 88 1a 12 f0       	push   $0xf0121a88
f01119e6:	68 18 03 00 00       	push   $0x318
f01119eb:	68 76 1a 12 f0       	push   $0xf0121a76
f01119f0:	e8 ba e7 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f01119f5:	e8 54 90 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01119fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01119fd:	29 c2                	sub    %eax,%edx
f01119ff:	89 d0                	mov    %edx,%eax
f0111a01:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111a06:	74 17                	je     f0111a1f <test_kmalloc_firstfit1+0x6ed>
f0111a08:	83 ec 04             	sub    $0x4,%esp
f0111a0b:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111a10:	68 19 03 00 00       	push   $0x319
f0111a15:	68 76 1a 12 f0       	push   $0xf0121a76
f0111a1a:	e8 90 e7 fe ff       	call   f01001af <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0111a1f:	e8 2a 90 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111a24:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111a27:	e8 4e a7 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111a2c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f0111a2f:	83 ec 0c             	sub    $0xc,%esp
f0111a32:	68 00 fc 2f 00       	push   $0x2ffc00
f0111a37:	e8 59 b4 ff ff       	call   f010ce95 <kmalloc>
f0111a3c:	83 c4 10             	add    $0x10,%esp
f0111a3f:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0111a45:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0111a4b:	89 c1                	mov    %eax,%ecx
f0111a4d:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0111a54:	10 00 00 
f0111a57:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111a5c:	0f b6 d0             	movzbl %al,%edx
f0111a5f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0111a65:	01 d0                	add    %edx,%eax
f0111a67:	48                   	dec    %eax
f0111a68:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0111a6e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111a74:	ba 00 00 00 00       	mov    $0x0,%edx
f0111a79:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0111a7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111a85:	29 d0                	sub    %edx,%eax
f0111a87:	89 c3                	mov    %eax,%ebx
f0111a89:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0111a90:	10 00 00 
f0111a93:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111a98:	0f b6 c0             	movzbl %al,%eax
f0111a9b:	c1 e0 04             	shl    $0x4,%eax
f0111a9e:	89 c2                	mov    %eax,%edx
f0111aa0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111aa6:	01 d0                	add    %edx,%eax
f0111aa8:	48                   	dec    %eax
f0111aa9:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0111aaf:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111ab5:	ba 00 00 00 00       	mov    $0x0,%edx
f0111aba:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0111ac0:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111ac6:	29 d0                	sub    %edx,%eax
f0111ac8:	01 d8                	add    %ebx,%eax
f0111aca:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0111acf:	39 c1                	cmp    %eax,%ecx
f0111ad1:	74 17                	je     f0111aea <test_kmalloc_firstfit1+0x7b8>
f0111ad3:	83 ec 04             	sub    $0x4,%esp
f0111ad6:	68 88 1e 12 f0       	push   $0xf0121e88
f0111adb:	68 1f 03 00 00       	push   $0x31f
f0111ae0:	68 76 1a 12 f0       	push   $0xf0121a76
f0111ae5:	e8 c5 e6 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111aea:	e8 8b a6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111aef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111af2:	74 17                	je     f0111b0b <test_kmalloc_firstfit1+0x7d9>
f0111af4:	83 ec 04             	sub    $0x4,%esp
f0111af7:	68 88 1a 12 f0       	push   $0xf0121a88
f0111afc:	68 20 03 00 00       	push   $0x320
f0111b01:	68 76 1a 12 f0       	push   $0xf0121a76
f0111b06:	e8 a4 e6 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f0111b0b:	e8 3e 8f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111b10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111b13:	29 c2                	sub    %eax,%edx
f0111b15:	89 d0                	mov    %edx,%eax
f0111b17:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111b1c:	74 17                	je     f0111b35 <test_kmalloc_firstfit1+0x803>
f0111b1e:	83 ec 04             	sub    $0x4,%esp
f0111b21:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111b26:	68 21 03 00 00       	push   $0x321
f0111b2b:	68 76 1a 12 f0       	push   $0xf0121a76
f0111b30:	e8 7a e6 fe ff       	call   f01001af <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111b35:	e8 14 8f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111b3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111b3d:	e8 38 a6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111b42:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0111b45:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0111b4b:	83 ec 0c             	sub    $0xc,%esp
f0111b4e:	50                   	push   %eax
f0111b4f:	e8 8c b3 ff ff       	call   f010cee0 <kfree>
f0111b54:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111b57:	e8 1e a6 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111b5c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111b5f:	74 17                	je     f0111b78 <test_kmalloc_firstfit1+0x846>
f0111b61:	83 ec 04             	sub    $0x4,%esp
f0111b64:	68 88 1a 12 f0       	push   $0xf0121a88
f0111b69:	68 2a 03 00 00       	push   $0x32a
f0111b6e:	68 76 1a 12 f0       	push   $0xf0121a76
f0111b73:	e8 37 e6 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0111b78:	e8 d1 8e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111b7d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111b80:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111b85:	74 17                	je     f0111b9e <test_kmalloc_firstfit1+0x86c>
f0111b87:	83 ec 04             	sub    $0x4,%esp
f0111b8a:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0111b8f:	68 2b 03 00 00       	push   $0x32b
f0111b94:	68 76 1a 12 f0       	push   $0xf0121a76
f0111b99:	e8 11 e6 fe ff       	call   f01001af <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111b9e:	e8 ab 8e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111ba6:	e8 cf a5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f0111bae:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0111bb4:	83 ec 0c             	sub    $0xc,%esp
f0111bb7:	50                   	push   %eax
f0111bb8:	e8 23 b3 ff ff       	call   f010cee0 <kfree>
f0111bbd:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111bc0:	e8 b5 a5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111bc5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111bc8:	74 17                	je     f0111be1 <test_kmalloc_firstfit1+0x8af>
f0111bca:	83 ec 04             	sub    $0x4,%esp
f0111bcd:	68 88 1a 12 f0       	push   $0xf0121a88
f0111bd2:	68 31 03 00 00       	push   $0x331
f0111bd7:	68 76 1a 12 f0       	push   $0xf0121a76
f0111bdc:	e8 ce e5 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0111be1:	e8 68 8e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111be6:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111be9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0111bee:	74 17                	je     f0111c07 <test_kmalloc_firstfit1+0x8d5>
f0111bf0:	83 ec 04             	sub    $0x4,%esp
f0111bf3:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0111bf8:	68 32 03 00 00       	push   $0x332
f0111bfd:	68 76 1a 12 f0       	push   $0xf0121a76
f0111c02:	e8 a8 e5 fe ff       	call   f01001af <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0111c07:	e8 42 8e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111c0c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111c0f:	e8 66 a5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111c14:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f0111c17:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0111c1d:	83 ec 0c             	sub    $0xc,%esp
f0111c20:	50                   	push   %eax
f0111c21:	e8 ba b2 ff ff       	call   f010cee0 <kfree>
f0111c26:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111c29:	e8 4c a5 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111c2e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111c31:	74 17                	je     f0111c4a <test_kmalloc_firstfit1+0x918>
f0111c33:	83 ec 04             	sub    $0x4,%esp
f0111c36:	68 88 1a 12 f0       	push   $0xf0121a88
f0111c3b:	68 38 03 00 00       	push   $0x338
f0111c40:	68 76 1a 12 f0       	push   $0xf0121a76
f0111c45:	e8 65 e5 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f0111c4a:	e8 ff 8d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111c4f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111c52:	3d 00 03 00 00       	cmp    $0x300,%eax
f0111c57:	74 17                	je     f0111c70 <test_kmalloc_firstfit1+0x93e>
f0111c59:	83 ec 04             	sub    $0x4,%esp
f0111c5c:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0111c61:	68 39 03 00 00       	push   $0x339
f0111c66:	68 76 1a 12 f0       	push   $0xf0121a76
f0111c6b:	e8 3f e5 fe ff       	call   f01001af <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0111c70:	e8 d9 8d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111c75:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111c78:	e8 fd a4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f0111c80:	83 ec 0c             	sub    $0xc,%esp
f0111c83:	68 00 fc 07 00       	push   $0x7fc00
f0111c88:	e8 08 b2 ff ff       	call   f010ce95 <kmalloc>
f0111c8d:	83 c4 10             	add    $0x10,%esp
f0111c90:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f0111c96:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0111c9c:	89 c1                	mov    %eax,%ecx
f0111c9e:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0111ca5:	10 00 00 
f0111ca8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111cad:	0f b6 d0             	movzbl %al,%edx
f0111cb0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0111cb6:	01 d0                	add    %edx,%eax
f0111cb8:	48                   	dec    %eax
f0111cb9:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0111cbf:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0111cc5:	ba 00 00 00 00       	mov    $0x0,%edx
f0111cca:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0111cd0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0111cd6:	29 d0                	sub    %edx,%eax
f0111cd8:	89 c3                	mov    %eax,%ebx
f0111cda:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0111ce1:	10 00 00 
f0111ce4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111ce9:	0f b6 c0             	movzbl %al,%eax
f0111cec:	c1 e0 04             	shl    $0x4,%eax
f0111cef:	89 c2                	mov    %eax,%edx
f0111cf1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0111cf7:	01 d0                	add    %edx,%eax
f0111cf9:	48                   	dec    %eax
f0111cfa:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0111d00:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111d06:	ba 00 00 00 00       	mov    $0x0,%edx
f0111d0b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0111d11:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0111d17:	29 d0                	sub    %edx,%eax
f0111d19:	01 d8                	add    %ebx,%eax
f0111d1b:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f0111d20:	39 c1                	cmp    %eax,%ecx
f0111d22:	74 17                	je     f0111d3b <test_kmalloc_firstfit1+0xa09>
f0111d24:	83 ec 04             	sub    $0x4,%esp
f0111d27:	68 88 1e 12 f0       	push   $0xf0121e88
f0111d2c:	68 42 03 00 00       	push   $0x342
f0111d31:	68 76 1a 12 f0       	push   $0xf0121a76
f0111d36:	e8 74 e4 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111d3b:	e8 3a a4 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111d40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111d43:	74 17                	je     f0111d5c <test_kmalloc_firstfit1+0xa2a>
f0111d45:	83 ec 04             	sub    $0x4,%esp
f0111d48:	68 88 1a 12 f0       	push   $0xf0121a88
f0111d4d:	68 43 03 00 00       	push   $0x343
f0111d52:	68 76 1a 12 f0       	push   $0xf0121a76
f0111d57:	e8 53 e4 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f0111d5c:	e8 ed 8c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111d61:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111d64:	29 c2                	sub    %eax,%edx
f0111d66:	89 d0                	mov    %edx,%eax
f0111d68:	3d 80 00 00 00       	cmp    $0x80,%eax
f0111d6d:	74 17                	je     f0111d86 <test_kmalloc_firstfit1+0xa54>
f0111d6f:	83 ec 04             	sub    $0x4,%esp
f0111d72:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111d77:	68 44 03 00 00       	push   $0x344
f0111d7c:	68 76 1a 12 f0       	push   $0xf0121a76
f0111d81:	e8 29 e4 fe ff       	call   f01001af <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f0111d86:	e8 c3 8c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111d8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111d8e:	e8 e7 a3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111d93:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0111d96:	83 ec 0c             	sub    $0xc,%esp
f0111d99:	68 00 fc 0f 00       	push   $0xffc00
f0111d9e:	e8 f2 b0 ff ff       	call   f010ce95 <kmalloc>
f0111da3:	83 c4 10             	add    $0x10,%esp
f0111da6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f0111dac:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0111db2:	89 c1                	mov    %eax,%ecx
f0111db4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0111dbb:	10 00 00 
f0111dbe:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111dc3:	0f b6 d0             	movzbl %al,%edx
f0111dc6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0111dcc:	01 d0                	add    %edx,%eax
f0111dce:	48                   	dec    %eax
f0111dcf:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0111dd5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111ddb:	ba 00 00 00 00       	mov    $0x0,%edx
f0111de0:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0111de6:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0111dec:	29 d0                	sub    %edx,%eax
f0111dee:	89 c3                	mov    %eax,%ebx
f0111df0:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0111df7:	10 00 00 
f0111dfa:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111dff:	0f b6 c0             	movzbl %al,%eax
f0111e02:	c1 e0 04             	shl    $0x4,%eax
f0111e05:	89 c2                	mov    %eax,%edx
f0111e07:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0111e0d:	01 d0                	add    %edx,%eax
f0111e0f:	48                   	dec    %eax
f0111e10:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0111e16:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111e1c:	ba 00 00 00 00       	mov    $0x0,%edx
f0111e21:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0111e27:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0111e2d:	29 d0                	sub    %edx,%eax
f0111e2f:	01 d8                	add    %ebx,%eax
f0111e31:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0111e36:	39 c1                	cmp    %eax,%ecx
f0111e38:	74 17                	je     f0111e51 <test_kmalloc_firstfit1+0xb1f>
f0111e3a:	83 ec 04             	sub    $0x4,%esp
f0111e3d:	68 88 1e 12 f0       	push   $0xf0121e88
f0111e42:	68 4a 03 00 00       	push   $0x34a
f0111e47:	68 76 1a 12 f0       	push   $0xf0121a76
f0111e4c:	e8 5e e3 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111e51:	e8 24 a3 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111e56:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111e59:	74 17                	je     f0111e72 <test_kmalloc_firstfit1+0xb40>
f0111e5b:	83 ec 04             	sub    $0x4,%esp
f0111e5e:	68 88 1a 12 f0       	push   $0xf0121a88
f0111e63:	68 4b 03 00 00       	push   $0x34b
f0111e68:	68 76 1a 12 f0       	push   $0xf0121a76
f0111e6d:	e8 3d e3 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0111e72:	e8 d7 8b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111e77:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111e7a:	29 c2                	sub    %eax,%edx
f0111e7c:	89 d0                	mov    %edx,%eax
f0111e7e:	3d 00 01 00 00       	cmp    $0x100,%eax
f0111e83:	74 17                	je     f0111e9c <test_kmalloc_firstfit1+0xb6a>
f0111e85:	83 ec 04             	sub    $0x4,%esp
f0111e88:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111e8d:	68 4c 03 00 00       	push   $0x34c
f0111e92:	68 76 1a 12 f0       	push   $0xf0121a76
f0111e97:	e8 13 e3 fe ff       	call   f01001af <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f0111e9c:	e8 ad 8b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111ea1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111ea4:	e8 d1 a2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111ea9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f0111eac:	83 ec 0c             	sub    $0xc,%esp
f0111eaf:	68 00 fc 03 00       	push   $0x3fc00
f0111eb4:	e8 dc af ff ff       	call   f010ce95 <kmalloc>
f0111eb9:	83 c4 10             	add    $0x10,%esp
f0111ebc:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f0111ec2:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0111ec8:	89 c1                	mov    %eax,%ecx
f0111eca:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0111ed1:	10 00 00 
f0111ed4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111ed9:	0f b6 d0             	movzbl %al,%edx
f0111edc:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0111ee2:	01 d0                	add    %edx,%eax
f0111ee4:	48                   	dec    %eax
f0111ee5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0111eeb:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111ef1:	ba 00 00 00 00       	mov    $0x0,%edx
f0111ef6:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0111efc:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0111f02:	29 d0                	sub    %edx,%eax
f0111f04:	89 c3                	mov    %eax,%ebx
f0111f06:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0111f0d:	10 00 00 
f0111f10:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111f15:	0f b6 c0             	movzbl %al,%eax
f0111f18:	c1 e0 04             	shl    $0x4,%eax
f0111f1b:	89 c2                	mov    %eax,%edx
f0111f1d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0111f23:	01 d0                	add    %edx,%eax
f0111f25:	48                   	dec    %eax
f0111f26:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0111f2c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0111f32:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f37:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0111f3d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0111f43:	29 d0                	sub    %edx,%eax
f0111f45:	01 d8                	add    %ebx,%eax
f0111f47:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f0111f4c:	39 c1                	cmp    %eax,%ecx
f0111f4e:	74 17                	je     f0111f67 <test_kmalloc_firstfit1+0xc35>
f0111f50:	83 ec 04             	sub    $0x4,%esp
f0111f53:	68 88 1e 12 f0       	push   $0xf0121e88
f0111f58:	68 53 03 00 00       	push   $0x353
f0111f5d:	68 76 1a 12 f0       	push   $0xf0121a76
f0111f62:	e8 48 e2 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0111f67:	e8 0e a2 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111f6c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0111f6f:	74 17                	je     f0111f88 <test_kmalloc_firstfit1+0xc56>
f0111f71:	83 ec 04             	sub    $0x4,%esp
f0111f74:	68 88 1a 12 f0       	push   $0xf0121a88
f0111f79:	68 54 03 00 00       	push   $0x354
f0111f7e:	68 76 1a 12 f0       	push   $0xf0121a76
f0111f83:	e8 27 e2 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f0111f88:	e8 c1 8a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111f8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0111f90:	29 c2                	sub    %eax,%edx
f0111f92:	89 d0                	mov    %edx,%eax
f0111f94:	83 f8 40             	cmp    $0x40,%eax
f0111f97:	74 17                	je     f0111fb0 <test_kmalloc_firstfit1+0xc7e>
f0111f99:	83 ec 04             	sub    $0x4,%esp
f0111f9c:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0111fa1:	68 55 03 00 00       	push   $0x355
f0111fa6:	68 76 1a 12 f0       	push   $0xf0121a76
f0111fab:	e8 ff e1 fe ff       	call   f01001af <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0111fb0:	e8 99 8a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0111fb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0111fb8:	e8 bd a1 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0111fbd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f0111fc0:	83 ec 0c             	sub    $0xc,%esp
f0111fc3:	68 00 00 20 00       	push   $0x200000
f0111fc8:	e8 c8 ae ff ff       	call   f010ce95 <kmalloc>
f0111fcd:	83 c4 10             	add    $0x10,%esp
f0111fd0:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0111fd6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0111fdc:	89 c1                	mov    %eax,%ecx
f0111fde:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0111fe5:	10 00 00 
f0111fe8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0111fed:	0f b6 d0             	movzbl %al,%edx
f0111ff0:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0111ff6:	01 d0                	add    %edx,%eax
f0111ff8:	48                   	dec    %eax
f0111ff9:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0111fff:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112005:	ba 00 00 00 00       	mov    $0x0,%edx
f011200a:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0112010:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0112016:	29 d0                	sub    %edx,%eax
f0112018:	89 c3                	mov    %eax,%ebx
f011201a:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0112021:	10 00 00 
f0112024:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112029:	0f b6 c0             	movzbl %al,%eax
f011202c:	c1 e0 04             	shl    $0x4,%eax
f011202f:	89 c2                	mov    %eax,%edx
f0112031:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0112037:	01 d0                	add    %edx,%eax
f0112039:	48                   	dec    %eax
f011203a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0112040:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112046:	ba 00 00 00 00       	mov    $0x0,%edx
f011204b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0112051:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0112057:	29 d0                	sub    %edx,%eax
f0112059:	01 d8                	add    %ebx,%eax
f011205b:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f0112060:	39 c1                	cmp    %eax,%ecx
f0112062:	74 17                	je     f011207b <test_kmalloc_firstfit1+0xd49>
f0112064:	83 ec 04             	sub    $0x4,%esp
f0112067:	68 88 1e 12 f0       	push   $0xf0121e88
f011206c:	68 5b 03 00 00       	push   $0x35b
f0112071:	68 76 1a 12 f0       	push   $0xf0121a76
f0112076:	e8 34 e1 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011207b:	e8 ce 89 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112080:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0112083:	29 c2                	sub    %eax,%edx
f0112085:	89 d0                	mov    %edx,%eax
f0112087:	3d 00 02 00 00       	cmp    $0x200,%eax
f011208c:	74 17                	je     f01120a5 <test_kmalloc_firstfit1+0xd73>
f011208e:	83 ec 04             	sub    $0x4,%esp
f0112091:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112096:	68 5c 03 00 00       	push   $0x35c
f011209b:	68 76 1a 12 f0       	push   $0xf0121a76
f01120a0:	e8 0a e1 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01120a5:	e8 d0 a0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01120aa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01120ad:	74 17                	je     f01120c6 <test_kmalloc_firstfit1+0xd94>
f01120af:	83 ec 04             	sub    $0x4,%esp
f01120b2:	68 88 1a 12 f0       	push   $0xf0121a88
f01120b7:	68 5d 03 00 00       	push   $0x35d
f01120bc:	68 76 1a 12 f0       	push   $0xf0121a76
f01120c1:	e8 e9 e0 fe ff       	call   f01001af <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f01120c6:	e8 83 89 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01120cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01120ce:	e8 a7 a0 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01120d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f01120d6:	83 ec 0c             	sub    $0xc,%esp
f01120d9:	68 00 fc 3f 00       	push   $0x3ffc00
f01120de:	e8 b2 ad ff ff       	call   f010ce95 <kmalloc>
f01120e3:	83 c4 10             	add    $0x10,%esp
f01120e6:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f01120ec:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01120f2:	89 c1                	mov    %eax,%ecx
f01120f4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01120fb:	10 00 00 
f01120fe:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112103:	0f b6 d0             	movzbl %al,%edx
f0112106:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011210c:	01 d0                	add    %edx,%eax
f011210e:	48                   	dec    %eax
f011210f:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0112115:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011211b:	ba 00 00 00 00       	mov    $0x0,%edx
f0112120:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0112126:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011212c:	29 d0                	sub    %edx,%eax
f011212e:	89 c3                	mov    %eax,%ebx
f0112130:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0112137:	10 00 00 
f011213a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011213f:	0f b6 c0             	movzbl %al,%eax
f0112142:	c1 e0 04             	shl    $0x4,%eax
f0112145:	89 c2                	mov    %eax,%edx
f0112147:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011214d:	01 d0                	add    %edx,%eax
f011214f:	48                   	dec    %eax
f0112150:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0112156:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011215c:	ba 00 00 00 00       	mov    $0x0,%edx
f0112161:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0112167:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011216d:	29 d0                	sub    %edx,%eax
f011216f:	01 d8                	add    %ebx,%eax
f0112171:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f0112176:	39 c1                	cmp    %eax,%ecx
f0112178:	74 17                	je     f0112191 <test_kmalloc_firstfit1+0xe5f>
f011217a:	83 ec 04             	sub    $0x4,%esp
f011217d:	68 88 1e 12 f0       	push   $0xf0121e88
f0112182:	68 64 03 00 00       	push   $0x364
f0112187:	68 76 1a 12 f0       	push   $0xf0121a76
f011218c:	e8 1e e0 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112191:	e8 e4 9f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112196:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112199:	74 17                	je     f01121b2 <test_kmalloc_firstfit1+0xe80>
f011219b:	83 ec 04             	sub    $0x4,%esp
f011219e:	68 88 1a 12 f0       	push   $0xf0121a88
f01121a3:	68 65 03 00 00       	push   $0x365
f01121a8:	68 76 1a 12 f0       	push   $0xf0121a76
f01121ad:	e8 fd df fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f01121b2:	e8 97 88 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01121b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01121ba:	29 c2                	sub    %eax,%edx
f01121bc:	89 d0                	mov    %edx,%eax
f01121be:	3d 00 04 00 00       	cmp    $0x400,%eax
f01121c3:	74 17                	je     f01121dc <test_kmalloc_firstfit1+0xeaa>
f01121c5:	83 ec 04             	sub    $0x4,%esp
f01121c8:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01121cd:	68 66 03 00 00       	push   $0x366
f01121d2:	68 76 1a 12 f0       	push   $0xf0121a76
f01121d7:	e8 d3 df fe ff       	call   f01001af <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f01121dc:	e8 6d 88 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01121e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01121e4:	e8 91 9f ff ff       	call   f010c17a <pf_calculate_free_frames>
f01121e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f01121ec:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01121f2:	83 ec 0c             	sub    $0xc,%esp
f01121f5:	50                   	push   %eax
f01121f6:	e8 e5 ac ff ff       	call   f010cee0 <kfree>
f01121fb:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01121fe:	e8 77 9f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112203:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112206:	74 17                	je     f011221f <test_kmalloc_firstfit1+0xeed>
f0112208:	83 ec 04             	sub    $0x4,%esp
f011220b:	68 88 1a 12 f0       	push   $0xf0121a88
f0112210:	68 6f 03 00 00       	push   $0x36f
f0112215:	68 76 1a 12 f0       	push   $0xf0121a76
f011221a:	e8 90 df fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011221f:	e8 2a 88 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112224:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0112227:	3d 00 01 00 00       	cmp    $0x100,%eax
f011222c:	74 17                	je     f0112245 <test_kmalloc_firstfit1+0xf13>
f011222e:	83 ec 04             	sub    $0x4,%esp
f0112231:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0112236:	68 70 03 00 00       	push   $0x370
f011223b:	68 76 1a 12 f0       	push   $0xf0121a76
f0112240:	e8 6a df fe ff       	call   f01001af <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f0112245:	e8 04 88 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011224a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011224d:	e8 28 9f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112252:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0112255:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011225b:	83 ec 0c             	sub    $0xc,%esp
f011225e:	50                   	push   %eax
f011225f:	e8 7c ac ff ff       	call   f010cee0 <kfree>
f0112264:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112267:	e8 0e 9f ff ff       	call   f010c17a <pf_calculate_free_frames>
f011226c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011226f:	74 17                	je     f0112288 <test_kmalloc_firstfit1+0xf56>
f0112271:	83 ec 04             	sub    $0x4,%esp
f0112274:	68 88 1a 12 f0       	push   $0xf0121a88
f0112279:	68 76 03 00 00       	push   $0x376
f011227e:	68 76 1a 12 f0       	push   $0xf0121a76
f0112283:	e8 27 df fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0112288:	e8 c1 87 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011228d:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0112290:	3d 00 01 00 00       	cmp    $0x100,%eax
f0112295:	74 17                	je     f01122ae <test_kmalloc_firstfit1+0xf7c>
f0112297:	83 ec 04             	sub    $0x4,%esp
f011229a:	68 cb 1e 12 f0       	push   $0xf0121ecb
f011229f:	68 77 03 00 00       	push   $0x377
f01122a4:	68 76 1a 12 f0       	push   $0xf0121a76
f01122a9:	e8 01 df fe ff       	call   f01001af <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f01122ae:	e8 9b 87 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01122b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01122b6:	e8 bf 9e ff ff       	call   f010c17a <pf_calculate_free_frames>
f01122bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f01122be:	83 ec 0c             	sub    $0xc,%esp
f01122c1:	68 00 00 10 00       	push   $0x100000
f01122c6:	e8 ca ab ff ff       	call   f010ce95 <kmalloc>
f01122cb:	83 c4 10             	add    $0x10,%esp
f01122ce:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f01122d4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01122da:	89 c1                	mov    %eax,%ecx
f01122dc:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f01122e3:	10 00 00 
f01122e6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01122eb:	0f b6 d0             	movzbl %al,%edx
f01122ee:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01122f4:	01 d0                	add    %edx,%eax
f01122f6:	48                   	dec    %eax
f01122f7:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01122fd:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112303:	ba 00 00 00 00       	mov    $0x0,%edx
f0112308:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011230e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0112314:	29 d0                	sub    %edx,%eax
f0112316:	89 c3                	mov    %eax,%ebx
f0112318:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011231f:	10 00 00 
f0112322:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112327:	0f b6 c0             	movzbl %al,%eax
f011232a:	c1 e0 04             	shl    $0x4,%eax
f011232d:	89 c2                	mov    %eax,%edx
f011232f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112335:	01 d0                	add    %edx,%eax
f0112337:	48                   	dec    %eax
f0112338:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011233e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0112344:	ba 00 00 00 00       	mov    $0x0,%edx
f0112349:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011234f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0112355:	29 d0                	sub    %edx,%eax
f0112357:	01 d8                	add    %ebx,%eax
f0112359:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011235e:	39 c1                	cmp    %eax,%ecx
f0112360:	74 17                	je     f0112379 <test_kmalloc_firstfit1+0x1047>
f0112362:	83 ec 04             	sub    $0x4,%esp
f0112365:	68 88 1e 12 f0       	push   $0xf0121e88
f011236a:	68 81 03 00 00       	push   $0x381
f011236f:	68 76 1a 12 f0       	push   $0xf0121a76
f0112374:	e8 36 de fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112379:	e8 fc 9d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011237e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0112381:	74 17                	je     f011239a <test_kmalloc_firstfit1+0x1068>
f0112383:	83 ec 04             	sub    $0x4,%esp
f0112386:	68 88 1a 12 f0       	push   $0xf0121a88
f011238b:	68 82 03 00 00       	push   $0x382
f0112390:	68 76 1a 12 f0       	push   $0xf0121a76
f0112395:	e8 15 de fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011239a:	e8 af 86 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011239f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01123a2:	29 c2                	sub    %eax,%edx
f01123a4:	89 d0                	mov    %edx,%eax
f01123a6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01123ab:	74 17                	je     f01123c4 <test_kmalloc_firstfit1+0x1092>
f01123ad:	83 ec 04             	sub    $0x4,%esp
f01123b0:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01123b5:	68 83 03 00 00       	push   $0x383
f01123ba:	68 76 1a 12 f0       	push   $0xf0121a76
f01123bf:	e8 eb dd fe ff       	call   f01001af <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f01123c4:	83 ec 0c             	sub    $0xc,%esp
f01123c7:	68 64 20 12 f0       	push   $0xf0122064
f01123cc:	e8 33 4e ff ff       	call   f0107204 <cprintf>
f01123d1:	83 c4 10             	add    $0x10,%esp

	return 1;
f01123d4:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01123d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01123dc:	5b                   	pop    %ebx
f01123dd:	5f                   	pop    %edi
f01123de:	5d                   	pop    %ebp
f01123df:	c3                   	ret    

f01123e0 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f01123e0:	55                   	push   %ebp
f01123e1:	89 e5                	mov    %esp,%ebp
f01123e3:	57                   	push   %edi
f01123e4:	53                   	push   %ebx
f01123e5:	81 ec 10 01 00 00    	sub    $0x110,%esp
	cprintf("==============================================\n");
f01123eb:	83 ec 0c             	sub    $0xc,%esp
f01123ee:	68 b8 19 12 f0       	push   $0xf01219b8
f01123f3:	e8 0c 4e ff ff       	call   f0107204 <cprintf>
f01123f8:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01123fb:	83 ec 0c             	sub    $0xc,%esp
f01123fe:	68 e8 19 12 f0       	push   $0xf01219e8
f0112403:	e8 fc 4d ff ff       	call   f0107204 <cprintf>
f0112408:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011240b:	83 ec 0c             	sub    $0xc,%esp
f011240e:	68 b8 19 12 f0       	push   $0xf01219b8
f0112413:	e8 ec 4d ff ff       	call   f0107204 <cprintf>
f0112418:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011241b:	8d 95 f0 fe ff ff    	lea    -0x110(%ebp),%edx
f0112421:	b9 14 00 00 00       	mov    $0x14,%ecx
f0112426:	b8 00 00 00 00       	mov    $0x0,%eax
f011242b:	89 d7                	mov    %edx,%edi
f011242d:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011242f:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0112436:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011243b:	0f b6 d0             	movzbl %al,%edx
f011243e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112441:	01 d0                	add    %edx,%eax
f0112443:	48                   	dec    %eax
f0112444:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0112447:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011244a:	ba 00 00 00 00       	mov    $0x0,%edx
f011244f:	f7 75 f4             	divl   -0xc(%ebp)
f0112452:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112455:	29 d0                	sub    %edx,%eax
f0112457:	89 c1                	mov    %eax,%ecx
f0112459:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0112460:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112465:	0f b6 c0             	movzbl %al,%eax
f0112468:	c1 e0 04             	shl    $0x4,%eax
f011246b:	89 c2                	mov    %eax,%edx
f011246d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112470:	01 d0                	add    %edx,%eax
f0112472:	48                   	dec    %eax
f0112473:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0112476:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112479:	ba 00 00 00 00       	mov    $0x0,%edx
f011247e:	f7 75 ec             	divl   -0x14(%ebp)
f0112481:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112484:	29 d0                	sub    %edx,%eax
f0112486:	01 c8                	add    %ecx,%eax
f0112488:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011248d:	29 c2                	sub    %eax,%edx
f011248f:	89 d0                	mov    %edx,%eax
f0112491:	83 ec 0c             	sub    $0xc,%esp
f0112494:	50                   	push   %eax
f0112495:	e8 fb a9 ff ff       	call   f010ce95 <kmalloc>
f011249a:	83 c4 10             	add    $0x10,%esp
f011249d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f01124a3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01124a9:	85 c0                	test   %eax,%eax
f01124ab:	74 17                	je     f01124c4 <test_kmalloc_firstfit2+0xe4>
f01124ad:	83 ec 04             	sub    $0x4,%esp
f01124b0:	68 b0 20 12 f0       	push   $0xf01220b0
f01124b5:	68 98 03 00 00       	push   $0x398
f01124ba:	68 76 1a 12 f0       	push   $0xf0121a76
f01124bf:	e8 eb dc fe ff       	call   f01001af <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01124c4:	e8 85 85 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01124c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01124cc:	e8 a9 9c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01124d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01124d4:	83 ec 0c             	sub    $0xc,%esp
f01124d7:	68 00 fc 1f 00       	push   $0x1ffc00
f01124dc:	e8 b4 a9 ff ff       	call   f010ce95 <kmalloc>
f01124e1:	83 c4 10             	add    $0x10,%esp
f01124e4:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f01124ea:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01124f0:	89 c1                	mov    %eax,%ecx
f01124f2:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01124f9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01124fe:	0f b6 d0             	movzbl %al,%edx
f0112501:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112504:	01 d0                	add    %edx,%eax
f0112506:	48                   	dec    %eax
f0112507:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011250a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011250d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112512:	f7 75 dc             	divl   -0x24(%ebp)
f0112515:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112518:	29 d0                	sub    %edx,%eax
f011251a:	89 c3                	mov    %eax,%ebx
f011251c:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0112523:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112528:	0f b6 c0             	movzbl %al,%eax
f011252b:	c1 e0 04             	shl    $0x4,%eax
f011252e:	89 c2                	mov    %eax,%edx
f0112530:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112533:	01 d0                	add    %edx,%eax
f0112535:	48                   	dec    %eax
f0112536:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112539:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011253c:	ba 00 00 00 00       	mov    $0x0,%edx
f0112541:	f7 75 d4             	divl   -0x2c(%ebp)
f0112544:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112547:	29 d0                	sub    %edx,%eax
f0112549:	01 d8                	add    %ebx,%eax
f011254b:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0112550:	39 c1                	cmp    %eax,%ecx
f0112552:	74 17                	je     f011256b <test_kmalloc_firstfit2+0x18b>
f0112554:	83 ec 04             	sub    $0x4,%esp
f0112557:	68 88 1e 12 f0       	push   $0xf0121e88
f011255c:	68 a2 03 00 00       	push   $0x3a2
f0112561:	68 76 1a 12 f0       	push   $0xf0121a76
f0112566:	e8 44 dc fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011256b:	e8 0a 9c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112570:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112573:	74 17                	je     f011258c <test_kmalloc_firstfit2+0x1ac>
f0112575:	83 ec 04             	sub    $0x4,%esp
f0112578:	68 88 1a 12 f0       	push   $0xf0121a88
f011257d:	68 a3 03 00 00       	push   $0x3a3
f0112582:	68 76 1a 12 f0       	push   $0xf0121a76
f0112587:	e8 23 dc fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011258c:	e8 bd 84 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112591:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112594:	29 c2                	sub    %eax,%edx
f0112596:	89 d0                	mov    %edx,%eax
f0112598:	3d 00 02 00 00       	cmp    $0x200,%eax
f011259d:	74 17                	je     f01125b6 <test_kmalloc_firstfit2+0x1d6>
f011259f:	83 ec 04             	sub    $0x4,%esp
f01125a2:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01125a7:	68 a4 03 00 00       	push   $0x3a4
f01125ac:	68 76 1a 12 f0       	push   $0xf0121a76
f01125b1:	e8 f9 db fe ff       	call   f01001af <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01125b6:	e8 93 84 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01125bb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01125be:	e8 b7 9b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01125c3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f01125c6:	83 ec 0c             	sub    $0xc,%esp
f01125c9:	68 00 fc 1f 00       	push   $0x1ffc00
f01125ce:	e8 c2 a8 ff ff       	call   f010ce95 <kmalloc>
f01125d3:	83 c4 10             	add    $0x10,%esp
f01125d6:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f01125dc:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01125e2:	89 c1                	mov    %eax,%ecx
f01125e4:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01125eb:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01125f0:	0f b6 d0             	movzbl %al,%edx
f01125f3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01125f6:	01 d0                	add    %edx,%eax
f01125f8:	48                   	dec    %eax
f01125f9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01125fc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01125ff:	ba 00 00 00 00       	mov    $0x0,%edx
f0112604:	f7 75 cc             	divl   -0x34(%ebp)
f0112607:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011260a:	29 d0                	sub    %edx,%eax
f011260c:	89 c3                	mov    %eax,%ebx
f011260e:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0112615:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011261a:	0f b6 c0             	movzbl %al,%eax
f011261d:	c1 e0 04             	shl    $0x4,%eax
f0112620:	89 c2                	mov    %eax,%edx
f0112622:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112625:	01 d0                	add    %edx,%eax
f0112627:	48                   	dec    %eax
f0112628:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011262b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011262e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112633:	f7 75 c4             	divl   -0x3c(%ebp)
f0112636:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112639:	29 d0                	sub    %edx,%eax
f011263b:	01 d8                	add    %ebx,%eax
f011263d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0112642:	39 c1                	cmp    %eax,%ecx
f0112644:	74 17                	je     f011265d <test_kmalloc_firstfit2+0x27d>
f0112646:	83 ec 04             	sub    $0x4,%esp
f0112649:	68 88 1e 12 f0       	push   $0xf0121e88
f011264e:	68 aa 03 00 00       	push   $0x3aa
f0112653:	68 76 1a 12 f0       	push   $0xf0121a76
f0112658:	e8 52 db fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011265d:	e8 18 9b ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112662:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112665:	74 17                	je     f011267e <test_kmalloc_firstfit2+0x29e>
f0112667:	83 ec 04             	sub    $0x4,%esp
f011266a:	68 88 1a 12 f0       	push   $0xf0121a88
f011266f:	68 ab 03 00 00       	push   $0x3ab
f0112674:	68 76 1a 12 f0       	push   $0xf0121a76
f0112679:	e8 31 db fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011267e:	e8 cb 83 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112683:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112686:	29 c2                	sub    %eax,%edx
f0112688:	89 d0                	mov    %edx,%eax
f011268a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011268f:	74 17                	je     f01126a8 <test_kmalloc_firstfit2+0x2c8>
f0112691:	83 ec 04             	sub    $0x4,%esp
f0112694:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112699:	68 ac 03 00 00       	push   $0x3ac
f011269e:	68 76 1a 12 f0       	push   $0xf0121a76
f01126a3:	e8 07 db fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01126a8:	e8 a1 83 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01126ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01126b0:	e8 c5 9a ff ff       	call   f010c17a <pf_calculate_free_frames>
f01126b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01126b8:	83 ec 0c             	sub    $0xc,%esp
f01126bb:	68 00 08 00 00       	push   $0x800
f01126c0:	e8 d0 a7 ff ff       	call   f010ce95 <kmalloc>
f01126c5:	83 c4 10             	add    $0x10,%esp
f01126c8:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f01126ce:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01126d4:	89 c1                	mov    %eax,%ecx
f01126d6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01126dd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01126e2:	0f b6 d0             	movzbl %al,%edx
f01126e5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01126e8:	01 d0                	add    %edx,%eax
f01126ea:	48                   	dec    %eax
f01126eb:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01126ee:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01126f6:	f7 75 bc             	divl   -0x44(%ebp)
f01126f9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126fc:	29 d0                	sub    %edx,%eax
f01126fe:	89 c3                	mov    %eax,%ebx
f0112700:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0112707:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011270c:	0f b6 c0             	movzbl %al,%eax
f011270f:	c1 e0 04             	shl    $0x4,%eax
f0112712:	89 c2                	mov    %eax,%edx
f0112714:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112717:	01 d0                	add    %edx,%eax
f0112719:	48                   	dec    %eax
f011271a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011271d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112720:	ba 00 00 00 00       	mov    $0x0,%edx
f0112725:	f7 75 b4             	divl   -0x4c(%ebp)
f0112728:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011272b:	29 d0                	sub    %edx,%eax
f011272d:	01 d8                	add    %ebx,%eax
f011272f:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0112734:	39 c1                	cmp    %eax,%ecx
f0112736:	73 17                	jae    f011274f <test_kmalloc_firstfit2+0x36f>
f0112738:	83 ec 04             	sub    $0x4,%esp
f011273b:	68 88 1e 12 f0       	push   $0xf0121e88
f0112740:	68 b2 03 00 00       	push   $0x3b2
f0112745:	68 76 1a 12 f0       	push   $0xf0121a76
f011274a:	e8 60 da fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011274f:	e8 26 9a ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112754:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112757:	74 17                	je     f0112770 <test_kmalloc_firstfit2+0x390>
f0112759:	83 ec 04             	sub    $0x4,%esp
f011275c:	68 88 1a 12 f0       	push   $0xf0121a88
f0112761:	68 b3 03 00 00       	push   $0x3b3
f0112766:	68 76 1a 12 f0       	push   $0xf0121a76
f011276b:	e8 3f da fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f0112770:	e8 d9 82 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112775:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112778:	29 c2                	sub    %eax,%edx
f011277a:	89 d0                	mov    %edx,%eax
f011277c:	83 f8 01             	cmp    $0x1,%eax
f011277f:	74 17                	je     f0112798 <test_kmalloc_firstfit2+0x3b8>
f0112781:	83 ec 04             	sub    $0x4,%esp
f0112784:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112789:	68 b4 03 00 00       	push   $0x3b4
f011278e:	68 76 1a 12 f0       	push   $0xf0121a76
f0112793:	e8 17 da fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0112798:	e8 b1 82 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011279d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01127a0:	e8 d5 99 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01127a5:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01127a8:	83 ec 0c             	sub    $0xc,%esp
f01127ab:	68 00 08 00 00       	push   $0x800
f01127b0:	e8 e0 a6 ff ff       	call   f010ce95 <kmalloc>
f01127b5:	83 c4 10             	add    $0x10,%esp
f01127b8:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f01127be:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01127c4:	89 c1                	mov    %eax,%ecx
f01127c6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01127cd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01127d2:	0f b6 d0             	movzbl %al,%edx
f01127d5:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127d8:	01 d0                	add    %edx,%eax
f01127da:	48                   	dec    %eax
f01127db:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01127de:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01127e6:	f7 75 ac             	divl   -0x54(%ebp)
f01127e9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127ec:	29 d0                	sub    %edx,%eax
f01127ee:	89 c3                	mov    %eax,%ebx
f01127f0:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01127f7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01127fc:	0f b6 c0             	movzbl %al,%eax
f01127ff:	c1 e0 04             	shl    $0x4,%eax
f0112802:	89 c2                	mov    %eax,%edx
f0112804:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112807:	01 d0                	add    %edx,%eax
f0112809:	48                   	dec    %eax
f011280a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011280d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112810:	ba 00 00 00 00       	mov    $0x0,%edx
f0112815:	f7 75 a4             	divl   -0x5c(%ebp)
f0112818:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011281b:	29 d0                	sub    %edx,%eax
f011281d:	01 d8                	add    %ebx,%eax
f011281f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0112824:	39 c1                	cmp    %eax,%ecx
f0112826:	74 17                	je     f011283f <test_kmalloc_firstfit2+0x45f>
f0112828:	83 ec 04             	sub    $0x4,%esp
f011282b:	68 88 1e 12 f0       	push   $0xf0121e88
f0112830:	68 ba 03 00 00       	push   $0x3ba
f0112835:	68 76 1a 12 f0       	push   $0xf0121a76
f011283a:	e8 70 d9 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011283f:	e8 36 99 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112844:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112847:	74 17                	je     f0112860 <test_kmalloc_firstfit2+0x480>
f0112849:	83 ec 04             	sub    $0x4,%esp
f011284c:	68 88 1a 12 f0       	push   $0xf0121a88
f0112851:	68 bb 03 00 00       	push   $0x3bb
f0112856:	68 76 1a 12 f0       	push   $0xf0121a76
f011285b:	e8 4f d9 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f0112860:	e8 e9 81 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112865:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112868:	29 c2                	sub    %eax,%edx
f011286a:	89 d0                	mov    %edx,%eax
f011286c:	83 f8 01             	cmp    $0x1,%eax
f011286f:	74 17                	je     f0112888 <test_kmalloc_firstfit2+0x4a8>
f0112871:	83 ec 04             	sub    $0x4,%esp
f0112874:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112879:	68 bc 03 00 00       	push   $0x3bc
f011287e:	68 76 1a 12 f0       	push   $0xf0121a76
f0112883:	e8 27 d9 fe ff       	call   f01001af <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f0112888:	e8 c1 81 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011288d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112890:	e8 e5 98 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112895:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[2]);
f0112898:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011289e:	83 ec 0c             	sub    $0xc,%esp
f01128a1:	50                   	push   %eax
f01128a2:	e8 39 a6 ff ff       	call   f010cee0 <kfree>
f01128a7:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01128aa:	e8 cb 98 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01128af:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01128b2:	74 17                	je     f01128cb <test_kmalloc_firstfit2+0x4eb>
f01128b4:	83 ec 04             	sub    $0x4,%esp
f01128b7:	68 88 1a 12 f0       	push   $0xf0121a88
f01128bc:	68 c2 03 00 00       	push   $0x3c2
f01128c1:	68 76 1a 12 f0       	push   $0xf0121a76
f01128c6:	e8 e4 d8 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f01128cb:	e8 7e 81 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01128d0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01128d3:	83 f8 01             	cmp    $0x1,%eax
f01128d6:	74 17                	je     f01128ef <test_kmalloc_firstfit2+0x50f>
f01128d8:	83 ec 04             	sub    $0x4,%esp
f01128db:	68 cb 1e 12 f0       	push   $0xf0121ecb
f01128e0:	68 c3 03 00 00       	push   $0x3c3
f01128e5:	68 76 1a 12 f0       	push   $0xf0121a76
f01128ea:	e8 c0 d8 fe ff       	call   f01001af <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01128ef:	e8 5a 81 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01128f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01128f7:	e8 7e 98 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01128fc:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01128ff:	83 ec 0c             	sub    $0xc,%esp
f0112902:	68 00 1c 00 00       	push   $0x1c00
f0112907:	e8 89 a5 ff ff       	call   f010ce95 <kmalloc>
f011290c:	83 c4 10             	add    $0x10,%esp
f011290f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f0112915:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011291b:	89 c1                	mov    %eax,%ecx
f011291d:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0112924:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112929:	0f b6 d0             	movzbl %al,%edx
f011292c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011292f:	01 d0                	add    %edx,%eax
f0112931:	48                   	dec    %eax
f0112932:	89 45 98             	mov    %eax,-0x68(%ebp)
f0112935:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112938:	ba 00 00 00 00       	mov    $0x0,%edx
f011293d:	f7 75 9c             	divl   -0x64(%ebp)
f0112940:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112943:	29 d0                	sub    %edx,%eax
f0112945:	89 c3                	mov    %eax,%ebx
f0112947:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011294e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112953:	0f b6 c0             	movzbl %al,%eax
f0112956:	c1 e0 04             	shl    $0x4,%eax
f0112959:	89 c2                	mov    %eax,%edx
f011295b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011295e:	01 d0                	add    %edx,%eax
f0112960:	48                   	dec    %eax
f0112961:	89 45 90             	mov    %eax,-0x70(%ebp)
f0112964:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112967:	ba 00 00 00 00       	mov    $0x0,%edx
f011296c:	f7 75 94             	divl   -0x6c(%ebp)
f011296f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112972:	29 d0                	sub    %edx,%eax
f0112974:	01 d8                	add    %ebx,%eax
f0112976:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011297b:	39 c1                	cmp    %eax,%ecx
f011297d:	74 17                	je     f0112996 <test_kmalloc_firstfit2+0x5b6>
f011297f:	83 ec 04             	sub    $0x4,%esp
f0112982:	68 88 1e 12 f0       	push   $0xf0121e88
f0112987:	68 c9 03 00 00       	push   $0x3c9
f011298c:	68 76 1a 12 f0       	push   $0xf0121a76
f0112991:	e8 19 d8 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112996:	e8 df 97 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011299b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011299e:	74 17                	je     f01129b7 <test_kmalloc_firstfit2+0x5d7>
f01129a0:	83 ec 04             	sub    $0x4,%esp
f01129a3:	68 88 1a 12 f0       	push   $0xf0121a88
f01129a8:	68 ca 03 00 00       	push   $0x3ca
f01129ad:	68 76 1a 12 f0       	push   $0xf0121a76
f01129b2:	e8 f8 d7 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f01129b7:	e8 92 80 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01129bc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01129bf:	29 c2                	sub    %eax,%edx
f01129c1:	89 d0                	mov    %edx,%eax
f01129c3:	83 f8 02             	cmp    $0x2,%eax
f01129c6:	74 17                	je     f01129df <test_kmalloc_firstfit2+0x5ff>
f01129c8:	83 ec 04             	sub    $0x4,%esp
f01129cb:	68 b8 1e 12 f0       	push   $0xf0121eb8
f01129d0:	68 cb 03 00 00       	push   $0x3cb
f01129d5:	68 76 1a 12 f0       	push   $0xf0121a76
f01129da:	e8 d0 d7 fe ff       	call   f01001af <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f01129df:	e8 6a 80 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01129e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01129e7:	e8 8e 97 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01129ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[0]);
f01129ef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01129f5:	83 ec 0c             	sub    $0xc,%esp
f01129f8:	50                   	push   %eax
f01129f9:	e8 e2 a4 ff ff       	call   f010cee0 <kfree>
f01129fe:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112a01:	e8 74 97 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112a06:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112a09:	74 17                	je     f0112a22 <test_kmalloc_firstfit2+0x642>
f0112a0b:	83 ec 04             	sub    $0x4,%esp
f0112a0e:	68 88 1a 12 f0       	push   $0xf0121a88
f0112a13:	68 d1 03 00 00       	push   $0x3d1
f0112a18:	68 76 1a 12 f0       	push   $0xf0121a76
f0112a1d:	e8 8d d7 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0112a22:	e8 27 80 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112a27:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112a2a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112a2f:	74 17                	je     f0112a48 <test_kmalloc_firstfit2+0x668>
f0112a31:	83 ec 04             	sub    $0x4,%esp
f0112a34:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0112a39:	68 d2 03 00 00       	push   $0x3d2
f0112a3e:	68 76 1a 12 f0       	push   $0xf0121a76
f0112a43:	e8 67 d7 fe ff       	call   f01001af <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112a48:	e8 01 80 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112a4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112a50:	e8 25 97 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112a55:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0112a58:	83 ec 0c             	sub    $0xc,%esp
f0112a5b:	68 00 fc 2f 00       	push   $0x2ffc00
f0112a60:	e8 30 a4 ff ff       	call   f010ce95 <kmalloc>
f0112a65:	83 c4 10             	add    $0x10,%esp
f0112a68:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0112a6e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0112a74:	89 c1                	mov    %eax,%ecx
f0112a76:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0112a7d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112a82:	0f b6 d0             	movzbl %al,%edx
f0112a85:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a88:	01 d0                	add    %edx,%eax
f0112a8a:	48                   	dec    %eax
f0112a8b:	89 45 88             	mov    %eax,-0x78(%ebp)
f0112a8e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112a91:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a96:	f7 75 8c             	divl   -0x74(%ebp)
f0112a99:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112a9c:	29 d0                	sub    %edx,%eax
f0112a9e:	89 c3                	mov    %eax,%ebx
f0112aa0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0112aa7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112aac:	0f b6 c0             	movzbl %al,%eax
f0112aaf:	c1 e0 04             	shl    $0x4,%eax
f0112ab2:	89 c2                	mov    %eax,%edx
f0112ab4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112ab7:	01 d0                	add    %edx,%eax
f0112ab9:	48                   	dec    %eax
f0112aba:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112abd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112ac0:	ba 00 00 00 00       	mov    $0x0,%edx
f0112ac5:	f7 75 84             	divl   -0x7c(%ebp)
f0112ac8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112acb:	29 d0                	sub    %edx,%eax
f0112acd:	01 d8                	add    %ebx,%eax
f0112acf:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0112ad4:	39 c1                	cmp    %eax,%ecx
f0112ad6:	74 17                	je     f0112aef <test_kmalloc_firstfit2+0x70f>
f0112ad8:	83 ec 04             	sub    $0x4,%esp
f0112adb:	68 88 1e 12 f0       	push   $0xf0121e88
f0112ae0:	68 d8 03 00 00       	push   $0x3d8
f0112ae5:	68 76 1a 12 f0       	push   $0xf0121a76
f0112aea:	e8 c0 d6 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112aef:	e8 86 96 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112af4:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112af7:	74 17                	je     f0112b10 <test_kmalloc_firstfit2+0x730>
f0112af9:	83 ec 04             	sub    $0x4,%esp
f0112afc:	68 88 1a 12 f0       	push   $0xf0121a88
f0112b01:	68 d9 03 00 00       	push   $0x3d9
f0112b06:	68 76 1a 12 f0       	push   $0xf0121a76
f0112b0b:	e8 9f d6 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0112b10:	e8 39 7f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112b15:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112b18:	29 c2                	sub    %eax,%edx
f0112b1a:	89 d0                	mov    %edx,%eax
f0112b1c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112b21:	74 17                	je     f0112b3a <test_kmalloc_firstfit2+0x75a>
f0112b23:	83 ec 04             	sub    $0x4,%esp
f0112b26:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112b2b:	68 da 03 00 00       	push   $0x3da
f0112b30:	68 76 1a 12 f0       	push   $0xf0121a76
f0112b35:	e8 75 d6 fe ff       	call   f01001af <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f0112b3a:	e8 0f 7f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112b3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112b42:	e8 33 96 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112b47:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f0112b4a:	83 ec 0c             	sub    $0xc,%esp
f0112b4d:	68 00 18 20 00       	push   $0x201800
f0112b52:	e8 3e a3 ff ff       	call   f010ce95 <kmalloc>
f0112b57:	83 c4 10             	add    $0x10,%esp
f0112b5a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f0112b60:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0112b66:	89 c1                	mov    %eax,%ecx
f0112b68:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0112b6f:	10 00 00 
f0112b72:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112b77:	0f b6 d0             	movzbl %al,%edx
f0112b7a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112b80:	01 d0                	add    %edx,%eax
f0112b82:	48                   	dec    %eax
f0112b83:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0112b89:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112b8f:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b94:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0112b9a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112ba0:	29 d0                	sub    %edx,%eax
f0112ba2:	89 c3                	mov    %eax,%ebx
f0112ba4:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0112bab:	10 00 00 
f0112bae:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112bb3:	0f b6 c0             	movzbl %al,%eax
f0112bb6:	c1 e0 04             	shl    $0x4,%eax
f0112bb9:	89 c2                	mov    %eax,%edx
f0112bbb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112bc1:	01 d0                	add    %edx,%eax
f0112bc3:	48                   	dec    %eax
f0112bc4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0112bca:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112bd0:	ba 00 00 00 00       	mov    $0x0,%edx
f0112bd5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0112bdb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0112be1:	29 d0                	sub    %edx,%eax
f0112be3:	01 d8                	add    %ebx,%eax
f0112be5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0112bea:	39 c1                	cmp    %eax,%ecx
f0112bec:	74 17                	je     f0112c05 <test_kmalloc_firstfit2+0x825>
f0112bee:	83 ec 04             	sub    $0x4,%esp
f0112bf1:	68 88 1e 12 f0       	push   $0xf0121e88
f0112bf6:	68 e0 03 00 00       	push   $0x3e0
f0112bfb:	68 76 1a 12 f0       	push   $0xf0121a76
f0112c00:	e8 aa d5 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c05:	e8 70 95 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112c0a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112c0d:	74 17                	je     f0112c26 <test_kmalloc_firstfit2+0x846>
f0112c0f:	83 ec 04             	sub    $0x4,%esp
f0112c12:	68 88 1a 12 f0       	push   $0xf0121a88
f0112c17:	68 e1 03 00 00       	push   $0x3e1
f0112c1c:	68 76 1a 12 f0       	push   $0xf0121a76
f0112c21:	e8 89 d5 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f0112c26:	e8 23 7e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112c2b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112c2e:	29 c2                	sub    %eax,%edx
f0112c30:	89 d0                	mov    %edx,%eax
f0112c32:	3d 02 02 00 00       	cmp    $0x202,%eax
f0112c37:	74 17                	je     f0112c50 <test_kmalloc_firstfit2+0x870>
f0112c39:	83 ec 04             	sub    $0x4,%esp
f0112c3c:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112c41:	68 e2 03 00 00       	push   $0x3e2
f0112c46:	68 76 1a 12 f0       	push   $0xf0121a76
f0112c4b:	e8 5f d5 fe ff       	call   f01001af <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0112c50:	e8 f9 7d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112c55:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112c58:	e8 1d 95 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112c5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[5]);
f0112c60:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0112c66:	83 ec 0c             	sub    $0xc,%esp
f0112c69:	50                   	push   %eax
f0112c6a:	e8 71 a2 ff ff       	call   f010cee0 <kfree>
f0112c6f:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112c72:	e8 03 95 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112c77:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112c7a:	74 17                	je     f0112c93 <test_kmalloc_firstfit2+0x8b3>
f0112c7c:	83 ec 04             	sub    $0x4,%esp
f0112c7f:	68 88 1a 12 f0       	push   $0xf0121a88
f0112c84:	68 e8 03 00 00       	push   $0x3e8
f0112c89:	68 76 1a 12 f0       	push   $0xf0121a76
f0112c8e:	e8 1c d5 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f0112c93:	e8 b6 7d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112c98:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112c9b:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112ca0:	74 17                	je     f0112cb9 <test_kmalloc_firstfit2+0x8d9>
f0112ca2:	83 ec 04             	sub    $0x4,%esp
f0112ca5:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0112caa:	68 e9 03 00 00       	push   $0x3e9
f0112caf:	68 76 1a 12 f0       	push   $0xf0121a76
f0112cb4:	e8 f6 d4 fe ff       	call   f01001af <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f0112cb9:	e8 90 7d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112cbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112cc1:	e8 b4 94 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112cc6:	89 45 e0             	mov    %eax,-0x20(%ebp)
		kfree(ptr_allocations[1]);
f0112cc9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0112ccf:	83 ec 0c             	sub    $0xc,%esp
f0112cd2:	50                   	push   %eax
f0112cd3:	e8 08 a2 ff ff       	call   f010cee0 <kfree>
f0112cd8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f0112cdb:	e8 6e 7d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112ce0:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f0112ce3:	3d 00 02 00 00       	cmp    $0x200,%eax
f0112ce8:	74 17                	je     f0112d01 <test_kmalloc_firstfit2+0x921>
f0112cea:	83 ec 04             	sub    $0x4,%esp
f0112ced:	68 cb 1e 12 f0       	push   $0xf0121ecb
f0112cf2:	68 ef 03 00 00       	push   $0x3ef
f0112cf7:	68 76 1a 12 f0       	push   $0xf0121a76
f0112cfc:	e8 ae d4 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112d01:	e8 74 94 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112d06:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112d09:	74 17                	je     f0112d22 <test_kmalloc_firstfit2+0x942>
f0112d0b:	83 ec 04             	sub    $0x4,%esp
f0112d0e:	68 88 1a 12 f0       	push   $0xf0121a88
f0112d13:	68 f0 03 00 00       	push   $0x3f0
f0112d18:	68 76 1a 12 f0       	push   $0xf0121a76
f0112d1d:	e8 8d d4 fe ff       	call   f01001af <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f0112d22:	e8 27 7d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112d27:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112d2a:	e8 4b 94 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112d2f:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f0112d32:	83 ec 0c             	sub    $0xc,%esp
f0112d35:	68 00 fc 4f 00       	push   $0x4ffc00
f0112d3a:	e8 56 a1 ff ff       	call   f010ce95 <kmalloc>
f0112d3f:	83 c4 10             	add    $0x10,%esp
f0112d42:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f0112d48:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0112d4e:	89 c1                	mov    %eax,%ecx
f0112d50:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0112d57:	10 00 00 
f0112d5a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112d5f:	0f b6 d0             	movzbl %al,%edx
f0112d62:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0112d68:	01 d0                	add    %edx,%eax
f0112d6a:	48                   	dec    %eax
f0112d6b:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0112d71:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0112d77:	ba 00 00 00 00       	mov    $0x0,%edx
f0112d7c:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0112d82:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0112d88:	29 d0                	sub    %edx,%eax
f0112d8a:	89 c3                	mov    %eax,%ebx
f0112d8c:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0112d93:	10 00 00 
f0112d96:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112d9b:	0f b6 c0             	movzbl %al,%eax
f0112d9e:	c1 e0 04             	shl    $0x4,%eax
f0112da1:	89 c2                	mov    %eax,%edx
f0112da3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0112da9:	01 d0                	add    %edx,%eax
f0112dab:	48                   	dec    %eax
f0112dac:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0112db2:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0112db8:	ba 00 00 00 00       	mov    $0x0,%edx
f0112dbd:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0112dc3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0112dc9:	29 d0                	sub    %edx,%eax
f0112dcb:	01 d8                	add    %ebx,%eax
f0112dcd:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f0112dd2:	39 c1                	cmp    %eax,%ecx
f0112dd4:	74 17                	je     f0112ded <test_kmalloc_firstfit2+0xa0d>
f0112dd6:	83 ec 04             	sub    $0x4,%esp
f0112dd9:	68 88 1e 12 f0       	push   $0xf0121e88
f0112dde:	68 f6 03 00 00       	push   $0x3f6
f0112de3:	68 76 1a 12 f0       	push   $0xf0121a76
f0112de8:	e8 c2 d3 fe ff       	call   f01001af <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112ded:	e8 88 93 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112df2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112df5:	74 17                	je     f0112e0e <test_kmalloc_firstfit2+0xa2e>
f0112df7:	83 ec 04             	sub    $0x4,%esp
f0112dfa:	68 88 1a 12 f0       	push   $0xf0121a88
f0112dff:	68 f7 03 00 00       	push   $0x3f7
f0112e04:	68 76 1a 12 f0       	push   $0xf0121a76
f0112e09:	e8 a1 d3 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0112e0e:	e8 3b 7c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112e13:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112e16:	29 c2                	sub    %eax,%edx
f0112e18:	89 d0                	mov    %edx,%eax
f0112e1a:	3d 00 05 00 00       	cmp    $0x500,%eax
f0112e1f:	74 17                	je     f0112e38 <test_kmalloc_firstfit2+0xa58>
f0112e21:	83 ec 04             	sub    $0x4,%esp
f0112e24:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112e29:	68 f8 03 00 00       	push   $0x3f8
f0112e2e:	68 76 1a 12 f0       	push   $0xf0121a76
f0112e33:	e8 77 d3 fe ff       	call   f01001af <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0112e38:	e8 11 7c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112e3d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0112e40:	e8 35 93 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112e45:	89 45 e0             	mov    %eax,-0x20(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f0112e48:	83 ec 0c             	sub    $0xc,%esp
f0112e4b:	68 00 fc 2f 00       	push   $0x2ffc00
f0112e50:	e8 40 a0 ff ff       	call   f010ce95 <kmalloc>
f0112e55:	83 c4 10             	add    $0x10,%esp
f0112e58:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0112e5e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0112e64:	89 c1                	mov    %eax,%ecx
f0112e66:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0112e6d:	10 00 00 
f0112e70:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112e75:	0f b6 d0             	movzbl %al,%edx
f0112e78:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0112e7e:	01 d0                	add    %edx,%eax
f0112e80:	48                   	dec    %eax
f0112e81:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0112e87:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112e8d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112e92:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0112e98:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0112e9e:	29 d0                	sub    %edx,%eax
f0112ea0:	89 c3                	mov    %eax,%ebx
f0112ea2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0112ea9:	10 00 00 
f0112eac:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112eb1:	0f b6 c0             	movzbl %al,%eax
f0112eb4:	c1 e0 04             	shl    $0x4,%eax
f0112eb7:	89 c2                	mov    %eax,%edx
f0112eb9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0112ebf:	01 d0                	add    %edx,%eax
f0112ec1:	48                   	dec    %eax
f0112ec2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0112ec8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112ece:	ba 00 00 00 00       	mov    $0x0,%edx
f0112ed3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0112ed9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0112edf:	29 d0                	sub    %edx,%eax
f0112ee1:	01 d8                	add    %ebx,%eax
f0112ee3:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0112ee8:	39 c1                	cmp    %eax,%ecx
f0112eea:	74 17                	je     f0112f03 <test_kmalloc_firstfit2+0xb23>
f0112eec:	83 ec 04             	sub    $0x4,%esp
f0112eef:	68 88 1e 12 f0       	push   $0xf0121e88
f0112ef4:	68 06 04 00 00       	push   $0x406
f0112ef9:	68 76 1a 12 f0       	push   $0xf0121a76
f0112efe:	e8 ac d2 fe ff       	call   f01001af <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0112f03:	e8 72 92 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0112f08:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0112f0b:	74 17                	je     f0112f24 <test_kmalloc_firstfit2+0xb44>
f0112f0d:	83 ec 04             	sub    $0x4,%esp
f0112f10:	68 88 1a 12 f0       	push   $0xf0121a88
f0112f15:	68 07 04 00 00       	push   $0x407
f0112f1a:	68 76 1a 12 f0       	push   $0xf0121a76
f0112f1f:	e8 8b d2 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f0112f24:	e8 25 7b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0112f29:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0112f2c:	29 c2                	sub    %eax,%edx
f0112f2e:	89 d0                	mov    %edx,%eax
f0112f30:	3d 00 03 00 00       	cmp    $0x300,%eax
f0112f35:	74 17                	je     f0112f4e <test_kmalloc_firstfit2+0xb6e>
f0112f37:	83 ec 04             	sub    $0x4,%esp
f0112f3a:	68 b8 1e 12 f0       	push   $0xf0121eb8
f0112f3f:	68 08 04 00 00       	push   $0x408
f0112f44:	68 76 1a 12 f0       	push   $0xf0121a76
f0112f49:	e8 61 d2 fe ff       	call   f01001af <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f0112f4e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0112f55:	10 00 00 
f0112f58:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112f5d:	0f b6 d0             	movzbl %al,%edx
f0112f60:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0112f66:	01 d0                	add    %edx,%eax
f0112f68:	48                   	dec    %eax
f0112f69:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0112f6f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112f75:	ba 00 00 00 00       	mov    $0x0,%edx
f0112f7a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0112f80:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0112f86:	29 d0                	sub    %edx,%eax
f0112f88:	89 c1                	mov    %eax,%ecx
f0112f8a:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0112f91:	10 00 00 
f0112f94:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0112f99:	0f b6 c0             	movzbl %al,%eax
f0112f9c:	c1 e0 04             	shl    $0x4,%eax
f0112f9f:	89 c2                	mov    %eax,%edx
f0112fa1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0112fa7:	01 d0                	add    %edx,%eax
f0112fa9:	48                   	dec    %eax
f0112faa:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0112fb0:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0112fb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0112fbb:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0112fc1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0112fc7:	29 d0                	sub    %edx,%eax
f0112fc9:	01 c8                	add    %ecx,%eax
f0112fcb:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f0112fd0:	29 c2                	sub    %eax,%edx
f0112fd2:	89 d0                	mov    %edx,%eax
f0112fd4:	83 ec 0c             	sub    $0xc,%esp
f0112fd7:	50                   	push   %eax
f0112fd8:	e8 b8 9e ff ff       	call   f010ce95 <kmalloc>
f0112fdd:	83 c4 10             	add    $0x10,%esp
f0112fe0:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f0112fe6:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0112fec:	85 c0                	test   %eax,%eax
f0112fee:	74 17                	je     f0113007 <test_kmalloc_firstfit2+0xc27>
f0112ff0:	83 ec 04             	sub    $0x4,%esp
f0112ff3:	68 b8 1f 12 f0       	push   $0xf0121fb8
f0112ff8:	68 0e 04 00 00       	push   $0x40e
f0112ffd:	68 76 1a 12 f0       	push   $0xf0121a76
f0113002:	e8 a8 d1 fe ff       	call   f01001af <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f0113007:	83 ec 0c             	sub    $0xc,%esp
f011300a:	68 f8 20 12 f0       	push   $0xf01220f8
f011300f:	e8 f0 41 ff ff       	call   f0107204 <cprintf>
f0113014:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f0113017:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011301c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011301f:	5b                   	pop    %ebx
f0113020:	5f                   	pop    %edi
f0113021:	5d                   	pop    %ebp
f0113022:	c3                   	ret    

f0113023 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f0113023:	55                   	push   %ebp
f0113024:	89 e5                	mov    %esp,%ebp
f0113026:	57                   	push   %edi
f0113027:	53                   	push   %ebx
f0113028:	81 ec e0 03 00 00    	sub    $0x3e0,%esp
	cprintf("==============================================\n");
f011302e:	83 ec 0c             	sub    $0xc,%esp
f0113031:	68 b8 19 12 f0       	push   $0xf01219b8
f0113036:	e8 c9 41 ff ff       	call   f0107204 <cprintf>
f011303b:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011303e:	83 ec 0c             	sub    $0xc,%esp
f0113041:	68 e8 19 12 f0       	push   $0xf01219e8
f0113046:	e8 b9 41 ff ff       	call   f0107204 <cprintf>
f011304b:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011304e:	83 ec 0c             	sub    $0xc,%esp
f0113051:	68 b8 19 12 f0       	push   $0xf01219b8
f0113056:	e8 a9 41 ff ff       	call   f0107204 <cprintf>
f011305b:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011305e:	8d 95 24 fc ff ff    	lea    -0x3dc(%ebp),%edx
f0113064:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0113069:	b8 00 00 00 00       	mov    $0x0,%eax
f011306e:	89 d7                	mov    %edx,%edi
f0113070:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0113072:	e8 d7 79 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113077:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011307a:	e8 fb 90 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011307f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f0113082:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f0113089:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0113090:	eb 1f                	jmp    f01130b1 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0113092:	83 ec 0c             	sub    $0xc,%esp
f0113095:	68 00 00 20 00       	push   $0x200000
f011309a:	e8 f6 9d ff ff       	call   f010ce95 <kmalloc>
f011309f:	83 c4 10             	add    $0x10,%esp
f01130a2:	89 c2                	mov    %eax,%edx
f01130a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01130a7:	89 94 85 24 fc ff ff 	mov    %edx,-0x3dc(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f01130ae:	ff 45 f4             	incl   -0xc(%ebp)
f01130b1:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f01130b5:	7e db                	jle    f0113092 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);
f01130b7:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01130be:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01130c3:	0f b6 d0             	movzbl %al,%edx
f01130c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01130c9:	01 d0                	add    %edx,%eax
f01130cb:	48                   	dec    %eax
f01130cc:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01130cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01130d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01130d7:	f7 75 e4             	divl   -0x1c(%ebp)
f01130da:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01130dd:	29 d0                	sub    %edx,%eax
f01130df:	89 c1                	mov    %eax,%ecx
f01130e1:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f01130e8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01130ed:	0f b6 c0             	movzbl %al,%eax
f01130f0:	c1 e0 04             	shl    $0x4,%eax
f01130f3:	89 c2                	mov    %eax,%edx
f01130f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01130f8:	01 d0                	add    %edx,%eax
f01130fa:	48                   	dec    %eax
f01130fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01130fe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113101:	ba 00 00 00 00       	mov    $0x0,%edx
f0113106:	f7 75 dc             	divl   -0x24(%ebp)
f0113109:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011310c:	29 d0                	sub    %edx,%eax
f011310e:	01 c8                	add    %ecx,%eax
f0113110:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0113115:	29 c2                	sub    %eax,%edx
f0113117:	89 d0                	mov    %edx,%eax
f0113119:	83 ec 0c             	sub    $0xc,%esp
f011311c:	50                   	push   %eax
f011311d:	e8 73 9d ff ff       	call   f010ce95 <kmalloc>
f0113122:	83 c4 10             	add    $0x10,%esp
f0113125:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011312b:	8b 85 24 fc ff ff    	mov    -0x3dc(%ebp),%eax
f0113131:	89 c1                	mov    %eax,%ecx
f0113133:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011313a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011313f:	0f b6 d0             	movzbl %al,%edx
f0113142:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113145:	01 d0                	add    %edx,%eax
f0113147:	48                   	dec    %eax
f0113148:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011314b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011314e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113153:	f7 75 d4             	divl   -0x2c(%ebp)
f0113156:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113159:	29 d0                	sub    %edx,%eax
f011315b:	89 c3                	mov    %eax,%ebx
f011315d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0113164:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113169:	0f b6 c0             	movzbl %al,%eax
f011316c:	c1 e0 04             	shl    $0x4,%eax
f011316f:	89 c2                	mov    %eax,%edx
f0113171:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113174:	01 d0                	add    %edx,%eax
f0113176:	48                   	dec    %eax
f0113177:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011317a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011317d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113182:	f7 75 cc             	divl   -0x34(%ebp)
f0113185:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113188:	29 d0                	sub    %edx,%eax
f011318a:	01 d8                	add    %ebx,%eax
f011318c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0113191:	39 c1                	cmp    %eax,%ecx
f0113193:	0f 85 58 03 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0113199:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011319f:	89 c1                	mov    %eax,%ecx
f01131a1:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01131a8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01131ad:	0f b6 d0             	movzbl %al,%edx
f01131b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01131b3:	01 d0                	add    %edx,%eax
f01131b5:	48                   	dec    %eax
f01131b6:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01131b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01131c1:	f7 75 c4             	divl   -0x3c(%ebp)
f01131c4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131c7:	29 d0                	sub    %edx,%eax
f01131c9:	89 c3                	mov    %eax,%ebx
f01131cb:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f01131d2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01131d7:	0f b6 c0             	movzbl %al,%eax
f01131da:	c1 e0 04             	shl    $0x4,%eax
f01131dd:	89 c2                	mov    %eax,%edx
f01131df:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131e2:	01 d0                	add    %edx,%eax
f01131e4:	48                   	dec    %eax
f01131e5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f01131e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01131f0:	f7 75 bc             	divl   -0x44(%ebp)
f01131f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01131f6:	29 d0                	sub    %edx,%eax
f01131f8:	01 d8                	add    %ebx,%eax
f01131fa:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f01131ff:	39 c1                	cmp    %eax,%ecx
f0113201:	0f 85 ea 02 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0113207:	8b 85 44 fc ff ff    	mov    -0x3bc(%ebp),%eax
f011320d:	89 c1                	mov    %eax,%ecx
f011320f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0113216:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011321b:	0f b6 d0             	movzbl %al,%edx
f011321e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113221:	01 d0                	add    %edx,%eax
f0113223:	48                   	dec    %eax
f0113224:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0113227:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011322a:	ba 00 00 00 00       	mov    $0x0,%edx
f011322f:	f7 75 b4             	divl   -0x4c(%ebp)
f0113232:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113235:	29 d0                	sub    %edx,%eax
f0113237:	89 c3                	mov    %eax,%ebx
f0113239:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0113240:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113245:	0f b6 c0             	movzbl %al,%eax
f0113248:	c1 e0 04             	shl    $0x4,%eax
f011324b:	89 c2                	mov    %eax,%edx
f011324d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113250:	01 d0                	add    %edx,%eax
f0113252:	48                   	dec    %eax
f0113253:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0113256:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113259:	ba 00 00 00 00       	mov    $0x0,%edx
f011325e:	f7 75 ac             	divl   -0x54(%ebp)
f0113261:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113264:	29 d0                	sub    %edx,%eax
f0113266:	01 d8                	add    %ebx,%eax
f0113268:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011326d:	39 c1                	cmp    %eax,%ecx
f011326f:	0f 85 7c 02 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0113275:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f011327b:	89 c1                	mov    %eax,%ecx
f011327d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0113284:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113289:	0f b6 d0             	movzbl %al,%edx
f011328c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011328f:	01 d0                	add    %edx,%eax
f0113291:	48                   	dec    %eax
f0113292:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0113295:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113298:	ba 00 00 00 00       	mov    $0x0,%edx
f011329d:	f7 75 a4             	divl   -0x5c(%ebp)
f01132a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01132a3:	29 d0                	sub    %edx,%eax
f01132a5:	89 c3                	mov    %eax,%ebx
f01132a7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01132ae:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01132b3:	0f b6 c0             	movzbl %al,%eax
f01132b6:	c1 e0 04             	shl    $0x4,%eax
f01132b9:	89 c2                	mov    %eax,%edx
f01132bb:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01132be:	01 d0                	add    %edx,%eax
f01132c0:	48                   	dec    %eax
f01132c1:	89 45 98             	mov    %eax,-0x68(%ebp)
f01132c4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01132cc:	f7 75 9c             	divl   -0x64(%ebp)
f01132cf:	8b 45 98             	mov    -0x68(%ebp),%eax
f01132d2:	29 d0                	sub    %edx,%eax
f01132d4:	01 d8                	add    %ebx,%eax
f01132d6:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f01132db:	39 c1                	cmp    %eax,%ecx
f01132dd:	0f 85 0e 02 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01132e3:	8b 85 60 fc ff ff    	mov    -0x3a0(%ebp),%eax
f01132e9:	89 c1                	mov    %eax,%ecx
f01132eb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01132f2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01132f7:	0f b6 d0             	movzbl %al,%edx
f01132fa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01132fd:	01 d0                	add    %edx,%eax
f01132ff:	48                   	dec    %eax
f0113300:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113303:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113306:	ba 00 00 00 00       	mov    $0x0,%edx
f011330b:	f7 75 94             	divl   -0x6c(%ebp)
f011330e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113311:	29 d0                	sub    %edx,%eax
f0113313:	89 c3                	mov    %eax,%ebx
f0113315:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011331c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113321:	0f b6 c0             	movzbl %al,%eax
f0113324:	c1 e0 04             	shl    $0x4,%eax
f0113327:	89 c2                	mov    %eax,%edx
f0113329:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011332c:	01 d0                	add    %edx,%eax
f011332e:	48                   	dec    %eax
f011332f:	89 45 88             	mov    %eax,-0x78(%ebp)
f0113332:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113335:	ba 00 00 00 00       	mov    $0x0,%edx
f011333a:	f7 75 8c             	divl   -0x74(%ebp)
f011333d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0113340:	29 d0                	sub    %edx,%eax
f0113342:	01 d8                	add    %ebx,%eax
f0113344:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0113349:	39 c1                	cmp    %eax,%ecx
f011334b:	0f 85 a0 01 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0113351:	8b 85 74 fc ff ff    	mov    -0x38c(%ebp),%eax
f0113357:	89 c1                	mov    %eax,%ecx
f0113359:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0113360:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113365:	0f b6 d0             	movzbl %al,%edx
f0113368:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011336b:	01 d0                	add    %edx,%eax
f011336d:	48                   	dec    %eax
f011336e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0113371:	8b 45 80             	mov    -0x80(%ebp),%eax
f0113374:	ba 00 00 00 00       	mov    $0x0,%edx
f0113379:	f7 75 84             	divl   -0x7c(%ebp)
f011337c:	8b 45 80             	mov    -0x80(%ebp),%eax
f011337f:	29 d0                	sub    %edx,%eax
f0113381:	89 c3                	mov    %eax,%ebx
f0113383:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011338a:	10 00 00 
f011338d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113392:	0f b6 c0             	movzbl %al,%eax
f0113395:	c1 e0 04             	shl    $0x4,%eax
f0113398:	89 c2                	mov    %eax,%edx
f011339a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01133a0:	01 d0                	add    %edx,%eax
f01133a2:	48                   	dec    %eax
f01133a3:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01133a9:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01133af:	ba 00 00 00 00       	mov    $0x0,%edx
f01133b4:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01133ba:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01133c0:	29 d0                	sub    %edx,%eax
f01133c2:	01 d8                	add    %ebx,%eax
f01133c4:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01133c9:	39 c1                	cmp    %eax,%ecx
f01133cb:	0f 85 20 01 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f01133d1:	8b 85 ec fc ff ff    	mov    -0x314(%ebp),%eax
f01133d7:	89 c1                	mov    %eax,%ecx
f01133d9:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01133e0:	10 00 00 
f01133e3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01133e8:	0f b6 d0             	movzbl %al,%edx
f01133eb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01133f1:	01 d0                	add    %edx,%eax
f01133f3:	48                   	dec    %eax
f01133f4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01133fa:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113400:	ba 00 00 00 00       	mov    $0x0,%edx
f0113405:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011340b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113411:	29 d0                	sub    %edx,%eax
f0113413:	89 c3                	mov    %eax,%ebx
f0113415:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011341c:	10 00 00 
f011341f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113424:	0f b6 c0             	movzbl %al,%eax
f0113427:	c1 e0 04             	shl    $0x4,%eax
f011342a:	89 c2                	mov    %eax,%edx
f011342c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0113432:	01 d0                	add    %edx,%eax
f0113434:	48                   	dec    %eax
f0113435:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011343b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113441:	ba 00 00 00 00       	mov    $0x0,%edx
f0113446:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011344c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0113452:	29 d0                	sub    %edx,%eax
f0113454:	01 d8                	add    %ebx,%eax
f0113456:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011345b:	39 c1                	cmp    %eax,%ecx
f011345d:	0f 85 8e 00 00 00    	jne    f01134f1 <test_kmalloc_worstfit+0x4ce>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f0113463:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f0113469:	89 c1                	mov    %eax,%ecx
f011346b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0113472:	10 00 00 
f0113475:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011347a:	0f b6 d0             	movzbl %al,%edx
f011347d:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113483:	01 d0                	add    %edx,%eax
f0113485:	48                   	dec    %eax
f0113486:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011348c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0113492:	ba 00 00 00 00       	mov    $0x0,%edx
f0113497:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011349d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01134a3:	29 d0                	sub    %edx,%eax
f01134a5:	89 c3                	mov    %eax,%ebx
f01134a7:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01134ae:	10 00 00 
f01134b1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01134b6:	0f b6 c0             	movzbl %al,%eax
f01134b9:	c1 e0 04             	shl    $0x4,%eax
f01134bc:	89 c2                	mov    %eax,%edx
f01134be:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01134c4:	01 d0                	add    %edx,%eax
f01134c6:	48                   	dec    %eax
f01134c7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01134cd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01134d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01134d8:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01134de:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01134e4:	29 d0                	sub    %edx,%eax
f01134e6:	01 d8                	add    %ebx,%eax
f01134e8:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f01134ed:	39 c1                	cmp    %eax,%ecx
f01134ef:	74 17                	je     f0113508 <test_kmalloc_worstfit+0x4e5>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f01134f1:	83 ec 04             	sub    $0x4,%esp
f01134f4:	68 44 21 12 f0       	push   $0xf0122144
f01134f9:	68 32 04 00 00       	push   $0x432
f01134fe:	68 76 1a 12 f0       	push   $0xf0121a76
f0113503:	e8 a7 cc fe ff       	call   f01001af <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113508:	e8 6d 8c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011350d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113510:	74 17                	je     f0113529 <test_kmalloc_worstfit+0x506>
f0113512:	83 ec 04             	sub    $0x4,%esp
f0113515:	68 88 1a 12 f0       	push   $0xf0121a88
f011351a:	68 34 04 00 00       	push   $0x434
f011351f:	68 76 1a 12 f0       	push   $0xf0121a76
f0113524:	e8 86 cc fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAB_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0113529:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011352c:	e8 1d 75 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113531:	29 c3                	sub    %eax,%ebx
f0113533:	89 d9                	mov    %ebx,%ecx
f0113535:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011353c:	10 00 00 
f011353f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113544:	0f b6 d0             	movzbl %al,%edx
f0113547:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011354d:	01 d0                	add    %edx,%eax
f011354f:	48                   	dec    %eax
f0113550:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0113556:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011355c:	ba 00 00 00 00       	mov    $0x0,%edx
f0113561:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0113567:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011356d:	29 d0                	sub    %edx,%eax
f011356f:	89 c3                	mov    %eax,%ebx
f0113571:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0113578:	10 00 00 
f011357b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113580:	0f b6 c0             	movzbl %al,%eax
f0113583:	c1 e0 04             	shl    $0x4,%eax
f0113586:	89 c2                	mov    %eax,%edx
f0113588:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011358e:	01 d0                	add    %edx,%eax
f0113590:	48                   	dec    %eax
f0113591:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0113597:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011359d:	ba 00 00 00 00       	mov    $0x0,%edx
f01135a2:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01135a8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01135ae:	29 d0                	sub    %edx,%eax
f01135b0:	01 d8                	add    %ebx,%eax
f01135b2:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f01135b7:	29 c2                	sub    %eax,%edx
f01135b9:	89 d0                	mov    %edx,%eax
f01135bb:	c1 e8 0c             	shr    $0xc,%eax
f01135be:	39 c1                	cmp    %eax,%ecx
f01135c0:	74 17                	je     f01135d9 <test_kmalloc_worstfit+0x5b6>
f01135c2:	83 ec 04             	sub    $0x4,%esp
f01135c5:	68 2b 1d 12 f0       	push   $0xf0121d2b
f01135ca:	68 35 04 00 00       	push   $0x435
f01135cf:	68 76 1a 12 f0       	push   $0xf0121a76
f01135d4:	e8 d6 cb fe ff       	call   f01001af <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f01135d9:	e8 70 74 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01135de:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f01135e1:	e8 94 8b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01135e6:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f01135e9:	8b 85 24 fc ff ff    	mov    -0x3dc(%ebp),%eax
f01135ef:	83 ec 0c             	sub    $0xc,%esp
f01135f2:	50                   	push   %eax
f01135f3:	e8 e8 98 ff ff       	call   f010cee0 <kfree>
f01135f8:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f01135fb:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f0113601:	83 ec 0c             	sub    $0xc,%esp
f0113604:	50                   	push   %eax
f0113605:	e8 d6 98 ff ff       	call   f010cee0 <kfree>
f011360a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011360d:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f0113613:	83 ec 0c             	sub    $0xc,%esp
f0113616:	50                   	push   %eax
f0113617:	e8 c4 98 ff ff       	call   f010cee0 <kfree>
f011361c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011361f:	8b 85 4c fc ff ff    	mov    -0x3b4(%ebp),%eax
f0113625:	83 ec 0c             	sub    $0xc,%esp
f0113628:	50                   	push   %eax
f0113629:	e8 b2 98 ff ff       	call   f010cee0 <kfree>
f011362e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f0113631:	8b 85 54 fc ff ff    	mov    -0x3ac(%ebp),%eax
f0113637:	83 ec 0c             	sub    $0xc,%esp
f011363a:	50                   	push   %eax
f011363b:	e8 a0 98 ff ff       	call   f010cee0 <kfree>
f0113640:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f0113643:	8b 85 50 fc ff ff    	mov    -0x3b0(%ebp),%eax
f0113649:	83 ec 0c             	sub    $0xc,%esp
f011364c:	50                   	push   %eax
f011364d:	e8 8e 98 ff ff       	call   f010cee0 <kfree>
f0113652:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f0113655:	8b 85 9c fc ff ff    	mov    -0x364(%ebp),%eax
f011365b:	83 ec 0c             	sub    $0xc,%esp
f011365e:	50                   	push   %eax
f011365f:	e8 7c 98 ff ff       	call   f010cee0 <kfree>
f0113664:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f0113667:	8b 85 a0 fc ff ff    	mov    -0x360(%ebp),%eax
f011366d:	83 ec 0c             	sub    $0xc,%esp
f0113670:	50                   	push   %eax
f0113671:	e8 6a 98 ff ff       	call   f010cee0 <kfree>
f0113676:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f0113679:	8b 85 a4 fc ff ff    	mov    -0x35c(%ebp),%eax
f011367f:	83 ec 0c             	sub    $0xc,%esp
f0113682:	50                   	push   %eax
f0113683:	e8 58 98 ff ff       	call   f010cee0 <kfree>
f0113688:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011368b:	8b 85 a8 fc ff ff    	mov    -0x358(%ebp),%eax
f0113691:	83 ec 0c             	sub    $0xc,%esp
f0113694:	50                   	push   %eax
f0113695:	e8 46 98 ff ff       	call   f010cee0 <kfree>
f011369a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011369d:	8b 85 ac fc ff ff    	mov    -0x354(%ebp),%eax
f01136a3:	83 ec 0c             	sub    $0xc,%esp
f01136a6:	50                   	push   %eax
f01136a7:	e8 34 98 ff ff       	call   f010cee0 <kfree>
f01136ac:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f01136af:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01136b5:	83 ec 0c             	sub    $0xc,%esp
f01136b8:	50                   	push   %eax
f01136b9:	e8 22 98 ff ff       	call   f010cee0 <kfree>
f01136be:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f01136c1:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f01136c7:	83 ec 0c             	sub    $0xc,%esp
f01136ca:	50                   	push   %eax
f01136cb:	e8 10 98 ff ff       	call   f010cee0 <kfree>
f01136d0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f01136d3:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f01136d9:	83 ec 0c             	sub    $0xc,%esp
f01136dc:	50                   	push   %eax
f01136dd:	e8 fe 97 ff ff       	call   f010cee0 <kfree>
f01136e2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f01136e5:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f01136eb:	83 ec 0c             	sub    $0xc,%esp
f01136ee:	50                   	push   %eax
f01136ef:	e8 ec 97 ff ff       	call   f010cee0 <kfree>
f01136f4:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01136f7:	e8 7e 8a ff ff       	call   f010c17a <pf_calculate_free_frames>
f01136fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01136ff:	74 17                	je     f0113718 <test_kmalloc_worstfit+0x6f5>
f0113701:	83 ec 04             	sub    $0x4,%esp
f0113704:	68 88 1a 12 f0       	push   $0xf0121a88
f0113709:	68 4b 04 00 00       	push   $0x44b
f011370e:	68 76 1a 12 f0       	push   $0xf0121a76
f0113713:	e8 97 ca fe ff       	call   f01001af <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0113718:	e8 31 73 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011371d:	89 c2                	mov    %eax,%edx
f011371f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113722:	29 c2                	sub    %eax,%edx
f0113724:	89 d0                	mov    %edx,%eax
f0113726:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011372b:	74 17                	je     f0113744 <test_kmalloc_worstfit+0x721>
f011372d:	83 ec 04             	sub    $0x4,%esp
f0113730:	68 3c 1d 12 f0       	push   $0xf0121d3c
f0113735:	68 4c 04 00 00       	push   $0x44c
f011373a:	68 76 1a 12 f0       	push   $0xf0121a76
f011373f:	e8 6b ca fe ff       	call   f01001af <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f0113744:	e8 05 73 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113749:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011374c:	e8 29 8a ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113751:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f0113754:	83 ec 0c             	sub    $0xc,%esp
f0113757:	68 00 00 10 00       	push   $0x100000
f011375c:	e8 34 97 ff ff       	call   f010ce95 <kmalloc>
f0113761:	83 c4 10             	add    $0x10,%esp
f0113764:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011376a:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0113771:	10 00 00 
f0113774:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113779:	0f b6 d0             	movzbl %al,%edx
f011377c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0113782:	01 d0                	add    %edx,%eax
f0113784:	48                   	dec    %eax
f0113785:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f011378b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0113791:	ba 00 00 00 00       	mov    $0x0,%edx
f0113796:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f011379c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01137a2:	29 d0                	sub    %edx,%eax
f01137a4:	89 c1                	mov    %eax,%ecx
f01137a6:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01137ad:	10 00 00 
f01137b0:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01137b5:	0f b6 c0             	movzbl %al,%eax
f01137b8:	c1 e0 04             	shl    $0x4,%eax
f01137bb:	89 c2                	mov    %eax,%edx
f01137bd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01137c3:	01 d0                	add    %edx,%eax
f01137c5:	48                   	dec    %eax
f01137c6:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01137cc:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01137d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01137d7:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01137dd:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01137e3:	29 d0                	sub    %edx,%eax
f01137e5:	01 c8                	add    %ecx,%eax
f01137e7:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f01137ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01137f3:	39 c2                	cmp    %eax,%edx
f01137f5:	74 17                	je     f011380e <test_kmalloc_worstfit+0x7eb>
		panic("Worst Fit not working correctly");
f01137f7:	83 ec 04             	sub    $0x4,%esp
f01137fa:	68 88 21 12 f0       	push   $0xf0122188
f01137ff:	68 53 04 00 00       	push   $0x453
f0113804:	68 76 1a 12 f0       	push   $0xf0121a76
f0113809:	e8 a1 c9 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011380e:	e8 67 89 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113813:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113816:	74 17                	je     f011382f <test_kmalloc_worstfit+0x80c>
f0113818:	83 ec 04             	sub    $0x4,%esp
f011381b:	68 88 1a 12 f0       	push   $0xf0121a88
f0113820:	68 54 04 00 00       	push   $0x454
f0113825:	68 76 1a 12 f0       	push   $0xf0121a76
f011382a:	e8 80 c9 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011382f:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113832:	e8 17 72 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113837:	29 c3                	sub    %eax,%ebx
f0113839:	89 d8                	mov    %ebx,%eax
f011383b:	3d 00 01 00 00       	cmp    $0x100,%eax
f0113840:	74 17                	je     f0113859 <test_kmalloc_worstfit+0x836>
f0113842:	83 ec 04             	sub    $0x4,%esp
f0113845:	68 a6 1f 12 f0       	push   $0xf0121fa6
f011384a:	68 55 04 00 00       	push   $0x455
f011384f:	68 76 1a 12 f0       	push   $0xf0121a76
f0113854:	e8 56 c9 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113859:	ff 45 e8             	incl   -0x18(%ebp)
f011385c:	83 ec 08             	sub    $0x8,%esp
f011385f:	ff 75 e8             	pushl  -0x18(%ebp)
f0113862:	68 a8 21 12 f0       	push   $0xf01221a8
f0113867:	e8 98 39 ff ff       	call   f0107204 <cprintf>
f011386c:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011386f:	e8 da 71 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113874:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113877:	e8 fe 88 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011387c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011387f:	83 ec 0c             	sub    $0xc,%esp
f0113882:	68 00 00 40 00       	push   $0x400000
f0113887:	e8 09 96 ff ff       	call   f010ce95 <kmalloc>
f011388c:	83 c4 10             	add    $0x10,%esp
f011388f:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f0113895:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f011389c:	10 00 00 
f011389f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01138a4:	0f b6 d0             	movzbl %al,%edx
f01138a7:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01138ad:	01 d0                	add    %edx,%eax
f01138af:	48                   	dec    %eax
f01138b0:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01138b6:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01138bc:	ba 00 00 00 00       	mov    $0x0,%edx
f01138c1:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01138c7:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01138cd:	29 d0                	sub    %edx,%eax
f01138cf:	89 c1                	mov    %eax,%ecx
f01138d1:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01138d8:	10 00 00 
f01138db:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01138e0:	0f b6 c0             	movzbl %al,%eax
f01138e3:	c1 e0 04             	shl    $0x4,%eax
f01138e6:	89 c2                	mov    %eax,%edx
f01138e8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01138ee:	01 d0                	add    %edx,%eax
f01138f0:	48                   	dec    %eax
f01138f1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01138f7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01138fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0113902:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0113908:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011390e:	29 d0                	sub    %edx,%eax
f0113910:	01 c8                	add    %ecx,%eax
f0113912:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f0113918:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011391e:	39 c2                	cmp    %eax,%edx
f0113920:	74 17                	je     f0113939 <test_kmalloc_worstfit+0x916>
		panic("Worst Fit not working correctly");
f0113922:	83 ec 04             	sub    $0x4,%esp
f0113925:	68 88 21 12 f0       	push   $0xf0122188
f011392a:	68 5c 04 00 00       	push   $0x45c
f011392f:	68 76 1a 12 f0       	push   $0xf0121a76
f0113934:	e8 76 c8 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113939:	e8 3c 88 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011393e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113941:	74 17                	je     f011395a <test_kmalloc_worstfit+0x937>
f0113943:	83 ec 04             	sub    $0x4,%esp
f0113946:	68 88 1a 12 f0       	push   $0xf0121a88
f011394b:	68 5d 04 00 00       	push   $0x45d
f0113950:	68 76 1a 12 f0       	push   $0xf0121a76
f0113955:	e8 55 c8 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011395a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011395d:	e8 ec 70 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113962:	29 c3                	sub    %eax,%ebx
f0113964:	89 d8                	mov    %ebx,%eax
f0113966:	3d 00 04 00 00       	cmp    $0x400,%eax
f011396b:	74 17                	je     f0113984 <test_kmalloc_worstfit+0x961>
f011396d:	83 ec 04             	sub    $0x4,%esp
f0113970:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0113975:	68 5e 04 00 00       	push   $0x45e
f011397a:	68 76 1a 12 f0       	push   $0xf0121a76
f011397f:	e8 2b c8 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113984:	ff 45 e8             	incl   -0x18(%ebp)
f0113987:	83 ec 08             	sub    $0x8,%esp
f011398a:	ff 75 e8             	pushl  -0x18(%ebp)
f011398d:	68 a8 21 12 f0       	push   $0xf01221a8
f0113992:	e8 6d 38 ff ff       	call   f0107204 <cprintf>
f0113997:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011399a:	e8 af 70 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011399f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01139a2:	e8 d3 87 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01139a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f01139aa:	83 ec 0c             	sub    $0xc,%esp
f01139ad:	68 00 00 60 00       	push   $0x600000
f01139b2:	e8 de 94 ff ff       	call   f010ce95 <kmalloc>
f01139b7:	83 c4 10             	add    $0x10,%esp
f01139ba:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f01139c0:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01139c7:	10 00 00 
f01139ca:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01139cf:	0f b6 d0             	movzbl %al,%edx
f01139d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01139d8:	01 d0                	add    %edx,%eax
f01139da:	48                   	dec    %eax
f01139db:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01139e1:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01139e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01139ec:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f01139f2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01139f8:	29 d0                	sub    %edx,%eax
f01139fa:	89 c1                	mov    %eax,%ecx
f01139fc:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0113a03:	10 00 00 
f0113a06:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113a0b:	0f b6 c0             	movzbl %al,%eax
f0113a0e:	c1 e0 04             	shl    $0x4,%eax
f0113a11:	89 c2                	mov    %eax,%edx
f0113a13:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0113a19:	01 d0                	add    %edx,%eax
f0113a1b:	48                   	dec    %eax
f0113a1c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0113a22:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113a28:	ba 00 00 00 00       	mov    $0x0,%edx
f0113a2d:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0113a33:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0113a39:	29 d0                	sub    %edx,%eax
f0113a3b:	01 c8                	add    %ecx,%eax
f0113a3d:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f0113a43:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113a49:	39 c2                	cmp    %eax,%edx
f0113a4b:	74 17                	je     f0113a64 <test_kmalloc_worstfit+0xa41>
		panic("Worst Fit not working correctly");
f0113a4d:	83 ec 04             	sub    $0x4,%esp
f0113a50:	68 88 21 12 f0       	push   $0xf0122188
f0113a55:	68 65 04 00 00       	push   $0x465
f0113a5a:	68 76 1a 12 f0       	push   $0xf0121a76
f0113a5f:	e8 4b c7 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113a64:	e8 11 87 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113a69:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113a6c:	74 17                	je     f0113a85 <test_kmalloc_worstfit+0xa62>
f0113a6e:	83 ec 04             	sub    $0x4,%esp
f0113a71:	68 88 1a 12 f0       	push   $0xf0121a88
f0113a76:	68 66 04 00 00       	push   $0x466
f0113a7b:	68 76 1a 12 f0       	push   $0xf0121a76
f0113a80:	e8 2a c7 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113a85:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113a88:	e8 c1 6f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113a8d:	29 c3                	sub    %eax,%ebx
f0113a8f:	89 d8                	mov    %ebx,%eax
f0113a91:	3d 00 06 00 00       	cmp    $0x600,%eax
f0113a96:	74 17                	je     f0113aaf <test_kmalloc_worstfit+0xa8c>
f0113a98:	83 ec 04             	sub    $0x4,%esp
f0113a9b:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0113aa0:	68 67 04 00 00       	push   $0x467
f0113aa5:	68 76 1a 12 f0       	push   $0xf0121a76
f0113aaa:	e8 00 c7 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113aaf:	ff 45 e8             	incl   -0x18(%ebp)
f0113ab2:	83 ec 08             	sub    $0x8,%esp
f0113ab5:	ff 75 e8             	pushl  -0x18(%ebp)
f0113ab8:	68 a8 21 12 f0       	push   $0xf01221a8
f0113abd:	e8 42 37 ff ff       	call   f0107204 <cprintf>
f0113ac2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113ac5:	e8 84 6f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113acd:	e8 a8 86 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113ad2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f0113ad5:	83 ec 0c             	sub    $0xc,%esp
f0113ad8:	68 00 00 50 00       	push   $0x500000
f0113add:	e8 b3 93 ff ff       	call   f010ce95 <kmalloc>
f0113ae2:	83 c4 10             	add    $0x10,%esp
f0113ae5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0113aeb:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0113af2:	10 00 00 
f0113af5:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113afa:	0f b6 d0             	movzbl %al,%edx
f0113afd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0113b03:	01 d0                	add    %edx,%eax
f0113b05:	48                   	dec    %eax
f0113b06:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0113b0c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0113b12:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b17:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0113b1d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0113b23:	29 d0                	sub    %edx,%eax
f0113b25:	89 c1                	mov    %eax,%ecx
f0113b27:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0113b2e:	10 00 00 
f0113b31:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113b36:	0f b6 c0             	movzbl %al,%eax
f0113b39:	c1 e0 04             	shl    $0x4,%eax
f0113b3c:	89 c2                	mov    %eax,%edx
f0113b3e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0113b44:	01 d0                	add    %edx,%eax
f0113b46:	48                   	dec    %eax
f0113b47:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0113b4d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0113b53:	ba 00 00 00 00       	mov    $0x0,%edx
f0113b58:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0113b5e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0113b64:	29 d0                	sub    %edx,%eax
f0113b66:	01 c8                	add    %ecx,%eax
f0113b68:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0113b6e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113b74:	39 c2                	cmp    %eax,%edx
f0113b76:	74 17                	je     f0113b8f <test_kmalloc_worstfit+0xb6c>
		panic("Worst Fit not working correctly");
f0113b78:	83 ec 04             	sub    $0x4,%esp
f0113b7b:	68 88 21 12 f0       	push   $0xf0122188
f0113b80:	68 6e 04 00 00       	push   $0x46e
f0113b85:	68 76 1a 12 f0       	push   $0xf0121a76
f0113b8a:	e8 20 c6 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113b8f:	e8 e6 85 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113b94:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113b97:	74 17                	je     f0113bb0 <test_kmalloc_worstfit+0xb8d>
f0113b99:	83 ec 04             	sub    $0x4,%esp
f0113b9c:	68 88 1a 12 f0       	push   $0xf0121a88
f0113ba1:	68 6f 04 00 00       	push   $0x46f
f0113ba6:	68 76 1a 12 f0       	push   $0xf0121a76
f0113bab:	e8 ff c5 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113bb0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113bb3:	e8 96 6e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113bb8:	29 c3                	sub    %eax,%ebx
f0113bba:	89 d8                	mov    %ebx,%eax
f0113bbc:	3d 00 05 00 00       	cmp    $0x500,%eax
f0113bc1:	74 17                	je     f0113bda <test_kmalloc_worstfit+0xbb7>
f0113bc3:	83 ec 04             	sub    $0x4,%esp
f0113bc6:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0113bcb:	68 70 04 00 00       	push   $0x470
f0113bd0:	68 76 1a 12 f0       	push   $0xf0121a76
f0113bd5:	e8 d5 c5 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113bda:	ff 45 e8             	incl   -0x18(%ebp)
f0113bdd:	83 ec 08             	sub    $0x8,%esp
f0113be0:	ff 75 e8             	pushl  -0x18(%ebp)
f0113be3:	68 a8 21 12 f0       	push   $0xf01221a8
f0113be8:	e8 17 36 ff ff       	call   f0107204 <cprintf>
f0113bed:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113bf0:	e8 59 6e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113bf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113bf8:	e8 7d 85 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113bfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f0113c00:	83 ec 0c             	sub    $0xc,%esp
f0113c03:	68 00 00 40 00       	push   $0x400000
f0113c08:	e8 88 92 ff ff       	call   f010ce95 <kmalloc>
f0113c0d:	83 c4 10             	add    $0x10,%esp
f0113c10:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f0113c16:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0113c1d:	10 00 00 
f0113c20:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113c25:	0f b6 d0             	movzbl %al,%edx
f0113c28:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0113c2e:	01 d0                	add    %edx,%eax
f0113c30:	48                   	dec    %eax
f0113c31:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0113c37:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0113c3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0113c42:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0113c48:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0113c4e:	29 d0                	sub    %edx,%eax
f0113c50:	89 c1                	mov    %eax,%ecx
f0113c52:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0113c59:	10 00 00 
f0113c5c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113c61:	0f b6 c0             	movzbl %al,%eax
f0113c64:	c1 e0 04             	shl    $0x4,%eax
f0113c67:	89 c2                	mov    %eax,%edx
f0113c69:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0113c6f:	01 d0                	add    %edx,%eax
f0113c71:	48                   	dec    %eax
f0113c72:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0113c78:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0113c7e:	ba 00 00 00 00       	mov    $0x0,%edx
f0113c83:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0113c89:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0113c8f:	29 d0                	sub    %edx,%eax
f0113c91:	01 c8                	add    %ecx,%eax
f0113c93:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f0113c99:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113c9f:	39 c2                	cmp    %eax,%edx
f0113ca1:	74 17                	je     f0113cba <test_kmalloc_worstfit+0xc97>
		panic("Worst Fit not working correctly");
f0113ca3:	83 ec 04             	sub    $0x4,%esp
f0113ca6:	68 88 21 12 f0       	push   $0xf0122188
f0113cab:	68 77 04 00 00       	push   $0x477
f0113cb0:	68 76 1a 12 f0       	push   $0xf0121a76
f0113cb5:	e8 f5 c4 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113cba:	e8 bb 84 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113cbf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113cc2:	74 17                	je     f0113cdb <test_kmalloc_worstfit+0xcb8>
f0113cc4:	83 ec 04             	sub    $0x4,%esp
f0113cc7:	68 88 1a 12 f0       	push   $0xf0121a88
f0113ccc:	68 78 04 00 00       	push   $0x478
f0113cd1:	68 76 1a 12 f0       	push   $0xf0121a76
f0113cd6:	e8 d4 c4 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113cdb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113cde:	e8 6b 6d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113ce3:	29 c3                	sub    %eax,%ebx
f0113ce5:	89 d8                	mov    %ebx,%eax
f0113ce7:	3d 00 04 00 00       	cmp    $0x400,%eax
f0113cec:	74 17                	je     f0113d05 <test_kmalloc_worstfit+0xce2>
f0113cee:	83 ec 04             	sub    $0x4,%esp
f0113cf1:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0113cf6:	68 79 04 00 00       	push   $0x479
f0113cfb:	68 76 1a 12 f0       	push   $0xf0121a76
f0113d00:	e8 aa c4 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113d05:	ff 45 e8             	incl   -0x18(%ebp)
f0113d08:	83 ec 08             	sub    $0x8,%esp
f0113d0b:	ff 75 e8             	pushl  -0x18(%ebp)
f0113d0e:	68 a8 21 12 f0       	push   $0xf01221a8
f0113d13:	e8 ec 34 ff ff       	call   f0107204 <cprintf>
f0113d18:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113d1b:	e8 2e 6d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113d20:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113d23:	e8 52 84 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113d28:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f0113d2b:	83 ec 0c             	sub    $0xc,%esp
f0113d2e:	68 00 00 20 00       	push   $0x200000
f0113d33:	e8 5d 91 ff ff       	call   f010ce95 <kmalloc>
f0113d38:	83 c4 10             	add    $0x10,%esp
f0113d3b:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f0113d41:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0113d48:	10 00 00 
f0113d4b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113d50:	0f b6 d0             	movzbl %al,%edx
f0113d53:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0113d59:	01 d0                	add    %edx,%eax
f0113d5b:	48                   	dec    %eax
f0113d5c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0113d62:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0113d68:	ba 00 00 00 00       	mov    $0x0,%edx
f0113d6d:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0113d73:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0113d79:	29 d0                	sub    %edx,%eax
f0113d7b:	89 c1                	mov    %eax,%ecx
f0113d7d:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0113d84:	10 00 00 
f0113d87:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113d8c:	0f b6 c0             	movzbl %al,%eax
f0113d8f:	c1 e0 04             	shl    $0x4,%eax
f0113d92:	89 c2                	mov    %eax,%edx
f0113d94:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0113d9a:	01 d0                	add    %edx,%eax
f0113d9c:	48                   	dec    %eax
f0113d9d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0113da3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113da9:	ba 00 00 00 00       	mov    $0x0,%edx
f0113dae:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0113db4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0113dba:	29 d0                	sub    %edx,%eax
f0113dbc:	01 c8                	add    %ecx,%eax
f0113dbe:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f0113dc4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113dca:	39 c2                	cmp    %eax,%edx
f0113dcc:	74 17                	je     f0113de5 <test_kmalloc_worstfit+0xdc2>
		panic("Worst Fit not working correctly");
f0113dce:	83 ec 04             	sub    $0x4,%esp
f0113dd1:	68 88 21 12 f0       	push   $0xf0122188
f0113dd6:	68 80 04 00 00       	push   $0x480
f0113ddb:	68 76 1a 12 f0       	push   $0xf0121a76
f0113de0:	e8 ca c3 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113de5:	e8 90 83 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113dea:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113ded:	74 17                	je     f0113e06 <test_kmalloc_worstfit+0xde3>
f0113def:	83 ec 04             	sub    $0x4,%esp
f0113df2:	68 88 1a 12 f0       	push   $0xf0121a88
f0113df7:	68 81 04 00 00       	push   $0x481
f0113dfc:	68 76 1a 12 f0       	push   $0xf0121a76
f0113e01:	e8 a9 c3 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f0113e06:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113e09:	e8 40 6c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113e0e:	29 c3                	sub    %eax,%ebx
f0113e10:	89 d8                	mov    %ebx,%eax
f0113e12:	3d 00 02 00 00       	cmp    $0x200,%eax
f0113e17:	74 17                	je     f0113e30 <test_kmalloc_worstfit+0xe0d>
f0113e19:	83 ec 04             	sub    $0x4,%esp
f0113e1c:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0113e21:	68 82 04 00 00       	push   $0x482
f0113e26:	68 76 1a 12 f0       	push   $0xf0121a76
f0113e2b:	e8 7f c3 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113e30:	ff 45 e8             	incl   -0x18(%ebp)
f0113e33:	83 ec 08             	sub    $0x8,%esp
f0113e36:	ff 75 e8             	pushl  -0x18(%ebp)
f0113e39:	68 a8 21 12 f0       	push   $0xf01221a8
f0113e3e:	e8 c1 33 ff ff       	call   f0107204 <cprintf>
f0113e43:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113e46:	e8 03 6c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113e4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113e4e:	e8 27 83 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113e53:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f0113e56:	83 ec 0c             	sub    $0xc,%esp
f0113e59:	68 00 00 18 00       	push   $0x180000
f0113e5e:	e8 32 90 ff ff       	call   f010ce95 <kmalloc>
f0113e63:	83 c4 10             	add    $0x10,%esp
f0113e66:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f0113e6c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0113e73:	10 00 00 
f0113e76:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113e7b:	0f b6 d0             	movzbl %al,%edx
f0113e7e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0113e84:	01 d0                	add    %edx,%eax
f0113e86:	48                   	dec    %eax
f0113e87:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0113e8d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113e93:	ba 00 00 00 00       	mov    $0x0,%edx
f0113e98:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0113e9e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0113ea4:	29 d0                	sub    %edx,%eax
f0113ea6:	89 c1                	mov    %eax,%ecx
f0113ea8:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0113eaf:	10 00 00 
f0113eb2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113eb7:	0f b6 c0             	movzbl %al,%eax
f0113eba:	c1 e0 04             	shl    $0x4,%eax
f0113ebd:	89 c2                	mov    %eax,%edx
f0113ebf:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0113ec5:	01 d0                	add    %edx,%eax
f0113ec7:	48                   	dec    %eax
f0113ec8:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0113ece:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0113ed4:	ba 00 00 00 00       	mov    $0x0,%edx
f0113ed9:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0113edf:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0113ee5:	29 d0                	sub    %edx,%eax
f0113ee7:	01 c8                	add    %ecx,%eax
f0113ee9:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0113eef:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0113ef5:	39 c2                	cmp    %eax,%edx
f0113ef7:	74 17                	je     f0113f10 <test_kmalloc_worstfit+0xeed>
		panic("Worst Fit not working correctly");
f0113ef9:	83 ec 04             	sub    $0x4,%esp
f0113efc:	68 88 21 12 f0       	push   $0xf0122188
f0113f01:	68 89 04 00 00       	push   $0x489
f0113f06:	68 76 1a 12 f0       	push   $0xf0121a76
f0113f0b:	e8 9f c2 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0113f10:	e8 65 82 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113f15:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0113f18:	74 17                	je     f0113f31 <test_kmalloc_worstfit+0xf0e>
f0113f1a:	83 ec 04             	sub    $0x4,%esp
f0113f1d:	68 88 1a 12 f0       	push   $0xf0121a88
f0113f22:	68 8a 04 00 00       	push   $0x48a
f0113f27:	68 76 1a 12 f0       	push   $0xf0121a76
f0113f2c:	e8 7e c2 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0113f31:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0113f34:	e8 15 6b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113f39:	29 c3                	sub    %eax,%ebx
f0113f3b:	89 d8                	mov    %ebx,%eax
f0113f3d:	3d 80 01 00 00       	cmp    $0x180,%eax
f0113f42:	74 17                	je     f0113f5b <test_kmalloc_worstfit+0xf38>
f0113f44:	83 ec 04             	sub    $0x4,%esp
f0113f47:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0113f4c:	68 8b 04 00 00       	push   $0x48b
f0113f51:	68 76 1a 12 f0       	push   $0xf0121a76
f0113f56:	e8 54 c2 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0113f5b:	ff 45 e8             	incl   -0x18(%ebp)
f0113f5e:	83 ec 08             	sub    $0x8,%esp
f0113f61:	ff 75 e8             	pushl  -0x18(%ebp)
f0113f64:	68 a8 21 12 f0       	push   $0xf01221a8
f0113f69:	e8 96 32 ff ff       	call   f0107204 <cprintf>
f0113f6e:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f0113f71:	e8 d8 6a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0113f76:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f0113f79:	e8 fc 81 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0113f7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f0113f81:	83 ec 0c             	sub    $0xc,%esp
f0113f84:	68 00 00 08 00       	push   $0x80000
f0113f89:	e8 07 8f ff ff       	call   f010ce95 <kmalloc>
f0113f8e:	83 c4 10             	add    $0x10,%esp
f0113f91:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f0113f97:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0113f9e:	10 00 00 
f0113fa1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113fa6:	0f b6 d0             	movzbl %al,%edx
f0113fa9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0113faf:	01 d0                	add    %edx,%eax
f0113fb1:	48                   	dec    %eax
f0113fb2:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0113fb8:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0113fbe:	ba 00 00 00 00       	mov    $0x0,%edx
f0113fc3:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0113fc9:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0113fcf:	29 d0                	sub    %edx,%eax
f0113fd1:	89 c1                	mov    %eax,%ecx
f0113fd3:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0113fda:	10 00 00 
f0113fdd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0113fe2:	0f b6 c0             	movzbl %al,%eax
f0113fe5:	c1 e0 04             	shl    $0x4,%eax
f0113fe8:	89 c2                	mov    %eax,%edx
f0113fea:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0113ff0:	01 d0                	add    %edx,%eax
f0113ff2:	48                   	dec    %eax
f0113ff3:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0113ff9:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0113fff:	ba 00 00 00 00       	mov    $0x0,%edx
f0114004:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011400a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0114010:	29 d0                	sub    %edx,%eax
f0114012:	01 c8                	add    %ecx,%eax
f0114014:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011401a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114020:	39 c2                	cmp    %eax,%edx
f0114022:	74 17                	je     f011403b <test_kmalloc_worstfit+0x1018>
		panic("Worst Fit not working correctly");
f0114024:	83 ec 04             	sub    $0x4,%esp
f0114027:	68 88 21 12 f0       	push   $0xf0122188
f011402c:	68 92 04 00 00       	push   $0x492
f0114031:	68 76 1a 12 f0       	push   $0xf0121a76
f0114036:	e8 74 c1 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011403b:	e8 3a 81 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114040:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0114043:	74 17                	je     f011405c <test_kmalloc_worstfit+0x1039>
f0114045:	83 ec 04             	sub    $0x4,%esp
f0114048:	68 88 1a 12 f0       	push   $0xf0121a88
f011404d:	68 93 04 00 00       	push   $0x493
f0114052:	68 76 1a 12 f0       	push   $0xf0121a76
f0114057:	e8 53 c1 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011405c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011405f:	e8 ea 69 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114064:	29 c3                	sub    %eax,%ebx
f0114066:	89 d8                	mov    %ebx,%eax
f0114068:	3d 80 00 00 00       	cmp    $0x80,%eax
f011406d:	74 17                	je     f0114086 <test_kmalloc_worstfit+0x1063>
f011406f:	83 ec 04             	sub    $0x4,%esp
f0114072:	68 a6 1f 12 f0       	push   $0xf0121fa6
f0114077:	68 94 04 00 00       	push   $0x494
f011407c:	68 76 1a 12 f0       	push   $0xf0121a76
f0114081:	e8 29 c1 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f0114086:	ff 45 e8             	incl   -0x18(%ebp)
f0114089:	83 ec 08             	sub    $0x8,%esp
f011408c:	ff 75 e8             	pushl  -0x18(%ebp)
f011408f:	68 a8 21 12 f0       	push   $0xf01221a8
f0114094:	e8 6b 31 ff ff       	call   f0107204 <cprintf>
f0114099:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011409c:	e8 ad 69 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01140a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01140a4:	e8 d1 80 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01140a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f01140ac:	83 ec 0c             	sub    $0xc,%esp
f01140af:	68 00 04 00 00       	push   $0x400
f01140b4:	e8 dc 8d ff ff       	call   f010ce95 <kmalloc>
f01140b9:	83 c4 10             	add    $0x10,%esp
f01140bc:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f01140c2:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f01140c9:	10 00 00 
f01140cc:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01140d1:	0f b6 d0             	movzbl %al,%edx
f01140d4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01140da:	01 d0                	add    %edx,%eax
f01140dc:	48                   	dec    %eax
f01140dd:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f01140e3:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01140e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01140ee:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f01140f4:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01140fa:	29 d0                	sub    %edx,%eax
f01140fc:	89 c1                	mov    %eax,%ecx
f01140fe:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0114105:	10 00 00 
f0114108:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011410d:	0f b6 c0             	movzbl %al,%eax
f0114110:	c1 e0 04             	shl    $0x4,%eax
f0114113:	89 c2                	mov    %eax,%edx
f0114115:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011411b:	01 d0                	add    %edx,%eax
f011411d:	48                   	dec    %eax
f011411e:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0114124:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011412a:	ba 00 00 00 00       	mov    $0x0,%edx
f011412f:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0114135:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011413b:	29 d0                	sub    %edx,%eax
f011413d:	01 c8                	add    %ecx,%eax
f011413f:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f0114145:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011414b:	39 c2                	cmp    %eax,%edx
f011414d:	74 17                	je     f0114166 <test_kmalloc_worstfit+0x1143>
		panic("Worst Fit not working correctly");
f011414f:	83 ec 04             	sub    $0x4,%esp
f0114152:	68 88 21 12 f0       	push   $0xf0122188
f0114157:	68 9b 04 00 00       	push   $0x49b
f011415c:	68 76 1a 12 f0       	push   $0xf0121a76
f0114161:	e8 49 c0 fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114166:	e8 0f 80 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011416b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011416e:	74 17                	je     f0114187 <test_kmalloc_worstfit+0x1164>
f0114170:	83 ec 04             	sub    $0x4,%esp
f0114173:	68 88 1a 12 f0       	push   $0xf0121a88
f0114178:	68 9c 04 00 00       	push   $0x49c
f011417d:	68 76 1a 12 f0       	push   $0xf0121a76
f0114182:	e8 28 c0 fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f0114187:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011418a:	e8 bf 68 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011418f:	29 c3                	sub    %eax,%ebx
f0114191:	89 d8                	mov    %ebx,%eax
f0114193:	83 f8 01             	cmp    $0x1,%eax
f0114196:	74 17                	je     f01141af <test_kmalloc_worstfit+0x118c>
f0114198:	83 ec 04             	sub    $0x4,%esp
f011419b:	68 a6 1f 12 f0       	push   $0xf0121fa6
f01141a0:	68 9d 04 00 00       	push   $0x49d
f01141a5:	68 76 1a 12 f0       	push   $0xf0121a76
f01141aa:	e8 00 c0 fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f01141af:	ff 45 e8             	incl   -0x18(%ebp)
f01141b2:	83 ec 08             	sub    $0x8,%esp
f01141b5:	ff 75 e8             	pushl  -0x18(%ebp)
f01141b8:	68 a8 21 12 f0       	push   $0xf01221a8
f01141bd:	e8 42 30 ff ff       	call   f0107204 <cprintf>
f01141c2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f01141c5:	e8 84 68 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01141ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01141cd:	e8 a8 7f ff ff       	call   f010c17a <pf_calculate_free_frames>
f01141d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f01141d5:	83 ec 0c             	sub    $0xc,%esp
f01141d8:	68 00 f0 1f 00       	push   $0x1ff000
f01141dd:	e8 b3 8c ff ff       	call   f010ce95 <kmalloc>
f01141e2:	83 c4 10             	add    $0x10,%esp
f01141e5:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f01141eb:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f01141f2:	10 00 00 
f01141f5:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01141fa:	0f b6 d0             	movzbl %al,%edx
f01141fd:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0114203:	01 d0                	add    %edx,%eax
f0114205:	48                   	dec    %eax
f0114206:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011420c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0114212:	ba 00 00 00 00       	mov    $0x0,%edx
f0114217:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011421d:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0114223:	29 d0                	sub    %edx,%eax
f0114225:	89 c1                	mov    %eax,%ecx
f0114227:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011422e:	10 00 00 
f0114231:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114236:	0f b6 c0             	movzbl %al,%eax
f0114239:	c1 e0 04             	shl    $0x4,%eax
f011423c:	89 c2                	mov    %eax,%edx
f011423e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0114244:	01 d0                	add    %edx,%eax
f0114246:	48                   	dec    %eax
f0114247:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011424d:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0114253:	ba 00 00 00 00       	mov    $0x0,%edx
f0114258:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011425e:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0114264:	29 d0                	sub    %edx,%eax
f0114266:	01 c8                	add    %ecx,%eax
f0114268:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011426e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114274:	39 c2                	cmp    %eax,%edx
f0114276:	74 17                	je     f011428f <test_kmalloc_worstfit+0x126c>
		panic("Worst Fit not working correctly");
f0114278:	83 ec 04             	sub    $0x4,%esp
f011427b:	68 88 21 12 f0       	push   $0xf0122188
f0114280:	68 a4 04 00 00       	push   $0x4a4
f0114285:	68 76 1a 12 f0       	push   $0xf0121a76
f011428a:	e8 20 bf fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011428f:	e8 e6 7e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114294:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0114297:	74 17                	je     f01142b0 <test_kmalloc_worstfit+0x128d>
f0114299:	83 ec 04             	sub    $0x4,%esp
f011429c:	68 88 1a 12 f0       	push   $0xf0121a88
f01142a1:	68 a5 04 00 00       	push   $0x4a5
f01142a6:	68 76 1a 12 f0       	push   $0xf0121a76
f01142ab:	e8 ff be fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f01142b0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01142b3:	e8 96 67 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01142b8:	29 c3                	sub    %eax,%ebx
f01142ba:	89 d8                	mov    %ebx,%eax
f01142bc:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01142c1:	74 17                	je     f01142da <test_kmalloc_worstfit+0x12b7>
f01142c3:	83 ec 04             	sub    $0x4,%esp
f01142c6:	68 a6 1f 12 f0       	push   $0xf0121fa6
f01142cb:	68 a6 04 00 00       	push   $0x4a6
f01142d0:	68 76 1a 12 f0       	push   $0xf0121a76
f01142d5:	e8 d5 be fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f01142da:	ff 45 e8             	incl   -0x18(%ebp)
f01142dd:	83 ec 08             	sub    $0x8,%esp
f01142e0:	ff 75 e8             	pushl  -0x18(%ebp)
f01142e3:	68 a8 21 12 f0       	push   $0xf01221a8
f01142e8:	e8 17 2f ff ff       	call   f0107204 <cprintf>
f01142ed:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f01142f0:	e8 59 67 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01142f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f01142f8:	e8 7d 7e ff ff       	call   f010c17a <pf_calculate_free_frames>
f01142fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f0114300:	83 ec 0c             	sub    $0xc,%esp
f0114303:	68 00 00 40 00       	push   $0x400000
f0114308:	e8 88 8b ff ff       	call   f010ce95 <kmalloc>
f011430d:	83 c4 10             	add    $0x10,%esp
f0114310:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
	if((uint32)tempAddress != 0x0)
f0114316:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011431c:	85 c0                	test   %eax,%eax
f011431e:	74 17                	je     f0114337 <test_kmalloc_worstfit+0x1314>
		panic("Worst Fit not working correctly");
f0114320:	83 ec 04             	sub    $0x4,%esp
f0114323:	68 88 21 12 f0       	push   $0xf0122188
f0114328:	68 ae 04 00 00       	push   $0x4ae
f011432d:	68 76 1a 12 f0       	push   $0xf0121a76
f0114332:	e8 78 be fe ff       	call   f01001af <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114337:	e8 3e 7e ff ff       	call   f010c17a <pf_calculate_free_frames>
f011433c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011433f:	74 17                	je     f0114358 <test_kmalloc_worstfit+0x1335>
f0114341:	83 ec 04             	sub    $0x4,%esp
f0114344:	68 88 1a 12 f0       	push   $0xf0121a88
f0114349:	68 af 04 00 00       	push   $0x4af
f011434e:	68 76 1a 12 f0       	push   $0xf0121a76
f0114353:	e8 57 be fe ff       	call   f01001af <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f0114358:	e8 f1 66 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011435d:	89 c2                	mov    %eax,%edx
f011435f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0114362:	39 c2                	cmp    %eax,%edx
f0114364:	74 17                	je     f011437d <test_kmalloc_worstfit+0x135a>
f0114366:	83 ec 04             	sub    $0x4,%esp
f0114369:	68 a6 1f 12 f0       	push   $0xf0121fa6
f011436e:	68 b0 04 00 00       	push   $0x4b0
f0114373:	68 76 1a 12 f0       	push   $0xf0121a76
f0114378:	e8 32 be fe ff       	call   f01001af <_panic>
	cprintf("Test %d Passed \n", ++count);
f011437d:	ff 45 e8             	incl   -0x18(%ebp)
f0114380:	83 ec 08             	sub    $0x8,%esp
f0114383:	ff 75 e8             	pushl  -0x18(%ebp)
f0114386:	68 a8 21 12 f0       	push   $0xf01221a8
f011438b:	e8 74 2e ff ff       	call   f0107204 <cprintf>
f0114390:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f0114393:	83 ec 0c             	sub    $0xc,%esp
f0114396:	68 bc 21 12 f0       	push   $0xf01221bc
f011439b:	e8 64 2e ff ff       	call   f0107204 <cprintf>
f01143a0:	83 c4 10             	add    $0x10,%esp


	return 1;
f01143a3:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01143a8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01143ab:	5b                   	pop    %ebx
f01143ac:	5f                   	pop    %edi
f01143ad:	5d                   	pop    %ebp
f01143ae:	c3                   	ret    

f01143af <test_kfree>:

int test_kfree()
{
f01143af:	55                   	push   %ebp
f01143b0:	89 e5                	mov    %esp,%ebp
f01143b2:	57                   	push   %edi
f01143b3:	53                   	push   %ebx
f01143b4:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f01143ba:	83 ec 0c             	sub    $0xc,%esp
f01143bd:	68 b8 19 12 f0       	push   $0xf01219b8
f01143c2:	e8 3d 2e ff ff       	call   f0107204 <cprintf>
f01143c7:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01143ca:	83 ec 0c             	sub    $0xc,%esp
f01143cd:	68 e8 19 12 f0       	push   $0xf01219e8
f01143d2:	e8 2d 2e ff ff       	call   f0107204 <cprintf>
f01143d7:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01143da:	83 ec 0c             	sub    $0xc,%esp
f01143dd:	68 b8 19 12 f0       	push   $0xf01219b8
f01143e2:	e8 1d 2e ff ff       	call   f0107204 <cprintf>
f01143e7:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01143ea:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01143ee:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01143f2:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01143f8:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01143fe:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0114405:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011440c:	e8 3d 66 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114411:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0114414:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f011441a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011441f:	b8 00 00 00 00       	mov    $0x0,%eax
f0114424:	89 d7                	mov    %edx,%edi
f0114426:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0114428:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f011442e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114433:	b8 00 00 00 00       	mov    $0x0,%eax
f0114438:	89 d7                	mov    %edx,%edi
f011443a:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011443c:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0114442:	b9 14 00 00 00       	mov    $0x14,%ecx
f0114447:	b8 00 00 00 00       	mov    $0x0,%eax
f011444c:	89 d7                	mov    %edx,%edi
f011444e:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114450:	e8 f9 65 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114455:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114458:	e8 1d 7d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011445d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0114460:	83 ec 0c             	sub    $0xc,%esp
f0114463:	68 00 fc 1f 00       	push   $0x1ffc00
f0114468:	e8 28 8a ff ff       	call   f010ce95 <kmalloc>
f011446d:	83 c4 10             	add    $0x10,%esp
f0114470:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114476:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011447c:	89 c1                	mov    %eax,%ecx
f011447e:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0114485:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011448a:	0f b6 d0             	movzbl %al,%edx
f011448d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114490:	01 d0                	add    %edx,%eax
f0114492:	48                   	dec    %eax
f0114493:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0114496:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114499:	ba 00 00 00 00       	mov    $0x0,%edx
f011449e:	f7 75 c8             	divl   -0x38(%ebp)
f01144a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01144a4:	29 d0                	sub    %edx,%eax
f01144a6:	89 c3                	mov    %eax,%ebx
f01144a8:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01144af:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01144b4:	0f b6 c0             	movzbl %al,%eax
f01144b7:	c1 e0 04             	shl    $0x4,%eax
f01144ba:	89 c2                	mov    %eax,%edx
f01144bc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144bf:	01 d0                	add    %edx,%eax
f01144c1:	48                   	dec    %eax
f01144c2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01144c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144c8:	ba 00 00 00 00       	mov    $0x0,%edx
f01144cd:	f7 75 c0             	divl   -0x40(%ebp)
f01144d0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01144d3:	29 d0                	sub    %edx,%eax
f01144d5:	01 d8                	add    %ebx,%eax
f01144d7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01144dc:	39 c1                	cmp    %eax,%ecx
f01144de:	74 17                	je     f01144f7 <test_kfree+0x148>
f01144e0:	83 ec 04             	sub    $0x4,%esp
f01144e3:	68 54 1b 12 f0       	push   $0xf0121b54
f01144e8:	68 d8 04 00 00       	push   $0x4d8
f01144ed:	68 76 1a 12 f0       	push   $0xf0121a76
f01144f2:	e8 b8 bc fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01144f7:	e8 7e 7c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01144fc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01144ff:	74 17                	je     f0114518 <test_kfree+0x169>
f0114501:	83 ec 04             	sub    $0x4,%esp
f0114504:	68 88 1a 12 f0       	push   $0xf0121a88
f0114509:	68 d9 04 00 00       	push   $0x4d9
f011450e:	68 76 1a 12 f0       	push   $0xf0121a76
f0114513:	e8 97 bc fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114518:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011451b:	e8 2e 65 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114520:	29 c3                	sub    %eax,%ebx
f0114522:	89 d8                	mov    %ebx,%eax
f0114524:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114529:	74 17                	je     f0114542 <test_kfree+0x193>
f011452b:	83 ec 04             	sub    $0x4,%esp
f011452e:	68 f0 1a 12 f0       	push   $0xf0121af0
f0114533:	68 da 04 00 00       	push   $0x4da
f0114538:	68 76 1a 12 f0       	push   $0xf0121a76
f011453d:	e8 6d bc fe ff       	call   f01001af <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0114542:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0114549:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011454c:	e8 fd 64 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114551:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114554:	e8 21 7c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114559:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011455c:	83 ec 0c             	sub    $0xc,%esp
f011455f:	68 00 fc 1f 00       	push   $0x1ffc00
f0114564:	e8 2c 89 ff ff       	call   f010ce95 <kmalloc>
f0114569:	83 c4 10             	add    $0x10,%esp
f011456c:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114572:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0114578:	89 c1                	mov    %eax,%ecx
f011457a:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0114581:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114586:	0f b6 d0             	movzbl %al,%edx
f0114589:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011458c:	01 d0                	add    %edx,%eax
f011458e:	48                   	dec    %eax
f011458f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0114592:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114595:	ba 00 00 00 00       	mov    $0x0,%edx
f011459a:	f7 75 b8             	divl   -0x48(%ebp)
f011459d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01145a0:	29 d0                	sub    %edx,%eax
f01145a2:	89 c3                	mov    %eax,%ebx
f01145a4:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01145ab:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01145b0:	0f b6 c0             	movzbl %al,%eax
f01145b3:	c1 e0 04             	shl    $0x4,%eax
f01145b6:	89 c2                	mov    %eax,%edx
f01145b8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01145bb:	01 d0                	add    %edx,%eax
f01145bd:	48                   	dec    %eax
f01145be:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01145c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01145c4:	ba 00 00 00 00       	mov    $0x0,%edx
f01145c9:	f7 75 b0             	divl   -0x50(%ebp)
f01145cc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01145cf:	29 d0                	sub    %edx,%eax
f01145d1:	01 d8                	add    %ebx,%eax
f01145d3:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01145d8:	39 c1                	cmp    %eax,%ecx
f01145da:	74 17                	je     f01145f3 <test_kfree+0x244>
f01145dc:	83 ec 04             	sub    $0x4,%esp
f01145df:	68 54 1b 12 f0       	push   $0xf0121b54
f01145e4:	68 e1 04 00 00       	push   $0x4e1
f01145e9:	68 76 1a 12 f0       	push   $0xf0121a76
f01145ee:	e8 bc bb fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01145f3:	e8 82 7b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01145f8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01145fb:	74 17                	je     f0114614 <test_kfree+0x265>
f01145fd:	83 ec 04             	sub    $0x4,%esp
f0114600:	68 88 1a 12 f0       	push   $0xf0121a88
f0114605:	68 e2 04 00 00       	push   $0x4e2
f011460a:	68 76 1a 12 f0       	push   $0xf0121a76
f011460f:	e8 9b bb fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114614:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114617:	e8 32 64 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011461c:	29 c3                	sub    %eax,%ebx
f011461e:	89 d8                	mov    %ebx,%eax
f0114620:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114625:	74 17                	je     f011463e <test_kfree+0x28f>
f0114627:	83 ec 04             	sub    $0x4,%esp
f011462a:	68 f0 1a 12 f0       	push   $0xf0121af0
f011462f:	68 e3 04 00 00       	push   $0x4e3
f0114634:	68 76 1a 12 f0       	push   $0xf0121a76
f0114639:	e8 71 bb fe ff       	call   f01001af <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011463e:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0114645:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0114648:	e8 01 64 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011464d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114650:	e8 25 7b ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114655:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0114658:	83 ec 0c             	sub    $0xc,%esp
f011465b:	68 00 08 00 00       	push   $0x800
f0114660:	e8 30 88 ff ff       	call   f010ce95 <kmalloc>
f0114665:	83 c4 10             	add    $0x10,%esp
f0114668:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011466e:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0114674:	89 c1                	mov    %eax,%ecx
f0114676:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011467d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114682:	0f b6 d0             	movzbl %al,%edx
f0114685:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114688:	01 d0                	add    %edx,%eax
f011468a:	48                   	dec    %eax
f011468b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011468e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114691:	ba 00 00 00 00       	mov    $0x0,%edx
f0114696:	f7 75 a8             	divl   -0x58(%ebp)
f0114699:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011469c:	29 d0                	sub    %edx,%eax
f011469e:	89 c3                	mov    %eax,%ebx
f01146a0:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01146a7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01146ac:	0f b6 c0             	movzbl %al,%eax
f01146af:	c1 e0 04             	shl    $0x4,%eax
f01146b2:	89 c2                	mov    %eax,%edx
f01146b4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01146b7:	01 d0                	add    %edx,%eax
f01146b9:	48                   	dec    %eax
f01146ba:	89 45 9c             	mov    %eax,-0x64(%ebp)
f01146bd:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01146c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01146c5:	f7 75 a0             	divl   -0x60(%ebp)
f01146c8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01146cb:	29 d0                	sub    %edx,%eax
f01146cd:	01 d8                	add    %ebx,%eax
f01146cf:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01146d4:	39 c1                	cmp    %eax,%ecx
f01146d6:	74 17                	je     f01146ef <test_kfree+0x340>
f01146d8:	83 ec 04             	sub    $0x4,%esp
f01146db:	68 54 1b 12 f0       	push   $0xf0121b54
f01146e0:	68 ea 04 00 00       	push   $0x4ea
f01146e5:	68 76 1a 12 f0       	push   $0xf0121a76
f01146ea:	e8 c0 ba fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01146ef:	e8 86 7a ff ff       	call   f010c17a <pf_calculate_free_frames>
f01146f4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01146f7:	74 17                	je     f0114710 <test_kfree+0x361>
f01146f9:	83 ec 04             	sub    $0x4,%esp
f01146fc:	68 88 1a 12 f0       	push   $0xf0121a88
f0114701:	68 eb 04 00 00       	push   $0x4eb
f0114706:	68 76 1a 12 f0       	push   $0xf0121a76
f011470b:	e8 9f ba fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114710:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114713:	e8 36 63 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114718:	29 c3                	sub    %eax,%ebx
f011471a:	89 d8                	mov    %ebx,%eax
f011471c:	83 f8 01             	cmp    $0x1,%eax
f011471f:	74 17                	je     f0114738 <test_kfree+0x389>
f0114721:	83 ec 04             	sub    $0x4,%esp
f0114724:	68 f0 1a 12 f0       	push   $0xf0121af0
f0114729:	68 ec 04 00 00       	push   $0x4ec
f011472e:	68 76 1a 12 f0       	push   $0xf0121a76
f0114733:	e8 77 ba fe ff       	call   f01001af <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0114738:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f011473f:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0114742:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0114748:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011474b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114752:	eb 0e                	jmp    f0114762 <test_kfree+0x3b3>
		{
			ptr[i] = 2 ;
f0114754:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114757:	8b 45 98             	mov    -0x68(%ebp),%eax
f011475a:	01 d0                	add    %edx,%eax
f011475c:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011475f:	ff 45 f4             	incl   -0xc(%ebp)
f0114762:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0114768:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011476b:	7f e7                	jg     f0114754 <test_kfree+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011476d:	e8 dc 62 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114772:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114775:	e8 00 7a ff ff       	call   f010c17a <pf_calculate_free_frames>
f011477a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011477d:	83 ec 0c             	sub    $0xc,%esp
f0114780:	68 00 08 00 00       	push   $0x800
f0114785:	e8 0b 87 ff ff       	call   f010ce95 <kmalloc>
f011478a:	83 c4 10             	add    $0x10,%esp
f011478d:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114793:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0114799:	89 c1                	mov    %eax,%ecx
f011479b:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01147a2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01147a7:	0f b6 d0             	movzbl %al,%edx
f01147aa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147ad:	01 d0                	add    %edx,%eax
f01147af:	48                   	dec    %eax
f01147b0:	89 45 90             	mov    %eax,-0x70(%ebp)
f01147b3:	8b 45 90             	mov    -0x70(%ebp),%eax
f01147b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01147bb:	f7 75 94             	divl   -0x6c(%ebp)
f01147be:	8b 45 90             	mov    -0x70(%ebp),%eax
f01147c1:	29 d0                	sub    %edx,%eax
f01147c3:	89 c3                	mov    %eax,%ebx
f01147c5:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01147cc:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01147d1:	0f b6 c0             	movzbl %al,%eax
f01147d4:	c1 e0 04             	shl    $0x4,%eax
f01147d7:	89 c2                	mov    %eax,%edx
f01147d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01147dc:	01 d0                	add    %edx,%eax
f01147de:	48                   	dec    %eax
f01147df:	89 45 88             	mov    %eax,-0x78(%ebp)
f01147e2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01147e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01147ea:	f7 75 8c             	divl   -0x74(%ebp)
f01147ed:	8b 45 88             	mov    -0x78(%ebp),%eax
f01147f0:	29 d0                	sub    %edx,%eax
f01147f2:	01 d8                	add    %ebx,%eax
f01147f4:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01147f9:	39 c1                	cmp    %eax,%ecx
f01147fb:	74 17                	je     f0114814 <test_kfree+0x465>
f01147fd:	83 ec 04             	sub    $0x4,%esp
f0114800:	68 54 1b 12 f0       	push   $0xf0121b54
f0114805:	68 f8 04 00 00       	push   $0x4f8
f011480a:	68 76 1a 12 f0       	push   $0xf0121a76
f011480f:	e8 9b b9 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114814:	e8 61 79 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114819:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011481c:	74 17                	je     f0114835 <test_kfree+0x486>
f011481e:	83 ec 04             	sub    $0x4,%esp
f0114821:	68 88 1a 12 f0       	push   $0xf0121a88
f0114826:	68 f9 04 00 00       	push   $0x4f9
f011482b:	68 76 1a 12 f0       	push   $0xf0121a76
f0114830:	e8 7a b9 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114835:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114838:	e8 11 62 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011483d:	29 c3                	sub    %eax,%ebx
f011483f:	89 d8                	mov    %ebx,%eax
f0114841:	83 f8 01             	cmp    $0x1,%eax
f0114844:	74 17                	je     f011485d <test_kfree+0x4ae>
f0114846:	83 ec 04             	sub    $0x4,%esp
f0114849:	68 f0 1a 12 f0       	push   $0xf0121af0
f011484e:	68 fa 04 00 00       	push   $0x4fa
f0114853:	68 76 1a 12 f0       	push   $0xf0121a76
f0114858:	e8 52 b9 fe ff       	call   f01001af <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011485d:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f0114864:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0114867:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011486d:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0114870:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114877:	eb 0e                	jmp    f0114887 <test_kfree+0x4d8>
		{
			ptr[i] = 3 ;
f0114879:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011487c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011487f:	01 d0                	add    %edx,%eax
f0114881:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0114884:	ff 45 f4             	incl   -0xc(%ebp)
f0114887:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011488d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114890:	7f e7                	jg     f0114879 <test_kfree+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0114892:	e8 b7 61 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114897:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011489a:	e8 db 78 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011489f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01148a2:	83 ec 0c             	sub    $0xc,%esp
f01148a5:	68 00 1c 00 00       	push   $0x1c00
f01148aa:	e8 e6 85 ff ff       	call   f010ce95 <kmalloc>
f01148af:	83 c4 10             	add    $0x10,%esp
f01148b2:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01148b8:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01148be:	89 c1                	mov    %eax,%ecx
f01148c0:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f01148c7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01148cc:	0f b6 d0             	movzbl %al,%edx
f01148cf:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01148d2:	01 d0                	add    %edx,%eax
f01148d4:	48                   	dec    %eax
f01148d5:	89 45 80             	mov    %eax,-0x80(%ebp)
f01148d8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01148db:	ba 00 00 00 00       	mov    $0x0,%edx
f01148e0:	f7 75 84             	divl   -0x7c(%ebp)
f01148e3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01148e6:	29 d0                	sub    %edx,%eax
f01148e8:	89 c3                	mov    %eax,%ebx
f01148ea:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01148f1:	10 00 00 
f01148f4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01148f9:	0f b6 c0             	movzbl %al,%eax
f01148fc:	c1 e0 04             	shl    $0x4,%eax
f01148ff:	89 c2                	mov    %eax,%edx
f0114901:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0114907:	01 d0                	add    %edx,%eax
f0114909:	48                   	dec    %eax
f011490a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0114910:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114916:	ba 00 00 00 00       	mov    $0x0,%edx
f011491b:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0114921:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0114927:	29 d0                	sub    %edx,%eax
f0114929:	01 d8                	add    %ebx,%eax
f011492b:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0114930:	39 c1                	cmp    %eax,%ecx
f0114932:	74 17                	je     f011494b <test_kfree+0x59c>
f0114934:	83 ec 04             	sub    $0x4,%esp
f0114937:	68 54 1b 12 f0       	push   $0xf0121b54
f011493c:	68 06 05 00 00       	push   $0x506
f0114941:	68 76 1a 12 f0       	push   $0xf0121a76
f0114946:	e8 64 b8 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011494b:	e8 2a 78 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114950:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114953:	74 17                	je     f011496c <test_kfree+0x5bd>
f0114955:	83 ec 04             	sub    $0x4,%esp
f0114958:	68 88 1a 12 f0       	push   $0xf0121a88
f011495d:	68 07 05 00 00       	push   $0x507
f0114962:	68 76 1a 12 f0       	push   $0xf0121a76
f0114967:	e8 43 b8 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011496c:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011496f:	e8 da 60 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114974:	29 c3                	sub    %eax,%ebx
f0114976:	89 d8                	mov    %ebx,%eax
f0114978:	83 f8 02             	cmp    $0x2,%eax
f011497b:	74 17                	je     f0114994 <test_kfree+0x5e5>
f011497d:	83 ec 04             	sub    $0x4,%esp
f0114980:	68 f0 1a 12 f0       	push   $0xf0121af0
f0114985:	68 08 05 00 00       	push   $0x508
f011498a:	68 76 1a 12 f0       	push   $0xf0121a76
f011498f:	e8 1b b8 fe ff       	call   f01001af <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0114994:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f011499b:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011499e:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01149a4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01149a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01149ae:	eb 0e                	jmp    f01149be <test_kfree+0x60f>
		{
			ptr[i] = 4 ;
f01149b0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01149b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01149b6:	01 d0                	add    %edx,%eax
f01149b8:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01149bb:	ff 45 f4             	incl   -0xc(%ebp)
f01149be:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01149c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01149c7:	7f e7                	jg     f01149b0 <test_kfree+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01149c9:	e8 80 60 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01149ce:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01149d1:	e8 a4 77 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01149d6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01149d9:	83 ec 0c             	sub    $0xc,%esp
f01149dc:	68 00 fc 2f 00       	push   $0x2ffc00
f01149e1:	e8 af 84 ff ff       	call   f010ce95 <kmalloc>
f01149e6:	83 c4 10             	add    $0x10,%esp
f01149e9:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01149ef:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01149f5:	89 c1                	mov    %eax,%ecx
f01149f7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01149fe:	10 00 00 
f0114a01:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114a06:	0f b6 d0             	movzbl %al,%edx
f0114a09:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114a0f:	01 d0                	add    %edx,%eax
f0114a11:	48                   	dec    %eax
f0114a12:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0114a18:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114a1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a23:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0114a29:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0114a2f:	29 d0                	sub    %edx,%eax
f0114a31:	89 c3                	mov    %eax,%ebx
f0114a33:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0114a3a:	10 00 00 
f0114a3d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114a42:	0f b6 c0             	movzbl %al,%eax
f0114a45:	c1 e0 04             	shl    $0x4,%eax
f0114a48:	89 c2                	mov    %eax,%edx
f0114a4a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0114a50:	01 d0                	add    %edx,%eax
f0114a52:	48                   	dec    %eax
f0114a53:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0114a59:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114a5f:	ba 00 00 00 00       	mov    $0x0,%edx
f0114a64:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0114a6a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0114a70:	29 d0                	sub    %edx,%eax
f0114a72:	01 d8                	add    %ebx,%eax
f0114a74:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0114a79:	39 c1                	cmp    %eax,%ecx
f0114a7b:	74 17                	je     f0114a94 <test_kfree+0x6e5>
f0114a7d:	83 ec 04             	sub    $0x4,%esp
f0114a80:	68 54 1b 12 f0       	push   $0xf0121b54
f0114a85:	68 14 05 00 00       	push   $0x514
f0114a8a:	68 76 1a 12 f0       	push   $0xf0121a76
f0114a8f:	e8 1b b7 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114a94:	e8 e1 76 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114a99:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114a9c:	74 17                	je     f0114ab5 <test_kfree+0x706>
f0114a9e:	83 ec 04             	sub    $0x4,%esp
f0114aa1:	68 88 1a 12 f0       	push   $0xf0121a88
f0114aa6:	68 15 05 00 00       	push   $0x515
f0114aab:	68 76 1a 12 f0       	push   $0xf0121a76
f0114ab0:	e8 fa b6 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114ab5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114ab8:	e8 91 5f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114abd:	29 c3                	sub    %eax,%ebx
f0114abf:	89 d8                	mov    %ebx,%eax
f0114ac1:	3d 00 03 00 00       	cmp    $0x300,%eax
f0114ac6:	74 17                	je     f0114adf <test_kfree+0x730>
f0114ac8:	83 ec 04             	sub    $0x4,%esp
f0114acb:	68 f0 1a 12 f0       	push   $0xf0121af0
f0114ad0:	68 16 05 00 00       	push   $0x516
f0114ad5:	68 76 1a 12 f0       	push   $0xf0121a76
f0114ada:	e8 d0 b6 fe ff       	call   f01001af <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0114adf:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0114ae6:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0114ae9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0114aef:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0114af2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114af9:	eb 0e                	jmp    f0114b09 <test_kfree+0x75a>
		{
			ptr[i] = 5 ;
f0114afb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114afe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114b01:	01 d0                	add    %edx,%eax
f0114b03:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0114b06:	ff 45 f4             	incl   -0xc(%ebp)
f0114b09:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0114b0f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114b12:	7f e7                	jg     f0114afb <test_kfree+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114b14:	e8 35 5f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114b19:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114b1c:	e8 59 76 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114b21:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0114b24:	83 ec 0c             	sub    $0xc,%esp
f0114b27:	68 00 fc 5f 00       	push   $0x5ffc00
f0114b2c:	e8 64 83 ff ff       	call   f010ce95 <kmalloc>
f0114b31:	83 c4 10             	add    $0x10,%esp
f0114b34:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114b3a:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0114b40:	89 c1                	mov    %eax,%ecx
f0114b42:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0114b49:	10 00 00 
f0114b4c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114b51:	0f b6 d0             	movzbl %al,%edx
f0114b54:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0114b5a:	01 d0                	add    %edx,%eax
f0114b5c:	48                   	dec    %eax
f0114b5d:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0114b63:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114b69:	ba 00 00 00 00       	mov    $0x0,%edx
f0114b6e:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0114b74:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0114b7a:	29 d0                	sub    %edx,%eax
f0114b7c:	89 c3                	mov    %eax,%ebx
f0114b7e:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0114b85:	10 00 00 
f0114b88:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114b8d:	0f b6 c0             	movzbl %al,%eax
f0114b90:	c1 e0 04             	shl    $0x4,%eax
f0114b93:	89 c2                	mov    %eax,%edx
f0114b95:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0114b9b:	01 d0                	add    %edx,%eax
f0114b9d:	48                   	dec    %eax
f0114b9e:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0114ba4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114baa:	ba 00 00 00 00       	mov    $0x0,%edx
f0114baf:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0114bb5:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0114bbb:	29 d0                	sub    %edx,%eax
f0114bbd:	01 d8                	add    %ebx,%eax
f0114bbf:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0114bc4:	39 c1                	cmp    %eax,%ecx
f0114bc6:	74 17                	je     f0114bdf <test_kfree+0x830>
f0114bc8:	83 ec 04             	sub    $0x4,%esp
f0114bcb:	68 54 1b 12 f0       	push   $0xf0121b54
f0114bd0:	68 22 05 00 00       	push   $0x522
f0114bd5:	68 76 1a 12 f0       	push   $0xf0121a76
f0114bda:	e8 d0 b5 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114bdf:	e8 96 75 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114be4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114be7:	74 17                	je     f0114c00 <test_kfree+0x851>
f0114be9:	83 ec 04             	sub    $0x4,%esp
f0114bec:	68 88 1a 12 f0       	push   $0xf0121a88
f0114bf1:	68 23 05 00 00       	push   $0x523
f0114bf6:	68 76 1a 12 f0       	push   $0xf0121a76
f0114bfb:	e8 af b5 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114c00:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114c03:	e8 46 5e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114c08:	29 c3                	sub    %eax,%ebx
f0114c0a:	89 d8                	mov    %ebx,%eax
f0114c0c:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114c11:	74 17                	je     f0114c2a <test_kfree+0x87b>
f0114c13:	83 ec 04             	sub    $0x4,%esp
f0114c16:	68 f0 1a 12 f0       	push   $0xf0121af0
f0114c1b:	68 24 05 00 00       	push   $0x524
f0114c20:	68 76 1a 12 f0       	push   $0xf0121a76
f0114c25:	e8 85 b5 fe ff       	call   f01001af <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0114c2a:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0114c31:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0114c34:	e8 15 5e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114c39:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114c3c:	e8 39 75 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114c41:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0114c44:	83 ec 0c             	sub    $0xc,%esp
f0114c47:	68 00 38 00 00       	push   $0x3800
f0114c4c:	e8 44 82 ff ff       	call   f010ce95 <kmalloc>
f0114c51:	83 c4 10             	add    $0x10,%esp
f0114c54:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0114c5a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0114c60:	89 c1                	mov    %eax,%ecx
f0114c62:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0114c69:	10 00 00 
f0114c6c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114c71:	0f b6 d0             	movzbl %al,%edx
f0114c74:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0114c7a:	01 d0                	add    %edx,%eax
f0114c7c:	48                   	dec    %eax
f0114c7d:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0114c83:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114c89:	ba 00 00 00 00       	mov    $0x0,%edx
f0114c8e:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0114c94:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0114c9a:	29 d0                	sub    %edx,%eax
f0114c9c:	89 c3                	mov    %eax,%ebx
f0114c9e:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0114ca5:	10 00 00 
f0114ca8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0114cad:	0f b6 c0             	movzbl %al,%eax
f0114cb0:	c1 e0 04             	shl    $0x4,%eax
f0114cb3:	89 c2                	mov    %eax,%edx
f0114cb5:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0114cbb:	01 d0                	add    %edx,%eax
f0114cbd:	48                   	dec    %eax
f0114cbe:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0114cc4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114cca:	ba 00 00 00 00       	mov    $0x0,%edx
f0114ccf:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0114cd5:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0114cdb:	29 d0                	sub    %edx,%eax
f0114cdd:	01 d8                	add    %ebx,%eax
f0114cdf:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0114ce4:	39 c1                	cmp    %eax,%ecx
f0114ce6:	74 17                	je     f0114cff <test_kfree+0x950>
f0114ce8:	83 ec 04             	sub    $0x4,%esp
f0114ceb:	68 54 1b 12 f0       	push   $0xf0121b54
f0114cf0:	68 2b 05 00 00       	push   $0x52b
f0114cf5:	68 76 1a 12 f0       	push   $0xf0121a76
f0114cfa:	e8 b0 b4 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114cff:	e8 76 74 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114d04:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0114d07:	74 17                	je     f0114d20 <test_kfree+0x971>
f0114d09:	83 ec 04             	sub    $0x4,%esp
f0114d0c:	68 88 1a 12 f0       	push   $0xf0121a88
f0114d11:	68 2c 05 00 00       	push   $0x52c
f0114d16:	68 76 1a 12 f0       	push   $0xf0121a76
f0114d1b:	e8 8f b4 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0114d20:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0114d23:	e8 26 5d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114d28:	29 c3                	sub    %eax,%ebx
f0114d2a:	89 d8                	mov    %ebx,%eax
f0114d2c:	83 f8 04             	cmp    $0x4,%eax
f0114d2f:	74 17                	je     f0114d48 <test_kfree+0x999>
f0114d31:	83 ec 04             	sub    $0x4,%esp
f0114d34:	68 f0 1a 12 f0       	push   $0xf0121af0
f0114d39:	68 2d 05 00 00       	push   $0x52d
f0114d3e:	68 76 1a 12 f0       	push   $0xf0121a76
f0114d43:	e8 67 b4 fe ff       	call   f01001af <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0114d48:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f0114d4f:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0114d52:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0114d58:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0114d5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114d62:	eb 0e                	jmp    f0114d72 <test_kfree+0x9c3>
		{
			ptr[i] = 7 ;
f0114d64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0114d67:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114d6a:	01 d0                	add    %edx,%eax
f0114d6c:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0114d6f:	ff 45 f4             	incl   -0xc(%ebp)
f0114d72:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0114d78:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114d7b:	7f e7                	jg     f0114d64 <test_kfree+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0114d7d:	e8 cc 5c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114d82:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0114d88:	e8 ed 73 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114d8d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0114d93:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0114d99:	83 ec 0c             	sub    $0xc,%esp
f0114d9c:	50                   	push   %eax
f0114d9d:	e8 3e 81 ff ff       	call   f010cee0 <kfree>
f0114da2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114da5:	e8 d0 73 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114daa:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0114db0:	74 17                	je     f0114dc9 <test_kfree+0xa1a>
f0114db2:	83 ec 04             	sub    $0x4,%esp
f0114db5:	68 88 1a 12 f0       	push   $0xf0121a88
f0114dba:	68 3c 05 00 00       	push   $0x53c
f0114dbf:	68 76 1a 12 f0       	push   $0xf0121a76
f0114dc4:	e8 e6 b3 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0114dc9:	e8 80 5c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114dce:	89 c2                	mov    %eax,%edx
f0114dd0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114dd6:	29 c2                	sub    %eax,%edx
f0114dd8:	89 d0                	mov    %edx,%eax
f0114dda:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114ddf:	74 17                	je     f0114df8 <test_kfree+0xa49>
f0114de1:	83 ec 04             	sub    $0x4,%esp
f0114de4:	68 f8 21 12 f0       	push   $0xf01221f8
f0114de9:	68 3d 05 00 00       	push   $0x53d
f0114dee:	68 76 1a 12 f0       	push   $0xf0121a76
f0114df3:	e8 b7 b3 fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0114df8:	e8 51 5c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114dfd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114e03:	e8 72 73 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114e08:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0114e0e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0114e14:	83 ec 0c             	sub    $0xc,%esp
f0114e17:	50                   	push   %eax
f0114e18:	e8 c3 80 ff ff       	call   f010cee0 <kfree>
f0114e1d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e20:	e8 55 73 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114e25:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0114e2b:	74 17                	je     f0114e44 <test_kfree+0xa95>
f0114e2d:	83 ec 04             	sub    $0x4,%esp
f0114e30:	68 88 1a 12 f0       	push   $0xf0121a88
f0114e35:	68 43 05 00 00       	push   $0x543
f0114e3a:	68 76 1a 12 f0       	push   $0xf0121a76
f0114e3f:	e8 6b b3 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0114e44:	e8 05 5c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114e49:	89 c2                	mov    %eax,%edx
f0114e4b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114e51:	29 c2                	sub    %eax,%edx
f0114e53:	89 d0                	mov    %edx,%eax
f0114e55:	3d 00 02 00 00       	cmp    $0x200,%eax
f0114e5a:	74 17                	je     f0114e73 <test_kfree+0xac4>
f0114e5c:	83 ec 04             	sub    $0x4,%esp
f0114e5f:	68 f8 21 12 f0       	push   $0xf01221f8
f0114e64:	68 44 05 00 00       	push   $0x544
f0114e69:	68 76 1a 12 f0       	push   $0xf0121a76
f0114e6e:	e8 3c b3 fe ff       	call   f01001af <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0114e73:	e8 d6 5b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114e78:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0114e7e:	e8 f7 72 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114e83:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0114e89:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0114e8f:	83 ec 0c             	sub    $0xc,%esp
f0114e92:	50                   	push   %eax
f0114e93:	e8 48 80 ff ff       	call   f010cee0 <kfree>
f0114e98:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0114e9b:	e8 da 72 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0114ea0:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0114ea6:	74 17                	je     f0114ebf <test_kfree+0xb10>
f0114ea8:	83 ec 04             	sub    $0x4,%esp
f0114eab:	68 88 1a 12 f0       	push   $0xf0121a88
f0114eb0:	68 4a 05 00 00       	push   $0x54a
f0114eb5:	68 76 1a 12 f0       	push   $0xf0121a76
f0114eba:	e8 f0 b2 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0114ebf:	e8 8a 5b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0114ec4:	89 c2                	mov    %eax,%edx
f0114ec6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0114ecc:	29 c2                	sub    %eax,%edx
f0114ece:	89 d0                	mov    %edx,%eax
f0114ed0:	3d 00 06 00 00       	cmp    $0x600,%eax
f0114ed5:	74 17                	je     f0114eee <test_kfree+0xb3f>
f0114ed7:	83 ec 04             	sub    $0x4,%esp
f0114eda:	68 f8 21 12 f0       	push   $0xf01221f8
f0114edf:	68 4b 05 00 00       	push   $0x54b
f0114ee4:	68 76 1a 12 f0       	push   $0xf0121a76
f0114ee9:	e8 c1 b2 fe ff       	call   f01001af <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0114eee:	83 ec 0c             	sub    $0xc,%esp
f0114ef1:	68 30 22 12 f0       	push   $0xf0122230
f0114ef6:	e8 09 23 ff ff       	call   f0107204 <cprintf>
f0114efb:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0114efe:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0114f04:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0114f07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114f0e:	eb 1e                	jmp    f0114f2e <test_kfree+0xb7f>
		{
			sums[2] += ptr[i] ;
f0114f10:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0114f16:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114f19:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114f1c:	01 c8                	add    %ecx,%eax
f0114f1e:	8a 00                	mov    (%eax),%al
f0114f20:	0f be c0             	movsbl %al,%eax
f0114f23:	01 d0                	add    %edx,%eax
f0114f25:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0114f2b:	ff 45 f4             	incl   -0xc(%ebp)
f0114f2e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0114f34:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114f37:	7f d7                	jg     f0114f10 <test_kfree+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0114f39:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0114f3f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0114f45:	01 c0                	add    %eax,%eax
f0114f47:	39 c2                	cmp    %eax,%edx
f0114f49:	74 17                	je     f0114f62 <test_kfree+0xbb3>
f0114f4b:	83 ec 04             	sub    $0x4,%esp
f0114f4e:	68 54 22 12 f0       	push   $0xf0122254
f0114f53:	68 58 05 00 00       	push   $0x558
f0114f58:	68 76 1a 12 f0       	push   $0xf0121a76
f0114f5d:	e8 4d b2 fe ff       	call   f01001af <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0114f62:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0114f68:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0114f6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114f72:	eb 1e                	jmp    f0114f92 <test_kfree+0xbe3>
		{
			sums[3] += ptr[i] ;
f0114f74:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0114f7a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114f7d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114f80:	01 c8                	add    %ecx,%eax
f0114f82:	8a 00                	mov    (%eax),%al
f0114f84:	0f be c0             	movsbl %al,%eax
f0114f87:	01 d0                	add    %edx,%eax
f0114f89:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0114f8f:	ff 45 f4             	incl   -0xc(%ebp)
f0114f92:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114f98:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0114f9b:	7f d7                	jg     f0114f74 <test_kfree+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0114f9d:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0114fa3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0114fa9:	89 c1                	mov    %eax,%ecx
f0114fab:	01 c9                	add    %ecx,%ecx
f0114fad:	01 c8                	add    %ecx,%eax
f0114faf:	39 c2                	cmp    %eax,%edx
f0114fb1:	74 17                	je     f0114fca <test_kfree+0xc1b>
f0114fb3:	83 ec 04             	sub    $0x4,%esp
f0114fb6:	68 54 22 12 f0       	push   $0xf0122254
f0114fbb:	68 60 05 00 00       	push   $0x560
f0114fc0:	68 76 1a 12 f0       	push   $0xf0121a76
f0114fc5:	e8 e5 b1 fe ff       	call   f01001af <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0114fca:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0114fd0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0114fd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0114fda:	eb 1e                	jmp    f0114ffa <test_kfree+0xc4b>
		{
			sums[4] += ptr[i] ;
f0114fdc:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0114fe2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0114fe5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114fe8:	01 c8                	add    %ecx,%eax
f0114fea:	8a 00                	mov    (%eax),%al
f0114fec:	0f be c0             	movsbl %al,%eax
f0114fef:	01 d0                	add    %edx,%eax
f0114ff1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0114ff7:	ff 45 f4             	incl   -0xc(%ebp)
f0114ffa:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0115000:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115003:	7f d7                	jg     f0114fdc <test_kfree+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0115005:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011500b:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0115011:	c1 e2 02             	shl    $0x2,%edx
f0115014:	39 d0                	cmp    %edx,%eax
f0115016:	74 17                	je     f011502f <test_kfree+0xc80>
f0115018:	83 ec 04             	sub    $0x4,%esp
f011501b:	68 54 22 12 f0       	push   $0xf0122254
f0115020:	68 68 05 00 00       	push   $0x568
f0115025:	68 76 1a 12 f0       	push   $0xf0121a76
f011502a:	e8 80 b1 fe ff       	call   f01001af <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011502f:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0115035:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0115038:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011503f:	eb 1e                	jmp    f011505f <test_kfree+0xcb0>
		{
			sums[5] += ptr[i] ;
f0115041:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0115047:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011504a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011504d:	01 c8                	add    %ecx,%eax
f011504f:	8a 00                	mov    (%eax),%al
f0115051:	0f be c0             	movsbl %al,%eax
f0115054:	01 d0                	add    %edx,%eax
f0115056:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011505c:	ff 45 f4             	incl   -0xc(%ebp)
f011505f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0115065:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115068:	7f d7                	jg     f0115041 <test_kfree+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f011506a:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0115070:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0115076:	89 d0                	mov    %edx,%eax
f0115078:	c1 e0 02             	shl    $0x2,%eax
f011507b:	01 d0                	add    %edx,%eax
f011507d:	39 c1                	cmp    %eax,%ecx
f011507f:	74 17                	je     f0115098 <test_kfree+0xce9>
f0115081:	83 ec 04             	sub    $0x4,%esp
f0115084:	68 54 22 12 f0       	push   $0xf0122254
f0115089:	68 70 05 00 00       	push   $0x570
f011508e:	68 76 1a 12 f0       	push   $0xf0121a76
f0115093:	e8 17 b1 fe ff       	call   f01001af <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0115098:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011509e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01150a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01150a8:	eb 1e                	jmp    f01150c8 <test_kfree+0xd19>
		{
			sums[7] += ptr[i] ;
f01150aa:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f01150b0:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01150b3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01150b6:	01 c8                	add    %ecx,%eax
f01150b8:	8a 00                	mov    (%eax),%al
f01150ba:	0f be c0             	movsbl %al,%eax
f01150bd:	01 d0                	add    %edx,%eax
f01150bf:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01150c5:	ff 45 f4             	incl   -0xc(%ebp)
f01150c8:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01150ce:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01150d1:	7f d7                	jg     f01150aa <test_kfree+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f01150d3:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f01150d9:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f01150df:	89 d0                	mov    %edx,%eax
f01150e1:	01 c0                	add    %eax,%eax
f01150e3:	01 d0                	add    %edx,%eax
f01150e5:	01 c0                	add    %eax,%eax
f01150e7:	01 d0                	add    %edx,%eax
f01150e9:	39 c1                	cmp    %eax,%ecx
f01150eb:	74 17                	je     f0115104 <test_kfree+0xd55>
f01150ed:	83 ec 04             	sub    $0x4,%esp
f01150f0:	68 54 22 12 f0       	push   $0xf0122254
f01150f5:	68 78 05 00 00       	push   $0x578
f01150fa:	68 76 1a 12 f0       	push   $0xf0121a76
f01150ff:	e8 ab b0 fe ff       	call   f01001af <_panic>
	}
	cprintf("\b\b\b30%");
f0115104:	83 ec 0c             	sub    $0xc,%esp
f0115107:	68 87 22 12 f0       	push   $0xf0122287
f011510c:	e8 f3 20 ff ff       	call   f0107204 <cprintf>
f0115111:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0115114:	e8 35 59 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115119:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011511c:	e8 59 70 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115121:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0115124:	83 ec 0c             	sub    $0xc,%esp
f0115127:	68 00 50 00 00       	push   $0x5000
f011512c:	e8 64 7d ff ff       	call   f010ce95 <kmalloc>
f0115131:	83 c4 10             	add    $0x10,%esp
f0115134:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		cprintf("THE ALLOCATED SPACE AT ADD %x\n",ptr_allocations[8]);
f011513a:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0115140:	83 ec 08             	sub    $0x8,%esp
f0115143:	50                   	push   %eax
f0115144:	68 90 22 12 f0       	push   $0xf0122290
f0115149:	e8 b6 20 ff ff       	call   f0107204 <cprintf>
f011514e:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115151:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0115157:	89 c1                	mov    %eax,%ecx
f0115159:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0115160:	10 00 00 
f0115163:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115168:	0f b6 d0             	movzbl %al,%edx
f011516b:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0115171:	01 d0                	add    %edx,%eax
f0115173:	48                   	dec    %eax
f0115174:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011517a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0115180:	ba 00 00 00 00       	mov    $0x0,%edx
f0115185:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011518b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0115191:	29 d0                	sub    %edx,%eax
f0115193:	89 c3                	mov    %eax,%ebx
f0115195:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011519c:	10 00 00 
f011519f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01151a4:	0f b6 c0             	movzbl %al,%eax
f01151a7:	c1 e0 04             	shl    $0x4,%eax
f01151aa:	89 c2                	mov    %eax,%edx
f01151ac:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01151b2:	01 d0                	add    %edx,%eax
f01151b4:	48                   	dec    %eax
f01151b5:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f01151bb:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01151c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01151c6:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01151cc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01151d2:	29 d0                	sub    %edx,%eax
f01151d4:	01 d8                	add    %ebx,%eax
f01151d6:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f01151db:	39 c1                	cmp    %eax,%ecx
f01151dd:	74 17                	je     f01151f6 <test_kfree+0xe47>
f01151df:	83 ec 04             	sub    $0x4,%esp
f01151e2:	68 54 1b 12 f0       	push   $0xf0121b54
f01151e7:	68 83 05 00 00       	push   $0x583
f01151ec:	68 76 1a 12 f0       	push   $0xf0121a76
f01151f1:	e8 b9 af fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01151f6:	e8 7f 6f ff ff       	call   f010c17a <pf_calculate_free_frames>
f01151fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01151fe:	74 17                	je     f0115217 <test_kfree+0xe68>
f0115200:	83 ec 04             	sub    $0x4,%esp
f0115203:	68 88 1a 12 f0       	push   $0xf0121a88
f0115208:	68 84 05 00 00       	push   $0x584
f011520d:	68 76 1a 12 f0       	push   $0xf0121a76
f0115212:	e8 98 af fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115217:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011521a:	e8 2f 58 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011521f:	29 c3                	sub    %eax,%ebx
f0115221:	89 d8                	mov    %ebx,%eax
f0115223:	83 f8 05             	cmp    $0x5,%eax
f0115226:	74 17                	je     f011523f <test_kfree+0xe90>
f0115228:	83 ec 04             	sub    $0x4,%esp
f011522b:	68 f0 1a 12 f0       	push   $0xf0121af0
f0115230:	68 85 05 00 00       	push   $0x585
f0115235:	68 76 1a 12 f0       	push   $0xf0121a76
f011523a:	e8 70 af fe ff       	call   f01001af <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f011523f:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0115246:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0115249:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011524f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0115252:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115259:	eb 0e                	jmp    f0115269 <test_kfree+0xeba>
		{
			ptr[i] = 8 ;
f011525b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011525e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115261:	01 d0                	add    %edx,%eax
f0115263:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0115266:	ff 45 f4             	incl   -0xc(%ebp)
f0115269:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011526f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115272:	7f e7                	jg     f011525b <test_kfree+0xeac>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0115274:	e8 d5 57 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115279:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011527c:	e8 f9 6e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115281:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0115284:	83 ec 0c             	sub    $0xc,%esp
f0115287:	68 00 00 10 00       	push   $0x100000
f011528c:	e8 04 7c ff ff       	call   f010ce95 <kmalloc>
f0115291:	83 c4 10             	add    $0x10,%esp
f0115294:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011529a:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01152a0:	89 c1                	mov    %eax,%ecx
f01152a2:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01152a9:	10 00 00 
f01152ac:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01152b1:	0f b6 d0             	movzbl %al,%edx
f01152b4:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01152ba:	01 d0                	add    %edx,%eax
f01152bc:	48                   	dec    %eax
f01152bd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01152c3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01152c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01152ce:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01152d4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01152da:	29 d0                	sub    %edx,%eax
f01152dc:	89 c3                	mov    %eax,%ebx
f01152de:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01152e5:	10 00 00 
f01152e8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01152ed:	0f b6 c0             	movzbl %al,%eax
f01152f0:	c1 e0 04             	shl    $0x4,%eax
f01152f3:	89 c2                	mov    %eax,%edx
f01152f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01152fb:	01 d0                	add    %edx,%eax
f01152fd:	48                   	dec    %eax
f01152fe:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0115304:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011530a:	ba 00 00 00 00       	mov    $0x0,%edx
f011530f:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0115315:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011531b:	29 d0                	sub    %edx,%eax
f011531d:	01 d8                	add    %ebx,%eax
f011531f:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0115324:	39 c1                	cmp    %eax,%ecx
f0115326:	74 17                	je     f011533f <test_kfree+0xf90>
f0115328:	83 ec 04             	sub    $0x4,%esp
f011532b:	68 54 1b 12 f0       	push   $0xf0121b54
f0115330:	68 91 05 00 00       	push   $0x591
f0115335:	68 76 1a 12 f0       	push   $0xf0121a76
f011533a:	e8 70 ae fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011533f:	e8 36 6e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115344:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115347:	74 17                	je     f0115360 <test_kfree+0xfb1>
f0115349:	83 ec 04             	sub    $0x4,%esp
f011534c:	68 88 1a 12 f0       	push   $0xf0121a88
f0115351:	68 92 05 00 00       	push   $0x592
f0115356:	68 76 1a 12 f0       	push   $0xf0121a76
f011535b:	e8 4f ae fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115360:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115363:	e8 e6 56 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115368:	29 c3                	sub    %eax,%ebx
f011536a:	89 d8                	mov    %ebx,%eax
f011536c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0115371:	74 17                	je     f011538a <test_kfree+0xfdb>
f0115373:	83 ec 04             	sub    $0x4,%esp
f0115376:	68 f0 1a 12 f0       	push   $0xf0121af0
f011537b:	68 93 05 00 00       	push   $0x593
f0115380:	68 76 1a 12 f0       	push   $0xf0121a76
f0115385:	e8 25 ae fe ff       	call   f01001af <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011538a:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0115391:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0115394:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011539a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011539d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01153a4:	eb 0e                	jmp    f01153b4 <test_kfree+0x1005>
		{
			ptr[i] = 9 ;
f01153a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01153a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01153ac:	01 d0                	add    %edx,%eax
f01153ae:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01153b1:	ff 45 f4             	incl   -0xc(%ebp)
f01153b4:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01153ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01153bd:	7f e7                	jg     f01153a6 <test_kfree+0xff7>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f01153bf:	83 ec 0c             	sub    $0xc,%esp
f01153c2:	68 af 22 12 f0       	push   $0xf01222af
f01153c7:	e8 38 1e ff ff       	call   f0107204 <cprintf>
f01153cc:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f01153cf:	e8 7a 56 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01153d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01153d7:	e8 9e 6d ff ff       	call   f010c17a <pf_calculate_free_frames>
f01153dc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f01153df:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f01153e5:	83 ec 0c             	sub    $0xc,%esp
f01153e8:	50                   	push   %eax
f01153e9:	e8 f2 7a ff ff       	call   f010cee0 <kfree>
f01153ee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01153f1:	e8 84 6d ff ff       	call   f010c17a <pf_calculate_free_frames>
f01153f6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01153f9:	74 17                	je     f0115412 <test_kfree+0x1063>
f01153fb:	83 ec 04             	sub    $0x4,%esp
f01153fe:	68 88 1a 12 f0       	push   $0xf0121a88
f0115403:	68 a3 05 00 00       	push   $0x5a3
f0115408:	68 76 1a 12 f0       	push   $0xf0121a76
f011540d:	e8 9d ad fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0115412:	e8 37 56 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115417:	89 c2                	mov    %eax,%edx
f0115419:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011541c:	29 c2                	sub    %eax,%edx
f011541e:	89 d0                	mov    %edx,%eax
f0115420:	83 f8 02             	cmp    $0x2,%eax
f0115423:	74 17                	je     f011543c <test_kfree+0x108d>
f0115425:	83 ec 04             	sub    $0x4,%esp
f0115428:	68 f8 21 12 f0       	push   $0xf01221f8
f011542d:	68 a4 05 00 00       	push   $0x5a4
f0115432:	68 76 1a 12 f0       	push   $0xf0121a76
f0115437:	e8 73 ad fe ff       	call   f01001af <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011543c:	e8 0d 56 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115441:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115444:	e8 31 6d ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115449:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f011544c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0115452:	83 ec 0c             	sub    $0xc,%esp
f0115455:	50                   	push   %eax
f0115456:	e8 85 7a ff ff       	call   f010cee0 <kfree>
f011545b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011545e:	e8 17 6d ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115463:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115466:	74 17                	je     f011547f <test_kfree+0x10d0>
f0115468:	83 ec 04             	sub    $0x4,%esp
f011546b:	68 88 1a 12 f0       	push   $0xf0121a88
f0115470:	68 aa 05 00 00       	push   $0x5aa
f0115475:	68 76 1a 12 f0       	push   $0xf0121a76
f011547a:	e8 30 ad fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011547f:	e8 ca 55 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115484:	89 c2                	mov    %eax,%edx
f0115486:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115489:	29 c2                	sub    %eax,%edx
f011548b:	89 d0                	mov    %edx,%eax
f011548d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0115492:	74 17                	je     f01154ab <test_kfree+0x10fc>
f0115494:	83 ec 04             	sub    $0x4,%esp
f0115497:	68 f8 21 12 f0       	push   $0xf01221f8
f011549c:	68 ab 05 00 00       	push   $0x5ab
f01154a1:	68 76 1a 12 f0       	push   $0xf0121a76
f01154a6:	e8 04 ad fe ff       	call   f01001af <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01154ab:	e8 9e 55 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01154b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01154b3:	e8 c2 6c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01154b8:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01154bb:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01154c1:	83 ec 0c             	sub    $0xc,%esp
f01154c4:	50                   	push   %eax
f01154c5:	e8 16 7a ff ff       	call   f010cee0 <kfree>
f01154ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01154cd:	e8 a8 6c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01154d2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01154d5:	74 17                	je     f01154ee <test_kfree+0x113f>
f01154d7:	83 ec 04             	sub    $0x4,%esp
f01154da:	68 88 1a 12 f0       	push   $0xf0121a88
f01154df:	68 b1 05 00 00       	push   $0x5b1
f01154e4:	68 76 1a 12 f0       	push   $0xf0121a76
f01154e9:	e8 c1 ac fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01154ee:	e8 5b 55 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01154f3:	89 c2                	mov    %eax,%edx
f01154f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01154f8:	29 c2                	sub    %eax,%edx
f01154fa:	89 d0                	mov    %edx,%eax
f01154fc:	83 f8 01             	cmp    $0x1,%eax
f01154ff:	74 17                	je     f0115518 <test_kfree+0x1169>
f0115501:	83 ec 04             	sub    $0x4,%esp
f0115504:	68 f8 21 12 f0       	push   $0xf01221f8
f0115509:	68 b2 05 00 00       	push   $0x5b2
f011550e:	68 76 1a 12 f0       	push   $0xf0121a76
f0115513:	e8 97 ac fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115518:	e8 31 55 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011551d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115520:	e8 55 6c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115525:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0115528:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011552e:	83 ec 0c             	sub    $0xc,%esp
f0115531:	50                   	push   %eax
f0115532:	e8 a9 79 ff ff       	call   f010cee0 <kfree>
f0115537:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011553a:	e8 3b 6c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011553f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115542:	74 17                	je     f011555b <test_kfree+0x11ac>
f0115544:	83 ec 04             	sub    $0x4,%esp
f0115547:	68 88 1a 12 f0       	push   $0xf0121a88
f011554c:	68 b8 05 00 00       	push   $0x5b8
f0115551:	68 76 1a 12 f0       	push   $0xf0121a76
f0115556:	e8 54 ac fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f011555b:	e8 ee 54 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115560:	89 c2                	mov    %eax,%edx
f0115562:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115565:	29 c2                	sub    %eax,%edx
f0115567:	89 d0                	mov    %edx,%eax
f0115569:	83 f8 01             	cmp    $0x1,%eax
f011556c:	74 17                	je     f0115585 <test_kfree+0x11d6>
f011556e:	83 ec 04             	sub    $0x4,%esp
f0115571:	68 f8 21 12 f0       	push   $0xf01221f8
f0115576:	68 b9 05 00 00       	push   $0x5b9
f011557b:	68 76 1a 12 f0       	push   $0xf0121a76
f0115580:	e8 2a ac fe ff       	call   f01001af <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0115585:	e8 c4 54 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011558a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011558d:	e8 e8 6b ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115592:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0115595:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011559b:	83 ec 0c             	sub    $0xc,%esp
f011559e:	50                   	push   %eax
f011559f:	e8 3c 79 ff ff       	call   f010cee0 <kfree>
f01155a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01155a7:	e8 ce 6b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01155ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01155af:	74 17                	je     f01155c8 <test_kfree+0x1219>
f01155b1:	83 ec 04             	sub    $0x4,%esp
f01155b4:	68 88 1a 12 f0       	push   $0xf0121a88
f01155b9:	68 bf 05 00 00       	push   $0x5bf
f01155be:	68 76 1a 12 f0       	push   $0xf0121a76
f01155c3:	e8 e7 ab fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01155c8:	e8 81 54 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01155cd:	89 c2                	mov    %eax,%edx
f01155cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155d2:	29 c2                	sub    %eax,%edx
f01155d4:	89 d0                	mov    %edx,%eax
f01155d6:	83 f8 04             	cmp    $0x4,%eax
f01155d9:	74 17                	je     f01155f2 <test_kfree+0x1243>
f01155db:	83 ec 04             	sub    $0x4,%esp
f01155de:	68 f8 21 12 f0       	push   $0xf01221f8
f01155e3:	68 c0 05 00 00       	push   $0x5c0
f01155e8:	68 76 1a 12 f0       	push   $0xf0121a76
f01155ed:	e8 bd ab fe ff       	call   f01001af <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f01155f2:	e8 57 54 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01155f7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01155fa:	e8 7b 6b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01155ff:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0115602:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0115608:	83 ec 0c             	sub    $0xc,%esp
f011560b:	50                   	push   %eax
f011560c:	e8 cf 78 ff ff       	call   f010cee0 <kfree>
f0115611:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115614:	e8 61 6b ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115619:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011561c:	74 17                	je     f0115635 <test_kfree+0x1286>
f011561e:	83 ec 04             	sub    $0x4,%esp
f0115621:	68 88 1a 12 f0       	push   $0xf0121a88
f0115626:	68 c6 05 00 00       	push   $0x5c6
f011562b:	68 76 1a 12 f0       	push   $0xf0121a76
f0115630:	e8 7a ab fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0115635:	e8 14 54 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011563a:	89 c2                	mov    %eax,%edx
f011563c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011563f:	29 c2                	sub    %eax,%edx
f0115641:	89 d0                	mov    %edx,%eax
f0115643:	83 f8 05             	cmp    $0x5,%eax
f0115646:	74 17                	je     f011565f <test_kfree+0x12b0>
f0115648:	83 ec 04             	sub    $0x4,%esp
f011564b:	68 f8 21 12 f0       	push   $0xf01221f8
f0115650:	68 c7 05 00 00       	push   $0x5c7
f0115655:	68 76 1a 12 f0       	push   $0xf0121a76
f011565a:	e8 50 ab fe ff       	call   f01001af <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011565f:	e8 ea 53 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115664:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115667:	e8 0e 6b ff ff       	call   f010c17a <pf_calculate_free_frames>
f011566c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011566f:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0115675:	83 ec 0c             	sub    $0xc,%esp
f0115678:	50                   	push   %eax
f0115679:	e8 62 78 ff ff       	call   f010cee0 <kfree>
f011567e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115681:	e8 f4 6a ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115686:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115689:	74 17                	je     f01156a2 <test_kfree+0x12f3>
f011568b:	83 ec 04             	sub    $0x4,%esp
f011568e:	68 88 1a 12 f0       	push   $0xf0121a88
f0115693:	68 cd 05 00 00       	push   $0x5cd
f0115698:	68 76 1a 12 f0       	push   $0xf0121a76
f011569d:	e8 0d ab fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f01156a2:	e8 a7 53 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01156a7:	89 c2                	mov    %eax,%edx
f01156a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156ac:	29 c2                	sub    %eax,%edx
f01156ae:	89 d0                	mov    %edx,%eax
f01156b0:	3d 00 01 00 00       	cmp    $0x100,%eax
f01156b5:	74 17                	je     f01156ce <test_kfree+0x131f>
f01156b7:	83 ec 04             	sub    $0x4,%esp
f01156ba:	68 f8 21 12 f0       	push   $0xf01221f8
f01156bf:	68 ce 05 00 00       	push   $0x5ce
f01156c4:	68 76 1a 12 f0       	push   $0xf0121a76
f01156c9:	e8 e1 aa fe ff       	call   f01001af <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f01156ce:	e8 7b 53 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01156d3:	89 c2                	mov    %eax,%edx
f01156d5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01156d8:	39 c2                	cmp    %eax,%edx
f01156da:	74 17                	je     f01156f3 <test_kfree+0x1344>
f01156dc:	83 ec 04             	sub    $0x4,%esp
f01156df:	68 b8 22 12 f0       	push   $0xf01222b8
f01156e4:	68 d0 05 00 00       	push   $0x5d0
f01156e9:	68 76 1a 12 f0       	push   $0xf0121a76
f01156ee:	e8 bc aa fe ff       	call   f01001af <_panic>
	}
	cprintf("\b\b\b60%");
f01156f3:	83 ec 0c             	sub    $0xc,%esp
f01156f6:	68 ec 22 12 f0       	push   $0xf01222ec
f01156fb:	e8 04 1b ff ff       	call   f0107204 <cprintf>
f0115700:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0115703:	83 ec 0c             	sub    $0xc,%esp
f0115706:	6a 03                	push   $0x3
f0115708:	e8 b1 56 ff ff       	call   f010adbe <sys_bypassPageFault>
f011570d:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0115710:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115717:	e9 82 00 00 00       	jmp    f011579e <test_kfree+0x13ef>
		{
			ptr = (char *) ptr_allocations[i];
f011571c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011571f:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0115726:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0115729:	8b 45 98             	mov    -0x68(%ebp),%eax
f011572c:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f011572f:	e8 78 56 ff ff       	call   f010adac <sys_rcr2>
f0115734:	89 c2                	mov    %eax,%edx
f0115736:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115739:	39 c2                	cmp    %eax,%edx
f011573b:	74 17                	je     f0115754 <test_kfree+0x13a5>
f011573d:	83 ec 04             	sub    $0x4,%esp
f0115740:	68 f4 22 12 f0       	push   $0xf01222f4
f0115745:	68 df 05 00 00       	push   $0x5df
f011574a:	68 76 1a 12 f0       	push   $0xf0121a76
f011574f:	e8 5b aa fe ff       	call   f01001af <_panic>
			ptr[lastIndices[i]] = 10;
f0115754:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115757:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011575e:	89 c2                	mov    %eax,%edx
f0115760:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115763:	01 d0                	add    %edx,%eax
f0115765:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0115768:	e8 3f 56 ff ff       	call   f010adac <sys_rcr2>
f011576d:	89 c2                	mov    %eax,%edx
f011576f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115772:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0115779:	89 c1                	mov    %eax,%ecx
f011577b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011577e:	01 c8                	add    %ecx,%eax
f0115780:	39 c2                	cmp    %eax,%edx
f0115782:	74 17                	je     f011579b <test_kfree+0x13ec>
f0115784:	83 ec 04             	sub    $0x4,%esp
f0115787:	68 f4 22 12 f0       	push   $0xf01222f4
f011578c:	68 e1 05 00 00       	push   $0x5e1
f0115791:	68 76 1a 12 f0       	push   $0xf0121a76
f0115796:	e8 14 aa fe ff       	call   f01001af <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011579b:	ff 45 f4             	incl   -0xc(%ebp)
f011579e:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f01157a2:	0f 8e 74 ff ff ff    	jle    f011571c <test_kfree+0x136d>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f01157a8:	83 ec 0c             	sub    $0xc,%esp
f01157ab:	6a 00                	push   $0x0
f01157ad:	e8 0c 56 ff ff       	call   f010adbe <sys_bypassPageFault>
f01157b2:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f01157b5:	83 ec 0c             	sub    $0xc,%esp
f01157b8:	68 39 23 12 f0       	push   $0xf0122339
f01157bd:	e8 42 1a ff ff       	call   f0107204 <cprintf>
f01157c2:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01157c5:	e8 84 52 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01157ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01157cd:	e8 a8 69 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01157d2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f01157d5:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01157db:	83 ec 0c             	sub    $0xc,%esp
f01157de:	50                   	push   %eax
f01157df:	e8 fc 76 ff ff       	call   f010cee0 <kfree>
f01157e4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01157e7:	e8 8e 69 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01157ec:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01157ef:	74 17                	je     f0115808 <test_kfree+0x1459>
f01157f1:	83 ec 04             	sub    $0x4,%esp
f01157f4:	68 88 1a 12 f0       	push   $0xf0121a88
f01157f9:	68 ef 05 00 00       	push   $0x5ef
f01157fe:	68 76 1a 12 f0       	push   $0xf0121a76
f0115803:	e8 a7 a9 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0115808:	e8 41 52 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011580d:	89 c2                	mov    %eax,%edx
f011580f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115812:	39 c2                	cmp    %eax,%edx
f0115814:	74 17                	je     f011582d <test_kfree+0x147e>
f0115816:	83 ec 04             	sub    $0x4,%esp
f0115819:	68 40 23 12 f0       	push   $0xf0122340
f011581e:	68 f0 05 00 00       	push   $0x5f0
f0115823:	68 76 1a 12 f0       	push   $0xf0121a76
f0115828:	e8 82 a9 fe ff       	call   f01001af <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011582d:	e8 1c 52 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115832:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115835:	e8 40 69 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011583a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011583d:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115843:	83 ec 0c             	sub    $0xc,%esp
f0115846:	50                   	push   %eax
f0115847:	e8 94 76 ff ff       	call   f010cee0 <kfree>
f011584c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011584f:	e8 26 69 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115854:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115857:	74 17                	je     f0115870 <test_kfree+0x14c1>
f0115859:	83 ec 04             	sub    $0x4,%esp
f011585c:	68 88 1a 12 f0       	push   $0xf0121a88
f0115861:	68 f6 05 00 00       	push   $0x5f6
f0115866:	68 76 1a 12 f0       	push   $0xf0121a76
f011586b:	e8 3f a9 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0115870:	e8 d9 51 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115875:	89 c2                	mov    %eax,%edx
f0115877:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011587a:	39 c2                	cmp    %eax,%edx
f011587c:	74 17                	je     f0115895 <test_kfree+0x14e6>
f011587e:	83 ec 04             	sub    $0x4,%esp
f0115881:	68 40 23 12 f0       	push   $0xf0122340
f0115886:	68 f7 05 00 00       	push   $0x5f7
f011588b:	68 76 1a 12 f0       	push   $0xf0121a76
f0115890:	e8 1a a9 fe ff       	call   f01001af <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0115895:	e8 b4 51 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011589a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011589d:	e8 d8 68 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01158a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f01158a5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01158ab:	83 ec 0c             	sub    $0xc,%esp
f01158ae:	50                   	push   %eax
f01158af:	e8 2c 76 ff ff       	call   f010cee0 <kfree>
f01158b4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01158b7:	e8 be 68 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01158bc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01158bf:	74 17                	je     f01158d8 <test_kfree+0x1529>
f01158c1:	83 ec 04             	sub    $0x4,%esp
f01158c4:	68 88 1a 12 f0       	push   $0xf0121a88
f01158c9:	68 fd 05 00 00       	push   $0x5fd
f01158ce:	68 76 1a 12 f0       	push   $0xf0121a76
f01158d3:	e8 d7 a8 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01158d8:	e8 71 51 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01158dd:	89 c2                	mov    %eax,%edx
f01158df:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01158e2:	39 c2                	cmp    %eax,%edx
f01158e4:	74 17                	je     f01158fd <test_kfree+0x154e>
f01158e6:	83 ec 04             	sub    $0x4,%esp
f01158e9:	68 40 23 12 f0       	push   $0xf0122340
f01158ee:	68 fe 05 00 00       	push   $0x5fe
f01158f3:	68 76 1a 12 f0       	push   $0xf0121a76
f01158f8:	e8 b2 a8 fe ff       	call   f01001af <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01158fd:	e8 4c 51 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115902:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115905:	e8 70 68 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011590a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f011590d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0115913:	83 ec 0c             	sub    $0xc,%esp
f0115916:	50                   	push   %eax
f0115917:	e8 c4 75 ff ff       	call   f010cee0 <kfree>
f011591c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011591f:	e8 56 68 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115924:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115927:	74 17                	je     f0115940 <test_kfree+0x1591>
f0115929:	83 ec 04             	sub    $0x4,%esp
f011592c:	68 88 1a 12 f0       	push   $0xf0121a88
f0115931:	68 04 06 00 00       	push   $0x604
f0115936:	68 76 1a 12 f0       	push   $0xf0121a76
f011593b:	e8 6f a8 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0115940:	e8 09 51 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115945:	89 c2                	mov    %eax,%edx
f0115947:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011594a:	39 c2                	cmp    %eax,%edx
f011594c:	74 17                	je     f0115965 <test_kfree+0x15b6>
f011594e:	83 ec 04             	sub    $0x4,%esp
f0115951:	68 40 23 12 f0       	push   $0xf0122340
f0115956:	68 05 06 00 00       	push   $0x605
f011595b:	68 76 1a 12 f0       	push   $0xf0121a76
f0115960:	e8 4a a8 fe ff       	call   f01001af <_panic>

	}
	cprintf("\b\b\b85%");
f0115965:	83 ec 0c             	sub    $0xc,%esp
f0115968:	68 87 23 12 f0       	push   $0xf0122387
f011596d:	e8 92 18 ff ff       	call   f0107204 <cprintf>
f0115972:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0115975:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f011597c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0115983:	eb 4a                	jmp    f01159cf <test_kfree+0x1620>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0115985:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115988:	89 c1                	mov    %eax,%ecx
f011598a:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f011598f:	83 ec 04             	sub    $0x4,%esp
f0115992:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0115998:	52                   	push   %edx
f0115999:	51                   	push   %ecx
f011599a:	50                   	push   %eax
f011599b:	e8 3b e2 fe ff       	call   f0103bdb <get_page_table>
f01159a0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01159a3:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01159a9:	85 c0                	test   %eax,%eax
f01159ab:	75 17                	jne    f01159c4 <test_kfree+0x1615>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f01159ad:	83 ec 04             	sub    $0x4,%esp
f01159b0:	68 90 23 12 f0       	push   $0xf0122390
f01159b5:	68 13 06 00 00       	push   $0x613
f01159ba:	68 76 1a 12 f0       	push   $0xf0121a76
f01159bf:	e8 eb a7 fe ff       	call   f01001af <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f01159c4:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f01159cb:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f01159cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01159d3:	78 b0                	js     f0115985 <test_kfree+0x15d6>
f01159d5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01159d9:	7f 09                	jg     f01159e4 <test_kfree+0x1635>
f01159db:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f01159e2:	76 a1                	jbe    f0115985 <test_kfree+0x15d6>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f01159e4:	83 ec 0c             	sub    $0xc,%esp
f01159e7:	68 52 1c 12 f0       	push   $0xf0121c52
f01159ec:	e8 13 18 ff ff       	call   f0107204 <cprintf>
f01159f1:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f01159f4:	83 ec 0c             	sub    $0xc,%esp
f01159f7:	68 f8 23 12 f0       	push   $0xf01223f8
f01159fc:	e8 03 18 ff ff       	call   f0107204 <cprintf>
f0115a01:	83 c4 10             	add    $0x10,%esp

	return 1;
f0115a04:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0115a09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0115a0c:	5b                   	pop    %ebx
f0115a0d:	5f                   	pop    %edi
f0115a0e:	5d                   	pop    %ebp
f0115a0f:	c3                   	ret    

f0115a10 <test_kfree_firstfit>:

int test_kfree_firstfit()
{
f0115a10:	55                   	push   %ebp
f0115a11:	89 e5                	mov    %esp,%ebp
f0115a13:	57                   	push   %edi
f0115a14:	53                   	push   %ebx
f0115a15:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f0115a1b:	83 ec 0c             	sub    $0xc,%esp
f0115a1e:	68 b8 19 12 f0       	push   $0xf01219b8
f0115a23:	e8 dc 17 ff ff       	call   f0107204 <cprintf>
f0115a28:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0115a2b:	83 ec 0c             	sub    $0xc,%esp
f0115a2e:	68 e8 19 12 f0       	push   $0xf01219e8
f0115a33:	e8 cc 17 ff ff       	call   f0107204 <cprintf>
f0115a38:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0115a3b:	83 ec 0c             	sub    $0xc,%esp
f0115a3e:	68 b8 19 12 f0       	push   $0xf01219b8
f0115a43:	e8 bc 17 ff ff       	call   f0107204 <cprintf>
f0115a48:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0115a4b:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0115a4f:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f0115a53:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f0115a59:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f0115a5f:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0115a66:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0115a6d:	e8 dc 4f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115a72:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0115a75:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f0115a7b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115a80:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a85:	89 d7                	mov    %edx,%edi
f0115a87:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0115a89:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f0115a8f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115a94:	b8 00 00 00 00       	mov    $0x0,%eax
f0115a99:	89 d7                	mov    %edx,%edi
f0115a9b:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0115a9d:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f0115aa3:	b9 14 00 00 00       	mov    $0x14,%ecx
f0115aa8:	b8 00 00 00 00       	mov    $0x0,%eax
f0115aad:	89 d7                	mov    %edx,%edi
f0115aaf:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115ab1:	e8 98 4f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115ab6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ab9:	e8 bc 66 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115abe:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0115ac1:	83 ec 0c             	sub    $0xc,%esp
f0115ac4:	68 00 fc 1f 00       	push   $0x1ffc00
f0115ac9:	e8 c7 73 ff ff       	call   f010ce95 <kmalloc>
f0115ace:	83 c4 10             	add    $0x10,%esp
f0115ad1:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115ad7:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0115add:	89 c1                	mov    %eax,%ecx
f0115adf:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0115ae6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115aeb:	0f b6 d0             	movzbl %al,%edx
f0115aee:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115af1:	01 d0                	add    %edx,%eax
f0115af3:	48                   	dec    %eax
f0115af4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0115af7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115afa:	ba 00 00 00 00       	mov    $0x0,%edx
f0115aff:	f7 75 c8             	divl   -0x38(%ebp)
f0115b02:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115b05:	29 d0                	sub    %edx,%eax
f0115b07:	89 c3                	mov    %eax,%ebx
f0115b09:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0115b10:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115b15:	0f b6 c0             	movzbl %al,%eax
f0115b18:	c1 e0 04             	shl    $0x4,%eax
f0115b1b:	89 c2                	mov    %eax,%edx
f0115b1d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115b20:	01 d0                	add    %edx,%eax
f0115b22:	48                   	dec    %eax
f0115b23:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0115b26:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115b29:	ba 00 00 00 00       	mov    $0x0,%edx
f0115b2e:	f7 75 c0             	divl   -0x40(%ebp)
f0115b31:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115b34:	29 d0                	sub    %edx,%eax
f0115b36:	01 d8                	add    %ebx,%eax
f0115b38:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0115b3d:	39 c1                	cmp    %eax,%ecx
f0115b3f:	74 17                	je     f0115b58 <test_kfree_firstfit+0x148>
f0115b41:	83 ec 04             	sub    $0x4,%esp
f0115b44:	68 54 1b 12 f0       	push   $0xf0121b54
f0115b49:	68 40 06 00 00       	push   $0x640
f0115b4e:	68 76 1a 12 f0       	push   $0xf0121a76
f0115b53:	e8 57 a6 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115b58:	e8 1d 66 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115b5d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115b60:	74 17                	je     f0115b79 <test_kfree_firstfit+0x169>
f0115b62:	83 ec 04             	sub    $0x4,%esp
f0115b65:	68 88 1a 12 f0       	push   $0xf0121a88
f0115b6a:	68 41 06 00 00       	push   $0x641
f0115b6f:	68 76 1a 12 f0       	push   $0xf0121a76
f0115b74:	e8 36 a6 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115b79:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115b7c:	e8 cd 4e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115b81:	29 c3                	sub    %eax,%ebx
f0115b83:	89 d8                	mov    %ebx,%eax
f0115b85:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115b8a:	74 17                	je     f0115ba3 <test_kfree_firstfit+0x193>
f0115b8c:	83 ec 04             	sub    $0x4,%esp
f0115b8f:	68 f0 1a 12 f0       	push   $0xf0121af0
f0115b94:	68 42 06 00 00       	push   $0x642
f0115b99:	68 76 1a 12 f0       	push   $0xf0121a76
f0115b9e:	e8 0c a6 fe ff       	call   f01001af <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0115ba3:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f0115baa:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0115bad:	e8 9c 4e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115bb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115bb5:	e8 c0 65 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115bba:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0115bbd:	83 ec 0c             	sub    $0xc,%esp
f0115bc0:	68 00 fc 1f 00       	push   $0x1ffc00
f0115bc5:	e8 cb 72 ff ff       	call   f010ce95 <kmalloc>
f0115bca:	83 c4 10             	add    $0x10,%esp
f0115bcd:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115bd3:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0115bd9:	89 c1                	mov    %eax,%ecx
f0115bdb:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0115be2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115be7:	0f b6 d0             	movzbl %al,%edx
f0115bea:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115bed:	01 d0                	add    %edx,%eax
f0115bef:	48                   	dec    %eax
f0115bf0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0115bf3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115bf6:	ba 00 00 00 00       	mov    $0x0,%edx
f0115bfb:	f7 75 b8             	divl   -0x48(%ebp)
f0115bfe:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115c01:	29 d0                	sub    %edx,%eax
f0115c03:	89 c3                	mov    %eax,%ebx
f0115c05:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0115c0c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115c11:	0f b6 c0             	movzbl %al,%eax
f0115c14:	c1 e0 04             	shl    $0x4,%eax
f0115c17:	89 c2                	mov    %eax,%edx
f0115c19:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115c1c:	01 d0                	add    %edx,%eax
f0115c1e:	48                   	dec    %eax
f0115c1f:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0115c22:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115c25:	ba 00 00 00 00       	mov    $0x0,%edx
f0115c2a:	f7 75 b0             	divl   -0x50(%ebp)
f0115c2d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115c30:	29 d0                	sub    %edx,%eax
f0115c32:	01 d8                	add    %ebx,%eax
f0115c34:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0115c39:	39 c1                	cmp    %eax,%ecx
f0115c3b:	74 17                	je     f0115c54 <test_kfree_firstfit+0x244>
f0115c3d:	83 ec 04             	sub    $0x4,%esp
f0115c40:	68 54 1b 12 f0       	push   $0xf0121b54
f0115c45:	68 49 06 00 00       	push   $0x649
f0115c4a:	68 76 1a 12 f0       	push   $0xf0121a76
f0115c4f:	e8 5b a5 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115c54:	e8 21 65 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115c59:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115c5c:	74 17                	je     f0115c75 <test_kfree_firstfit+0x265>
f0115c5e:	83 ec 04             	sub    $0x4,%esp
f0115c61:	68 88 1a 12 f0       	push   $0xf0121a88
f0115c66:	68 4a 06 00 00       	push   $0x64a
f0115c6b:	68 76 1a 12 f0       	push   $0xf0121a76
f0115c70:	e8 3a a5 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115c75:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115c78:	e8 d1 4d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115c7d:	29 c3                	sub    %eax,%ebx
f0115c7f:	89 d8                	mov    %ebx,%eax
f0115c81:	3d 00 02 00 00       	cmp    $0x200,%eax
f0115c86:	74 17                	je     f0115c9f <test_kfree_firstfit+0x28f>
f0115c88:	83 ec 04             	sub    $0x4,%esp
f0115c8b:	68 f0 1a 12 f0       	push   $0xf0121af0
f0115c90:	68 4b 06 00 00       	push   $0x64b
f0115c95:	68 76 1a 12 f0       	push   $0xf0121a76
f0115c9a:	e8 10 a5 fe ff       	call   f01001af <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0115c9f:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f0115ca6:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115ca9:	e8 a0 4d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115cae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115cb1:	e8 c4 64 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115cb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0115cb9:	83 ec 0c             	sub    $0xc,%esp
f0115cbc:	68 00 08 00 00       	push   $0x800
f0115cc1:	e8 cf 71 ff ff       	call   f010ce95 <kmalloc>
f0115cc6:	83 c4 10             	add    $0x10,%esp
f0115cc9:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115ccf:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115cd5:	89 c1                	mov    %eax,%ecx
f0115cd7:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0115cde:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115ce3:	0f b6 d0             	movzbl %al,%edx
f0115ce6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115ce9:	01 d0                	add    %edx,%eax
f0115ceb:	48                   	dec    %eax
f0115cec:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0115cef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0115cf7:	f7 75 a8             	divl   -0x58(%ebp)
f0115cfa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115cfd:	29 d0                	sub    %edx,%eax
f0115cff:	89 c3                	mov    %eax,%ebx
f0115d01:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0115d08:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115d0d:	0f b6 c0             	movzbl %al,%eax
f0115d10:	c1 e0 04             	shl    $0x4,%eax
f0115d13:	89 c2                	mov    %eax,%edx
f0115d15:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115d18:	01 d0                	add    %edx,%eax
f0115d1a:	48                   	dec    %eax
f0115d1b:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0115d1e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115d21:	ba 00 00 00 00       	mov    $0x0,%edx
f0115d26:	f7 75 a0             	divl   -0x60(%ebp)
f0115d29:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115d2c:	29 d0                	sub    %edx,%eax
f0115d2e:	01 d8                	add    %ebx,%eax
f0115d30:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0115d35:	39 c1                	cmp    %eax,%ecx
f0115d37:	74 17                	je     f0115d50 <test_kfree_firstfit+0x340>
f0115d39:	83 ec 04             	sub    $0x4,%esp
f0115d3c:	68 54 1b 12 f0       	push   $0xf0121b54
f0115d41:	68 52 06 00 00       	push   $0x652
f0115d46:	68 76 1a 12 f0       	push   $0xf0121a76
f0115d4b:	e8 5f a4 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115d50:	e8 25 64 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115d55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115d58:	74 17                	je     f0115d71 <test_kfree_firstfit+0x361>
f0115d5a:	83 ec 04             	sub    $0x4,%esp
f0115d5d:	68 88 1a 12 f0       	push   $0xf0121a88
f0115d62:	68 53 06 00 00       	push   $0x653
f0115d67:	68 76 1a 12 f0       	push   $0xf0121a76
f0115d6c:	e8 3e a4 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115d71:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115d74:	e8 d5 4c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115d79:	29 c3                	sub    %eax,%ebx
f0115d7b:	89 d8                	mov    %ebx,%eax
f0115d7d:	83 f8 01             	cmp    $0x1,%eax
f0115d80:	74 17                	je     f0115d99 <test_kfree_firstfit+0x389>
f0115d82:	83 ec 04             	sub    $0x4,%esp
f0115d85:	68 f0 1a 12 f0       	push   $0xf0121af0
f0115d8a:	68 54 06 00 00       	push   $0x654
f0115d8f:	68 76 1a 12 f0       	push   $0xf0121a76
f0115d94:	e8 16 a4 fe ff       	call   f01001af <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0115d99:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f0115da0:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0115da3:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0115da9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0115dac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115db3:	eb 0e                	jmp    f0115dc3 <test_kfree_firstfit+0x3b3>
		{
			ptr[i] = 2 ;
f0115db5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115db8:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115dbb:	01 d0                	add    %edx,%eax
f0115dbd:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0115dc0:	ff 45 f4             	incl   -0xc(%ebp)
f0115dc3:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0115dc9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115dcc:	7f e7                	jg     f0115db5 <test_kfree_firstfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0115dce:	e8 7b 4c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115dd3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115dd6:	e8 9f 63 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115ddb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0115dde:	83 ec 0c             	sub    $0xc,%esp
f0115de1:	68 00 08 00 00       	push   $0x800
f0115de6:	e8 aa 70 ff ff       	call   f010ce95 <kmalloc>
f0115deb:	83 c4 10             	add    $0x10,%esp
f0115dee:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115df4:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0115dfa:	89 c1                	mov    %eax,%ecx
f0115dfc:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0115e03:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115e08:	0f b6 d0             	movzbl %al,%edx
f0115e0b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0115e0e:	01 d0                	add    %edx,%eax
f0115e10:	48                   	dec    %eax
f0115e11:	89 45 90             	mov    %eax,-0x70(%ebp)
f0115e14:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115e17:	ba 00 00 00 00       	mov    $0x0,%edx
f0115e1c:	f7 75 94             	divl   -0x6c(%ebp)
f0115e1f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115e22:	29 d0                	sub    %edx,%eax
f0115e24:	89 c3                	mov    %eax,%ebx
f0115e26:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0115e2d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115e32:	0f b6 c0             	movzbl %al,%eax
f0115e35:	c1 e0 04             	shl    $0x4,%eax
f0115e38:	89 c2                	mov    %eax,%edx
f0115e3a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115e3d:	01 d0                	add    %edx,%eax
f0115e3f:	48                   	dec    %eax
f0115e40:	89 45 88             	mov    %eax,-0x78(%ebp)
f0115e43:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115e46:	ba 00 00 00 00       	mov    $0x0,%edx
f0115e4b:	f7 75 8c             	divl   -0x74(%ebp)
f0115e4e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0115e51:	29 d0                	sub    %edx,%eax
f0115e53:	01 d8                	add    %ebx,%eax
f0115e55:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0115e5a:	39 c1                	cmp    %eax,%ecx
f0115e5c:	74 17                	je     f0115e75 <test_kfree_firstfit+0x465>
f0115e5e:	83 ec 04             	sub    $0x4,%esp
f0115e61:	68 54 1b 12 f0       	push   $0xf0121b54
f0115e66:	68 60 06 00 00       	push   $0x660
f0115e6b:	68 76 1a 12 f0       	push   $0xf0121a76
f0115e70:	e8 3a a3 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115e75:	e8 00 63 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115e7a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115e7d:	74 17                	je     f0115e96 <test_kfree_firstfit+0x486>
f0115e7f:	83 ec 04             	sub    $0x4,%esp
f0115e82:	68 88 1a 12 f0       	push   $0xf0121a88
f0115e87:	68 61 06 00 00       	push   $0x661
f0115e8c:	68 76 1a 12 f0       	push   $0xf0121a76
f0115e91:	e8 19 a3 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115e96:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115e99:	e8 b0 4b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115e9e:	29 c3                	sub    %eax,%ebx
f0115ea0:	89 d8                	mov    %ebx,%eax
f0115ea2:	83 f8 01             	cmp    $0x1,%eax
f0115ea5:	74 17                	je     f0115ebe <test_kfree_firstfit+0x4ae>
f0115ea7:	83 ec 04             	sub    $0x4,%esp
f0115eaa:	68 f0 1a 12 f0       	push   $0xf0121af0
f0115eaf:	68 62 06 00 00       	push   $0x662
f0115eb4:	68 76 1a 12 f0       	push   $0xf0121a76
f0115eb9:	e8 f1 a2 fe ff       	call   f01001af <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0115ebe:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f0115ec5:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0115ec8:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0115ece:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0115ed1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115ed8:	eb 0e                	jmp    f0115ee8 <test_kfree_firstfit+0x4d8>
		{
			ptr[i] = 3 ;
f0115eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115edd:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115ee0:	01 d0                	add    %edx,%eax
f0115ee2:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0115ee5:	ff 45 f4             	incl   -0xc(%ebp)
f0115ee8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0115eee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0115ef1:	7f e7                	jg     f0115eda <test_kfree_firstfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0115ef3:	e8 56 4b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115ef8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115efb:	e8 7a 62 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115f00:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0115f03:	83 ec 0c             	sub    $0xc,%esp
f0115f06:	68 00 1c 00 00       	push   $0x1c00
f0115f0b:	e8 85 6f ff ff       	call   f010ce95 <kmalloc>
f0115f10:	83 c4 10             	add    $0x10,%esp
f0115f13:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0115f19:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0115f1f:	89 c1                	mov    %eax,%ecx
f0115f21:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0115f28:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115f2d:	0f b6 d0             	movzbl %al,%edx
f0115f30:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0115f33:	01 d0                	add    %edx,%eax
f0115f35:	48                   	dec    %eax
f0115f36:	89 45 80             	mov    %eax,-0x80(%ebp)
f0115f39:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115f3c:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f41:	f7 75 84             	divl   -0x7c(%ebp)
f0115f44:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115f47:	29 d0                	sub    %edx,%eax
f0115f49:	89 c3                	mov    %eax,%ebx
f0115f4b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0115f52:	10 00 00 
f0115f55:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0115f5a:	0f b6 c0             	movzbl %al,%eax
f0115f5d:	c1 e0 04             	shl    $0x4,%eax
f0115f60:	89 c2                	mov    %eax,%edx
f0115f62:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0115f68:	01 d0                	add    %edx,%eax
f0115f6a:	48                   	dec    %eax
f0115f6b:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0115f71:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0115f77:	ba 00 00 00 00       	mov    $0x0,%edx
f0115f7c:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0115f82:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0115f88:	29 d0                	sub    %edx,%eax
f0115f8a:	01 d8                	add    %ebx,%eax
f0115f8c:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0115f91:	39 c1                	cmp    %eax,%ecx
f0115f93:	74 17                	je     f0115fac <test_kfree_firstfit+0x59c>
f0115f95:	83 ec 04             	sub    $0x4,%esp
f0115f98:	68 54 1b 12 f0       	push   $0xf0121b54
f0115f9d:	68 6e 06 00 00       	push   $0x66e
f0115fa2:	68 76 1a 12 f0       	push   $0xf0121a76
f0115fa7:	e8 03 a2 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0115fac:	e8 c9 61 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0115fb1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0115fb4:	74 17                	je     f0115fcd <test_kfree_firstfit+0x5bd>
f0115fb6:	83 ec 04             	sub    $0x4,%esp
f0115fb9:	68 88 1a 12 f0       	push   $0xf0121a88
f0115fbe:	68 6f 06 00 00       	push   $0x66f
f0115fc3:	68 76 1a 12 f0       	push   $0xf0121a76
f0115fc8:	e8 e2 a1 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0115fcd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0115fd0:	e8 79 4a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0115fd5:	29 c3                	sub    %eax,%ebx
f0115fd7:	89 d8                	mov    %ebx,%eax
f0115fd9:	83 f8 02             	cmp    $0x2,%eax
f0115fdc:	74 17                	je     f0115ff5 <test_kfree_firstfit+0x5e5>
f0115fde:	83 ec 04             	sub    $0x4,%esp
f0115fe1:	68 f0 1a 12 f0       	push   $0xf0121af0
f0115fe6:	68 70 06 00 00       	push   $0x670
f0115feb:	68 76 1a 12 f0       	push   $0xf0121a76
f0115ff0:	e8 ba a1 fe ff       	call   f01001af <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0115ff5:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0115ffc:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0115fff:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116005:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0116008:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011600f:	eb 0e                	jmp    f011601f <test_kfree_firstfit+0x60f>
		{
			ptr[i] = 4 ;
f0116011:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116014:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116017:	01 d0                	add    %edx,%eax
f0116019:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011601c:	ff 45 f4             	incl   -0xc(%ebp)
f011601f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0116025:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116028:	7f e7                	jg     f0116011 <test_kfree_firstfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011602a:	e8 1f 4a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011602f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116032:	e8 43 61 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116037:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011603a:	83 ec 0c             	sub    $0xc,%esp
f011603d:	68 00 fc 2f 00       	push   $0x2ffc00
f0116042:	e8 4e 6e ff ff       	call   f010ce95 <kmalloc>
f0116047:	83 c4 10             	add    $0x10,%esp
f011604a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116050:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116056:	89 c1                	mov    %eax,%ecx
f0116058:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011605f:	10 00 00 
f0116062:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0116067:	0f b6 d0             	movzbl %al,%edx
f011606a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116070:	01 d0                	add    %edx,%eax
f0116072:	48                   	dec    %eax
f0116073:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0116079:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011607f:	ba 00 00 00 00       	mov    $0x0,%edx
f0116084:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011608a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0116090:	29 d0                	sub    %edx,%eax
f0116092:	89 c3                	mov    %eax,%ebx
f0116094:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011609b:	10 00 00 
f011609e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01160a3:	0f b6 c0             	movzbl %al,%eax
f01160a6:	c1 e0 04             	shl    $0x4,%eax
f01160a9:	89 c2                	mov    %eax,%edx
f01160ab:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01160b1:	01 d0                	add    %edx,%eax
f01160b3:	48                   	dec    %eax
f01160b4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01160ba:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01160c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01160c5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01160cb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01160d1:	29 d0                	sub    %edx,%eax
f01160d3:	01 d8                	add    %ebx,%eax
f01160d5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01160da:	39 c1                	cmp    %eax,%ecx
f01160dc:	74 17                	je     f01160f5 <test_kfree_firstfit+0x6e5>
f01160de:	83 ec 04             	sub    $0x4,%esp
f01160e1:	68 54 1b 12 f0       	push   $0xf0121b54
f01160e6:	68 7c 06 00 00       	push   $0x67c
f01160eb:	68 76 1a 12 f0       	push   $0xf0121a76
f01160f0:	e8 ba a0 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01160f5:	e8 80 60 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01160fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01160fd:	74 17                	je     f0116116 <test_kfree_firstfit+0x706>
f01160ff:	83 ec 04             	sub    $0x4,%esp
f0116102:	68 88 1a 12 f0       	push   $0xf0121a88
f0116107:	68 7d 06 00 00       	push   $0x67d
f011610c:	68 76 1a 12 f0       	push   $0xf0121a76
f0116111:	e8 99 a0 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116116:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116119:	e8 30 49 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011611e:	29 c3                	sub    %eax,%ebx
f0116120:	89 d8                	mov    %ebx,%eax
f0116122:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116127:	74 17                	je     f0116140 <test_kfree_firstfit+0x730>
f0116129:	83 ec 04             	sub    $0x4,%esp
f011612c:	68 f0 1a 12 f0       	push   $0xf0121af0
f0116131:	68 7e 06 00 00       	push   $0x67e
f0116136:	68 76 1a 12 f0       	push   $0xf0121a76
f011613b:	e8 6f a0 fe ff       	call   f01001af <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0116140:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0116147:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011614a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116150:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0116153:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011615a:	eb 0e                	jmp    f011616a <test_kfree_firstfit+0x75a>
		{
			ptr[i] = 5 ;
f011615c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011615f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116162:	01 d0                	add    %edx,%eax
f0116164:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0116167:	ff 45 f4             	incl   -0xc(%ebp)
f011616a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0116170:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116173:	7f e7                	jg     f011615c <test_kfree_firstfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0116175:	e8 d4 48 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011617a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011617d:	e8 f8 5f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116182:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0116185:	83 ec 0c             	sub    $0xc,%esp
f0116188:	68 00 fc 5f 00       	push   $0x5ffc00
f011618d:	e8 03 6d ff ff       	call   f010ce95 <kmalloc>
f0116192:	83 c4 10             	add    $0x10,%esp
f0116195:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011619b:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01161a1:	89 c1                	mov    %eax,%ecx
f01161a3:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01161aa:	10 00 00 
f01161ad:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01161b2:	0f b6 d0             	movzbl %al,%edx
f01161b5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01161bb:	01 d0                	add    %edx,%eax
f01161bd:	48                   	dec    %eax
f01161be:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f01161c4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01161ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01161cf:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01161d5:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01161db:	29 d0                	sub    %edx,%eax
f01161dd:	89 c3                	mov    %eax,%ebx
f01161df:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01161e6:	10 00 00 
f01161e9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01161ee:	0f b6 c0             	movzbl %al,%eax
f01161f1:	c1 e0 04             	shl    $0x4,%eax
f01161f4:	89 c2                	mov    %eax,%edx
f01161f6:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01161fc:	01 d0                	add    %edx,%eax
f01161fe:	48                   	dec    %eax
f01161ff:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0116205:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011620b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116210:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0116216:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011621c:	29 d0                	sub    %edx,%eax
f011621e:	01 d8                	add    %ebx,%eax
f0116220:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0116225:	39 c1                	cmp    %eax,%ecx
f0116227:	74 17                	je     f0116240 <test_kfree_firstfit+0x830>
f0116229:	83 ec 04             	sub    $0x4,%esp
f011622c:	68 54 1b 12 f0       	push   $0xf0121b54
f0116231:	68 8a 06 00 00       	push   $0x68a
f0116236:	68 76 1a 12 f0       	push   $0xf0121a76
f011623b:	e8 6f 9f fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116240:	e8 35 5f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116245:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116248:	74 17                	je     f0116261 <test_kfree_firstfit+0x851>
f011624a:	83 ec 04             	sub    $0x4,%esp
f011624d:	68 88 1a 12 f0       	push   $0xf0121a88
f0116252:	68 8b 06 00 00       	push   $0x68b
f0116257:	68 76 1a 12 f0       	push   $0xf0121a76
f011625c:	e8 4e 9f fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116261:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116264:	e8 e5 47 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116269:	29 c3                	sub    %eax,%ebx
f011626b:	89 d8                	mov    %ebx,%eax
f011626d:	3d 00 06 00 00       	cmp    $0x600,%eax
f0116272:	74 17                	je     f011628b <test_kfree_firstfit+0x87b>
f0116274:	83 ec 04             	sub    $0x4,%esp
f0116277:	68 f0 1a 12 f0       	push   $0xf0121af0
f011627c:	68 8c 06 00 00       	push   $0x68c
f0116281:	68 76 1a 12 f0       	push   $0xf0121a76
f0116286:	e8 24 9f fe ff       	call   f01001af <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011628b:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f0116292:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0116295:	e8 b4 47 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011629a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011629d:	e8 d8 5e ff ff       	call   f010c17a <pf_calculate_free_frames>
f01162a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01162a5:	83 ec 0c             	sub    $0xc,%esp
f01162a8:	68 00 38 00 00       	push   $0x3800
f01162ad:	e8 e3 6b ff ff       	call   f010ce95 <kmalloc>
f01162b2:	83 c4 10             	add    $0x10,%esp
f01162b5:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01162bb:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01162c1:	89 c1                	mov    %eax,%ecx
f01162c3:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01162ca:	10 00 00 
f01162cd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01162d2:	0f b6 d0             	movzbl %al,%edx
f01162d5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01162db:	01 d0                	add    %edx,%eax
f01162dd:	48                   	dec    %eax
f01162de:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f01162e4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01162ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01162ef:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f01162f5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01162fb:	29 d0                	sub    %edx,%eax
f01162fd:	89 c3                	mov    %eax,%ebx
f01162ff:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0116306:	10 00 00 
f0116309:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011630e:	0f b6 c0             	movzbl %al,%eax
f0116311:	c1 e0 04             	shl    $0x4,%eax
f0116314:	89 c2                	mov    %eax,%edx
f0116316:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011631c:	01 d0                	add    %edx,%eax
f011631e:	48                   	dec    %eax
f011631f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0116325:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011632b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116330:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0116336:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011633c:	29 d0                	sub    %edx,%eax
f011633e:	01 d8                	add    %ebx,%eax
f0116340:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0116345:	39 c1                	cmp    %eax,%ecx
f0116347:	74 17                	je     f0116360 <test_kfree_firstfit+0x950>
f0116349:	83 ec 04             	sub    $0x4,%esp
f011634c:	68 54 1b 12 f0       	push   $0xf0121b54
f0116351:	68 93 06 00 00       	push   $0x693
f0116356:	68 76 1a 12 f0       	push   $0xf0121a76
f011635b:	e8 4f 9e fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116360:	e8 15 5e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116365:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116368:	74 17                	je     f0116381 <test_kfree_firstfit+0x971>
f011636a:	83 ec 04             	sub    $0x4,%esp
f011636d:	68 88 1a 12 f0       	push   $0xf0121a88
f0116372:	68 94 06 00 00       	push   $0x694
f0116377:	68 76 1a 12 f0       	push   $0xf0121a76
f011637c:	e8 2e 9e fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116381:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116384:	e8 c5 46 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116389:	29 c3                	sub    %eax,%ebx
f011638b:	89 d8                	mov    %ebx,%eax
f011638d:	83 f8 04             	cmp    $0x4,%eax
f0116390:	74 17                	je     f01163a9 <test_kfree_firstfit+0x999>
f0116392:	83 ec 04             	sub    $0x4,%esp
f0116395:	68 f0 1a 12 f0       	push   $0xf0121af0
f011639a:	68 95 06 00 00       	push   $0x695
f011639f:	68 76 1a 12 f0       	push   $0xf0121a76
f01163a4:	e8 06 9e fe ff       	call   f01001af <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01163a9:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f01163b0:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01163b3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01163b9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01163bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01163c3:	eb 0e                	jmp    f01163d3 <test_kfree_firstfit+0x9c3>
		{
			ptr[i] = 7 ;
f01163c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01163c8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01163cb:	01 d0                	add    %edx,%eax
f01163cd:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01163d0:	ff 45 f4             	incl   -0xc(%ebp)
f01163d3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01163d9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01163dc:	7f e7                	jg     f01163c5 <test_kfree_firstfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01163de:	e8 6b 46 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01163e3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01163e9:	e8 8c 5d ff ff       	call   f010c17a <pf_calculate_free_frames>
f01163ee:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f01163f4:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01163fa:	83 ec 0c             	sub    $0xc,%esp
f01163fd:	50                   	push   %eax
f01163fe:	e8 dd 6a ff ff       	call   f010cee0 <kfree>
f0116403:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116406:	e8 6f 5d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011640b:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0116411:	74 17                	je     f011642a <test_kfree_firstfit+0xa1a>
f0116413:	83 ec 04             	sub    $0x4,%esp
f0116416:	68 88 1a 12 f0       	push   $0xf0121a88
f011641b:	68 a4 06 00 00       	push   $0x6a4
f0116420:	68 76 1a 12 f0       	push   $0xf0121a76
f0116425:	e8 85 9d fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011642a:	e8 1f 46 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011642f:	89 c2                	mov    %eax,%edx
f0116431:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0116437:	29 c2                	sub    %eax,%edx
f0116439:	89 d0                	mov    %edx,%eax
f011643b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116440:	74 17                	je     f0116459 <test_kfree_firstfit+0xa49>
f0116442:	83 ec 04             	sub    $0x4,%esp
f0116445:	68 f8 21 12 f0       	push   $0xf01221f8
f011644a:	68 a5 06 00 00       	push   $0x6a5
f011644f:	68 76 1a 12 f0       	push   $0xf0121a76
f0116454:	e8 56 9d fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116459:	e8 f0 45 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011645e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116464:	e8 11 5d ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116469:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f011646f:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0116475:	83 ec 0c             	sub    $0xc,%esp
f0116478:	50                   	push   %eax
f0116479:	e8 62 6a ff ff       	call   f010cee0 <kfree>
f011647e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116481:	e8 f4 5c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116486:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f011648c:	74 17                	je     f01164a5 <test_kfree_firstfit+0xa95>
f011648e:	83 ec 04             	sub    $0x4,%esp
f0116491:	68 88 1a 12 f0       	push   $0xf0121a88
f0116496:	68 ab 06 00 00       	push   $0x6ab
f011649b:	68 76 1a 12 f0       	push   $0xf0121a76
f01164a0:	e8 0a 9d fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01164a5:	e8 a4 45 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01164aa:	89 c2                	mov    %eax,%edx
f01164ac:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01164b2:	29 c2                	sub    %eax,%edx
f01164b4:	89 d0                	mov    %edx,%eax
f01164b6:	3d 00 02 00 00       	cmp    $0x200,%eax
f01164bb:	74 17                	je     f01164d4 <test_kfree_firstfit+0xac4>
f01164bd:	83 ec 04             	sub    $0x4,%esp
f01164c0:	68 f8 21 12 f0       	push   $0xf01221f8
f01164c5:	68 ac 06 00 00       	push   $0x6ac
f01164ca:	68 76 1a 12 f0       	push   $0xf0121a76
f01164cf:	e8 db 9c fe ff       	call   f01001af <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01164d4:	e8 75 45 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01164d9:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01164df:	e8 96 5c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01164e4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f01164ea:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01164f0:	83 ec 0c             	sub    $0xc,%esp
f01164f3:	50                   	push   %eax
f01164f4:	e8 e7 69 ff ff       	call   f010cee0 <kfree>
f01164f9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01164fc:	e8 79 5c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116501:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0116507:	74 17                	je     f0116520 <test_kfree_firstfit+0xb10>
f0116509:	83 ec 04             	sub    $0x4,%esp
f011650c:	68 88 1a 12 f0       	push   $0xf0121a88
f0116511:	68 b2 06 00 00       	push   $0x6b2
f0116516:	68 76 1a 12 f0       	push   $0xf0121a76
f011651b:	e8 8f 9c fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0116520:	e8 29 45 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116525:	89 c2                	mov    %eax,%edx
f0116527:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011652d:	29 c2                	sub    %eax,%edx
f011652f:	89 d0                	mov    %edx,%eax
f0116531:	3d 00 06 00 00       	cmp    $0x600,%eax
f0116536:	74 17                	je     f011654f <test_kfree_firstfit+0xb3f>
f0116538:	83 ec 04             	sub    $0x4,%esp
f011653b:	68 f8 21 12 f0       	push   $0xf01221f8
f0116540:	68 b3 06 00 00       	push   $0x6b3
f0116545:	68 76 1a 12 f0       	push   $0xf0121a76
f011654a:	e8 60 9c fe ff       	call   f01001af <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011654f:	83 ec 0c             	sub    $0xc,%esp
f0116552:	68 30 22 12 f0       	push   $0xf0122230
f0116557:	e8 a8 0c ff ff       	call   f0107204 <cprintf>
f011655c:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f011655f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0116565:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0116568:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011656f:	eb 1e                	jmp    f011658f <test_kfree_firstfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f0116571:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0116577:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011657a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011657d:	01 c8                	add    %ecx,%eax
f011657f:	8a 00                	mov    (%eax),%al
f0116581:	0f be c0             	movsbl %al,%eax
f0116584:	01 d0                	add    %edx,%eax
f0116586:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011658c:	ff 45 f4             	incl   -0xc(%ebp)
f011658f:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0116595:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116598:	7f d7                	jg     f0116571 <test_kfree_firstfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f011659a:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f01165a0:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01165a6:	01 c0                	add    %eax,%eax
f01165a8:	39 c2                	cmp    %eax,%edx
f01165aa:	74 17                	je     f01165c3 <test_kfree_firstfit+0xbb3>
f01165ac:	83 ec 04             	sub    $0x4,%esp
f01165af:	68 54 22 12 f0       	push   $0xf0122254
f01165b4:	68 c0 06 00 00       	push   $0x6c0
f01165b9:	68 76 1a 12 f0       	push   $0xf0121a76
f01165be:	e8 ec 9b fe ff       	call   f01001af <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01165c3:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01165c9:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01165cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01165d3:	eb 1e                	jmp    f01165f3 <test_kfree_firstfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f01165d5:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f01165db:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01165de:	8b 45 98             	mov    -0x68(%ebp),%eax
f01165e1:	01 c8                	add    %ecx,%eax
f01165e3:	8a 00                	mov    (%eax),%al
f01165e5:	0f be c0             	movsbl %al,%eax
f01165e8:	01 d0                	add    %edx,%eax
f01165ea:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01165f0:	ff 45 f4             	incl   -0xc(%ebp)
f01165f3:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01165f9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01165fc:	7f d7                	jg     f01165d5 <test_kfree_firstfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01165fe:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0116604:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011660a:	89 c1                	mov    %eax,%ecx
f011660c:	01 c9                	add    %ecx,%ecx
f011660e:	01 c8                	add    %ecx,%eax
f0116610:	39 c2                	cmp    %eax,%edx
f0116612:	74 17                	je     f011662b <test_kfree_firstfit+0xc1b>
f0116614:	83 ec 04             	sub    $0x4,%esp
f0116617:	68 54 22 12 f0       	push   $0xf0122254
f011661c:	68 c8 06 00 00       	push   $0x6c8
f0116621:	68 76 1a 12 f0       	push   $0xf0121a76
f0116626:	e8 84 9b fe ff       	call   f01001af <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011662b:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116631:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0116634:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011663b:	eb 1e                	jmp    f011665b <test_kfree_firstfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f011663d:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0116643:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116646:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116649:	01 c8                	add    %ecx,%eax
f011664b:	8a 00                	mov    (%eax),%al
f011664d:	0f be c0             	movsbl %al,%eax
f0116650:	01 d0                	add    %edx,%eax
f0116652:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0116658:	ff 45 f4             	incl   -0xc(%ebp)
f011665b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0116661:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116664:	7f d7                	jg     f011663d <test_kfree_firstfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0116666:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011666c:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0116672:	c1 e2 02             	shl    $0x2,%edx
f0116675:	39 d0                	cmp    %edx,%eax
f0116677:	74 17                	je     f0116690 <test_kfree_firstfit+0xc80>
f0116679:	83 ec 04             	sub    $0x4,%esp
f011667c:	68 54 22 12 f0       	push   $0xf0122254
f0116681:	68 d0 06 00 00       	push   $0x6d0
f0116686:	68 76 1a 12 f0       	push   $0xf0121a76
f011668b:	e8 1f 9b fe ff       	call   f01001af <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0116690:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116696:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0116699:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01166a0:	eb 1e                	jmp    f01166c0 <test_kfree_firstfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f01166a2:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f01166a8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01166ab:	8b 45 98             	mov    -0x68(%ebp),%eax
f01166ae:	01 c8                	add    %ecx,%eax
f01166b0:	8a 00                	mov    (%eax),%al
f01166b2:	0f be c0             	movsbl %al,%eax
f01166b5:	01 d0                	add    %edx,%eax
f01166b7:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01166bd:	ff 45 f4             	incl   -0xc(%ebp)
f01166c0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01166c6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01166c9:	7f d7                	jg     f01166a2 <test_kfree_firstfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01166cb:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f01166d1:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f01166d7:	89 d0                	mov    %edx,%eax
f01166d9:	c1 e0 02             	shl    $0x2,%eax
f01166dc:	01 d0                	add    %edx,%eax
f01166de:	39 c1                	cmp    %eax,%ecx
f01166e0:	74 17                	je     f01166f9 <test_kfree_firstfit+0xce9>
f01166e2:	83 ec 04             	sub    $0x4,%esp
f01166e5:	68 54 22 12 f0       	push   $0xf0122254
f01166ea:	68 d8 06 00 00       	push   $0x6d8
f01166ef:	68 76 1a 12 f0       	push   $0xf0121a76
f01166f4:	e8 b6 9a fe ff       	call   f01001af <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01166f9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f01166ff:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0116702:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116709:	eb 1e                	jmp    f0116729 <test_kfree_firstfit+0xd19>
		{
			sums[7] += ptr[i] ;
f011670b:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0116711:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116714:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116717:	01 c8                	add    %ecx,%eax
f0116719:	8a 00                	mov    (%eax),%al
f011671b:	0f be c0             	movsbl %al,%eax
f011671e:	01 d0                	add    %edx,%eax
f0116720:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0116726:	ff 45 f4             	incl   -0xc(%ebp)
f0116729:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011672f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116732:	7f d7                	jg     f011670b <test_kfree_firstfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0116734:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f011673a:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0116740:	89 d0                	mov    %edx,%eax
f0116742:	01 c0                	add    %eax,%eax
f0116744:	01 d0                	add    %edx,%eax
f0116746:	01 c0                	add    %eax,%eax
f0116748:	01 d0                	add    %edx,%eax
f011674a:	39 c1                	cmp    %eax,%ecx
f011674c:	74 17                	je     f0116765 <test_kfree_firstfit+0xd55>
f011674e:	83 ec 04             	sub    $0x4,%esp
f0116751:	68 54 22 12 f0       	push   $0xf0122254
f0116756:	68 e0 06 00 00       	push   $0x6e0
f011675b:	68 76 1a 12 f0       	push   $0xf0121a76
f0116760:	e8 4a 9a fe ff       	call   f01001af <_panic>
	}
	cprintf("\b\b\b30%");
f0116765:	83 ec 0c             	sub    $0xc,%esp
f0116768:	68 87 22 12 f0       	push   $0xf0122287
f011676d:	e8 92 0a ff ff       	call   f0107204 <cprintf>
f0116772:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0116775:	e8 d4 42 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011677a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011677d:	e8 f8 59 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116782:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0116785:	83 ec 0c             	sub    $0xc,%esp
f0116788:	68 00 50 00 00       	push   $0x5000
f011678d:	e8 03 67 ff ff       	call   f010ce95 <kmalloc>
f0116792:	83 c4 10             	add    $0x10,%esp
f0116795:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011679b:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01167a1:	89 c1                	mov    %eax,%ecx
f01167a3:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f01167aa:	10 00 00 
f01167ad:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01167b2:	0f b6 d0             	movzbl %al,%edx
f01167b5:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01167bb:	01 d0                	add    %edx,%eax
f01167bd:	48                   	dec    %eax
f01167be:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f01167c4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01167ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01167cf:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f01167d5:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01167db:	29 d0                	sub    %edx,%eax
f01167dd:	89 c3                	mov    %eax,%ebx
f01167df:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f01167e6:	10 00 00 
f01167e9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01167ee:	0f b6 c0             	movzbl %al,%eax
f01167f1:	c1 e0 04             	shl    $0x4,%eax
f01167f4:	89 c2                	mov    %eax,%edx
f01167f6:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01167fc:	01 d0                	add    %edx,%eax
f01167fe:	48                   	dec    %eax
f01167ff:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0116805:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011680b:	ba 00 00 00 00       	mov    $0x0,%edx
f0116810:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0116816:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011681c:	29 d0                	sub    %edx,%eax
f011681e:	01 d8                	add    %ebx,%eax
f0116820:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0116825:	39 c1                	cmp    %eax,%ecx
f0116827:	74 17                	je     f0116840 <test_kfree_firstfit+0xe30>
f0116829:	83 ec 04             	sub    $0x4,%esp
f011682c:	68 54 1b 12 f0       	push   $0xf0121b54
f0116831:	68 ea 06 00 00       	push   $0x6ea
f0116836:	68 76 1a 12 f0       	push   $0xf0121a76
f011683b:	e8 6f 99 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116840:	e8 35 59 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116845:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116848:	74 17                	je     f0116861 <test_kfree_firstfit+0xe51>
f011684a:	83 ec 04             	sub    $0x4,%esp
f011684d:	68 88 1a 12 f0       	push   $0xf0121a88
f0116852:	68 eb 06 00 00       	push   $0x6eb
f0116857:	68 76 1a 12 f0       	push   $0xf0121a76
f011685c:	e8 4e 99 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116861:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0116864:	e8 e5 41 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116869:	29 c3                	sub    %eax,%ebx
f011686b:	89 d8                	mov    %ebx,%eax
f011686d:	83 f8 05             	cmp    $0x5,%eax
f0116870:	74 17                	je     f0116889 <test_kfree_firstfit+0xe79>
f0116872:	83 ec 04             	sub    $0x4,%esp
f0116875:	68 f0 1a 12 f0       	push   $0xf0121af0
f011687a:	68 ec 06 00 00       	push   $0x6ec
f011687f:	68 76 1a 12 f0       	push   $0xf0121a76
f0116884:	e8 26 99 fe ff       	call   f01001af <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0116889:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0116890:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0116893:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116899:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011689c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01168a3:	eb 0e                	jmp    f01168b3 <test_kfree_firstfit+0xea3>
		{
			ptr[i] = 8 ;
f01168a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01168a8:	8b 45 98             	mov    -0x68(%ebp),%eax
f01168ab:	01 d0                	add    %edx,%eax
f01168ad:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01168b0:	ff 45 f4             	incl   -0xc(%ebp)
f01168b3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01168b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01168bc:	7f e7                	jg     f01168a5 <test_kfree_firstfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01168be:	e8 8b 41 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01168c3:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01168c6:	e8 af 58 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01168cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01168ce:	83 ec 0c             	sub    $0xc,%esp
f01168d1:	68 00 00 10 00       	push   $0x100000
f01168d6:	e8 ba 65 ff ff       	call   f010ce95 <kmalloc>
f01168db:	83 c4 10             	add    $0x10,%esp
f01168de:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 5*PAGE_SIZE)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01168e4:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01168ea:	89 c1                	mov    %eax,%ecx
f01168ec:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01168f3:	10 00 00 
f01168f6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01168fb:	0f b6 d0             	movzbl %al,%edx
f01168fe:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0116904:	01 d0                	add    %edx,%eax
f0116906:	48                   	dec    %eax
f0116907:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011690d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0116913:	ba 00 00 00 00       	mov    $0x0,%edx
f0116918:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011691e:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0116924:	29 d0                	sub    %edx,%eax
f0116926:	89 c3                	mov    %eax,%ebx
f0116928:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011692f:	10 00 00 
f0116932:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0116937:	0f b6 c0             	movzbl %al,%eax
f011693a:	c1 e0 04             	shl    $0x4,%eax
f011693d:	89 c2                	mov    %eax,%edx
f011693f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116945:	01 d0                	add    %edx,%eax
f0116947:	48                   	dec    %eax
f0116948:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011694e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116954:	ba 00 00 00 00       	mov    $0x0,%edx
f0116959:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011695f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116965:	29 d0                	sub    %edx,%eax
f0116967:	01 d8                	add    %ebx,%eax
f0116969:	2d 00 70 ff 09       	sub    $0x9ff7000,%eax
f011696e:	39 c1                	cmp    %eax,%ecx
f0116970:	74 17                	je     f0116989 <test_kfree_firstfit+0xf79>
f0116972:	83 ec 04             	sub    $0x4,%esp
f0116975:	68 54 1b 12 f0       	push   $0xf0121b54
f011697a:	68 f8 06 00 00       	push   $0x6f8
f011697f:	68 76 1a 12 f0       	push   $0xf0121a76
f0116984:	e8 26 98 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116989:	e8 ec 57 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011698e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116991:	74 17                	je     f01169aa <test_kfree_firstfit+0xf9a>
f0116993:	83 ec 04             	sub    $0x4,%esp
f0116996:	68 88 1a 12 f0       	push   $0xf0121a88
f011699b:	68 f9 06 00 00       	push   $0x6f9
f01169a0:	68 76 1a 12 f0       	push   $0xf0121a76
f01169a5:	e8 05 98 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01169aa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01169ad:	e8 9c 40 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01169b2:	29 c3                	sub    %eax,%ebx
f01169b4:	89 d8                	mov    %ebx,%eax
f01169b6:	3d 00 01 00 00       	cmp    $0x100,%eax
f01169bb:	74 17                	je     f01169d4 <test_kfree_firstfit+0xfc4>
f01169bd:	83 ec 04             	sub    $0x4,%esp
f01169c0:	68 f0 1a 12 f0       	push   $0xf0121af0
f01169c5:	68 fa 06 00 00       	push   $0x6fa
f01169ca:	68 76 1a 12 f0       	push   $0xf0121a76
f01169cf:	e8 db 97 fe ff       	call   f01001af <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f01169d4:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f01169db:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f01169de:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01169e4:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01169e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01169ee:	eb 0e                	jmp    f01169fe <test_kfree_firstfit+0xfee>
		{
			ptr[i] = 9 ;
f01169f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01169f3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01169f6:	01 d0                	add    %edx,%eax
f01169f8:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 5*PAGE_SIZE)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01169fb:	ff 45 f4             	incl   -0xc(%ebp)
f01169fe:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0116a04:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0116a07:	7f e7                	jg     f01169f0 <test_kfree_firstfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0116a09:	83 ec 0c             	sub    $0xc,%esp
f0116a0c:	68 af 22 12 f0       	push   $0xf01222af
f0116a11:	e8 ee 07 ff ff       	call   f0107204 <cprintf>
f0116a16:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0116a19:	e8 30 40 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116a1e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a21:	e8 54 57 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116a26:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0116a29:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116a2f:	83 ec 0c             	sub    $0xc,%esp
f0116a32:	50                   	push   %eax
f0116a33:	e8 a8 64 ff ff       	call   f010cee0 <kfree>
f0116a38:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116a3b:	e8 3a 57 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116a40:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116a43:	74 17                	je     f0116a5c <test_kfree_firstfit+0x104c>
f0116a45:	83 ec 04             	sub    $0x4,%esp
f0116a48:	68 88 1a 12 f0       	push   $0xf0121a88
f0116a4d:	68 0a 07 00 00       	push   $0x70a
f0116a52:	68 76 1a 12 f0       	push   $0xf0121a76
f0116a57:	e8 53 97 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0116a5c:	e8 ed 3f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116a61:	89 c2                	mov    %eax,%edx
f0116a63:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116a66:	29 c2                	sub    %eax,%edx
f0116a68:	89 d0                	mov    %edx,%eax
f0116a6a:	83 f8 02             	cmp    $0x2,%eax
f0116a6d:	74 17                	je     f0116a86 <test_kfree_firstfit+0x1076>
f0116a6f:	83 ec 04             	sub    $0x4,%esp
f0116a72:	68 f8 21 12 f0       	push   $0xf01221f8
f0116a77:	68 0b 07 00 00       	push   $0x70b
f0116a7c:	68 76 1a 12 f0       	push   $0xf0121a76
f0116a81:	e8 29 97 fe ff       	call   f01001af <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0116a86:	e8 c3 3f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116a8b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116a8e:	e8 e7 56 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116a93:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0116a96:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116a9c:	83 ec 0c             	sub    $0xc,%esp
f0116a9f:	50                   	push   %eax
f0116aa0:	e8 3b 64 ff ff       	call   f010cee0 <kfree>
f0116aa5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116aa8:	e8 cd 56 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116aad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116ab0:	74 17                	je     f0116ac9 <test_kfree_firstfit+0x10b9>
f0116ab2:	83 ec 04             	sub    $0x4,%esp
f0116ab5:	68 88 1a 12 f0       	push   $0xf0121a88
f0116aba:	68 11 07 00 00       	push   $0x711
f0116abf:	68 76 1a 12 f0       	push   $0xf0121a76
f0116ac4:	e8 e6 96 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0116ac9:	e8 80 3f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116ace:	89 c2                	mov    %eax,%edx
f0116ad0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ad3:	29 c2                	sub    %eax,%edx
f0116ad5:	89 d0                	mov    %edx,%eax
f0116ad7:	3d 00 03 00 00       	cmp    $0x300,%eax
f0116adc:	74 17                	je     f0116af5 <test_kfree_firstfit+0x10e5>
f0116ade:	83 ec 04             	sub    $0x4,%esp
f0116ae1:	68 f8 21 12 f0       	push   $0xf01221f8
f0116ae6:	68 12 07 00 00       	push   $0x712
f0116aeb:	68 76 1a 12 f0       	push   $0xf0121a76
f0116af0:	e8 ba 96 fe ff       	call   f01001af <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116af5:	e8 54 3f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116afa:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116afd:	e8 78 56 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116b02:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0116b05:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0116b0b:	83 ec 0c             	sub    $0xc,%esp
f0116b0e:	50                   	push   %eax
f0116b0f:	e8 cc 63 ff ff       	call   f010cee0 <kfree>
f0116b14:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116b17:	e8 5e 56 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116b1c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116b1f:	74 17                	je     f0116b38 <test_kfree_firstfit+0x1128>
f0116b21:	83 ec 04             	sub    $0x4,%esp
f0116b24:	68 88 1a 12 f0       	push   $0xf0121a88
f0116b29:	68 18 07 00 00       	push   $0x718
f0116b2e:	68 76 1a 12 f0       	push   $0xf0121a76
f0116b33:	e8 77 96 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0116b38:	e8 11 3f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116b3d:	89 c2                	mov    %eax,%edx
f0116b3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116b42:	29 c2                	sub    %eax,%edx
f0116b44:	89 d0                	mov    %edx,%eax
f0116b46:	83 f8 01             	cmp    $0x1,%eax
f0116b49:	74 17                	je     f0116b62 <test_kfree_firstfit+0x1152>
f0116b4b:	83 ec 04             	sub    $0x4,%esp
f0116b4e:	68 f8 21 12 f0       	push   $0xf01221f8
f0116b53:	68 19 07 00 00       	push   $0x719
f0116b58:	68 76 1a 12 f0       	push   $0xf0121a76
f0116b5d:	e8 4d 96 fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116b62:	e8 e7 3e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116b67:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116b6a:	e8 0b 56 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116b6f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0116b72:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0116b78:	83 ec 0c             	sub    $0xc,%esp
f0116b7b:	50                   	push   %eax
f0116b7c:	e8 5f 63 ff ff       	call   f010cee0 <kfree>
f0116b81:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116b84:	e8 f1 55 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116b89:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116b8c:	74 17                	je     f0116ba5 <test_kfree_firstfit+0x1195>
f0116b8e:	83 ec 04             	sub    $0x4,%esp
f0116b91:	68 88 1a 12 f0       	push   $0xf0121a88
f0116b96:	68 1f 07 00 00       	push   $0x71f
f0116b9b:	68 76 1a 12 f0       	push   $0xf0121a76
f0116ba0:	e8 0a 96 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0116ba5:	e8 a4 3e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116baa:	89 c2                	mov    %eax,%edx
f0116bac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116baf:	29 c2                	sub    %eax,%edx
f0116bb1:	89 d0                	mov    %edx,%eax
f0116bb3:	83 f8 01             	cmp    $0x1,%eax
f0116bb6:	74 17                	je     f0116bcf <test_kfree_firstfit+0x11bf>
f0116bb8:	83 ec 04             	sub    $0x4,%esp
f0116bbb:	68 f8 21 12 f0       	push   $0xf01221f8
f0116bc0:	68 20 07 00 00       	push   $0x720
f0116bc5:	68 76 1a 12 f0       	push   $0xf0121a76
f0116bca:	e8 e0 95 fe ff       	call   f01001af <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0116bcf:	e8 7a 3e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116bd4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116bd7:	e8 9e 55 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116bdc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0116bdf:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0116be5:	83 ec 0c             	sub    $0xc,%esp
f0116be8:	50                   	push   %eax
f0116be9:	e8 f2 62 ff ff       	call   f010cee0 <kfree>
f0116bee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116bf1:	e8 84 55 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116bf6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116bf9:	74 17                	je     f0116c12 <test_kfree_firstfit+0x1202>
f0116bfb:	83 ec 04             	sub    $0x4,%esp
f0116bfe:	68 88 1a 12 f0       	push   $0xf0121a88
f0116c03:	68 26 07 00 00       	push   $0x726
f0116c08:	68 76 1a 12 f0       	push   $0xf0121a76
f0116c0d:	e8 9d 95 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0116c12:	e8 37 3e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116c17:	89 c2                	mov    %eax,%edx
f0116c19:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116c1c:	29 c2                	sub    %eax,%edx
f0116c1e:	89 d0                	mov    %edx,%eax
f0116c20:	83 f8 04             	cmp    $0x4,%eax
f0116c23:	74 17                	je     f0116c3c <test_kfree_firstfit+0x122c>
f0116c25:	83 ec 04             	sub    $0x4,%esp
f0116c28:	68 f8 21 12 f0       	push   $0xf01221f8
f0116c2d:	68 27 07 00 00       	push   $0x727
f0116c32:	68 76 1a 12 f0       	push   $0xf0121a76
f0116c37:	e8 73 95 fe ff       	call   f01001af <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0116c3c:	e8 0d 3e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116c41:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116c44:	e8 31 55 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116c49:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0116c4c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116c52:	83 ec 0c             	sub    $0xc,%esp
f0116c55:	50                   	push   %eax
f0116c56:	e8 85 62 ff ff       	call   f010cee0 <kfree>
f0116c5b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c5e:	e8 17 55 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116c63:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116c66:	74 17                	je     f0116c7f <test_kfree_firstfit+0x126f>
f0116c68:	83 ec 04             	sub    $0x4,%esp
f0116c6b:	68 88 1a 12 f0       	push   $0xf0121a88
f0116c70:	68 2d 07 00 00       	push   $0x72d
f0116c75:	68 76 1a 12 f0       	push   $0xf0121a76
f0116c7a:	e8 30 95 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0116c7f:	e8 ca 3d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116c84:	89 c2                	mov    %eax,%edx
f0116c86:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116c89:	29 c2                	sub    %eax,%edx
f0116c8b:	89 d0                	mov    %edx,%eax
f0116c8d:	83 f8 05             	cmp    $0x5,%eax
f0116c90:	74 17                	je     f0116ca9 <test_kfree_firstfit+0x1299>
f0116c92:	83 ec 04             	sub    $0x4,%esp
f0116c95:	68 f8 21 12 f0       	push   $0xf01221f8
f0116c9a:	68 2e 07 00 00       	push   $0x72e
f0116c9f:	68 76 1a 12 f0       	push   $0xf0121a76
f0116ca4:	e8 06 95 fe ff       	call   f01001af <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116ca9:	e8 a0 3d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116cae:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116cb1:	e8 c4 54 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116cb6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0116cb9:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116cbf:	83 ec 0c             	sub    $0xc,%esp
f0116cc2:	50                   	push   %eax
f0116cc3:	e8 18 62 ff ff       	call   f010cee0 <kfree>
f0116cc8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116ccb:	e8 aa 54 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116cd0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116cd3:	74 17                	je     f0116cec <test_kfree_firstfit+0x12dc>
f0116cd5:	83 ec 04             	sub    $0x4,%esp
f0116cd8:	68 88 1a 12 f0       	push   $0xf0121a88
f0116cdd:	68 34 07 00 00       	push   $0x734
f0116ce2:	68 76 1a 12 f0       	push   $0xf0121a76
f0116ce7:	e8 c3 94 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0116cec:	e8 5d 3d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116cf1:	89 c2                	mov    %eax,%edx
f0116cf3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116cf6:	29 c2                	sub    %eax,%edx
f0116cf8:	89 d0                	mov    %edx,%eax
f0116cfa:	3d 00 01 00 00       	cmp    $0x100,%eax
f0116cff:	74 17                	je     f0116d18 <test_kfree_firstfit+0x1308>
f0116d01:	83 ec 04             	sub    $0x4,%esp
f0116d04:	68 f8 21 12 f0       	push   $0xf01221f8
f0116d09:	68 35 07 00 00       	push   $0x735
f0116d0e:	68 76 1a 12 f0       	push   $0xf0121a76
f0116d13:	e8 97 94 fe ff       	call   f01001af <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0116d18:	e8 31 3d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116d1d:	89 c2                	mov    %eax,%edx
f0116d1f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116d22:	39 c2                	cmp    %eax,%edx
f0116d24:	74 17                	je     f0116d3d <test_kfree_firstfit+0x132d>
f0116d26:	83 ec 04             	sub    $0x4,%esp
f0116d29:	68 b8 22 12 f0       	push   $0xf01222b8
f0116d2e:	68 37 07 00 00       	push   $0x737
f0116d33:	68 76 1a 12 f0       	push   $0xf0121a76
f0116d38:	e8 72 94 fe ff       	call   f01001af <_panic>
	}
	cprintf("\b\b\b60%");
f0116d3d:	83 ec 0c             	sub    $0xc,%esp
f0116d40:	68 ec 22 12 f0       	push   $0xf01222ec
f0116d45:	e8 ba 04 ff ff       	call   f0107204 <cprintf>
f0116d4a:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0116d4d:	83 ec 0c             	sub    $0xc,%esp
f0116d50:	6a 03                	push   $0x3
f0116d52:	e8 67 40 ff ff       	call   f010adbe <sys_bypassPageFault>
f0116d57:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0116d5a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116d61:	e9 82 00 00 00       	jmp    f0116de8 <test_kfree_firstfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f0116d66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d69:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f0116d70:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f0116d73:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116d76:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0116d79:	e8 2e 40 ff ff       	call   f010adac <sys_rcr2>
f0116d7e:	89 c2                	mov    %eax,%edx
f0116d80:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116d83:	39 c2                	cmp    %eax,%edx
f0116d85:	74 17                	je     f0116d9e <test_kfree_firstfit+0x138e>
f0116d87:	83 ec 04             	sub    $0x4,%esp
f0116d8a:	68 f4 22 12 f0       	push   $0xf01222f4
f0116d8f:	68 46 07 00 00       	push   $0x746
f0116d94:	68 76 1a 12 f0       	push   $0xf0121a76
f0116d99:	e8 11 94 fe ff       	call   f01001af <_panic>
			ptr[lastIndices[i]] = 10;
f0116d9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116da1:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0116da8:	89 c2                	mov    %eax,%edx
f0116daa:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116dad:	01 d0                	add    %edx,%eax
f0116daf:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0116db2:	e8 f5 3f ff ff       	call   f010adac <sys_rcr2>
f0116db7:	89 c2                	mov    %eax,%edx
f0116db9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116dbc:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f0116dc3:	89 c1                	mov    %eax,%ecx
f0116dc5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116dc8:	01 c8                	add    %ecx,%eax
f0116dca:	39 c2                	cmp    %eax,%edx
f0116dcc:	74 17                	je     f0116de5 <test_kfree_firstfit+0x13d5>
f0116dce:	83 ec 04             	sub    $0x4,%esp
f0116dd1:	68 f4 22 12 f0       	push   $0xf01222f4
f0116dd6:	68 48 07 00 00       	push   $0x748
f0116ddb:	68 76 1a 12 f0       	push   $0xf0121a76
f0116de0:	e8 ca 93 fe ff       	call   f01001af <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0116de5:	ff 45 f4             	incl   -0xc(%ebp)
f0116de8:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0116dec:	0f 8e 74 ff ff ff    	jle    f0116d66 <test_kfree_firstfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0116df2:	83 ec 0c             	sub    $0xc,%esp
f0116df5:	6a 00                	push   $0x0
f0116df7:	e8 c2 3f ff ff       	call   f010adbe <sys_bypassPageFault>
f0116dfc:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0116dff:	83 ec 0c             	sub    $0xc,%esp
f0116e02:	68 39 23 12 f0       	push   $0xf0122339
f0116e07:	e8 f8 03 ff ff       	call   f0107204 <cprintf>
f0116e0c:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116e0f:	e8 3a 3c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116e14:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e17:	e8 5e 53 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116e1c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0116e1f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0116e25:	83 ec 0c             	sub    $0xc,%esp
f0116e28:	50                   	push   %eax
f0116e29:	e8 b2 60 ff ff       	call   f010cee0 <kfree>
f0116e2e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e31:	e8 44 53 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116e36:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116e39:	74 17                	je     f0116e52 <test_kfree_firstfit+0x1442>
f0116e3b:	83 ec 04             	sub    $0x4,%esp
f0116e3e:	68 88 1a 12 f0       	push   $0xf0121a88
f0116e43:	68 56 07 00 00       	push   $0x756
f0116e48:	68 76 1a 12 f0       	push   $0xf0121a76
f0116e4d:	e8 5d 93 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116e52:	e8 f7 3b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116e57:	89 c2                	mov    %eax,%edx
f0116e59:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116e5c:	39 c2                	cmp    %eax,%edx
f0116e5e:	74 17                	je     f0116e77 <test_kfree_firstfit+0x1467>
f0116e60:	83 ec 04             	sub    $0x4,%esp
f0116e63:	68 40 23 12 f0       	push   $0xf0122340
f0116e68:	68 57 07 00 00       	push   $0x757
f0116e6d:	68 76 1a 12 f0       	push   $0xf0121a76
f0116e72:	e8 38 93 fe ff       	call   f01001af <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116e77:	e8 d2 3b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116e7c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116e7f:	e8 f6 52 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116e84:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0116e87:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0116e8d:	83 ec 0c             	sub    $0xc,%esp
f0116e90:	50                   	push   %eax
f0116e91:	e8 4a 60 ff ff       	call   f010cee0 <kfree>
f0116e96:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116e99:	e8 dc 52 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116e9e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116ea1:	74 17                	je     f0116eba <test_kfree_firstfit+0x14aa>
f0116ea3:	83 ec 04             	sub    $0x4,%esp
f0116ea6:	68 88 1a 12 f0       	push   $0xf0121a88
f0116eab:	68 5d 07 00 00       	push   $0x75d
f0116eb0:	68 76 1a 12 f0       	push   $0xf0121a76
f0116eb5:	e8 f5 92 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116eba:	e8 8f 3b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116ebf:	89 c2                	mov    %eax,%edx
f0116ec1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116ec4:	39 c2                	cmp    %eax,%edx
f0116ec6:	74 17                	je     f0116edf <test_kfree_firstfit+0x14cf>
f0116ec8:	83 ec 04             	sub    $0x4,%esp
f0116ecb:	68 40 23 12 f0       	push   $0xf0122340
f0116ed0:	68 5e 07 00 00       	push   $0x75e
f0116ed5:	68 76 1a 12 f0       	push   $0xf0121a76
f0116eda:	e8 d0 92 fe ff       	call   f01001af <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0116edf:	e8 6a 3b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116ee4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ee7:	e8 8e 52 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116eec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0116eef:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0116ef5:	83 ec 0c             	sub    $0xc,%esp
f0116ef8:	50                   	push   %eax
f0116ef9:	e8 e2 5f ff ff       	call   f010cee0 <kfree>
f0116efe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116f01:	e8 74 52 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116f06:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116f09:	74 17                	je     f0116f22 <test_kfree_firstfit+0x1512>
f0116f0b:	83 ec 04             	sub    $0x4,%esp
f0116f0e:	68 88 1a 12 f0       	push   $0xf0121a88
f0116f13:	68 64 07 00 00       	push   $0x764
f0116f18:	68 76 1a 12 f0       	push   $0xf0121a76
f0116f1d:	e8 8d 92 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116f22:	e8 27 3b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116f27:	89 c2                	mov    %eax,%edx
f0116f29:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116f2c:	39 c2                	cmp    %eax,%edx
f0116f2e:	74 17                	je     f0116f47 <test_kfree_firstfit+0x1537>
f0116f30:	83 ec 04             	sub    $0x4,%esp
f0116f33:	68 40 23 12 f0       	push   $0xf0122340
f0116f38:	68 65 07 00 00       	push   $0x765
f0116f3d:	68 76 1a 12 f0       	push   $0xf0121a76
f0116f42:	e8 68 92 fe ff       	call   f01001af <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0116f47:	e8 02 3b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116f4c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116f4f:	e8 26 52 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116f54:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0116f57:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0116f5d:	83 ec 0c             	sub    $0xc,%esp
f0116f60:	50                   	push   %eax
f0116f61:	e8 7a 5f ff ff       	call   f010cee0 <kfree>
f0116f66:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116f69:	e8 0c 52 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0116f6e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0116f71:	74 17                	je     f0116f8a <test_kfree_firstfit+0x157a>
f0116f73:	83 ec 04             	sub    $0x4,%esp
f0116f76:	68 88 1a 12 f0       	push   $0xf0121a88
f0116f7b:	68 6b 07 00 00       	push   $0x76b
f0116f80:	68 76 1a 12 f0       	push   $0xf0121a76
f0116f85:	e8 25 92 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0116f8a:	e8 bf 3a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0116f8f:	89 c2                	mov    %eax,%edx
f0116f91:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116f94:	39 c2                	cmp    %eax,%edx
f0116f96:	74 17                	je     f0116faf <test_kfree_firstfit+0x159f>
f0116f98:	83 ec 04             	sub    $0x4,%esp
f0116f9b:	68 40 23 12 f0       	push   $0xf0122340
f0116fa0:	68 6c 07 00 00       	push   $0x76c
f0116fa5:	68 76 1a 12 f0       	push   $0xf0121a76
f0116faa:	e8 00 92 fe ff       	call   f01001af <_panic>

	}
	cprintf("\b\b\b85%");
f0116faf:	83 ec 0c             	sub    $0xc,%esp
f0116fb2:	68 87 23 12 f0       	push   $0xf0122387
f0116fb7:	e8 48 02 ff ff       	call   f0107204 <cprintf>
f0116fbc:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0116fbf:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0116fc6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0116fcd:	eb 4a                	jmp    f0117019 <test_kfree_firstfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0116fcf:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116fd2:	89 c1                	mov    %eax,%ecx
f0116fd4:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0116fd9:	83 ec 04             	sub    $0x4,%esp
f0116fdc:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f0116fe2:	52                   	push   %edx
f0116fe3:	51                   	push   %ecx
f0116fe4:	50                   	push   %eax
f0116fe5:	e8 f1 cb fe ff       	call   f0103bdb <get_page_table>
f0116fea:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0116fed:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0116ff3:	85 c0                	test   %eax,%eax
f0116ff5:	75 17                	jne    f011700e <test_kfree_firstfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0116ff7:	83 ec 04             	sub    $0x4,%esp
f0116ffa:	68 90 23 12 f0       	push   $0xf0122390
f0116fff:	68 7a 07 00 00       	push   $0x77a
f0117004:	68 76 1a 12 f0       	push   $0xf0121a76
f0117009:	e8 a1 91 fe ff       	call   f01001af <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011700e:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0117015:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0117019:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011701d:	78 b0                	js     f0116fcf <test_kfree_firstfit+0x15bf>
f011701f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0117023:	7f 09                	jg     f011702e <test_kfree_firstfit+0x161e>
f0117025:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f011702c:	76 a1                	jbe    f0116fcf <test_kfree_firstfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f011702e:	83 ec 0c             	sub    $0xc,%esp
f0117031:	68 52 1c 12 f0       	push   $0xf0121c52
f0117036:	e8 c9 01 ff ff       	call   f0107204 <cprintf>
f011703b:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f011703e:	83 ec 0c             	sub    $0xc,%esp
f0117041:	68 f8 23 12 f0       	push   $0xf01223f8
f0117046:	e8 b9 01 ff ff       	call   f0107204 <cprintf>
f011704b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011704e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0117053:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117056:	5b                   	pop    %ebx
f0117057:	5f                   	pop    %edi
f0117058:	5d                   	pop    %ebp
f0117059:	c3                   	ret    

f011705a <test_kfree_bestfit>:

int test_kfree_bestfit()
{
f011705a:	55                   	push   %ebp
f011705b:	89 e5                	mov    %esp,%ebp
f011705d:	57                   	push   %edi
f011705e:	53                   	push   %ebx
f011705f:	81 ec d0 01 00 00    	sub    $0x1d0,%esp
	cprintf("==============================================\n");
f0117065:	83 ec 0c             	sub    $0xc,%esp
f0117068:	68 b8 19 12 f0       	push   $0xf01219b8
f011706d:	e8 92 01 ff ff       	call   f0107204 <cprintf>
f0117072:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117075:	83 ec 0c             	sub    $0xc,%esp
f0117078:	68 e8 19 12 f0       	push   $0xf01219e8
f011707d:	e8 82 01 ff ff       	call   f0107204 <cprintf>
f0117082:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117085:	83 ec 0c             	sub    $0xc,%esp
f0117088:	68 b8 19 12 f0       	push   $0xf01219b8
f011708d:	e8 72 01 ff ff       	call   f0107204 <cprintf>
f0117092:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0117095:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f0117099:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011709d:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01170a3:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01170a9:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01170b0:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01170b7:	e8 92 39 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01170bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01170bf:	8d 95 d0 fe ff ff    	lea    -0x130(%ebp),%edx
f01170c5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01170ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01170cf:	89 d7                	mov    %edx,%edi
f01170d1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01170d3:	8d 95 80 fe ff ff    	lea    -0x180(%ebp),%edx
f01170d9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01170de:	b8 00 00 00 00       	mov    $0x0,%eax
f01170e3:	89 d7                	mov    %edx,%edi
f01170e5:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01170e7:	8d 95 30 fe ff ff    	lea    -0x1d0(%ebp),%edx
f01170ed:	b9 14 00 00 00       	mov    $0x14,%ecx
f01170f2:	b8 00 00 00 00       	mov    $0x0,%eax
f01170f7:	89 d7                	mov    %edx,%edi
f01170f9:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01170fb:	e8 4e 39 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117100:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117103:	e8 72 50 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117108:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011710b:	83 ec 0c             	sub    $0xc,%esp
f011710e:	68 00 fc 1f 00       	push   $0x1ffc00
f0117113:	e8 7d 5d ff ff       	call   f010ce95 <kmalloc>
f0117118:	83 c4 10             	add    $0x10,%esp
f011711b:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117121:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0117127:	89 c1                	mov    %eax,%ecx
f0117129:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0117130:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117135:	0f b6 d0             	movzbl %al,%edx
f0117138:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011713b:	01 d0                	add    %edx,%eax
f011713d:	48                   	dec    %eax
f011713e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0117141:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117144:	ba 00 00 00 00       	mov    $0x0,%edx
f0117149:	f7 75 c8             	divl   -0x38(%ebp)
f011714c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011714f:	29 d0                	sub    %edx,%eax
f0117151:	89 c3                	mov    %eax,%ebx
f0117153:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011715a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011715f:	0f b6 c0             	movzbl %al,%eax
f0117162:	c1 e0 04             	shl    $0x4,%eax
f0117165:	89 c2                	mov    %eax,%edx
f0117167:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011716a:	01 d0                	add    %edx,%eax
f011716c:	48                   	dec    %eax
f011716d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0117170:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117173:	ba 00 00 00 00       	mov    $0x0,%edx
f0117178:	f7 75 c0             	divl   -0x40(%ebp)
f011717b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011717e:	29 d0                	sub    %edx,%eax
f0117180:	01 d8                	add    %ebx,%eax
f0117182:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117187:	39 c1                	cmp    %eax,%ecx
f0117189:	74 17                	je     f01171a2 <test_kfree_bestfit+0x148>
f011718b:	83 ec 04             	sub    $0x4,%esp
f011718e:	68 54 1b 12 f0       	push   $0xf0121b54
f0117193:	68 a7 07 00 00       	push   $0x7a7
f0117198:	68 76 1a 12 f0       	push   $0xf0121a76
f011719d:	e8 0d 90 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01171a2:	e8 d3 4f ff ff       	call   f010c17a <pf_calculate_free_frames>
f01171a7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01171aa:	74 17                	je     f01171c3 <test_kfree_bestfit+0x169>
f01171ac:	83 ec 04             	sub    $0x4,%esp
f01171af:	68 88 1a 12 f0       	push   $0xf0121a88
f01171b4:	68 a8 07 00 00       	push   $0x7a8
f01171b9:	68 76 1a 12 f0       	push   $0xf0121a76
f01171be:	e8 ec 8f fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01171c3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01171c6:	e8 83 38 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01171cb:	29 c3                	sub    %eax,%ebx
f01171cd:	89 d8                	mov    %ebx,%eax
f01171cf:	3d 00 02 00 00       	cmp    $0x200,%eax
f01171d4:	74 17                	je     f01171ed <test_kfree_bestfit+0x193>
f01171d6:	83 ec 04             	sub    $0x4,%esp
f01171d9:	68 f0 1a 12 f0       	push   $0xf0121af0
f01171de:	68 a9 07 00 00       	push   $0x7a9
f01171e3:	68 76 1a 12 f0       	push   $0xf0121a76
f01171e8:	e8 c2 8f fe ff       	call   f01001af <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01171ed:	c7 85 d0 fe ff ff ff 	movl   $0x1ffbff,-0x130(%ebp)
f01171f4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01171f7:	e8 52 38 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01171fc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01171ff:	e8 76 4f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117204:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0117207:	83 ec 0c             	sub    $0xc,%esp
f011720a:	68 00 fc 1f 00       	push   $0x1ffc00
f011720f:	e8 81 5c ff ff       	call   f010ce95 <kmalloc>
f0117214:	83 c4 10             	add    $0x10,%esp
f0117217:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011721d:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0117223:	89 c1                	mov    %eax,%ecx
f0117225:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011722c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117231:	0f b6 d0             	movzbl %al,%edx
f0117234:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117237:	01 d0                	add    %edx,%eax
f0117239:	48                   	dec    %eax
f011723a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011723d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117240:	ba 00 00 00 00       	mov    $0x0,%edx
f0117245:	f7 75 b8             	divl   -0x48(%ebp)
f0117248:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011724b:	29 d0                	sub    %edx,%eax
f011724d:	89 c3                	mov    %eax,%ebx
f011724f:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117256:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011725b:	0f b6 c0             	movzbl %al,%eax
f011725e:	c1 e0 04             	shl    $0x4,%eax
f0117261:	89 c2                	mov    %eax,%edx
f0117263:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117266:	01 d0                	add    %edx,%eax
f0117268:	48                   	dec    %eax
f0117269:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011726c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011726f:	ba 00 00 00 00       	mov    $0x0,%edx
f0117274:	f7 75 b0             	divl   -0x50(%ebp)
f0117277:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011727a:	29 d0                	sub    %edx,%eax
f011727c:	01 d8                	add    %ebx,%eax
f011727e:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0117283:	39 c1                	cmp    %eax,%ecx
f0117285:	74 17                	je     f011729e <test_kfree_bestfit+0x244>
f0117287:	83 ec 04             	sub    $0x4,%esp
f011728a:	68 54 1b 12 f0       	push   $0xf0121b54
f011728f:	68 b0 07 00 00       	push   $0x7b0
f0117294:	68 76 1a 12 f0       	push   $0xf0121a76
f0117299:	e8 11 8f fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011729e:	e8 d7 4e ff ff       	call   f010c17a <pf_calculate_free_frames>
f01172a3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01172a6:	74 17                	je     f01172bf <test_kfree_bestfit+0x265>
f01172a8:	83 ec 04             	sub    $0x4,%esp
f01172ab:	68 88 1a 12 f0       	push   $0xf0121a88
f01172b0:	68 b1 07 00 00       	push   $0x7b1
f01172b5:	68 76 1a 12 f0       	push   $0xf0121a76
f01172ba:	e8 f0 8e fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01172bf:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01172c2:	e8 87 37 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01172c7:	29 c3                	sub    %eax,%ebx
f01172c9:	89 d8                	mov    %ebx,%eax
f01172cb:	3d 00 02 00 00       	cmp    $0x200,%eax
f01172d0:	74 17                	je     f01172e9 <test_kfree_bestfit+0x28f>
f01172d2:	83 ec 04             	sub    $0x4,%esp
f01172d5:	68 f0 1a 12 f0       	push   $0xf0121af0
f01172da:	68 b2 07 00 00       	push   $0x7b2
f01172df:	68 76 1a 12 f0       	push   $0xf0121a76
f01172e4:	e8 c6 8e fe ff       	call   f01001af <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f01172e9:	c7 85 d4 fe ff ff ff 	movl   $0x1ffbff,-0x12c(%ebp)
f01172f0:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01172f3:	e8 56 37 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01172f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01172fb:	e8 7a 4e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117300:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0117303:	83 ec 0c             	sub    $0xc,%esp
f0117306:	68 00 08 00 00       	push   $0x800
f011730b:	e8 85 5b ff ff       	call   f010ce95 <kmalloc>
f0117310:	83 c4 10             	add    $0x10,%esp
f0117313:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117319:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011731f:	89 c1                	mov    %eax,%ecx
f0117321:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117328:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011732d:	0f b6 d0             	movzbl %al,%edx
f0117330:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117333:	01 d0                	add    %edx,%eax
f0117335:	48                   	dec    %eax
f0117336:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117339:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011733c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117341:	f7 75 a8             	divl   -0x58(%ebp)
f0117344:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117347:	29 d0                	sub    %edx,%eax
f0117349:	89 c3                	mov    %eax,%ebx
f011734b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0117352:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117357:	0f b6 c0             	movzbl %al,%eax
f011735a:	c1 e0 04             	shl    $0x4,%eax
f011735d:	89 c2                	mov    %eax,%edx
f011735f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0117362:	01 d0                	add    %edx,%eax
f0117364:	48                   	dec    %eax
f0117365:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0117368:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011736b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117370:	f7 75 a0             	divl   -0x60(%ebp)
f0117373:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0117376:	29 d0                	sub    %edx,%eax
f0117378:	01 d8                	add    %ebx,%eax
f011737a:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011737f:	39 c1                	cmp    %eax,%ecx
f0117381:	74 17                	je     f011739a <test_kfree_bestfit+0x340>
f0117383:	83 ec 04             	sub    $0x4,%esp
f0117386:	68 54 1b 12 f0       	push   $0xf0121b54
f011738b:	68 b9 07 00 00       	push   $0x7b9
f0117390:	68 76 1a 12 f0       	push   $0xf0121a76
f0117395:	e8 15 8e fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011739a:	e8 db 4d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011739f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01173a2:	74 17                	je     f01173bb <test_kfree_bestfit+0x361>
f01173a4:	83 ec 04             	sub    $0x4,%esp
f01173a7:	68 88 1a 12 f0       	push   $0xf0121a88
f01173ac:	68 ba 07 00 00       	push   $0x7ba
f01173b1:	68 76 1a 12 f0       	push   $0xf0121a76
f01173b6:	e8 f4 8d fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01173bb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01173be:	e8 8b 36 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01173c3:	29 c3                	sub    %eax,%ebx
f01173c5:	89 d8                	mov    %ebx,%eax
f01173c7:	83 f8 01             	cmp    $0x1,%eax
f01173ca:	74 17                	je     f01173e3 <test_kfree_bestfit+0x389>
f01173cc:	83 ec 04             	sub    $0x4,%esp
f01173cf:	68 f0 1a 12 f0       	push   $0xf0121af0
f01173d4:	68 bb 07 00 00       	push   $0x7bb
f01173d9:	68 76 1a 12 f0       	push   $0xf0121a76
f01173de:	e8 cc 8d fe ff       	call   f01001af <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01173e3:	c7 85 d8 fe ff ff ff 	movl   $0x7ff,-0x128(%ebp)
f01173ea:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01173ed:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01173f3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01173f6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01173fd:	eb 0e                	jmp    f011740d <test_kfree_bestfit+0x3b3>
		{
			ptr[i] = 2 ;
f01173ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117402:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117405:	01 d0                	add    %edx,%eax
f0117407:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011740a:	ff 45 f4             	incl   -0xc(%ebp)
f011740d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117413:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117416:	7f e7                	jg     f01173ff <test_kfree_bestfit+0x3a5>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0117418:	e8 31 36 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011741d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117420:	e8 55 4d ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117425:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0117428:	83 ec 0c             	sub    $0xc,%esp
f011742b:	68 00 08 00 00       	push   $0x800
f0117430:	e8 60 5a ff ff       	call   f010ce95 <kmalloc>
f0117435:	83 c4 10             	add    $0x10,%esp
f0117438:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011743e:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117444:	89 c1                	mov    %eax,%ecx
f0117446:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011744d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117452:	0f b6 d0             	movzbl %al,%edx
f0117455:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0117458:	01 d0                	add    %edx,%eax
f011745a:	48                   	dec    %eax
f011745b:	89 45 90             	mov    %eax,-0x70(%ebp)
f011745e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0117461:	ba 00 00 00 00       	mov    $0x0,%edx
f0117466:	f7 75 94             	divl   -0x6c(%ebp)
f0117469:	8b 45 90             	mov    -0x70(%ebp),%eax
f011746c:	29 d0                	sub    %edx,%eax
f011746e:	89 c3                	mov    %eax,%ebx
f0117470:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0117477:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011747c:	0f b6 c0             	movzbl %al,%eax
f011747f:	c1 e0 04             	shl    $0x4,%eax
f0117482:	89 c2                	mov    %eax,%edx
f0117484:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0117487:	01 d0                	add    %edx,%eax
f0117489:	48                   	dec    %eax
f011748a:	89 45 88             	mov    %eax,-0x78(%ebp)
f011748d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0117490:	ba 00 00 00 00       	mov    $0x0,%edx
f0117495:	f7 75 8c             	divl   -0x74(%ebp)
f0117498:	8b 45 88             	mov    -0x78(%ebp),%eax
f011749b:	29 d0                	sub    %edx,%eax
f011749d:	01 d8                	add    %ebx,%eax
f011749f:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01174a4:	39 c1                	cmp    %eax,%ecx
f01174a6:	74 17                	je     f01174bf <test_kfree_bestfit+0x465>
f01174a8:	83 ec 04             	sub    $0x4,%esp
f01174ab:	68 54 1b 12 f0       	push   $0xf0121b54
f01174b0:	68 c7 07 00 00       	push   $0x7c7
f01174b5:	68 76 1a 12 f0       	push   $0xf0121a76
f01174ba:	e8 f0 8c fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174bf:	e8 b6 4c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01174c4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01174c7:	74 17                	je     f01174e0 <test_kfree_bestfit+0x486>
f01174c9:	83 ec 04             	sub    $0x4,%esp
f01174cc:	68 88 1a 12 f0       	push   $0xf0121a88
f01174d1:	68 c8 07 00 00       	push   $0x7c8
f01174d6:	68 76 1a 12 f0       	push   $0xf0121a76
f01174db:	e8 cf 8c fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01174e0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01174e3:	e8 66 35 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01174e8:	29 c3                	sub    %eax,%ebx
f01174ea:	89 d8                	mov    %ebx,%eax
f01174ec:	83 f8 01             	cmp    $0x1,%eax
f01174ef:	74 17                	je     f0117508 <test_kfree_bestfit+0x4ae>
f01174f1:	83 ec 04             	sub    $0x4,%esp
f01174f4:	68 f0 1a 12 f0       	push   $0xf0121af0
f01174f9:	68 c9 07 00 00       	push   $0x7c9
f01174fe:	68 76 1a 12 f0       	push   $0xf0121a76
f0117503:	e8 a7 8c fe ff       	call   f01001af <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0117508:	c7 85 dc fe ff ff ff 	movl   $0x7ff,-0x124(%ebp)
f011750f:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0117512:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117518:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011751b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117522:	eb 0e                	jmp    f0117532 <test_kfree_bestfit+0x4d8>
		{
			ptr[i] = 3 ;
f0117524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117527:	8b 45 98             	mov    -0x68(%ebp),%eax
f011752a:	01 d0                	add    %edx,%eax
f011752c:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011752f:	ff 45 f4             	incl   -0xc(%ebp)
f0117532:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117538:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011753b:	7f e7                	jg     f0117524 <test_kfree_bestfit+0x4ca>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011753d:	e8 0c 35 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117542:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117545:	e8 30 4c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011754a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011754d:	83 ec 0c             	sub    $0xc,%esp
f0117550:	68 00 1c 00 00       	push   $0x1c00
f0117555:	e8 3b 59 ff ff       	call   f010ce95 <kmalloc>
f011755a:	83 c4 10             	add    $0x10,%esp
f011755d:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117563:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117569:	89 c1                	mov    %eax,%ecx
f011756b:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0117572:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117577:	0f b6 d0             	movzbl %al,%edx
f011757a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011757d:	01 d0                	add    %edx,%eax
f011757f:	48                   	dec    %eax
f0117580:	89 45 80             	mov    %eax,-0x80(%ebp)
f0117583:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117586:	ba 00 00 00 00       	mov    $0x0,%edx
f011758b:	f7 75 84             	divl   -0x7c(%ebp)
f011758e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0117591:	29 d0                	sub    %edx,%eax
f0117593:	89 c3                	mov    %eax,%ebx
f0117595:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011759c:	10 00 00 
f011759f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01175a4:	0f b6 c0             	movzbl %al,%eax
f01175a7:	c1 e0 04             	shl    $0x4,%eax
f01175aa:	89 c2                	mov    %eax,%edx
f01175ac:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01175b2:	01 d0                	add    %edx,%eax
f01175b4:	48                   	dec    %eax
f01175b5:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01175bb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01175c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01175c6:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01175cc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01175d2:	29 d0                	sub    %edx,%eax
f01175d4:	01 d8                	add    %ebx,%eax
f01175d6:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01175db:	39 c1                	cmp    %eax,%ecx
f01175dd:	74 17                	je     f01175f6 <test_kfree_bestfit+0x59c>
f01175df:	83 ec 04             	sub    $0x4,%esp
f01175e2:	68 54 1b 12 f0       	push   $0xf0121b54
f01175e7:	68 d5 07 00 00       	push   $0x7d5
f01175ec:	68 76 1a 12 f0       	push   $0xf0121a76
f01175f1:	e8 b9 8b fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01175f6:	e8 7f 4b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01175fb:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01175fe:	74 17                	je     f0117617 <test_kfree_bestfit+0x5bd>
f0117600:	83 ec 04             	sub    $0x4,%esp
f0117603:	68 88 1a 12 f0       	push   $0xf0121a88
f0117608:	68 d6 07 00 00       	push   $0x7d6
f011760d:	68 76 1a 12 f0       	push   $0xf0121a76
f0117612:	e8 98 8b fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117617:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011761a:	e8 2f 34 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011761f:	29 c3                	sub    %eax,%ebx
f0117621:	89 d8                	mov    %ebx,%eax
f0117623:	83 f8 02             	cmp    $0x2,%eax
f0117626:	74 17                	je     f011763f <test_kfree_bestfit+0x5e5>
f0117628:	83 ec 04             	sub    $0x4,%esp
f011762b:	68 f0 1a 12 f0       	push   $0xf0121af0
f0117630:	68 d7 07 00 00       	push   $0x7d7
f0117635:	68 76 1a 12 f0       	push   $0xf0121a76
f011763a:	e8 70 8b fe ff       	call   f01001af <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011763f:	c7 85 e0 fe ff ff ff 	movl   $0x1bff,-0x120(%ebp)
f0117646:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0117649:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011764f:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0117652:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117659:	eb 0e                	jmp    f0117669 <test_kfree_bestfit+0x60f>
		{
			ptr[i] = 4 ;
f011765b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011765e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117661:	01 d0                	add    %edx,%eax
f0117663:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0117666:	ff 45 f4             	incl   -0xc(%ebp)
f0117669:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011766f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117672:	7f e7                	jg     f011765b <test_kfree_bestfit+0x601>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0117674:	e8 d5 33 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117679:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011767c:	e8 f9 4a ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117681:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0117684:	83 ec 0c             	sub    $0xc,%esp
f0117687:	68 00 fc 2f 00       	push   $0x2ffc00
f011768c:	e8 04 58 ff ff       	call   f010ce95 <kmalloc>
f0117691:	83 c4 10             	add    $0x10,%esp
f0117694:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011769a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01176a0:	89 c1                	mov    %eax,%ecx
f01176a2:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01176a9:	10 00 00 
f01176ac:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01176b1:	0f b6 d0             	movzbl %al,%edx
f01176b4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01176ba:	01 d0                	add    %edx,%eax
f01176bc:	48                   	dec    %eax
f01176bd:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01176c3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01176c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01176ce:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01176d4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01176da:	29 d0                	sub    %edx,%eax
f01176dc:	89 c3                	mov    %eax,%ebx
f01176de:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01176e5:	10 00 00 
f01176e8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01176ed:	0f b6 c0             	movzbl %al,%eax
f01176f0:	c1 e0 04             	shl    $0x4,%eax
f01176f3:	89 c2                	mov    %eax,%edx
f01176f5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01176fb:	01 d0                	add    %edx,%eax
f01176fd:	48                   	dec    %eax
f01176fe:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0117704:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011770a:	ba 00 00 00 00       	mov    $0x0,%edx
f011770f:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0117715:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011771b:	29 d0                	sub    %edx,%eax
f011771d:	01 d8                	add    %ebx,%eax
f011771f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117724:	39 c1                	cmp    %eax,%ecx
f0117726:	74 17                	je     f011773f <test_kfree_bestfit+0x6e5>
f0117728:	83 ec 04             	sub    $0x4,%esp
f011772b:	68 54 1b 12 f0       	push   $0xf0121b54
f0117730:	68 e3 07 00 00       	push   $0x7e3
f0117735:	68 76 1a 12 f0       	push   $0xf0121a76
f011773a:	e8 70 8a fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011773f:	e8 36 4a ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117744:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117747:	74 17                	je     f0117760 <test_kfree_bestfit+0x706>
f0117749:	83 ec 04             	sub    $0x4,%esp
f011774c:	68 88 1a 12 f0       	push   $0xf0121a88
f0117751:	68 e4 07 00 00       	push   $0x7e4
f0117756:	68 76 1a 12 f0       	push   $0xf0121a76
f011775b:	e8 4f 8a fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117760:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0117763:	e8 e6 32 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117768:	29 c3                	sub    %eax,%ebx
f011776a:	89 d8                	mov    %ebx,%eax
f011776c:	3d 00 03 00 00       	cmp    $0x300,%eax
f0117771:	74 17                	je     f011778a <test_kfree_bestfit+0x730>
f0117773:	83 ec 04             	sub    $0x4,%esp
f0117776:	68 f0 1a 12 f0       	push   $0xf0121af0
f011777b:	68 e5 07 00 00       	push   $0x7e5
f0117780:	68 76 1a 12 f0       	push   $0xf0121a76
f0117785:	e8 25 8a fe ff       	call   f01001af <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011778a:	c7 85 e4 fe ff ff ff 	movl   $0x2ffbff,-0x11c(%ebp)
f0117791:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0117794:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011779a:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011779d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01177a4:	eb 0e                	jmp    f01177b4 <test_kfree_bestfit+0x75a>
		{
			ptr[i] = 5 ;
f01177a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01177a9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01177ac:	01 d0                	add    %edx,%eax
f01177ae:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01177b1:	ff 45 f4             	incl   -0xc(%ebp)
f01177b4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01177ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01177bd:	7f e7                	jg     f01177a6 <test_kfree_bestfit+0x74c>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01177bf:	e8 8a 32 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01177c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01177c7:	e8 ae 49 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01177cc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01177cf:	83 ec 0c             	sub    $0xc,%esp
f01177d2:	68 00 fc 5f 00       	push   $0x5ffc00
f01177d7:	e8 b9 56 ff ff       	call   f010ce95 <kmalloc>
f01177dc:	83 c4 10             	add    $0x10,%esp
f01177df:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01177e5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f01177eb:	89 c1                	mov    %eax,%ecx
f01177ed:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01177f4:	10 00 00 
f01177f7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01177fc:	0f b6 d0             	movzbl %al,%edx
f01177ff:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0117805:	01 d0                	add    %edx,%eax
f0117807:	48                   	dec    %eax
f0117808:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011780e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117814:	ba 00 00 00 00       	mov    $0x0,%edx
f0117819:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011781f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0117825:	29 d0                	sub    %edx,%eax
f0117827:	89 c3                	mov    %eax,%ebx
f0117829:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0117830:	10 00 00 
f0117833:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117838:	0f b6 c0             	movzbl %al,%eax
f011783b:	c1 e0 04             	shl    $0x4,%eax
f011783e:	89 c2                	mov    %eax,%edx
f0117840:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0117846:	01 d0                	add    %edx,%eax
f0117848:	48                   	dec    %eax
f0117849:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011784f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117855:	ba 00 00 00 00       	mov    $0x0,%edx
f011785a:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0117860:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0117866:	29 d0                	sub    %edx,%eax
f0117868:	01 d8                	add    %ebx,%eax
f011786a:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011786f:	39 c1                	cmp    %eax,%ecx
f0117871:	74 17                	je     f011788a <test_kfree_bestfit+0x830>
f0117873:	83 ec 04             	sub    $0x4,%esp
f0117876:	68 54 1b 12 f0       	push   $0xf0121b54
f011787b:	68 f1 07 00 00       	push   $0x7f1
f0117880:	68 76 1a 12 f0       	push   $0xf0121a76
f0117885:	e8 25 89 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011788a:	e8 eb 48 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011788f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117892:	74 17                	je     f01178ab <test_kfree_bestfit+0x851>
f0117894:	83 ec 04             	sub    $0x4,%esp
f0117897:	68 88 1a 12 f0       	push   $0xf0121a88
f011789c:	68 f2 07 00 00       	push   $0x7f2
f01178a1:	68 76 1a 12 f0       	push   $0xf0121a76
f01178a6:	e8 04 89 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01178ab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01178ae:	e8 9b 31 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01178b3:	29 c3                	sub    %eax,%ebx
f01178b5:	89 d8                	mov    %ebx,%eax
f01178b7:	3d 00 06 00 00       	cmp    $0x600,%eax
f01178bc:	74 17                	je     f01178d5 <test_kfree_bestfit+0x87b>
f01178be:	83 ec 04             	sub    $0x4,%esp
f01178c1:	68 f0 1a 12 f0       	push   $0xf0121af0
f01178c6:	68 f3 07 00 00       	push   $0x7f3
f01178cb:	68 76 1a 12 f0       	push   $0xf0121a76
f01178d0:	e8 da 88 fe ff       	call   f01001af <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01178d5:	c7 85 e8 fe ff ff ff 	movl   $0x5ffbff,-0x118(%ebp)
f01178dc:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01178df:	e8 6a 31 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01178e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01178e7:	e8 8e 48 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01178ec:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01178ef:	83 ec 0c             	sub    $0xc,%esp
f01178f2:	68 00 38 00 00       	push   $0x3800
f01178f7:	e8 99 55 ff ff       	call   f010ce95 <kmalloc>
f01178fc:	83 c4 10             	add    $0x10,%esp
f01178ff:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117905:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011790b:	89 c1                	mov    %eax,%ecx
f011790d:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0117914:	10 00 00 
f0117917:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011791c:	0f b6 d0             	movzbl %al,%edx
f011791f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0117925:	01 d0                	add    %edx,%eax
f0117927:	48                   	dec    %eax
f0117928:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011792e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117934:	ba 00 00 00 00       	mov    $0x0,%edx
f0117939:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011793f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0117945:	29 d0                	sub    %edx,%eax
f0117947:	89 c3                	mov    %eax,%ebx
f0117949:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0117950:	10 00 00 
f0117953:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117958:	0f b6 c0             	movzbl %al,%eax
f011795b:	c1 e0 04             	shl    $0x4,%eax
f011795e:	89 c2                	mov    %eax,%edx
f0117960:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0117966:	01 d0                	add    %edx,%eax
f0117968:	48                   	dec    %eax
f0117969:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011796f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117975:	ba 00 00 00 00       	mov    $0x0,%edx
f011797a:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0117980:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0117986:	29 d0                	sub    %edx,%eax
f0117988:	01 d8                	add    %ebx,%eax
f011798a:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011798f:	39 c1                	cmp    %eax,%ecx
f0117991:	74 17                	je     f01179aa <test_kfree_bestfit+0x950>
f0117993:	83 ec 04             	sub    $0x4,%esp
f0117996:	68 54 1b 12 f0       	push   $0xf0121b54
f011799b:	68 fa 07 00 00       	push   $0x7fa
f01179a0:	68 76 1a 12 f0       	push   $0xf0121a76
f01179a5:	e8 05 88 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01179aa:	e8 cb 47 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01179af:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01179b2:	74 17                	je     f01179cb <test_kfree_bestfit+0x971>
f01179b4:	83 ec 04             	sub    $0x4,%esp
f01179b7:	68 88 1a 12 f0       	push   $0xf0121a88
f01179bc:	68 fb 07 00 00       	push   $0x7fb
f01179c1:	68 76 1a 12 f0       	push   $0xf0121a76
f01179c6:	e8 e4 87 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01179cb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01179ce:	e8 7b 30 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01179d3:	29 c3                	sub    %eax,%ebx
f01179d5:	89 d8                	mov    %ebx,%eax
f01179d7:	83 f8 04             	cmp    $0x4,%eax
f01179da:	74 17                	je     f01179f3 <test_kfree_bestfit+0x999>
f01179dc:	83 ec 04             	sub    $0x4,%esp
f01179df:	68 f0 1a 12 f0       	push   $0xf0121af0
f01179e4:	68 fc 07 00 00       	push   $0x7fc
f01179e9:	68 76 1a 12 f0       	push   $0xf0121a76
f01179ee:	e8 bc 87 fe ff       	call   f01001af <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01179f3:	c7 85 ec fe ff ff ff 	movl   $0x37ff,-0x114(%ebp)
f01179fa:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01179fd:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117a03:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0117a06:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117a0d:	eb 0e                	jmp    f0117a1d <test_kfree_bestfit+0x9c3>
		{
			ptr[i] = 7 ;
f0117a0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117a12:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117a15:	01 d0                	add    %edx,%eax
f0117a17:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0117a1a:	ff 45 f4             	incl   -0xc(%ebp)
f0117a1d:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117a23:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117a26:	7f e7                	jg     f0117a0f <test_kfree_bestfit+0x9b5>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0117a28:	e8 21 30 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117a2d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117a33:	e8 42 47 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117a38:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[0]);
f0117a3e:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0117a44:	83 ec 0c             	sub    $0xc,%esp
f0117a47:	50                   	push   %eax
f0117a48:	e8 93 54 ff ff       	call   f010cee0 <kfree>
f0117a4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117a50:	e8 25 47 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117a55:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0117a5b:	74 17                	je     f0117a74 <test_kfree_bestfit+0xa1a>
f0117a5d:	83 ec 04             	sub    $0x4,%esp
f0117a60:	68 88 1a 12 f0       	push   $0xf0121a88
f0117a65:	68 0b 08 00 00       	push   $0x80b
f0117a6a:	68 76 1a 12 f0       	push   $0xf0121a76
f0117a6f:	e8 3b 87 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0117a74:	e8 d5 2f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117a79:	89 c2                	mov    %eax,%edx
f0117a7b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117a81:	29 c2                	sub    %eax,%edx
f0117a83:	89 d0                	mov    %edx,%eax
f0117a85:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117a8a:	74 17                	je     f0117aa3 <test_kfree_bestfit+0xa49>
f0117a8c:	83 ec 04             	sub    $0x4,%esp
f0117a8f:	68 f8 21 12 f0       	push   $0xf01221f8
f0117a94:	68 0c 08 00 00       	push   $0x80c
f0117a99:	68 76 1a 12 f0       	push   $0xf0121a76
f0117a9e:	e8 0c 87 fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0117aa3:	e8 a6 2f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117aa8:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117aae:	e8 c7 46 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117ab3:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[1]);
f0117ab9:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0117abf:	83 ec 0c             	sub    $0xc,%esp
f0117ac2:	50                   	push   %eax
f0117ac3:	e8 18 54 ff ff       	call   f010cee0 <kfree>
f0117ac8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117acb:	e8 aa 46 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117ad0:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0117ad6:	74 17                	je     f0117aef <test_kfree_bestfit+0xa95>
f0117ad8:	83 ec 04             	sub    $0x4,%esp
f0117adb:	68 88 1a 12 f0       	push   $0xf0121a88
f0117ae0:	68 12 08 00 00       	push   $0x812
f0117ae5:	68 76 1a 12 f0       	push   $0xf0121a76
f0117aea:	e8 c0 86 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0117aef:	e8 5a 2f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117af4:	89 c2                	mov    %eax,%edx
f0117af6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117afc:	29 c2                	sub    %eax,%edx
f0117afe:	89 d0                	mov    %edx,%eax
f0117b00:	3d 00 02 00 00       	cmp    $0x200,%eax
f0117b05:	74 17                	je     f0117b1e <test_kfree_bestfit+0xac4>
f0117b07:	83 ec 04             	sub    $0x4,%esp
f0117b0a:	68 f8 21 12 f0       	push   $0xf01221f8
f0117b0f:	68 13 08 00 00       	push   $0x813
f0117b14:	68 76 1a 12 f0       	push   $0xf0121a76
f0117b19:	e8 91 86 fe ff       	call   f01001af <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0117b1e:	e8 2b 2f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117b23:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117b29:	e8 4c 46 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117b2e:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		kfree(ptr_allocations[6]);
f0117b34:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117b3a:	83 ec 0c             	sub    $0xc,%esp
f0117b3d:	50                   	push   %eax
f0117b3e:	e8 9d 53 ff ff       	call   f010cee0 <kfree>
f0117b43:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117b46:	e8 2f 46 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117b4b:	3b 85 40 ff ff ff    	cmp    -0xc0(%ebp),%eax
f0117b51:	74 17                	je     f0117b6a <test_kfree_bestfit+0xb10>
f0117b53:	83 ec 04             	sub    $0x4,%esp
f0117b56:	68 88 1a 12 f0       	push   $0xf0121a88
f0117b5b:	68 19 08 00 00       	push   $0x819
f0117b60:	68 76 1a 12 f0       	push   $0xf0121a76
f0117b65:	e8 45 86 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0117b6a:	e8 df 2e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117b6f:	89 c2                	mov    %eax,%edx
f0117b71:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0117b77:	29 c2                	sub    %eax,%edx
f0117b79:	89 d0                	mov    %edx,%eax
f0117b7b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0117b80:	74 17                	je     f0117b99 <test_kfree_bestfit+0xb3f>
f0117b82:	83 ec 04             	sub    $0x4,%esp
f0117b85:	68 f8 21 12 f0       	push   $0xf01221f8
f0117b8a:	68 1a 08 00 00       	push   $0x81a
f0117b8f:	68 76 1a 12 f0       	push   $0xf0121a76
f0117b94:	e8 16 86 fe ff       	call   f01001af <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0117b99:	83 ec 0c             	sub    $0xc,%esp
f0117b9c:	68 30 22 12 f0       	push   $0xf0122230
f0117ba1:	e8 5e f6 fe ff       	call   f0107204 <cprintf>
f0117ba6:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f0117ba9:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0117baf:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0117bb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117bb9:	eb 1e                	jmp    f0117bd9 <test_kfree_bestfit+0xb7f>
		{
			sums[2] += ptr[i] ;
f0117bbb:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0117bc1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117bc4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117bc7:	01 c8                	add    %ecx,%eax
f0117bc9:	8a 00                	mov    (%eax),%al
f0117bcb:	0f be c0             	movsbl %al,%eax
f0117bce:	01 d0                	add    %edx,%eax
f0117bd0:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0117bd6:	ff 45 f4             	incl   -0xc(%ebp)
f0117bd9:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117bdf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117be2:	7f d7                	jg     f0117bbb <test_kfree_bestfit+0xb61>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0117be4:	8b 95 88 fe ff ff    	mov    -0x178(%ebp),%edx
f0117bea:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0117bf0:	01 c0                	add    %eax,%eax
f0117bf2:	39 c2                	cmp    %eax,%edx
f0117bf4:	74 17                	je     f0117c0d <test_kfree_bestfit+0xbb3>
f0117bf6:	83 ec 04             	sub    $0x4,%esp
f0117bf9:	68 54 22 12 f0       	push   $0xf0122254
f0117bfe:	68 27 08 00 00       	push   $0x827
f0117c03:	68 76 1a 12 f0       	push   $0xf0121a76
f0117c08:	e8 a2 85 fe ff       	call   f01001af <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0117c0d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117c13:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0117c16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117c1d:	eb 1e                	jmp    f0117c3d <test_kfree_bestfit+0xbe3>
		{
			sums[3] += ptr[i] ;
f0117c1f:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0117c25:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117c28:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c2b:	01 c8                	add    %ecx,%eax
f0117c2d:	8a 00                	mov    (%eax),%al
f0117c2f:	0f be c0             	movsbl %al,%eax
f0117c32:	01 d0                	add    %edx,%eax
f0117c34:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0117c3a:	ff 45 f4             	incl   -0xc(%ebp)
f0117c3d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117c43:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117c46:	7f d7                	jg     f0117c1f <test_kfree_bestfit+0xbc5>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0117c48:	8b 95 8c fe ff ff    	mov    -0x174(%ebp),%edx
f0117c4e:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117c54:	89 c1                	mov    %eax,%ecx
f0117c56:	01 c9                	add    %ecx,%ecx
f0117c58:	01 c8                	add    %ecx,%eax
f0117c5a:	39 c2                	cmp    %eax,%edx
f0117c5c:	74 17                	je     f0117c75 <test_kfree_bestfit+0xc1b>
f0117c5e:	83 ec 04             	sub    $0x4,%esp
f0117c61:	68 54 22 12 f0       	push   $0xf0122254
f0117c66:	68 2f 08 00 00       	push   $0x82f
f0117c6b:	68 76 1a 12 f0       	push   $0xf0121a76
f0117c70:	e8 3a 85 fe ff       	call   f01001af <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0117c75:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0117c7b:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0117c7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117c85:	eb 1e                	jmp    f0117ca5 <test_kfree_bestfit+0xc4b>
		{
			sums[4] += ptr[i] ;
f0117c87:	8b 95 90 fe ff ff    	mov    -0x170(%ebp),%edx
f0117c8d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117c90:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117c93:	01 c8                	add    %ecx,%eax
f0117c95:	8a 00                	mov    (%eax),%al
f0117c97:	0f be c0             	movsbl %al,%eax
f0117c9a:	01 d0                	add    %edx,%eax
f0117c9c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0117ca2:	ff 45 f4             	incl   -0xc(%ebp)
f0117ca5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117cab:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117cae:	7f d7                	jg     f0117c87 <test_kfree_bestfit+0xc2d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0117cb0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0117cb6:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117cbc:	c1 e2 02             	shl    $0x2,%edx
f0117cbf:	39 d0                	cmp    %edx,%eax
f0117cc1:	74 17                	je     f0117cda <test_kfree_bestfit+0xc80>
f0117cc3:	83 ec 04             	sub    $0x4,%esp
f0117cc6:	68 54 22 12 f0       	push   $0xf0122254
f0117ccb:	68 37 08 00 00       	push   $0x837
f0117cd0:	68 76 1a 12 f0       	push   $0xf0121a76
f0117cd5:	e8 d5 84 fe ff       	call   f01001af <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0117cda:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0117ce0:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0117ce3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117cea:	eb 1e                	jmp    f0117d0a <test_kfree_bestfit+0xcb0>
		{
			sums[5] += ptr[i] ;
f0117cec:	8b 95 94 fe ff ff    	mov    -0x16c(%ebp),%edx
f0117cf2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117cf5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117cf8:	01 c8                	add    %ecx,%eax
f0117cfa:	8a 00                	mov    (%eax),%al
f0117cfc:	0f be c0             	movsbl %al,%eax
f0117cff:	01 d0                	add    %edx,%eax
f0117d01:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0117d07:	ff 45 f4             	incl   -0xc(%ebp)
f0117d0a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117d10:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117d13:	7f d7                	jg     f0117cec <test_kfree_bestfit+0xc92>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0117d15:	8b 8d 94 fe ff ff    	mov    -0x16c(%ebp),%ecx
f0117d1b:	8b 95 e4 fe ff ff    	mov    -0x11c(%ebp),%edx
f0117d21:	89 d0                	mov    %edx,%eax
f0117d23:	c1 e0 02             	shl    $0x2,%eax
f0117d26:	01 d0                	add    %edx,%eax
f0117d28:	39 c1                	cmp    %eax,%ecx
f0117d2a:	74 17                	je     f0117d43 <test_kfree_bestfit+0xce9>
f0117d2c:	83 ec 04             	sub    $0x4,%esp
f0117d2f:	68 54 22 12 f0       	push   $0xf0122254
f0117d34:	68 3f 08 00 00       	push   $0x83f
f0117d39:	68 76 1a 12 f0       	push   $0xf0121a76
f0117d3e:	e8 6c 84 fe ff       	call   f01001af <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0117d43:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117d49:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0117d4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117d53:	eb 1e                	jmp    f0117d73 <test_kfree_bestfit+0xd19>
		{
			sums[7] += ptr[i] ;
f0117d55:	8b 95 9c fe ff ff    	mov    -0x164(%ebp),%edx
f0117d5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0117d5e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117d61:	01 c8                	add    %ecx,%eax
f0117d63:	8a 00                	mov    (%eax),%al
f0117d65:	0f be c0             	movsbl %al,%eax
f0117d68:	01 d0                	add    %edx,%eax
f0117d6a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0117d70:	ff 45 f4             	incl   -0xc(%ebp)
f0117d73:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0117d79:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117d7c:	7f d7                	jg     f0117d55 <test_kfree_bestfit+0xcfb>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0117d7e:	8b 8d 9c fe ff ff    	mov    -0x164(%ebp),%ecx
f0117d84:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f0117d8a:	89 d0                	mov    %edx,%eax
f0117d8c:	01 c0                	add    %eax,%eax
f0117d8e:	01 d0                	add    %edx,%eax
f0117d90:	01 c0                	add    %eax,%eax
f0117d92:	01 d0                	add    %edx,%eax
f0117d94:	39 c1                	cmp    %eax,%ecx
f0117d96:	74 17                	je     f0117daf <test_kfree_bestfit+0xd55>
f0117d98:	83 ec 04             	sub    $0x4,%esp
f0117d9b:	68 54 22 12 f0       	push   $0xf0122254
f0117da0:	68 47 08 00 00       	push   $0x847
f0117da5:	68 76 1a 12 f0       	push   $0xf0121a76
f0117daa:	e8 00 84 fe ff       	call   f01001af <_panic>
	}
	cprintf("\b\b\b30%");
f0117daf:	83 ec 0c             	sub    $0xc,%esp
f0117db2:	68 87 22 12 f0       	push   $0xf0122287
f0117db7:	e8 48 f4 fe ff       	call   f0107204 <cprintf>
f0117dbc:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0117dbf:	e8 8a 2c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117dc4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117dc7:	e8 ae 43 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117dcc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0117dcf:	83 ec 0c             	sub    $0xc,%esp
f0117dd2:	68 00 50 00 00       	push   $0x5000
f0117dd7:	e8 b9 50 ff ff       	call   f010ce95 <kmalloc>
f0117ddc:	83 c4 10             	add    $0x10,%esp
f0117ddf:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117de5:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117deb:	89 c1                	mov    %eax,%ecx
f0117ded:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0117df4:	10 00 00 
f0117df7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117dfc:	0f b6 d0             	movzbl %al,%edx
f0117dff:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0117e05:	01 d0                	add    %edx,%eax
f0117e07:	48                   	dec    %eax
f0117e08:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0117e0e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117e14:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e19:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0117e1f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0117e25:	29 d0                	sub    %edx,%eax
f0117e27:	89 c3                	mov    %eax,%ebx
f0117e29:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0117e30:	10 00 00 
f0117e33:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117e38:	0f b6 c0             	movzbl %al,%eax
f0117e3b:	c1 e0 04             	shl    $0x4,%eax
f0117e3e:	89 c2                	mov    %eax,%edx
f0117e40:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0117e46:	01 d0                	add    %edx,%eax
f0117e48:	48                   	dec    %eax
f0117e49:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0117e4f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117e55:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e5a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0117e60:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0117e66:	29 d0                	sub    %edx,%eax
f0117e68:	01 d8                	add    %ebx,%eax
f0117e6a:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117e6f:	39 c1                	cmp    %eax,%ecx
f0117e71:	74 17                	je     f0117e8a <test_kfree_bestfit+0xe30>
f0117e73:	83 ec 04             	sub    $0x4,%esp
f0117e76:	68 54 1b 12 f0       	push   $0xf0121b54
f0117e7b:	68 51 08 00 00       	push   $0x851
f0117e80:	68 76 1a 12 f0       	push   $0xf0121a76
f0117e85:	e8 25 83 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117e8a:	e8 eb 42 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117e8f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117e92:	74 17                	je     f0117eab <test_kfree_bestfit+0xe51>
f0117e94:	83 ec 04             	sub    $0x4,%esp
f0117e97:	68 88 1a 12 f0       	push   $0xf0121a88
f0117e9c:	68 52 08 00 00       	push   $0x852
f0117ea1:	68 76 1a 12 f0       	push   $0xf0121a76
f0117ea6:	e8 04 83 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117eab:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0117eae:	e8 9b 2b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117eb3:	29 c3                	sub    %eax,%ebx
f0117eb5:	89 d8                	mov    %ebx,%eax
f0117eb7:	83 f8 05             	cmp    $0x5,%eax
f0117eba:	74 17                	je     f0117ed3 <test_kfree_bestfit+0xe79>
f0117ebc:	83 ec 04             	sub    $0x4,%esp
f0117ebf:	68 f0 1a 12 f0       	push   $0xf0121af0
f0117ec4:	68 53 08 00 00       	push   $0x853
f0117ec9:	68 76 1a 12 f0       	push   $0xf0121a76
f0117ece:	e8 dc 82 fe ff       	call   f01001af <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0117ed3:	c7 85 f0 fe ff ff ff 	movl   $0x4fff,-0x110(%ebp)
f0117eda:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0117edd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0117ee3:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0117ee6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117eed:	eb 0e                	jmp    f0117efd <test_kfree_bestfit+0xea3>
		{
			ptr[i] = 8 ;
f0117eef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117ef2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0117ef5:	01 d0                	add    %edx,%eax
f0117ef7:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0117efa:	ff 45 f4             	incl   -0xc(%ebp)
f0117efd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0117f03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0117f06:	7f e7                	jg     f0117eef <test_kfree_bestfit+0xe95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0117f08:	e8 41 2b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117f0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f10:	e8 65 42 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117f15:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0117f18:	83 ec 0c             	sub    $0xc,%esp
f0117f1b:	68 00 00 10 00       	push   $0x100000
f0117f20:	e8 70 4f ff ff       	call   f010ce95 <kmalloc>
f0117f25:	83 c4 10             	add    $0x10,%esp
f0117f28:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117f2e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0117f34:	89 c1                	mov    %eax,%ecx
f0117f36:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0117f3d:	10 00 00 
f0117f40:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117f45:	0f b6 d0             	movzbl %al,%edx
f0117f48:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0117f4e:	01 d0                	add    %edx,%eax
f0117f50:	48                   	dec    %eax
f0117f51:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0117f57:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117f5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f62:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0117f68:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117f6e:	29 d0                	sub    %edx,%eax
f0117f70:	89 c3                	mov    %eax,%ebx
f0117f72:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0117f79:	10 00 00 
f0117f7c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0117f81:	0f b6 c0             	movzbl %al,%eax
f0117f84:	c1 e0 04             	shl    $0x4,%eax
f0117f87:	89 c2                	mov    %eax,%edx
f0117f89:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117f8f:	01 d0                	add    %edx,%eax
f0117f91:	48                   	dec    %eax
f0117f92:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0117f98:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117f9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fa3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0117fa9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117faf:	29 d0                	sub    %edx,%eax
f0117fb1:	01 d8                	add    %ebx,%eax
f0117fb3:	2d 00 70 ff 09       	sub    $0x9ff7000,%eax
f0117fb8:	39 c1                	cmp    %eax,%ecx
f0117fba:	74 17                	je     f0117fd3 <test_kfree_bestfit+0xf79>
f0117fbc:	83 ec 04             	sub    $0x4,%esp
f0117fbf:	68 54 1b 12 f0       	push   $0xf0121b54
f0117fc4:	68 5f 08 00 00       	push   $0x85f
f0117fc9:	68 76 1a 12 f0       	push   $0xf0121a76
f0117fce:	e8 dc 81 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117fd3:	e8 a2 41 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0117fd8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0117fdb:	74 17                	je     f0117ff4 <test_kfree_bestfit+0xf9a>
f0117fdd:	83 ec 04             	sub    $0x4,%esp
f0117fe0:	68 88 1a 12 f0       	push   $0xf0121a88
f0117fe5:	68 60 08 00 00       	push   $0x860
f0117fea:	68 76 1a 12 f0       	push   $0xf0121a76
f0117fef:	e8 bb 81 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117ff4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0117ff7:	e8 52 2a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0117ffc:	29 c3                	sub    %eax,%ebx
f0117ffe:	89 d8                	mov    %ebx,%eax
f0118000:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118005:	74 17                	je     f011801e <test_kfree_bestfit+0xfc4>
f0118007:	83 ec 04             	sub    $0x4,%esp
f011800a:	68 f0 1a 12 f0       	push   $0xf0121af0
f011800f:	68 61 08 00 00       	push   $0x861
f0118014:	68 76 1a 12 f0       	push   $0xf0121a76
f0118019:	e8 91 81 fe ff       	call   f01001af <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f011801e:	c7 85 f4 fe ff ff ff 	movl   $0xfffff,-0x10c(%ebp)
f0118025:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0118028:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011802e:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0118031:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0118038:	eb 0e                	jmp    f0118048 <test_kfree_bestfit+0xfee>
		{
			ptr[i] = 9 ;
f011803a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011803d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118040:	01 d0                	add    %edx,%eax
f0118042:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 20*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0118045:	ff 45 f4             	incl   -0xc(%ebp)
f0118048:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011804e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0118051:	7f e7                	jg     f011803a <test_kfree_bestfit+0xfe0>
		{
			ptr[i] = 9 ;
		}
	}
	cprintf("\b\b\b45%");
f0118053:	83 ec 0c             	sub    $0xc,%esp
f0118056:	68 af 22 12 f0       	push   $0xf01222af
f011805b:	e8 a4 f1 fe ff       	call   f0107204 <cprintf>
f0118060:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118063:	e8 e6 29 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118068:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011806b:	e8 0a 41 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118070:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0118073:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118079:	83 ec 0c             	sub    $0xc,%esp
f011807c:	50                   	push   %eax
f011807d:	e8 5e 4e ff ff       	call   f010cee0 <kfree>
f0118082:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118085:	e8 f0 40 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011808a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011808d:	74 17                	je     f01180a6 <test_kfree_bestfit+0x104c>
f011808f:	83 ec 04             	sub    $0x4,%esp
f0118092:	68 88 1a 12 f0       	push   $0xf0121a88
f0118097:	68 71 08 00 00       	push   $0x871
f011809c:	68 76 1a 12 f0       	push   $0xf0121a76
f01180a1:	e8 09 81 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01180a6:	e8 a3 29 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01180ab:	89 c2                	mov    %eax,%edx
f01180ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01180b0:	29 c2                	sub    %eax,%edx
f01180b2:	89 d0                	mov    %edx,%eax
f01180b4:	83 f8 02             	cmp    $0x2,%eax
f01180b7:	74 17                	je     f01180d0 <test_kfree_bestfit+0x1076>
f01180b9:	83 ec 04             	sub    $0x4,%esp
f01180bc:	68 f8 21 12 f0       	push   $0xf01221f8
f01180c1:	68 72 08 00 00       	push   $0x872
f01180c6:	68 76 1a 12 f0       	push   $0xf0121a76
f01180cb:	e8 df 80 fe ff       	call   f01001af <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01180d0:	e8 79 29 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01180d5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01180d8:	e8 9d 40 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01180dd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01180e0:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01180e6:	83 ec 0c             	sub    $0xc,%esp
f01180e9:	50                   	push   %eax
f01180ea:	e8 f1 4d ff ff       	call   f010cee0 <kfree>
f01180ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01180f2:	e8 83 40 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01180f7:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01180fa:	74 17                	je     f0118113 <test_kfree_bestfit+0x10b9>
f01180fc:	83 ec 04             	sub    $0x4,%esp
f01180ff:	68 88 1a 12 f0       	push   $0xf0121a88
f0118104:	68 78 08 00 00       	push   $0x878
f0118109:	68 76 1a 12 f0       	push   $0xf0121a76
f011810e:	e8 9c 80 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0118113:	e8 36 29 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118118:	89 c2                	mov    %eax,%edx
f011811a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011811d:	29 c2                	sub    %eax,%edx
f011811f:	89 d0                	mov    %edx,%eax
f0118121:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118126:	74 17                	je     f011813f <test_kfree_bestfit+0x10e5>
f0118128:	83 ec 04             	sub    $0x4,%esp
f011812b:	68 f8 21 12 f0       	push   $0xf01221f8
f0118130:	68 79 08 00 00       	push   $0x879
f0118135:	68 76 1a 12 f0       	push   $0xf0121a76
f011813a:	e8 70 80 fe ff       	call   f01001af <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011813f:	e8 0a 29 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118144:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118147:	e8 2e 40 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011814c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f011814f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0118155:	83 ec 0c             	sub    $0xc,%esp
f0118158:	50                   	push   %eax
f0118159:	e8 82 4d ff ff       	call   f010cee0 <kfree>
f011815e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118161:	e8 14 40 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118166:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118169:	74 17                	je     f0118182 <test_kfree_bestfit+0x1128>
f011816b:	83 ec 04             	sub    $0x4,%esp
f011816e:	68 88 1a 12 f0       	push   $0xf0121a88
f0118173:	68 7f 08 00 00       	push   $0x87f
f0118178:	68 76 1a 12 f0       	push   $0xf0121a76
f011817d:	e8 2d 80 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0118182:	e8 c7 28 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118187:	89 c2                	mov    %eax,%edx
f0118189:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011818c:	29 c2                	sub    %eax,%edx
f011818e:	89 d0                	mov    %edx,%eax
f0118190:	83 f8 01             	cmp    $0x1,%eax
f0118193:	74 17                	je     f01181ac <test_kfree_bestfit+0x1152>
f0118195:	83 ec 04             	sub    $0x4,%esp
f0118198:	68 f8 21 12 f0       	push   $0xf01221f8
f011819d:	68 80 08 00 00       	push   $0x880
f01181a2:	68 76 1a 12 f0       	push   $0xf0121a76
f01181a7:	e8 03 80 fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01181ac:	e8 9d 28 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01181b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181b4:	e8 c1 3f ff ff       	call   f010c17a <pf_calculate_free_frames>
f01181b9:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f01181bc:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01181c2:	83 ec 0c             	sub    $0xc,%esp
f01181c5:	50                   	push   %eax
f01181c6:	e8 15 4d ff ff       	call   f010cee0 <kfree>
f01181cb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01181ce:	e8 a7 3f ff ff       	call   f010c17a <pf_calculate_free_frames>
f01181d3:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01181d6:	74 17                	je     f01181ef <test_kfree_bestfit+0x1195>
f01181d8:	83 ec 04             	sub    $0x4,%esp
f01181db:	68 88 1a 12 f0       	push   $0xf0121a88
f01181e0:	68 86 08 00 00       	push   $0x886
f01181e5:	68 76 1a 12 f0       	push   $0xf0121a76
f01181ea:	e8 c0 7f fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01181ef:	e8 5a 28 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01181f4:	89 c2                	mov    %eax,%edx
f01181f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01181f9:	29 c2                	sub    %eax,%edx
f01181fb:	89 d0                	mov    %edx,%eax
f01181fd:	83 f8 01             	cmp    $0x1,%eax
f0118200:	74 17                	je     f0118219 <test_kfree_bestfit+0x11bf>
f0118202:	83 ec 04             	sub    $0x4,%esp
f0118205:	68 f8 21 12 f0       	push   $0xf01221f8
f011820a:	68 87 08 00 00       	push   $0x887
f011820f:	68 76 1a 12 f0       	push   $0xf0121a76
f0118214:	e8 96 7f fe ff       	call   f01001af <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118219:	e8 30 28 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011821e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118221:	e8 54 3f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118226:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0118229:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011822f:	83 ec 0c             	sub    $0xc,%esp
f0118232:	50                   	push   %eax
f0118233:	e8 a8 4c ff ff       	call   f010cee0 <kfree>
f0118238:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011823b:	e8 3a 3f ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118240:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118243:	74 17                	je     f011825c <test_kfree_bestfit+0x1202>
f0118245:	83 ec 04             	sub    $0x4,%esp
f0118248:	68 88 1a 12 f0       	push   $0xf0121a88
f011824d:	68 8d 08 00 00       	push   $0x88d
f0118252:	68 76 1a 12 f0       	push   $0xf0121a76
f0118257:	e8 53 7f fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f011825c:	e8 ed 27 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118261:	89 c2                	mov    %eax,%edx
f0118263:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118266:	29 c2                	sub    %eax,%edx
f0118268:	89 d0                	mov    %edx,%eax
f011826a:	83 f8 04             	cmp    $0x4,%eax
f011826d:	74 17                	je     f0118286 <test_kfree_bestfit+0x122c>
f011826f:	83 ec 04             	sub    $0x4,%esp
f0118272:	68 f8 21 12 f0       	push   $0xf01221f8
f0118277:	68 8e 08 00 00       	push   $0x88e
f011827c:	68 76 1a 12 f0       	push   $0xf0121a76
f0118281:	e8 29 7f fe ff       	call   f01001af <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0118286:	e8 c3 27 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011828b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011828e:	e8 e7 3e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118293:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0118296:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011829c:	83 ec 0c             	sub    $0xc,%esp
f011829f:	50                   	push   %eax
f01182a0:	e8 3b 4c ff ff       	call   f010cee0 <kfree>
f01182a5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01182a8:	e8 cd 3e ff ff       	call   f010c17a <pf_calculate_free_frames>
f01182ad:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01182b0:	74 17                	je     f01182c9 <test_kfree_bestfit+0x126f>
f01182b2:	83 ec 04             	sub    $0x4,%esp
f01182b5:	68 88 1a 12 f0       	push   $0xf0121a88
f01182ba:	68 94 08 00 00       	push   $0x894
f01182bf:	68 76 1a 12 f0       	push   $0xf0121a76
f01182c4:	e8 e6 7e fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f01182c9:	e8 80 27 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01182ce:	89 c2                	mov    %eax,%edx
f01182d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01182d3:	29 c2                	sub    %eax,%edx
f01182d5:	89 d0                	mov    %edx,%eax
f01182d7:	83 f8 05             	cmp    $0x5,%eax
f01182da:	74 17                	je     f01182f3 <test_kfree_bestfit+0x1299>
f01182dc:	83 ec 04             	sub    $0x4,%esp
f01182df:	68 f8 21 12 f0       	push   $0xf01221f8
f01182e4:	68 95 08 00 00       	push   $0x895
f01182e9:	68 76 1a 12 f0       	push   $0xf0121a76
f01182ee:	e8 bc 7e fe ff       	call   f01001af <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01182f3:	e8 56 27 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01182f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01182fb:	e8 7a 3e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118300:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0118303:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118309:	83 ec 0c             	sub    $0xc,%esp
f011830c:	50                   	push   %eax
f011830d:	e8 ce 4b ff ff       	call   f010cee0 <kfree>
f0118312:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118315:	e8 60 3e ff ff       	call   f010c17a <pf_calculate_free_frames>
f011831a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011831d:	74 17                	je     f0118336 <test_kfree_bestfit+0x12dc>
f011831f:	83 ec 04             	sub    $0x4,%esp
f0118322:	68 88 1a 12 f0       	push   $0xf0121a88
f0118327:	68 9b 08 00 00       	push   $0x89b
f011832c:	68 76 1a 12 f0       	push   $0xf0121a76
f0118331:	e8 79 7e fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0118336:	e8 13 27 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011833b:	89 c2                	mov    %eax,%edx
f011833d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118340:	29 c2                	sub    %eax,%edx
f0118342:	89 d0                	mov    %edx,%eax
f0118344:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118349:	74 17                	je     f0118362 <test_kfree_bestfit+0x1308>
f011834b:	83 ec 04             	sub    $0x4,%esp
f011834e:	68 f8 21 12 f0       	push   $0xf01221f8
f0118353:	68 9c 08 00 00       	push   $0x89c
f0118358:	68 76 1a 12 f0       	push   $0xf0121a76
f011835d:	e8 4d 7e fe ff       	call   f01001af <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0118362:	e8 e7 26 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118367:	89 c2                	mov    %eax,%edx
f0118369:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011836c:	39 c2                	cmp    %eax,%edx
f011836e:	74 17                	je     f0118387 <test_kfree_bestfit+0x132d>
f0118370:	83 ec 04             	sub    $0x4,%esp
f0118373:	68 b8 22 12 f0       	push   $0xf01222b8
f0118378:	68 9e 08 00 00       	push   $0x89e
f011837d:	68 76 1a 12 f0       	push   $0xf0121a76
f0118382:	e8 28 7e fe ff       	call   f01001af <_panic>
	}
	cprintf("\b\b\b60%");
f0118387:	83 ec 0c             	sub    $0xc,%esp
f011838a:	68 ec 22 12 f0       	push   $0xf01222ec
f011838f:	e8 70 ee fe ff       	call   f0107204 <cprintf>
f0118394:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0118397:	83 ec 0c             	sub    $0xc,%esp
f011839a:	6a 03                	push   $0x3
f011839c:	e8 1d 2a ff ff       	call   f010adbe <sys_bypassPageFault>
f01183a1:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01183a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01183ab:	e9 82 00 00 00       	jmp    f0118432 <test_kfree_bestfit+0x13d8>
		{
			ptr = (char *) ptr_allocations[i];
f01183b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01183b3:	8b 84 85 30 fe ff ff 	mov    -0x1d0(%ebp,%eax,4),%eax
f01183ba:	89 45 98             	mov    %eax,-0x68(%ebp)
			ptr[0] = 10;
f01183bd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01183c0:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01183c3:	e8 e4 29 ff ff       	call   f010adac <sys_rcr2>
f01183c8:	89 c2                	mov    %eax,%edx
f01183ca:	8b 45 98             	mov    -0x68(%ebp),%eax
f01183cd:	39 c2                	cmp    %eax,%edx
f01183cf:	74 17                	je     f01183e8 <test_kfree_bestfit+0x138e>
f01183d1:	83 ec 04             	sub    $0x4,%esp
f01183d4:	68 f4 22 12 f0       	push   $0xf01222f4
f01183d9:	68 ad 08 00 00       	push   $0x8ad
f01183de:	68 76 1a 12 f0       	push   $0xf0121a76
f01183e3:	e8 c7 7d fe ff       	call   f01001af <_panic>
			ptr[lastIndices[i]] = 10;
f01183e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01183eb:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f01183f2:	89 c2                	mov    %eax,%edx
f01183f4:	8b 45 98             	mov    -0x68(%ebp),%eax
f01183f7:	01 d0                	add    %edx,%eax
f01183f9:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01183fc:	e8 ab 29 ff ff       	call   f010adac <sys_rcr2>
f0118401:	89 c2                	mov    %eax,%edx
f0118403:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118406:	8b 84 85 d0 fe ff ff 	mov    -0x130(%ebp,%eax,4),%eax
f011840d:	89 c1                	mov    %eax,%ecx
f011840f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118412:	01 c8                	add    %ecx,%eax
f0118414:	39 c2                	cmp    %eax,%edx
f0118416:	74 17                	je     f011842f <test_kfree_bestfit+0x13d5>
f0118418:	83 ec 04             	sub    $0x4,%esp
f011841b:	68 f4 22 12 f0       	push   $0xf01222f4
f0118420:	68 af 08 00 00       	push   $0x8af
f0118425:	68 76 1a 12 f0       	push   $0xf0121a76
f011842a:	e8 80 7d fe ff       	call   f01001af <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f011842f:	ff 45 f4             	incl   -0xc(%ebp)
f0118432:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0118436:	0f 8e 74 ff ff ff    	jle    f01183b0 <test_kfree_bestfit+0x1356>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011843c:	83 ec 0c             	sub    $0xc,%esp
f011843f:	6a 00                	push   $0x0
f0118441:	e8 78 29 ff ff       	call   f010adbe <sys_bypassPageFault>
f0118446:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0118449:	83 ec 0c             	sub    $0xc,%esp
f011844c:	68 39 23 12 f0       	push   $0xf0122339
f0118451:	e8 ae ed fe ff       	call   f0107204 <cprintf>
f0118456:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118459:	e8 f0 25 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011845e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118461:	e8 14 3d ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118466:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0118469:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f011846f:	83 ec 0c             	sub    $0xc,%esp
f0118472:	50                   	push   %eax
f0118473:	e8 68 4a ff ff       	call   f010cee0 <kfree>
f0118478:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011847b:	e8 fa 3c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118480:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118483:	74 17                	je     f011849c <test_kfree_bestfit+0x1442>
f0118485:	83 ec 04             	sub    $0x4,%esp
f0118488:	68 88 1a 12 f0       	push   $0xf0121a88
f011848d:	68 bd 08 00 00       	push   $0x8bd
f0118492:	68 76 1a 12 f0       	push   $0xf0121a76
f0118497:	e8 13 7d fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011849c:	e8 ad 25 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01184a1:	89 c2                	mov    %eax,%edx
f01184a3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01184a6:	39 c2                	cmp    %eax,%edx
f01184a8:	74 17                	je     f01184c1 <test_kfree_bestfit+0x1467>
f01184aa:	83 ec 04             	sub    $0x4,%esp
f01184ad:	68 40 23 12 f0       	push   $0xf0122340
f01184b2:	68 be 08 00 00       	push   $0x8be
f01184b7:	68 76 1a 12 f0       	push   $0xf0121a76
f01184bc:	e8 ee 7c fe ff       	call   f01001af <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01184c1:	e8 88 25 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01184c6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01184c9:	e8 ac 3c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01184ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01184d1:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f01184d7:	83 ec 0c             	sub    $0xc,%esp
f01184da:	50                   	push   %eax
f01184db:	e8 00 4a ff ff       	call   f010cee0 <kfree>
f01184e0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01184e3:	e8 92 3c ff ff       	call   f010c17a <pf_calculate_free_frames>
f01184e8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01184eb:	74 17                	je     f0118504 <test_kfree_bestfit+0x14aa>
f01184ed:	83 ec 04             	sub    $0x4,%esp
f01184f0:	68 88 1a 12 f0       	push   $0xf0121a88
f01184f5:	68 c4 08 00 00       	push   $0x8c4
f01184fa:	68 76 1a 12 f0       	push   $0xf0121a76
f01184ff:	e8 ab 7c fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0118504:	e8 45 25 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118509:	89 c2                	mov    %eax,%edx
f011850b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011850e:	39 c2                	cmp    %eax,%edx
f0118510:	74 17                	je     f0118529 <test_kfree_bestfit+0x14cf>
f0118512:	83 ec 04             	sub    $0x4,%esp
f0118515:	68 40 23 12 f0       	push   $0xf0122340
f011851a:	68 c5 08 00 00       	push   $0x8c5
f011851f:	68 76 1a 12 f0       	push   $0xf0121a76
f0118524:	e8 86 7c fe ff       	call   f01001af <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0118529:	e8 20 25 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011852e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118531:	e8 44 3c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118536:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0118539:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011853f:	83 ec 0c             	sub    $0xc,%esp
f0118542:	50                   	push   %eax
f0118543:	e8 98 49 ff ff       	call   f010cee0 <kfree>
f0118548:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011854b:	e8 2a 3c ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118550:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0118553:	74 17                	je     f011856c <test_kfree_bestfit+0x1512>
f0118555:	83 ec 04             	sub    $0x4,%esp
f0118558:	68 88 1a 12 f0       	push   $0xf0121a88
f011855d:	68 cb 08 00 00       	push   $0x8cb
f0118562:	68 76 1a 12 f0       	push   $0xf0121a76
f0118567:	e8 43 7c fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f011856c:	e8 dd 24 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118571:	89 c2                	mov    %eax,%edx
f0118573:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118576:	39 c2                	cmp    %eax,%edx
f0118578:	74 17                	je     f0118591 <test_kfree_bestfit+0x1537>
f011857a:	83 ec 04             	sub    $0x4,%esp
f011857d:	68 40 23 12 f0       	push   $0xf0122340
f0118582:	68 cc 08 00 00       	push   $0x8cc
f0118587:	68 76 1a 12 f0       	push   $0xf0121a76
f011858c:	e8 1e 7c fe ff       	call   f01001af <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0118591:	e8 b8 24 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118596:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118599:	e8 dc 3b ff ff       	call   f010c17a <pf_calculate_free_frames>
f011859e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01185a1:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01185a7:	83 ec 0c             	sub    $0xc,%esp
f01185aa:	50                   	push   %eax
f01185ab:	e8 30 49 ff ff       	call   f010cee0 <kfree>
f01185b0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01185b3:	e8 c2 3b ff ff       	call   f010c17a <pf_calculate_free_frames>
f01185b8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01185bb:	74 17                	je     f01185d4 <test_kfree_bestfit+0x157a>
f01185bd:	83 ec 04             	sub    $0x4,%esp
f01185c0:	68 88 1a 12 f0       	push   $0xf0121a88
f01185c5:	68 d2 08 00 00       	push   $0x8d2
f01185ca:	68 76 1a 12 f0       	push   $0xf0121a76
f01185cf:	e8 db 7b fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01185d4:	e8 75 24 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01185d9:	89 c2                	mov    %eax,%edx
f01185db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01185de:	39 c2                	cmp    %eax,%edx
f01185e0:	74 17                	je     f01185f9 <test_kfree_bestfit+0x159f>
f01185e2:	83 ec 04             	sub    $0x4,%esp
f01185e5:	68 40 23 12 f0       	push   $0xf0122340
f01185ea:	68 d3 08 00 00       	push   $0x8d3
f01185ef:	68 76 1a 12 f0       	push   $0xf0121a76
f01185f4:	e8 b6 7b fe ff       	call   f01001af <_panic>

	}
	cprintf("\b\b\b85%");
f01185f9:	83 ec 0c             	sub    $0xc,%esp
f01185fc:	68 87 23 12 f0       	push   $0xf0122387
f0118601:	e8 fe eb fe ff       	call   f0107204 <cprintf>
f0118606:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0118609:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0118610:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0118617:	eb 4a                	jmp    f0118663 <test_kfree_bestfit+0x1609>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va, &ptr_table);
f0118619:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011861c:	89 c1                	mov    %eax,%ecx
f011861e:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0118623:	83 ec 04             	sub    $0x4,%esp
f0118626:	8d 95 2c fe ff ff    	lea    -0x1d4(%ebp),%edx
f011862c:	52                   	push   %edx
f011862d:	51                   	push   %ecx
f011862e:	50                   	push   %eax
f011862f:	e8 a7 b5 fe ff       	call   f0103bdb <get_page_table>
f0118634:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0118637:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f011863d:	85 c0                	test   %eax,%eax
f011863f:	75 17                	jne    f0118658 <test_kfree_bestfit+0x15fe>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0118641:	83 ec 04             	sub    $0x4,%esp
f0118644:	68 90 23 12 f0       	push   $0xf0122390
f0118649:	68 e1 08 00 00       	push   $0x8e1
f011864e:	68 76 1a 12 f0       	push   $0xf0121a76
f0118653:	e8 57 7b fe ff       	call   f01001af <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0118658:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f011865f:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0118663:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118667:	78 b0                	js     f0118619 <test_kfree_bestfit+0x15bf>
f0118669:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011866d:	7f 09                	jg     f0118678 <test_kfree_bestfit+0x161e>
f011866f:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0118676:	76 a1                	jbe    f0118619 <test_kfree_bestfit+0x15bf>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0118678:	83 ec 0c             	sub    $0xc,%esp
f011867b:	68 52 1c 12 f0       	push   $0xf0121c52
f0118680:	e8 7f eb fe ff       	call   f0107204 <cprintf>
f0118685:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0118688:	83 ec 0c             	sub    $0xc,%esp
f011868b:	68 f8 23 12 f0       	push   $0xf01223f8
f0118690:	e8 6f eb fe ff       	call   f0107204 <cprintf>
f0118695:	83 c4 10             	add    $0x10,%esp

	return 1;
f0118698:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011869d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01186a0:	5b                   	pop    %ebx
f01186a1:	5f                   	pop    %edi
f01186a2:	5d                   	pop    %ebp
f01186a3:	c3                   	ret    

f01186a4 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f01186a4:	55                   	push   %ebp
f01186a5:	89 e5                	mov    %esp,%ebp
f01186a7:	57                   	push   %edi
f01186a8:	56                   	push   %esi
f01186a9:	53                   	push   %ebx
f01186aa:	81 ec 5c 02 00 00    	sub    $0x25c,%esp
	cprintf("==============================================\n");
f01186b0:	83 ec 0c             	sub    $0xc,%esp
f01186b3:	68 b8 19 12 f0       	push   $0xf01219b8
f01186b8:	e8 47 eb fe ff       	call   f0107204 <cprintf>
f01186bd:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01186c0:	83 ec 0c             	sub    $0xc,%esp
f01186c3:	68 e8 19 12 f0       	push   $0xf01219e8
f01186c8:	e8 37 eb fe ff       	call   f0107204 <cprintf>
f01186cd:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01186d0:	83 ec 0c             	sub    $0xc,%esp
f01186d3:	68 b8 19 12 f0       	push   $0xf01219b8
f01186d8:	e8 27 eb fe ff       	call   f0107204 <cprintf>
f01186dd:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01186e0:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f01186e4:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f01186e8:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f01186ee:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f01186f4:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f01186fb:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0118702:	e8 47 23 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118707:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011870a:	8d 95 4c fe ff ff    	lea    -0x1b4(%ebp),%edx
f0118710:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118715:	b8 00 00 00 00       	mov    $0x0,%eax
f011871a:	89 d7                	mov    %edx,%edi
f011871c:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011871e:	8d 95 fc fd ff ff    	lea    -0x204(%ebp),%edx
f0118724:	b9 14 00 00 00       	mov    $0x14,%ecx
f0118729:	b8 00 00 00 00       	mov    $0x0,%eax
f011872e:	89 d7                	mov    %edx,%edi
f0118730:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0118732:	8d 95 ac fd ff ff    	lea    -0x254(%ebp),%edx
f0118738:	b9 14 00 00 00       	mov    $0x14,%ecx
f011873d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118742:	89 d7                	mov    %edx,%edi
f0118744:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118746:	e8 03 23 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011874b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011874e:	e8 27 3a ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118753:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0118756:	83 ec 0c             	sub    $0xc,%esp
f0118759:	68 00 fc 1f 00       	push   $0x1ffc00
f011875e:	e8 32 47 ff ff       	call   f010ce95 <kmalloc>
f0118763:	83 c4 10             	add    $0x10,%esp
f0118766:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011876c:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0118772:	89 c1                	mov    %eax,%ecx
f0118774:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011877b:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118780:	0f b6 d0             	movzbl %al,%edx
f0118783:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118786:	01 d0                	add    %edx,%eax
f0118788:	48                   	dec    %eax
f0118789:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011878c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011878f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118794:	f7 75 a0             	divl   -0x60(%ebp)
f0118797:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011879a:	29 d0                	sub    %edx,%eax
f011879c:	89 c3                	mov    %eax,%ebx
f011879e:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01187a5:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01187aa:	0f b6 c0             	movzbl %al,%eax
f01187ad:	c1 e0 04             	shl    $0x4,%eax
f01187b0:	89 c2                	mov    %eax,%edx
f01187b2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01187b5:	01 d0                	add    %edx,%eax
f01187b7:	48                   	dec    %eax
f01187b8:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01187bb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01187be:	ba 00 00 00 00       	mov    $0x0,%edx
f01187c3:	f7 75 98             	divl   -0x68(%ebp)
f01187c6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01187c9:	29 d0                	sub    %edx,%eax
f01187cb:	01 d8                	add    %ebx,%eax
f01187cd:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01187d2:	39 c1                	cmp    %eax,%ecx
f01187d4:	74 17                	je     f01187ed <test_kheap_phys_addr+0x149>
f01187d6:	83 ec 04             	sub    $0x4,%esp
f01187d9:	68 54 1b 12 f0       	push   $0xf0121b54
f01187de:	68 0e 09 00 00       	push   $0x90e
f01187e3:	68 76 1a 12 f0       	push   $0xf0121a76
f01187e8:	e8 c2 79 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01187ed:	e8 88 39 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01187f2:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01187f5:	74 17                	je     f011880e <test_kheap_phys_addr+0x16a>
f01187f7:	83 ec 04             	sub    $0x4,%esp
f01187fa:	68 88 1a 12 f0       	push   $0xf0121a88
f01187ff:	68 0f 09 00 00       	push   $0x90f
f0118804:	68 76 1a 12 f0       	push   $0xf0121a76
f0118809:	e8 a1 79 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011880e:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118811:	e8 38 22 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118816:	29 c3                	sub    %eax,%ebx
f0118818:	89 d8                	mov    %ebx,%eax
f011881a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011881f:	74 17                	je     f0118838 <test_kheap_phys_addr+0x194>
f0118821:	83 ec 04             	sub    $0x4,%esp
f0118824:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118829:	68 10 09 00 00       	push   $0x910
f011882e:	68 76 1a 12 f0       	push   $0xf0121a76
f0118833:	e8 77 79 fe ff       	call   f01001af <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0118838:	e8 11 22 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011883d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118840:	e8 35 39 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118845:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118848:	83 ec 0c             	sub    $0xc,%esp
f011884b:	68 00 fc 1f 00       	push   $0x1ffc00
f0118850:	e8 40 46 ff ff       	call   f010ce95 <kmalloc>
f0118855:	83 c4 10             	add    $0x10,%esp
f0118858:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011885e:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f0118864:	89 c1                	mov    %eax,%ecx
f0118866:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011886d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118872:	0f b6 d0             	movzbl %al,%edx
f0118875:	8b 45 90             	mov    -0x70(%ebp),%eax
f0118878:	01 d0                	add    %edx,%eax
f011887a:	48                   	dec    %eax
f011887b:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011887e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118881:	ba 00 00 00 00       	mov    $0x0,%edx
f0118886:	f7 75 90             	divl   -0x70(%ebp)
f0118889:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011888c:	29 d0                	sub    %edx,%eax
f011888e:	89 c3                	mov    %eax,%ebx
f0118890:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0118897:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011889c:	0f b6 c0             	movzbl %al,%eax
f011889f:	c1 e0 04             	shl    $0x4,%eax
f01188a2:	89 c2                	mov    %eax,%edx
f01188a4:	8b 45 88             	mov    -0x78(%ebp),%eax
f01188a7:	01 d0                	add    %edx,%eax
f01188a9:	48                   	dec    %eax
f01188aa:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01188ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01188b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01188b5:	f7 75 88             	divl   -0x78(%ebp)
f01188b8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01188bb:	29 d0                	sub    %edx,%eax
f01188bd:	01 d8                	add    %ebx,%eax
f01188bf:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01188c4:	39 c1                	cmp    %eax,%ecx
f01188c6:	74 17                	je     f01188df <test_kheap_phys_addr+0x23b>
f01188c8:	83 ec 04             	sub    $0x4,%esp
f01188cb:	68 54 1b 12 f0       	push   $0xf0121b54
f01188d0:	68 16 09 00 00       	push   $0x916
f01188d5:	68 76 1a 12 f0       	push   $0xf0121a76
f01188da:	e8 d0 78 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01188df:	e8 96 38 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01188e4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01188e7:	74 17                	je     f0118900 <test_kheap_phys_addr+0x25c>
f01188e9:	83 ec 04             	sub    $0x4,%esp
f01188ec:	68 88 1a 12 f0       	push   $0xf0121a88
f01188f1:	68 17 09 00 00       	push   $0x917
f01188f6:	68 76 1a 12 f0       	push   $0xf0121a76
f01188fb:	e8 af 78 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118900:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118903:	e8 46 21 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118908:	29 c3                	sub    %eax,%ebx
f011890a:	89 d8                	mov    %ebx,%eax
f011890c:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118911:	74 17                	je     f011892a <test_kheap_phys_addr+0x286>
f0118913:	83 ec 04             	sub    $0x4,%esp
f0118916:	68 f0 1a 12 f0       	push   $0xf0121af0
f011891b:	68 18 09 00 00       	push   $0x918
f0118920:	68 76 1a 12 f0       	push   $0xf0121a76
f0118925:	e8 85 78 fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011892a:	e8 1f 21 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011892f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118932:	e8 43 38 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118937:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011893a:	83 ec 0c             	sub    $0xc,%esp
f011893d:	68 00 08 00 00       	push   $0x800
f0118942:	e8 4e 45 ff ff       	call   f010ce95 <kmalloc>
f0118947:	83 c4 10             	add    $0x10,%esp
f011894a:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118950:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f0118956:	89 c1                	mov    %eax,%ecx
f0118958:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f011895f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118964:	0f b6 d0             	movzbl %al,%edx
f0118967:	8b 45 80             	mov    -0x80(%ebp),%eax
f011896a:	01 d0                	add    %edx,%eax
f011896c:	48                   	dec    %eax
f011896d:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0118973:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118979:	ba 00 00 00 00       	mov    $0x0,%edx
f011897e:	f7 75 80             	divl   -0x80(%ebp)
f0118981:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0118987:	29 d0                	sub    %edx,%eax
f0118989:	89 c3                	mov    %eax,%ebx
f011898b:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0118992:	10 00 00 
f0118995:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011899a:	0f b6 c0             	movzbl %al,%eax
f011899d:	c1 e0 04             	shl    $0x4,%eax
f01189a0:	89 c2                	mov    %eax,%edx
f01189a2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01189a8:	01 d0                	add    %edx,%eax
f01189aa:	48                   	dec    %eax
f01189ab:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01189b1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189b7:	ba 00 00 00 00       	mov    $0x0,%edx
f01189bc:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f01189c2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01189c8:	29 d0                	sub    %edx,%eax
f01189ca:	01 d8                	add    %ebx,%eax
f01189cc:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01189d1:	39 c1                	cmp    %eax,%ecx
f01189d3:	74 17                	je     f01189ec <test_kheap_phys_addr+0x348>
f01189d5:	83 ec 04             	sub    $0x4,%esp
f01189d8:	68 54 1b 12 f0       	push   $0xf0121b54
f01189dd:	68 1e 09 00 00       	push   $0x91e
f01189e2:	68 76 1a 12 f0       	push   $0xf0121a76
f01189e7:	e8 c3 77 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01189ec:	e8 89 37 ff ff       	call   f010c17a <pf_calculate_free_frames>
f01189f1:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01189f4:	74 17                	je     f0118a0d <test_kheap_phys_addr+0x369>
f01189f6:	83 ec 04             	sub    $0x4,%esp
f01189f9:	68 88 1a 12 f0       	push   $0xf0121a88
f01189fe:	68 1f 09 00 00       	push   $0x91f
f0118a03:	68 76 1a 12 f0       	push   $0xf0121a76
f0118a08:	e8 a2 77 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118a0d:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118a10:	e8 39 20 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118a15:	29 c3                	sub    %eax,%ebx
f0118a17:	89 d8                	mov    %ebx,%eax
f0118a19:	83 f8 01             	cmp    $0x1,%eax
f0118a1c:	74 17                	je     f0118a35 <test_kheap_phys_addr+0x391>
f0118a1e:	83 ec 04             	sub    $0x4,%esp
f0118a21:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118a26:	68 20 09 00 00       	push   $0x920
f0118a2b:	68 76 1a 12 f0       	push   $0xf0121a76
f0118a30:	e8 7a 77 fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0118a35:	e8 14 20 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118a3a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118a3d:	e8 38 37 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118a42:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0118a45:	83 ec 0c             	sub    $0xc,%esp
f0118a48:	68 00 08 00 00       	push   $0x800
f0118a4d:	e8 43 44 ff ff       	call   f010ce95 <kmalloc>
f0118a52:	83 c4 10             	add    $0x10,%esp
f0118a55:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118a5b:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f0118a61:	89 c1                	mov    %eax,%ecx
f0118a63:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0118a6a:	10 00 00 
f0118a6d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118a72:	0f b6 d0             	movzbl %al,%edx
f0118a75:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118a7b:	01 d0                	add    %edx,%eax
f0118a7d:	48                   	dec    %eax
f0118a7e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118a84:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a8a:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a8f:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118a95:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118a9b:	29 d0                	sub    %edx,%eax
f0118a9d:	89 c3                	mov    %eax,%ebx
f0118a9f:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118aa6:	10 00 00 
f0118aa9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118aae:	0f b6 c0             	movzbl %al,%eax
f0118ab1:	c1 e0 04             	shl    $0x4,%eax
f0118ab4:	89 c2                	mov    %eax,%edx
f0118ab6:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118abc:	01 d0                	add    %edx,%eax
f0118abe:	48                   	dec    %eax
f0118abf:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0118ac5:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118acb:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ad0:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0118ad6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0118adc:	29 d0                	sub    %edx,%eax
f0118ade:	01 d8                	add    %ebx,%eax
f0118ae0:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0118ae5:	39 c1                	cmp    %eax,%ecx
f0118ae7:	74 17                	je     f0118b00 <test_kheap_phys_addr+0x45c>
f0118ae9:	83 ec 04             	sub    $0x4,%esp
f0118aec:	68 54 1b 12 f0       	push   $0xf0121b54
f0118af1:	68 26 09 00 00       	push   $0x926
f0118af6:	68 76 1a 12 f0       	push   $0xf0121a76
f0118afb:	e8 af 76 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118b00:	e8 75 36 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118b05:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118b08:	74 17                	je     f0118b21 <test_kheap_phys_addr+0x47d>
f0118b0a:	83 ec 04             	sub    $0x4,%esp
f0118b0d:	68 88 1a 12 f0       	push   $0xf0121a88
f0118b12:	68 27 09 00 00       	push   $0x927
f0118b17:	68 76 1a 12 f0       	push   $0xf0121a76
f0118b1c:	e8 8e 76 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118b21:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118b24:	e8 25 1f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118b29:	29 c3                	sub    %eax,%ebx
f0118b2b:	89 d8                	mov    %ebx,%eax
f0118b2d:	83 f8 01             	cmp    $0x1,%eax
f0118b30:	74 17                	je     f0118b49 <test_kheap_phys_addr+0x4a5>
f0118b32:	83 ec 04             	sub    $0x4,%esp
f0118b35:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118b3a:	68 28 09 00 00       	push   $0x928
f0118b3f:	68 76 1a 12 f0       	push   $0xf0121a76
f0118b44:	e8 66 76 fe ff       	call   f01001af <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0118b49:	e8 00 1f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118b4e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118b51:	e8 24 36 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118b56:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0118b59:	83 ec 0c             	sub    $0xc,%esp
f0118b5c:	68 00 1c 00 00       	push   $0x1c00
f0118b61:	e8 2f 43 ff ff       	call   f010ce95 <kmalloc>
f0118b66:	83 c4 10             	add    $0x10,%esp
f0118b69:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118b6f:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f0118b75:	89 c1                	mov    %eax,%ecx
f0118b77:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0118b7e:	10 00 00 
f0118b81:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118b86:	0f b6 d0             	movzbl %al,%edx
f0118b89:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0118b8f:	01 d0                	add    %edx,%eax
f0118b91:	48                   	dec    %eax
f0118b92:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0118b98:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118b9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ba3:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0118ba9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0118baf:	29 d0                	sub    %edx,%eax
f0118bb1:	89 c3                	mov    %eax,%ebx
f0118bb3:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118bba:	10 00 00 
f0118bbd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118bc2:	0f b6 c0             	movzbl %al,%eax
f0118bc5:	c1 e0 04             	shl    $0x4,%eax
f0118bc8:	89 c2                	mov    %eax,%edx
f0118bca:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118bd0:	01 d0                	add    %edx,%eax
f0118bd2:	48                   	dec    %eax
f0118bd3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0118bd9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118bdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0118be4:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0118bea:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118bf0:	29 d0                	sub    %edx,%eax
f0118bf2:	01 d8                	add    %ebx,%eax
f0118bf4:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0118bf9:	39 c1                	cmp    %eax,%ecx
f0118bfb:	74 17                	je     f0118c14 <test_kheap_phys_addr+0x570>
f0118bfd:	83 ec 04             	sub    $0x4,%esp
f0118c00:	68 54 1b 12 f0       	push   $0xf0121b54
f0118c05:	68 2e 09 00 00       	push   $0x92e
f0118c0a:	68 76 1a 12 f0       	push   $0xf0121a76
f0118c0f:	e8 9b 75 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c14:	e8 61 35 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118c19:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118c1c:	74 17                	je     f0118c35 <test_kheap_phys_addr+0x591>
f0118c1e:	83 ec 04             	sub    $0x4,%esp
f0118c21:	68 88 1a 12 f0       	push   $0xf0121a88
f0118c26:	68 2f 09 00 00       	push   $0x92f
f0118c2b:	68 76 1a 12 f0       	push   $0xf0121a76
f0118c30:	e8 7a 75 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118c35:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118c38:	e8 11 1e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118c3d:	29 c3                	sub    %eax,%ebx
f0118c3f:	89 d8                	mov    %ebx,%eax
f0118c41:	83 f8 02             	cmp    $0x2,%eax
f0118c44:	74 17                	je     f0118c5d <test_kheap_phys_addr+0x5b9>
f0118c46:	83 ec 04             	sub    $0x4,%esp
f0118c49:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118c4e:	68 30 09 00 00       	push   $0x930
f0118c53:	68 76 1a 12 f0       	push   $0xf0121a76
f0118c58:	e8 52 75 fe ff       	call   f01001af <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0118c5d:	e8 ec 1d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118c62:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118c65:	e8 10 35 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118c6a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118c6d:	83 ec 0c             	sub    $0xc,%esp
f0118c70:	68 00 fc 2f 00       	push   $0x2ffc00
f0118c75:	e8 1b 42 ff ff       	call   f010ce95 <kmalloc>
f0118c7a:	83 c4 10             	add    $0x10,%esp
f0118c7d:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118c83:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f0118c89:	89 c1                	mov    %eax,%ecx
f0118c8b:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0118c92:	10 00 00 
f0118c95:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118c9a:	0f b6 d0             	movzbl %al,%edx
f0118c9d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118ca3:	01 d0                	add    %edx,%eax
f0118ca5:	48                   	dec    %eax
f0118ca6:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118cac:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118cb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cb7:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118cbd:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0118cc3:	29 d0                	sub    %edx,%eax
f0118cc5:	89 c3                	mov    %eax,%ebx
f0118cc7:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118cce:	10 00 00 
f0118cd1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118cd6:	0f b6 c0             	movzbl %al,%eax
f0118cd9:	c1 e0 04             	shl    $0x4,%eax
f0118cdc:	89 c2                	mov    %eax,%edx
f0118cde:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118ce4:	01 d0                	add    %edx,%eax
f0118ce6:	48                   	dec    %eax
f0118ce7:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0118ced:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118cf3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118cf8:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0118cfe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118d04:	29 d0                	sub    %edx,%eax
f0118d06:	01 d8                	add    %ebx,%eax
f0118d08:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0118d0d:	39 c1                	cmp    %eax,%ecx
f0118d0f:	74 17                	je     f0118d28 <test_kheap_phys_addr+0x684>
f0118d11:	83 ec 04             	sub    $0x4,%esp
f0118d14:	68 54 1b 12 f0       	push   $0xf0121b54
f0118d19:	68 36 09 00 00       	push   $0x936
f0118d1e:	68 76 1a 12 f0       	push   $0xf0121a76
f0118d23:	e8 87 74 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118d28:	e8 4d 34 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118d2d:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118d30:	74 17                	je     f0118d49 <test_kheap_phys_addr+0x6a5>
f0118d32:	83 ec 04             	sub    $0x4,%esp
f0118d35:	68 88 1a 12 f0       	push   $0xf0121a88
f0118d3a:	68 37 09 00 00       	push   $0x937
f0118d3f:	68 76 1a 12 f0       	push   $0xf0121a76
f0118d44:	e8 66 74 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118d49:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118d4c:	e8 fd 1c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118d51:	29 c3                	sub    %eax,%ebx
f0118d53:	89 d8                	mov    %ebx,%eax
f0118d55:	3d 00 03 00 00       	cmp    $0x300,%eax
f0118d5a:	74 17                	je     f0118d73 <test_kheap_phys_addr+0x6cf>
f0118d5c:	83 ec 04             	sub    $0x4,%esp
f0118d5f:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118d64:	68 38 09 00 00       	push   $0x938
f0118d69:	68 76 1a 12 f0       	push   $0xf0121a76
f0118d6e:	e8 3c 74 fe ff       	call   f01001af <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0118d73:	e8 d6 1c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118d78:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118d7b:	e8 fa 33 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118d80:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118d83:	83 ec 0c             	sub    $0xc,%esp
f0118d86:	68 00 fc 5f 00       	push   $0x5ffc00
f0118d8b:	e8 05 41 ff ff       	call   f010ce95 <kmalloc>
f0118d90:	83 c4 10             	add    $0x10,%esp
f0118d93:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118d99:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0118d9f:	89 c1                	mov    %eax,%ecx
f0118da1:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0118da8:	10 00 00 
f0118dab:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118db0:	0f b6 d0             	movzbl %al,%edx
f0118db3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118db9:	01 d0                	add    %edx,%eax
f0118dbb:	48                   	dec    %eax
f0118dbc:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f0118dc2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118dc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118dcd:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118dd3:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118dd9:	29 d0                	sub    %edx,%eax
f0118ddb:	89 c3                	mov    %eax,%ebx
f0118ddd:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118de4:	10 00 00 
f0118de7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118dec:	0f b6 c0             	movzbl %al,%eax
f0118def:	c1 e0 04             	shl    $0x4,%eax
f0118df2:	89 c2                	mov    %eax,%edx
f0118df4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118dfa:	01 d0                	add    %edx,%eax
f0118dfc:	48                   	dec    %eax
f0118dfd:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0118e03:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118e09:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e0e:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0118e14:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118e1a:	29 d0                	sub    %edx,%eax
f0118e1c:	01 d8                	add    %ebx,%eax
f0118e1e:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0118e23:	39 c1                	cmp    %eax,%ecx
f0118e25:	74 17                	je     f0118e3e <test_kheap_phys_addr+0x79a>
f0118e27:	83 ec 04             	sub    $0x4,%esp
f0118e2a:	68 54 1b 12 f0       	push   $0xf0121b54
f0118e2f:	68 3e 09 00 00       	push   $0x93e
f0118e34:	68 76 1a 12 f0       	push   $0xf0121a76
f0118e39:	e8 71 73 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118e3e:	e8 37 33 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118e43:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118e46:	74 17                	je     f0118e5f <test_kheap_phys_addr+0x7bb>
f0118e48:	83 ec 04             	sub    $0x4,%esp
f0118e4b:	68 88 1a 12 f0       	push   $0xf0121a88
f0118e50:	68 3f 09 00 00       	push   $0x93f
f0118e55:	68 76 1a 12 f0       	push   $0xf0121a76
f0118e5a:	e8 50 73 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118e5f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118e62:	e8 e7 1b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118e67:	29 c3                	sub    %eax,%ebx
f0118e69:	89 d8                	mov    %ebx,%eax
f0118e6b:	3d 00 06 00 00       	cmp    $0x600,%eax
f0118e70:	74 17                	je     f0118e89 <test_kheap_phys_addr+0x7e5>
f0118e72:	83 ec 04             	sub    $0x4,%esp
f0118e75:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118e7a:	68 40 09 00 00       	push   $0x940
f0118e7f:	68 76 1a 12 f0       	push   $0xf0121a76
f0118e84:	e8 26 73 fe ff       	call   f01001af <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0118e89:	e8 c0 1b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118e8e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e91:	e8 e4 32 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118e96:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118e99:	83 ec 0c             	sub    $0xc,%esp
f0118e9c:	68 00 38 00 00       	push   $0x3800
f0118ea1:	e8 ef 3f ff ff       	call   f010ce95 <kmalloc>
f0118ea6:	83 c4 10             	add    $0x10,%esp
f0118ea9:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0118eaf:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0118eb5:	89 c1                	mov    %eax,%ecx
f0118eb7:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118ebe:	10 00 00 
f0118ec1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118ec6:	0f b6 d0             	movzbl %al,%edx
f0118ec9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118ecf:	01 d0                	add    %edx,%eax
f0118ed1:	48                   	dec    %eax
f0118ed2:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0118ed8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118ede:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ee3:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118ee9:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118eef:	29 d0                	sub    %edx,%eax
f0118ef1:	89 c3                	mov    %eax,%ebx
f0118ef3:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0118efa:	10 00 00 
f0118efd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118f02:	0f b6 c0             	movzbl %al,%eax
f0118f05:	c1 e0 04             	shl    $0x4,%eax
f0118f08:	89 c2                	mov    %eax,%edx
f0118f0a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0118f10:	01 d0                	add    %edx,%eax
f0118f12:	48                   	dec    %eax
f0118f13:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f0118f19:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118f1f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118f24:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f0118f2a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118f30:	29 d0                	sub    %edx,%eax
f0118f32:	01 d8                	add    %ebx,%eax
f0118f34:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0118f39:	39 c1                	cmp    %eax,%ecx
f0118f3b:	74 17                	je     f0118f54 <test_kheap_phys_addr+0x8b0>
f0118f3d:	83 ec 04             	sub    $0x4,%esp
f0118f40:	68 54 1b 12 f0       	push   $0xf0121b54
f0118f45:	68 46 09 00 00       	push   $0x946
f0118f4a:	68 76 1a 12 f0       	push   $0xf0121a76
f0118f4f:	e8 5b 72 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f54:	e8 21 32 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0118f59:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0118f5c:	74 17                	je     f0118f75 <test_kheap_phys_addr+0x8d1>
f0118f5e:	83 ec 04             	sub    $0x4,%esp
f0118f61:	68 88 1a 12 f0       	push   $0xf0121a88
f0118f66:	68 47 09 00 00       	push   $0x947
f0118f6b:	68 76 1a 12 f0       	push   $0xf0121a76
f0118f70:	e8 3a 72 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0118f75:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0118f78:	e8 d1 1a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0118f7d:	29 c3                	sub    %eax,%ebx
f0118f7f:	89 d8                	mov    %ebx,%eax
f0118f81:	83 f8 04             	cmp    $0x4,%eax
f0118f84:	74 17                	je     f0118f9d <test_kheap_phys_addr+0x8f9>
f0118f86:	83 ec 04             	sub    $0x4,%esp
f0118f89:	68 f0 1a 12 f0       	push   $0xf0121af0
f0118f8e:	68 48 09 00 00       	push   $0x948
f0118f93:	68 76 1a 12 f0       	push   $0xf0121a76
f0118f98:	e8 12 72 fe ff       	call   f01001af <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0118f9d:	89 e0                	mov    %esp,%eax
f0118f9f:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0118fa1:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0118fa8:	10 00 00 
f0118fab:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118fb0:	0f b6 d0             	movzbl %al,%edx
f0118fb3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118fb9:	01 d0                	add    %edx,%eax
f0118fbb:	48                   	dec    %eax
f0118fbc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0118fc2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118fc8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fcd:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118fd3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0118fd9:	29 d0                	sub    %edx,%eax
f0118fdb:	89 c1                	mov    %eax,%ecx
f0118fdd:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118fe4:	10 00 00 
f0118fe7:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0118fec:	0f b6 c0             	movzbl %al,%eax
f0118fef:	c1 e0 04             	shl    $0x4,%eax
f0118ff2:	89 c2                	mov    %eax,%edx
f0118ff4:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0118ffa:	01 d0                	add    %edx,%eax
f0118ffc:	48                   	dec    %eax
f0118ffd:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0119003:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0119009:	ba 00 00 00 00       	mov    $0x0,%edx
f011900e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0119014:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011901a:	29 d0                	sub    %edx,%eax
f011901c:	01 c8                	add    %ecx,%eax
f011901e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0119023:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f0119029:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0119030:	10 00 00 
f0119033:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119038:	0f b6 d0             	movzbl %al,%edx
f011903b:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0119041:	01 d0                	add    %edx,%eax
f0119043:	48                   	dec    %eax
f0119044:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011904a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119050:	ba 00 00 00 00       	mov    $0x0,%edx
f0119055:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011905b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0119061:	29 d0                	sub    %edx,%eax
f0119063:	89 c1                	mov    %eax,%ecx
f0119065:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011906c:	10 00 00 
f011906f:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119074:	0f b6 c0             	movzbl %al,%eax
f0119077:	c1 e0 04             	shl    $0x4,%eax
f011907a:	89 c2                	mov    %eax,%edx
f011907c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0119082:	01 d0                	add    %edx,%eax
f0119084:	48                   	dec    %eax
f0119085:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011908b:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0119091:	ba 00 00 00 00       	mov    $0x0,%edx
f0119096:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011909c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01190a2:	29 d0                	sub    %edx,%eax
f01190a4:	01 c8                	add    %ecx,%eax
f01190a6:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01190ab:	c1 e8 0c             	shr    $0xc,%eax
f01190ae:	89 c2                	mov    %eax,%edx
f01190b0:	4a                   	dec    %edx
f01190b1:	89 95 fc fe ff ff    	mov    %edx,-0x104(%ebp)
f01190b7:	c1 e0 02             	shl    $0x2,%eax
f01190ba:	8d 50 03             	lea    0x3(%eax),%edx
f01190bd:	b8 10 00 00 00       	mov    $0x10,%eax
f01190c2:	48                   	dec    %eax
f01190c3:	01 d0                	add    %edx,%eax
f01190c5:	bf 10 00 00 00       	mov    $0x10,%edi
f01190ca:	ba 00 00 00 00       	mov    $0x0,%edx
f01190cf:	f7 f7                	div    %edi
f01190d1:	6b c0 10             	imul   $0x10,%eax,%eax
f01190d4:	29 c4                	sub    %eax,%esp
f01190d6:	89 e0                	mov    %esp,%eax
f01190d8:	83 c0 03             	add    $0x3,%eax
f01190db:	c1 e8 02             	shr    $0x2,%eax
f01190de:	c1 e0 02             	shl    $0x2,%eax
f01190e1:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		i = 0;
f01190e7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f01190ee:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f01190f5:	eb 29                	jmp    f0119120 <test_kheap_phys_addr+0xa7c>
		{
			allPAs[i++] = kheap_physical_address(va);
f01190f7:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01190fa:	8d 43 01             	lea    0x1(%ebx),%eax
f01190fd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0119100:	83 ec 0c             	sub    $0xc,%esp
f0119103:	ff 75 e0             	pushl  -0x20(%ebp)
f0119106:	e8 47 3f ff ff       	call   f010d052 <kheap_physical_address>
f011910b:	83 c4 10             	add    $0x10,%esp
f011910e:	89 c2                	mov    %eax,%edx
f0119110:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0119116:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f0119119:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0119120:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119123:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f0119129:	72 cc                	jb     f01190f7 <test_kheap_phys_addr+0xa53>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011912b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011912e:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		i = 0;
f0119134:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011913b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f0119142:	e9 a5 00 00 00       	jmp    f01191ec <test_kheap_phys_addr+0xb48>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0119147:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011914a:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f011914f:	83 ec 04             	sub    $0x4,%esp
f0119152:	8d 8d a8 fd ff ff    	lea    -0x258(%ebp),%ecx
f0119158:	51                   	push   %ecx
f0119159:	52                   	push   %edx
f011915a:	50                   	push   %eax
f011915b:	e8 7b aa fe ff       	call   f0103bdb <get_page_table>
f0119160:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0119163:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0119169:	85 c0                	test   %eax,%eax
f011916b:	75 17                	jne    f0119184 <test_kheap_phys_addr+0xae0>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011916d:	83 ec 04             	sub    $0x4,%esp
f0119170:	68 30 24 12 f0       	push   $0xf0122430
f0119175:	68 5d 09 00 00       	push   $0x95d
f011917a:	68 76 1a 12 f0       	push   $0xf0121a76
f011917f:	e8 2b 70 fe ff       	call   f01001af <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0119184:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011918b:	eb 44                	jmp    f01191d1 <test_kheap_phys_addr+0xb2d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f011918d:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f0119193:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0119196:	c1 e2 02             	shl    $0x2,%edx
f0119199:	01 d0                	add    %edx,%eax
f011919b:	8b 00                	mov    (%eax),%eax
f011919d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01191a2:	89 c1                	mov    %eax,%ecx
f01191a4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01191aa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01191ad:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01191b0:	39 c1                	cmp    %eax,%ecx
f01191b2:	74 17                	je     f01191cb <test_kheap_phys_addr+0xb27>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01191b4:	83 ec 04             	sub    $0x4,%esp
f01191b7:	68 89 24 12 f0       	push   $0xf0122489
f01191bc:	68 64 09 00 00       	push   $0x964
f01191c1:	68 76 1a 12 f0       	push   $0xf0121a76
f01191c6:	e8 e4 6f fe ff       	call   f01001af <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01191cb:	ff 45 dc             	incl   -0x24(%ebp)
f01191ce:	ff 45 e4             	incl   -0x1c(%ebp)
f01191d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01191d4:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f01191da:	7d 09                	jge    f01191e5 <test_kheap_phys_addr+0xb41>
f01191dc:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f01191e3:	7e a8                	jle    f011918d <test_kheap_phys_addr+0xae9>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01191e5:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f01191ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01191ef:	3b 85 10 ff ff ff    	cmp    -0xf0(%ebp),%eax
f01191f5:	0f 82 4c ff ff ff    	jb     f0119147 <test_kheap_phys_addr+0xaa3>
f01191fb:	89 f4                	mov    %esi,%esp
					panic("Wrong kheap_physical_address");
				}
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f01191fd:	83 ec 0c             	sub    $0xc,%esp
f0119200:	68 a8 24 12 f0       	push   $0xf01224a8
f0119205:	e8 fa df fe ff       	call   f0107204 <cprintf>
f011920a:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011920d:	e8 3c 18 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119212:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0119218:	e8 5d 2f ff ff       	call   f010c17a <pf_calculate_free_frames>
f011921d:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f0119223:	8b 85 ac fd ff ff    	mov    -0x254(%ebp),%eax
f0119229:	83 ec 0c             	sub    $0xc,%esp
f011922c:	50                   	push   %eax
f011922d:	e8 ae 3c ff ff       	call   f010cee0 <kfree>
f0119232:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119235:	e8 40 2f ff ff       	call   f010c17a <pf_calculate_free_frames>
f011923a:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0119240:	74 17                	je     f0119259 <test_kheap_phys_addr+0xbb5>
f0119242:	83 ec 04             	sub    $0x4,%esp
f0119245:	68 88 1a 12 f0       	push   $0xf0121a88
f011924a:	68 71 09 00 00       	push   $0x971
f011924f:	68 76 1a 12 f0       	push   $0xf0121a76
f0119254:	e8 56 6f fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0119259:	e8 f0 17 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011925e:	89 c2                	mov    %eax,%edx
f0119260:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0119266:	29 c2                	sub    %eax,%edx
f0119268:	89 d0                	mov    %edx,%eax
f011926a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011926f:	74 17                	je     f0119288 <test_kheap_phys_addr+0xbe4>
f0119271:	83 ec 04             	sub    $0x4,%esp
f0119274:	68 f8 21 12 f0       	push   $0xf01221f8
f0119279:	68 72 09 00 00       	push   $0x972
f011927e:	68 76 1a 12 f0       	push   $0xf0121a76
f0119283:	e8 27 6f fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119288:	e8 c1 17 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011928d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119293:	e8 e2 2e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119298:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f011929e:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f01192a4:	83 ec 0c             	sub    $0xc,%esp
f01192a7:	50                   	push   %eax
f01192a8:	e8 33 3c ff ff       	call   f010cee0 <kfree>
f01192ad:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01192b0:	e8 c5 2e ff ff       	call   f010c17a <pf_calculate_free_frames>
f01192b5:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f01192bb:	74 17                	je     f01192d4 <test_kheap_phys_addr+0xc30>
f01192bd:	83 ec 04             	sub    $0x4,%esp
f01192c0:	68 88 1a 12 f0       	push   $0xf0121a88
f01192c5:	68 78 09 00 00       	push   $0x978
f01192ca:	68 76 1a 12 f0       	push   $0xf0121a76
f01192cf:	e8 db 6e fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01192d4:	e8 75 17 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f01192d9:	89 c2                	mov    %eax,%edx
f01192db:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01192e1:	29 c2                	sub    %eax,%edx
f01192e3:	89 d0                	mov    %edx,%eax
f01192e5:	3d 00 02 00 00       	cmp    $0x200,%eax
f01192ea:	74 17                	je     f0119303 <test_kheap_phys_addr+0xc5f>
f01192ec:	83 ec 04             	sub    $0x4,%esp
f01192ef:	68 f8 21 12 f0       	push   $0xf01221f8
f01192f4:	68 79 09 00 00       	push   $0x979
f01192f9:	68 76 1a 12 f0       	push   $0xf0121a76
f01192fe:	e8 ac 6e fe ff       	call   f01001af <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0119303:	e8 46 17 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119308:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011930e:	e8 67 2e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119313:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f0119319:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f011931f:	83 ec 0c             	sub    $0xc,%esp
f0119322:	50                   	push   %eax
f0119323:	e8 b8 3b ff ff       	call   f010cee0 <kfree>
f0119328:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011932b:	e8 4a 2e ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119330:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f0119336:	74 17                	je     f011934f <test_kheap_phys_addr+0xcab>
f0119338:	83 ec 04             	sub    $0x4,%esp
f011933b:	68 88 1a 12 f0       	push   $0xf0121a88
f0119340:	68 7f 09 00 00       	push   $0x97f
f0119345:	68 76 1a 12 f0       	push   $0xf0121a76
f011934a:	e8 60 6e fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011934f:	e8 fa 16 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119354:	89 c2                	mov    %eax,%edx
f0119356:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011935c:	29 c2                	sub    %eax,%edx
f011935e:	89 d0                	mov    %edx,%eax
f0119360:	3d 00 06 00 00       	cmp    $0x600,%eax
f0119365:	74 17                	je     f011937e <test_kheap_phys_addr+0xcda>
f0119367:	83 ec 04             	sub    $0x4,%esp
f011936a:	68 f8 21 12 f0       	push   $0xf01221f8
f011936f:	68 80 09 00 00       	push   $0x980
f0119374:	68 76 1a 12 f0       	push   $0xf0121a76
f0119379:	e8 31 6e fe ff       	call   f01001af <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f011937e:	89 e0                	mov    %esp,%eax
f0119380:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0119382:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0119389:	10 00 00 
f011938c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119391:	0f b6 d0             	movzbl %al,%edx
f0119394:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011939a:	01 d0                	add    %edx,%eax
f011939c:	48                   	dec    %eax
f011939d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01193a3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01193a9:	ba 00 00 00 00       	mov    $0x0,%edx
f01193ae:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01193b4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01193ba:	29 d0                	sub    %edx,%eax
f01193bc:	89 c1                	mov    %eax,%ecx
f01193be:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f01193c5:	10 00 00 
f01193c8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01193cd:	0f b6 c0             	movzbl %al,%eax
f01193d0:	c1 e0 04             	shl    $0x4,%eax
f01193d3:	89 c2                	mov    %eax,%edx
f01193d5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01193db:	01 d0                	add    %edx,%eax
f01193dd:	48                   	dec    %eax
f01193de:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f01193e4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01193ea:	ba 00 00 00 00       	mov    $0x0,%edx
f01193ef:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f01193f5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01193fb:	29 d0                	sub    %edx,%eax
f01193fd:	01 c8                	add    %ecx,%eax
f01193ff:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0119404:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f011940a:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0119411:	10 00 00 
f0119414:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119419:	0f b6 d0             	movzbl %al,%edx
f011941c:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0119422:	01 d0                	add    %edx,%eax
f0119424:	48                   	dec    %eax
f0119425:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011942b:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119431:	ba 00 00 00 00       	mov    $0x0,%edx
f0119436:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011943c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0119442:	29 d0                	sub    %edx,%eax
f0119444:	89 c1                	mov    %eax,%ecx
f0119446:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011944d:	10 00 00 
f0119450:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119455:	0f b6 c0             	movzbl %al,%eax
f0119458:	c1 e0 04             	shl    $0x4,%eax
f011945b:	89 c2                	mov    %eax,%edx
f011945d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0119463:	01 d0                	add    %edx,%eax
f0119465:	48                   	dec    %eax
f0119466:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011946c:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119472:	ba 00 00 00 00       	mov    $0x0,%edx
f0119477:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011947d:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0119483:	29 d0                	sub    %edx,%eax
f0119485:	01 c8                	add    %ecx,%eax
f0119487:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011948c:	c1 e8 0c             	shr    $0xc,%eax
f011948f:	89 c2                	mov    %eax,%edx
f0119491:	4a                   	dec    %edx
f0119492:	89 95 c4 fe ff ff    	mov    %edx,-0x13c(%ebp)
f0119498:	c1 e0 02             	shl    $0x2,%eax
f011949b:	8d 50 03             	lea    0x3(%eax),%edx
f011949e:	b8 10 00 00 00       	mov    $0x10,%eax
f01194a3:	48                   	dec    %eax
f01194a4:	01 d0                	add    %edx,%eax
f01194a6:	bf 10 00 00 00       	mov    $0x10,%edi
f01194ab:	ba 00 00 00 00       	mov    $0x0,%edx
f01194b0:	f7 f7                	div    %edi
f01194b2:	6b c0 10             	imul   $0x10,%eax,%eax
f01194b5:	29 c4                	sub    %eax,%esp
f01194b7:	89 e0                	mov    %esp,%eax
f01194b9:	83 c0 03             	add    $0x3,%eax
f01194bc:	c1 e8 02             	shr    $0x2,%eax
f01194bf:	c1 e0 02             	shl    $0x2,%eax
f01194c2:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
		i = 0;
f01194c8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f01194cf:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f01194d6:	eb 29                	jmp    f0119501 <test_kheap_phys_addr+0xe5d>
		{
			allPAs[i++] = kheap_physical_address(va);
f01194d8:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f01194db:	8d 43 01             	lea    0x1(%ebx),%eax
f01194de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01194e1:	83 ec 0c             	sub    $0xc,%esp
f01194e4:	ff 75 d8             	pushl  -0x28(%ebp)
f01194e7:	e8 66 3b ff ff       	call   f010d052 <kheap_physical_address>
f01194ec:	83 c4 10             	add    $0x10,%esp
f01194ef:	89 c2                	mov    %eax,%edx
f01194f1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01194f7:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PAGE_SIZE)
f01194fa:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0119501:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119504:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f011950a:	72 cc                	jb     f01194d8 <test_kheap_phys_addr+0xe34>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011950c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011950f:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		i = 0;
f0119515:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011951c:	c7 45 d8 00 00 00 f6 	movl   $0xf6000000,-0x28(%ebp)
f0119523:	e9 a5 00 00 00       	jmp    f01195cd <test_kheap_phys_addr+0xf29>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f0119528:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011952b:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f0119530:	83 ec 04             	sub    $0x4,%esp
f0119533:	8d 8d a4 fd ff ff    	lea    -0x25c(%ebp),%ecx
f0119539:	51                   	push   %ecx
f011953a:	52                   	push   %edx
f011953b:	50                   	push   %eax
f011953c:	e8 9a a6 fe ff       	call   f0103bdb <get_page_table>
f0119541:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0119544:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f011954a:	85 c0                	test   %eax,%eax
f011954c:	75 17                	jne    f0119565 <test_kheap_phys_addr+0xec1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011954e:	83 ec 04             	sub    $0x4,%esp
f0119551:	68 30 24 12 f0       	push   $0xf0122430
f0119556:	68 96 09 00 00       	push   $0x996
f011955b:	68 76 1a 12 f0       	push   $0xf0121a76
f0119560:	e8 4a 6c fe ff       	call   f01001af <_panic>

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0119565:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011956c:	eb 44                	jmp    f01195b2 <test_kheap_phys_addr+0xf0e>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f011956e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f0119574:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119577:	c1 e2 02             	shl    $0x2,%edx
f011957a:	01 d0                	add    %edx,%eax
f011957c:	8b 00                	mov    (%eax),%eax
f011957e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0119583:	89 c1                	mov    %eax,%ecx
f0119585:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011958b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011958e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0119591:	39 c1                	cmp    %eax,%ecx
f0119593:	74 17                	je     f01195ac <test_kheap_phys_addr+0xf08>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0119595:	83 ec 04             	sub    $0x4,%esp
f0119598:	68 89 24 12 f0       	push   $0xf0122489
f011959d:	68 9d 09 00 00       	push   $0x99d
f01195a2:	68 76 1a 12 f0       	push   $0xf0121a76
f01195a7:	e8 03 6c fe ff       	call   f01001af <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01195ac:	ff 45 d4             	incl   -0x2c(%ebp)
f01195af:	ff 45 e4             	incl   -0x1c(%ebp)
f01195b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01195b5:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f01195bb:	7d 09                	jge    f01195c6 <test_kheap_phys_addr+0xf22>
f01195bd:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f01195c4:	7e a8                	jle    f011956e <test_kheap_phys_addr+0xeca>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f01195c6:	81 45 d8 00 00 40 00 	addl   $0x400000,-0x28(%ebp)
f01195cd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01195d0:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f01195d6:	0f 82 4c ff ff ff    	jb     f0119528 <test_kheap_phys_addr+0xe84>
f01195dc:	89 f4                	mov    %esi,%esp
				}
			}
		}
	}

	cprintf("\b\b\b80%");
f01195de:	83 ec 0c             	sub    $0xc,%esp
f01195e1:	68 f9 1b 12 f0       	push   $0xf0121bf9
f01195e6:	e8 19 dc fe ff       	call   f0107204 <cprintf>
f01195eb:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f01195ee:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f01195f5:	10 00 00 
f01195f8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01195fd:	0f b6 d0             	movzbl %al,%edx
f0119600:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0119606:	01 d0                	add    %edx,%eax
f0119608:	48                   	dec    %eax
f0119609:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011960f:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119615:	ba 00 00 00 00       	mov    $0x0,%edx
f011961a:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0119620:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0119626:	29 d0                	sub    %edx,%eax
f0119628:	89 c1                	mov    %eax,%ecx
f011962a:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0119631:	10 00 00 
f0119634:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119639:	0f b6 c0             	movzbl %al,%eax
f011963c:	c1 e0 04             	shl    $0x4,%eax
f011963f:	89 c2                	mov    %eax,%edx
f0119641:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0119647:	01 d0                	add    %edx,%eax
f0119649:	48                   	dec    %eax
f011964a:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f0119650:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119656:	ba 00 00 00 00       	mov    $0x0,%edx
f011965b:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f0119661:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0119667:	29 d0                	sub    %edx,%eax
f0119669:	01 c8                	add    %ecx,%eax
f011966b:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0119670:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0119676:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011967d:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119683:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119686:	eb 0a                	jmp    f0119692 <test_kheap_phys_addr+0xfee>
		{
			i++;
f0119688:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011968b:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0119692:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f0119699:	76 ed                	jbe    f0119688 <test_kheap_phys_addr+0xfe4>
		{
			i++;
		}
		int ii = i ;
f011969b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011969e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		i = 0;
f01196a4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f01196ab:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01196b1:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01196b4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f01196bb:	e9 ce 00 00 00       	jmp    f011978e <test_kheap_phys_addr+0x10ea>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
f01196c0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01196c3:	89 c1                	mov    %eax,%ecx
f01196c5:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f01196ca:	83 ec 04             	sub    $0x4,%esp
f01196cd:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f01196d3:	52                   	push   %edx
f01196d4:	51                   	push   %ecx
f01196d5:	50                   	push   %eax
f01196d6:	e8 00 a5 fe ff       	call   f0103bdb <get_page_table>
f01196db:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f01196de:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f01196e4:	85 c0                	test   %eax,%eax
f01196e6:	75 17                	jne    f01196ff <test_kheap_phys_addr+0x105b>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f01196e8:	83 ec 04             	sub    $0x4,%esp
f01196eb:	68 30 24 12 f0       	push   $0xf0122430
f01196f0:	68 b8 09 00 00       	push   $0x9b8
f01196f5:	68 76 1a 12 f0       	push   $0xf0121a76
f01196fa:	e8 b0 6a fe ff       	call   f01001af <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f01196ff:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0119706:	eb 67                	jmp    f011976f <test_kheap_phys_addr+0x10cb>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f0119708:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011970b:	c1 e0 0c             	shl    $0xc,%eax
f011970e:	89 c2                	mov    %eax,%edx
f0119710:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0119716:	01 d0                	add    %edx,%eax
f0119718:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f011971e:	83 ec 0c             	sub    $0xc,%esp
f0119721:	ff b5 a0 fe ff ff    	pushl  -0x160(%ebp)
f0119727:	e8 26 39 ff ff       	call   f010d052 <kheap_physical_address>
f011972c:	83 c4 10             	add    $0x10,%esp
f011972f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f0119735:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f011973b:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011973e:	c1 e2 02             	shl    $0x2,%edx
f0119741:	01 d0                	add    %edx,%eax
f0119743:	8b 00                	mov    (%eax),%eax
f0119745:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011974a:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0119750:	74 17                	je     f0119769 <test_kheap_phys_addr+0x10c5>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0119752:	83 ec 04             	sub    $0x4,%esp
f0119755:	68 89 24 12 f0       	push   $0xf0122489
f011975a:	68 c2 09 00 00       	push   $0x9c2
f011975f:	68 76 1a 12 f0       	push   $0xf0121a76
f0119764:	e8 46 6a fe ff       	call   f01001af <_panic>
			get_page_table(ptr_page_directory, (void*)(uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0119769:	ff 45 cc             	incl   -0x34(%ebp)
f011976c:	ff 45 e4             	incl   -0x1c(%ebp)
f011976f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119772:	3b 85 a4 fe ff ff    	cmp    -0x15c(%ebp),%eax
f0119778:	7d 09                	jge    f0119783 <test_kheap_phys_addr+0x10df>
f011977a:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0119781:	7e 85                	jle    f0119708 <test_kheap_phys_addr+0x1064>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0119783:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f011978a:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011978e:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0119792:	0f 88 28 ff ff ff    	js     f01196c0 <test_kheap_phys_addr+0x101c>
f0119798:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011979c:	7f 0d                	jg     f01197ab <test_kheap_phys_addr+0x1107>
f011979e:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f01197a5:	0f 86 15 ff ff ff    	jbe    f01196c0 <test_kheap_phys_addr+0x101c>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f01197ab:	83 ec 0c             	sub    $0xc,%esp
f01197ae:	68 52 1c 12 f0       	push   $0xf0121c52
f01197b3:	e8 4c da fe ff       	call   f0107204 <cprintf>
f01197b8:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f01197bb:	83 ec 0c             	sub    $0xc,%esp
f01197be:	68 dc 24 12 f0       	push   $0xf01224dc
f01197c3:	e8 3c da fe ff       	call   f0107204 <cprintf>
f01197c8:	83 c4 10             	add    $0x10,%esp

	return 1;
f01197cb:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01197d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01197d3:	5b                   	pop    %ebx
f01197d4:	5e                   	pop    %esi
f01197d5:	5f                   	pop    %edi
f01197d6:	5d                   	pop    %ebp
f01197d7:	c3                   	ret    

f01197d8 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f01197d8:	55                   	push   %ebp
f01197d9:	89 e5                	mov    %esp,%ebp
f01197db:	57                   	push   %edi
f01197dc:	56                   	push   %esi
f01197dd:	53                   	push   %ebx
f01197de:	81 ec 3c 02 00 00    	sub    $0x23c,%esp
f01197e4:	89 e0                	mov    %esp,%eax
f01197e6:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f01197e8:	83 ec 0c             	sub    $0xc,%esp
f01197eb:	68 b8 19 12 f0       	push   $0xf01219b8
f01197f0:	e8 0f da fe ff       	call   f0107204 <cprintf>
f01197f5:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01197f8:	83 ec 0c             	sub    $0xc,%esp
f01197fb:	68 e8 19 12 f0       	push   $0xf01219e8
f0119800:	e8 ff d9 fe ff       	call   f0107204 <cprintf>
f0119805:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119808:	83 ec 0c             	sub    $0xc,%esp
f011980b:	68 b8 19 12 f0       	push   $0xf01219b8
f0119810:	e8 ef d9 fe ff       	call   f0107204 <cprintf>
f0119815:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0119818:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f011981c:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f0119820:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f0119826:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f011982c:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f0119833:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011983a:	e8 0f 12 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011983f:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0119842:	8d 95 60 fe ff ff    	lea    -0x1a0(%ebp),%edx
f0119848:	b9 14 00 00 00       	mov    $0x14,%ecx
f011984d:	b8 00 00 00 00       	mov    $0x0,%eax
f0119852:	89 d7                	mov    %edx,%edi
f0119854:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0119856:	8d 95 10 fe ff ff    	lea    -0x1f0(%ebp),%edx
f011985c:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119861:	b8 00 00 00 00       	mov    $0x0,%eax
f0119866:	89 d7                	mov    %edx,%edi
f0119868:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011986a:	8d 95 c0 fd ff ff    	lea    -0x240(%ebp),%edx
f0119870:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119875:	b8 00 00 00 00       	mov    $0x0,%eax
f011987a:	89 d7                	mov    %edx,%edi
f011987c:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011987e:	e8 cb 11 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119883:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119886:	e8 ef 28 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011988b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011988e:	83 ec 0c             	sub    $0xc,%esp
f0119891:	68 00 fc 1f 00       	push   $0x1ffc00
f0119896:	e8 fa 35 ff ff       	call   f010ce95 <kmalloc>
f011989b:	83 c4 10             	add    $0x10,%esp
f011989e:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01198a4:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f01198aa:	89 c1                	mov    %eax,%ecx
f01198ac:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f01198b3:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01198b8:	0f b6 d0             	movzbl %al,%edx
f01198bb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01198be:	01 d0                	add    %edx,%eax
f01198c0:	48                   	dec    %eax
f01198c1:	89 45 b0             	mov    %eax,-0x50(%ebp)
f01198c4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01198c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01198cc:	f7 75 b4             	divl   -0x4c(%ebp)
f01198cf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01198d2:	29 d0                	sub    %edx,%eax
f01198d4:	89 c3                	mov    %eax,%ebx
f01198d6:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f01198dd:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01198e2:	0f b6 c0             	movzbl %al,%eax
f01198e5:	c1 e0 04             	shl    $0x4,%eax
f01198e8:	89 c2                	mov    %eax,%edx
f01198ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01198ed:	01 d0                	add    %edx,%eax
f01198ef:	48                   	dec    %eax
f01198f0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01198f3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01198f6:	ba 00 00 00 00       	mov    $0x0,%edx
f01198fb:	f7 75 ac             	divl   -0x54(%ebp)
f01198fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119901:	29 d0                	sub    %edx,%eax
f0119903:	01 d8                	add    %ebx,%eax
f0119905:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011990a:	39 c1                	cmp    %eax,%ecx
f011990c:	74 17                	je     f0119925 <test_kheap_virt_addr+0x14d>
f011990e:	83 ec 04             	sub    $0x4,%esp
f0119911:	68 54 1b 12 f0       	push   $0xf0121b54
f0119916:	68 ef 09 00 00       	push   $0x9ef
f011991b:	68 76 1a 12 f0       	push   $0xf0121a76
f0119920:	e8 8a 68 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119925:	e8 50 28 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011992a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011992d:	74 17                	je     f0119946 <test_kheap_virt_addr+0x16e>
f011992f:	83 ec 04             	sub    $0x4,%esp
f0119932:	68 88 1a 12 f0       	push   $0xf0121a88
f0119937:	68 f0 09 00 00       	push   $0x9f0
f011993c:	68 76 1a 12 f0       	push   $0xf0121a76
f0119941:	e8 69 68 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119946:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119949:	e8 00 11 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011994e:	29 c3                	sub    %eax,%ebx
f0119950:	89 d8                	mov    %ebx,%eax
f0119952:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119957:	74 17                	je     f0119970 <test_kheap_virt_addr+0x198>
f0119959:	83 ec 04             	sub    $0x4,%esp
f011995c:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119961:	68 f1 09 00 00       	push   $0x9f1
f0119966:	68 76 1a 12 f0       	push   $0xf0121a76
f011996b:	e8 3f 68 fe ff       	call   f01001af <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119970:	e8 d9 10 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119975:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119978:	e8 fd 27 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011997d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0119980:	83 ec 0c             	sub    $0xc,%esp
f0119983:	68 00 fc 1f 00       	push   $0x1ffc00
f0119988:	e8 08 35 ff ff       	call   f010ce95 <kmalloc>
f011998d:	83 c4 10             	add    $0x10,%esp
f0119990:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119996:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f011999c:	89 c1                	mov    %eax,%ecx
f011999e:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01199a5:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01199aa:	0f b6 d0             	movzbl %al,%edx
f01199ad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01199b0:	01 d0                	add    %edx,%eax
f01199b2:	48                   	dec    %eax
f01199b3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01199b6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01199b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01199be:	f7 75 a4             	divl   -0x5c(%ebp)
f01199c1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01199c4:	29 d0                	sub    %edx,%eax
f01199c6:	89 c3                	mov    %eax,%ebx
f01199c8:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01199cf:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f01199d4:	0f b6 c0             	movzbl %al,%eax
f01199d7:	c1 e0 04             	shl    $0x4,%eax
f01199da:	89 c2                	mov    %eax,%edx
f01199dc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01199df:	01 d0                	add    %edx,%eax
f01199e1:	48                   	dec    %eax
f01199e2:	89 45 98             	mov    %eax,-0x68(%ebp)
f01199e5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01199e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01199ed:	f7 75 9c             	divl   -0x64(%ebp)
f01199f0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01199f3:	29 d0                	sub    %edx,%eax
f01199f5:	01 d8                	add    %ebx,%eax
f01199f7:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01199fc:	39 c1                	cmp    %eax,%ecx
f01199fe:	74 17                	je     f0119a17 <test_kheap_virt_addr+0x23f>
f0119a00:	83 ec 04             	sub    $0x4,%esp
f0119a03:	68 54 1b 12 f0       	push   $0xf0121b54
f0119a08:	68 f7 09 00 00       	push   $0x9f7
f0119a0d:	68 76 1a 12 f0       	push   $0xf0121a76
f0119a12:	e8 98 67 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a17:	e8 5e 27 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119a1c:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119a1f:	74 17                	je     f0119a38 <test_kheap_virt_addr+0x260>
f0119a21:	83 ec 04             	sub    $0x4,%esp
f0119a24:	68 88 1a 12 f0       	push   $0xf0121a88
f0119a29:	68 f8 09 00 00       	push   $0x9f8
f0119a2e:	68 76 1a 12 f0       	push   $0xf0121a76
f0119a33:	e8 77 67 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119a38:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119a3b:	e8 0e 10 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119a40:	29 c3                	sub    %eax,%ebx
f0119a42:	89 d8                	mov    %ebx,%eax
f0119a44:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119a49:	74 17                	je     f0119a62 <test_kheap_virt_addr+0x28a>
f0119a4b:	83 ec 04             	sub    $0x4,%esp
f0119a4e:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119a53:	68 f9 09 00 00       	push   $0x9f9
f0119a58:	68 76 1a 12 f0       	push   $0xf0121a76
f0119a5d:	e8 4d 67 fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119a62:	e8 e7 0f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119a67:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a6a:	e8 0b 27 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119a6f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0119a72:	83 ec 0c             	sub    $0xc,%esp
f0119a75:	68 00 08 00 00       	push   $0x800
f0119a7a:	e8 16 34 ff ff       	call   f010ce95 <kmalloc>
f0119a7f:	83 c4 10             	add    $0x10,%esp
f0119a82:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119a88:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0119a8e:	89 c1                	mov    %eax,%ecx
f0119a90:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0119a97:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119a9c:	0f b6 d0             	movzbl %al,%edx
f0119a9f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0119aa2:	01 d0                	add    %edx,%eax
f0119aa4:	48                   	dec    %eax
f0119aa5:	89 45 90             	mov    %eax,-0x70(%ebp)
f0119aa8:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119aab:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ab0:	f7 75 94             	divl   -0x6c(%ebp)
f0119ab3:	8b 45 90             	mov    -0x70(%ebp),%eax
f0119ab6:	29 d0                	sub    %edx,%eax
f0119ab8:	89 c3                	mov    %eax,%ebx
f0119aba:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119ac1:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119ac6:	0f b6 c0             	movzbl %al,%eax
f0119ac9:	c1 e0 04             	shl    $0x4,%eax
f0119acc:	89 c2                	mov    %eax,%edx
f0119ace:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0119ad1:	01 d0                	add    %edx,%eax
f0119ad3:	48                   	dec    %eax
f0119ad4:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119ad7:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119ada:	ba 00 00 00 00       	mov    $0x0,%edx
f0119adf:	f7 75 8c             	divl   -0x74(%ebp)
f0119ae2:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119ae5:	29 d0                	sub    %edx,%eax
f0119ae7:	01 d8                	add    %ebx,%eax
f0119ae9:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0119aee:	39 c1                	cmp    %eax,%ecx
f0119af0:	74 17                	je     f0119b09 <test_kheap_virt_addr+0x331>
f0119af2:	83 ec 04             	sub    $0x4,%esp
f0119af5:	68 54 1b 12 f0       	push   $0xf0121b54
f0119afa:	68 ff 09 00 00       	push   $0x9ff
f0119aff:	68 76 1a 12 f0       	push   $0xf0121a76
f0119b04:	e8 a6 66 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b09:	e8 6c 26 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119b0e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119b11:	74 17                	je     f0119b2a <test_kheap_virt_addr+0x352>
f0119b13:	83 ec 04             	sub    $0x4,%esp
f0119b16:	68 88 1a 12 f0       	push   $0xf0121a88
f0119b1b:	68 00 0a 00 00       	push   $0xa00
f0119b20:	68 76 1a 12 f0       	push   $0xf0121a76
f0119b25:	e8 85 66 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119b2a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119b2d:	e8 1c 0f ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119b32:	29 c3                	sub    %eax,%ebx
f0119b34:	89 d8                	mov    %ebx,%eax
f0119b36:	83 f8 01             	cmp    $0x1,%eax
f0119b39:	74 17                	je     f0119b52 <test_kheap_virt_addr+0x37a>
f0119b3b:	83 ec 04             	sub    $0x4,%esp
f0119b3e:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119b43:	68 01 0a 00 00       	push   $0xa01
f0119b48:	68 76 1a 12 f0       	push   $0xf0121a76
f0119b4d:	e8 5d 66 fe ff       	call   f01001af <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0119b52:	e8 f7 0e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119b57:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119b5a:	e8 1b 26 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119b5f:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0119b62:	83 ec 0c             	sub    $0xc,%esp
f0119b65:	68 00 08 00 00       	push   $0x800
f0119b6a:	e8 26 33 ff ff       	call   f010ce95 <kmalloc>
f0119b6f:	83 c4 10             	add    $0x10,%esp
f0119b72:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119b78:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0119b7e:	89 c1                	mov    %eax,%ecx
f0119b80:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0119b87:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119b8c:	0f b6 d0             	movzbl %al,%edx
f0119b8f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0119b92:	01 d0                	add    %edx,%eax
f0119b94:	48                   	dec    %eax
f0119b95:	89 45 80             	mov    %eax,-0x80(%ebp)
f0119b98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119b9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ba0:	f7 75 84             	divl   -0x7c(%ebp)
f0119ba3:	8b 45 80             	mov    -0x80(%ebp),%eax
f0119ba6:	29 d0                	sub    %edx,%eax
f0119ba8:	89 c3                	mov    %eax,%ebx
f0119baa:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0119bb1:	10 00 00 
f0119bb4:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119bb9:	0f b6 c0             	movzbl %al,%eax
f0119bbc:	c1 e0 04             	shl    $0x4,%eax
f0119bbf:	89 c2                	mov    %eax,%edx
f0119bc1:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0119bc7:	01 d0                	add    %edx,%eax
f0119bc9:	48                   	dec    %eax
f0119bca:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0119bd0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119bd6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119bdb:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0119be1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0119be7:	29 d0                	sub    %edx,%eax
f0119be9:	01 d8                	add    %ebx,%eax
f0119beb:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0119bf0:	39 c1                	cmp    %eax,%ecx
f0119bf2:	74 17                	je     f0119c0b <test_kheap_virt_addr+0x433>
f0119bf4:	83 ec 04             	sub    $0x4,%esp
f0119bf7:	68 54 1b 12 f0       	push   $0xf0121b54
f0119bfc:	68 07 0a 00 00       	push   $0xa07
f0119c01:	68 76 1a 12 f0       	push   $0xf0121a76
f0119c06:	e8 a4 65 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119c0b:	e8 6a 25 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119c10:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119c13:	74 17                	je     f0119c2c <test_kheap_virt_addr+0x454>
f0119c15:	83 ec 04             	sub    $0x4,%esp
f0119c18:	68 88 1a 12 f0       	push   $0xf0121a88
f0119c1d:	68 08 0a 00 00       	push   $0xa08
f0119c22:	68 76 1a 12 f0       	push   $0xf0121a76
f0119c27:	e8 83 65 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119c2c:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119c2f:	e8 1a 0e ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119c34:	29 c3                	sub    %eax,%ebx
f0119c36:	89 d8                	mov    %ebx,%eax
f0119c38:	83 f8 01             	cmp    $0x1,%eax
f0119c3b:	74 17                	je     f0119c54 <test_kheap_virt_addr+0x47c>
f0119c3d:	83 ec 04             	sub    $0x4,%esp
f0119c40:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119c45:	68 09 0a 00 00       	push   $0xa09
f0119c4a:	68 76 1a 12 f0       	push   $0xf0121a76
f0119c4f:	e8 5b 65 fe ff       	call   f01001af <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0119c54:	e8 f5 0d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119c59:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119c5c:	e8 19 25 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119c61:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0119c64:	83 ec 0c             	sub    $0xc,%esp
f0119c67:	68 00 1c 00 00       	push   $0x1c00
f0119c6c:	e8 24 32 ff ff       	call   f010ce95 <kmalloc>
f0119c71:	83 c4 10             	add    $0x10,%esp
f0119c74:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119c7a:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0119c80:	89 c1                	mov    %eax,%ecx
f0119c82:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0119c89:	10 00 00 
f0119c8c:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119c91:	0f b6 d0             	movzbl %al,%edx
f0119c94:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119c9a:	01 d0                	add    %edx,%eax
f0119c9c:	48                   	dec    %eax
f0119c9d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0119ca3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119ca9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cae:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0119cb4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119cba:	29 d0                	sub    %edx,%eax
f0119cbc:	89 c3                	mov    %eax,%ebx
f0119cbe:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119cc5:	10 00 00 
f0119cc8:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119ccd:	0f b6 c0             	movzbl %al,%eax
f0119cd0:	c1 e0 04             	shl    $0x4,%eax
f0119cd3:	89 c2                	mov    %eax,%edx
f0119cd5:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119cdb:	01 d0                	add    %edx,%eax
f0119cdd:	48                   	dec    %eax
f0119cde:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119ce4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119cea:	ba 00 00 00 00       	mov    $0x0,%edx
f0119cef:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119cf5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119cfb:	29 d0                	sub    %edx,%eax
f0119cfd:	01 d8                	add    %ebx,%eax
f0119cff:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0119d04:	39 c1                	cmp    %eax,%ecx
f0119d06:	74 17                	je     f0119d1f <test_kheap_virt_addr+0x547>
f0119d08:	83 ec 04             	sub    $0x4,%esp
f0119d0b:	68 54 1b 12 f0       	push   $0xf0121b54
f0119d10:	68 0f 0a 00 00       	push   $0xa0f
f0119d15:	68 76 1a 12 f0       	push   $0xf0121a76
f0119d1a:	e8 90 64 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119d1f:	e8 56 24 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119d24:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119d27:	74 17                	je     f0119d40 <test_kheap_virt_addr+0x568>
f0119d29:	83 ec 04             	sub    $0x4,%esp
f0119d2c:	68 88 1a 12 f0       	push   $0xf0121a88
f0119d31:	68 10 0a 00 00       	push   $0xa10
f0119d36:	68 76 1a 12 f0       	push   $0xf0121a76
f0119d3b:	e8 6f 64 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119d40:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119d43:	e8 06 0d ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119d48:	29 c3                	sub    %eax,%ebx
f0119d4a:	89 d8                	mov    %ebx,%eax
f0119d4c:	83 f8 02             	cmp    $0x2,%eax
f0119d4f:	74 17                	je     f0119d68 <test_kheap_virt_addr+0x590>
f0119d51:	83 ec 04             	sub    $0x4,%esp
f0119d54:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119d59:	68 11 0a 00 00       	push   $0xa11
f0119d5e:	68 76 1a 12 f0       	push   $0xf0121a76
f0119d63:	e8 47 64 fe ff       	call   f01001af <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d68:	e8 e1 0c ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119d6d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d70:	e8 05 24 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119d75:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0119d78:	83 ec 0c             	sub    $0xc,%esp
f0119d7b:	68 00 fc 2f 00       	push   $0x2ffc00
f0119d80:	e8 10 31 ff ff       	call   f010ce95 <kmalloc>
f0119d85:	83 c4 10             	add    $0x10,%esp
f0119d88:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119d8e:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0119d94:	89 c1                	mov    %eax,%ecx
f0119d96:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0119d9d:	10 00 00 
f0119da0:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119da5:	0f b6 d0             	movzbl %al,%edx
f0119da8:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119dae:	01 d0                	add    %edx,%eax
f0119db0:	48                   	dec    %eax
f0119db1:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119db7:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119dbd:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dc2:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0119dc8:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119dce:	29 d0                	sub    %edx,%eax
f0119dd0:	89 c3                	mov    %eax,%ebx
f0119dd2:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0119dd9:	10 00 00 
f0119ddc:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119de1:	0f b6 c0             	movzbl %al,%eax
f0119de4:	c1 e0 04             	shl    $0x4,%eax
f0119de7:	89 c2                	mov    %eax,%edx
f0119de9:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119def:	01 d0                	add    %edx,%eax
f0119df1:	48                   	dec    %eax
f0119df2:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0119df8:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119dfe:	ba 00 00 00 00       	mov    $0x0,%edx
f0119e03:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0119e09:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119e0f:	29 d0                	sub    %edx,%eax
f0119e11:	01 d8                	add    %ebx,%eax
f0119e13:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0119e18:	39 c1                	cmp    %eax,%ecx
f0119e1a:	74 17                	je     f0119e33 <test_kheap_virt_addr+0x65b>
f0119e1c:	83 ec 04             	sub    $0x4,%esp
f0119e1f:	68 54 1b 12 f0       	push   $0xf0121b54
f0119e24:	68 17 0a 00 00       	push   $0xa17
f0119e29:	68 76 1a 12 f0       	push   $0xf0121a76
f0119e2e:	e8 7c 63 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e33:	e8 42 23 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119e38:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119e3b:	74 17                	je     f0119e54 <test_kheap_virt_addr+0x67c>
f0119e3d:	83 ec 04             	sub    $0x4,%esp
f0119e40:	68 88 1a 12 f0       	push   $0xf0121a88
f0119e45:	68 18 0a 00 00       	push   $0xa18
f0119e4a:	68 76 1a 12 f0       	push   $0xf0121a76
f0119e4f:	e8 5b 63 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119e54:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119e57:	e8 f2 0b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119e5c:	29 c3                	sub    %eax,%ebx
f0119e5e:	89 d8                	mov    %ebx,%eax
f0119e60:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119e65:	74 17                	je     f0119e7e <test_kheap_virt_addr+0x6a6>
f0119e67:	83 ec 04             	sub    $0x4,%esp
f0119e6a:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119e6f:	68 19 0a 00 00       	push   $0xa19
f0119e74:	68 76 1a 12 f0       	push   $0xf0121a76
f0119e79:	e8 31 63 fe ff       	call   f01001af <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0119e7e:	e8 cb 0b ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119e83:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e86:	e8 ef 22 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119e8b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0119e8e:	83 ec 0c             	sub    $0xc,%esp
f0119e91:	68 00 fc 5f 00       	push   $0x5ffc00
f0119e96:	e8 fa 2f ff ff       	call   f010ce95 <kmalloc>
f0119e9b:	83 c4 10             	add    $0x10,%esp
f0119e9e:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119ea4:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0119eaa:	89 c1                	mov    %eax,%ecx
f0119eac:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0119eb3:	10 00 00 
f0119eb6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119ebb:	0f b6 d0             	movzbl %al,%edx
f0119ebe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119ec4:	01 d0                	add    %edx,%eax
f0119ec6:	48                   	dec    %eax
f0119ec7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0119ecd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119ed3:	ba 00 00 00 00       	mov    $0x0,%edx
f0119ed8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0119ede:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119ee4:	29 d0                	sub    %edx,%eax
f0119ee6:	89 c3                	mov    %eax,%ebx
f0119ee8:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0119eef:	10 00 00 
f0119ef2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119ef7:	0f b6 c0             	movzbl %al,%eax
f0119efa:	c1 e0 04             	shl    $0x4,%eax
f0119efd:	89 c2                	mov    %eax,%edx
f0119eff:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119f05:	01 d0                	add    %edx,%eax
f0119f07:	48                   	dec    %eax
f0119f08:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0119f0e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119f14:	ba 00 00 00 00       	mov    $0x0,%edx
f0119f19:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0119f1f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119f25:	29 d0                	sub    %edx,%eax
f0119f27:	01 d8                	add    %ebx,%eax
f0119f29:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0119f2e:	39 c1                	cmp    %eax,%ecx
f0119f30:	74 17                	je     f0119f49 <test_kheap_virt_addr+0x771>
f0119f32:	83 ec 04             	sub    $0x4,%esp
f0119f35:	68 54 1b 12 f0       	push   $0xf0121b54
f0119f3a:	68 1f 0a 00 00       	push   $0xa1f
f0119f3f:	68 76 1a 12 f0       	push   $0xf0121a76
f0119f44:	e8 66 62 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f49:	e8 2c 22 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119f4e:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0119f51:	74 17                	je     f0119f6a <test_kheap_virt_addr+0x792>
f0119f53:	83 ec 04             	sub    $0x4,%esp
f0119f56:	68 88 1a 12 f0       	push   $0xf0121a88
f0119f5b:	68 20 0a 00 00       	push   $0xa20
f0119f60:	68 76 1a 12 f0       	push   $0xf0121a76
f0119f65:	e8 45 62 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0119f6a:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0119f6d:	e8 dc 0a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119f72:	29 c3                	sub    %eax,%ebx
f0119f74:	89 d8                	mov    %ebx,%eax
f0119f76:	3d 00 06 00 00       	cmp    $0x600,%eax
f0119f7b:	74 17                	je     f0119f94 <test_kheap_virt_addr+0x7bc>
f0119f7d:	83 ec 04             	sub    $0x4,%esp
f0119f80:	68 f0 1a 12 f0       	push   $0xf0121af0
f0119f85:	68 21 0a 00 00       	push   $0xa21
f0119f8a:	68 76 1a 12 f0       	push   $0xf0121a76
f0119f8f:	e8 1b 62 fe ff       	call   f01001af <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0119f94:	e8 b5 0a ff ff       	call   f010aa4e <sys_calculate_free_frames>
f0119f99:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f9c:	e8 d9 21 ff ff       	call   f010c17a <pf_calculate_free_frames>
f0119fa1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0119fa4:	83 ec 0c             	sub    $0xc,%esp
f0119fa7:	68 00 38 00 00       	push   $0x3800
f0119fac:	e8 e4 2e ff ff       	call   f010ce95 <kmalloc>
f0119fb1:	83 c4 10             	add    $0x10,%esp
f0119fb4:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0119fba:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0119fc0:	89 c1                	mov    %eax,%ecx
f0119fc2:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0119fc9:	10 00 00 
f0119fcc:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f0119fd1:	0f b6 d0             	movzbl %al,%edx
f0119fd4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119fda:	01 d0                	add    %edx,%eax
f0119fdc:	48                   	dec    %eax
f0119fdd:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0119fe3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119fe9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fee:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0119ff4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119ffa:	29 d0                	sub    %edx,%eax
f0119ffc:	89 c3                	mov    %eax,%ebx
f0119ffe:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011a005:	10 00 00 
f011a008:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a00d:	0f b6 c0             	movzbl %al,%eax
f011a010:	c1 e0 04             	shl    $0x4,%eax
f011a013:	89 c2                	mov    %eax,%edx
f011a015:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a01b:	01 d0                	add    %edx,%eax
f011a01d:	48                   	dec    %eax
f011a01e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011a024:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a02a:	ba 00 00 00 00       	mov    $0x0,%edx
f011a02f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011a035:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a03b:	29 d0                	sub    %edx,%eax
f011a03d:	01 d8                	add    %ebx,%eax
f011a03f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011a044:	39 c1                	cmp    %eax,%ecx
f011a046:	74 17                	je     f011a05f <test_kheap_virt_addr+0x887>
f011a048:	83 ec 04             	sub    $0x4,%esp
f011a04b:	68 54 1b 12 f0       	push   $0xf0121b54
f011a050:	68 27 0a 00 00       	push   $0xa27
f011a055:	68 76 1a 12 f0       	push   $0xf0121a76
f011a05a:	e8 50 61 fe ff       	call   f01001af <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a05f:	e8 16 21 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a064:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011a067:	74 17                	je     f011a080 <test_kheap_virt_addr+0x8a8>
f011a069:	83 ec 04             	sub    $0x4,%esp
f011a06c:	68 88 1a 12 f0       	push   $0xf0121a88
f011a071:	68 28 0a 00 00       	push   $0xa28
f011a076:	68 76 1a 12 f0       	push   $0xf0121a76
f011a07b:	e8 2f 61 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a080:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f011a083:	e8 c6 09 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a088:	29 c3                	sub    %eax,%ebx
f011a08a:	89 d8                	mov    %ebx,%eax
f011a08c:	83 f8 04             	cmp    $0x4,%eax
f011a08f:	74 17                	je     f011a0a8 <test_kheap_virt_addr+0x8d0>
f011a091:	83 ec 04             	sub    $0x4,%esp
f011a094:	68 f0 1a 12 f0       	push   $0xf0121af0
f011a099:	68 29 0a 00 00       	push   $0xa29
f011a09e:	68 76 1a 12 f0       	push   $0xf0121a76
f011a0a3:	e8 07 61 fe ff       	call   f01001af <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE] ;
f011a0a8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011a0af:	10 00 00 
f011a0b2:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a0b7:	0f b6 d0             	movzbl %al,%edx
f011a0ba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011a0c0:	01 d0                	add    %edx,%eax
f011a0c2:	48                   	dec    %eax
f011a0c3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011a0c9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a0cf:	ba 00 00 00 00       	mov    $0x0,%edx
f011a0d4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011a0da:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011a0e0:	29 d0                	sub    %edx,%eax
f011a0e2:	89 c1                	mov    %eax,%ecx
f011a0e4:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011a0eb:	10 00 00 
f011a0ee:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a0f3:	0f b6 c0             	movzbl %al,%eax
f011a0f6:	c1 e0 04             	shl    $0x4,%eax
f011a0f9:	89 c2                	mov    %eax,%edx
f011a0fb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011a101:	01 d0                	add    %edx,%eax
f011a103:	48                   	dec    %eax
f011a104:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011a10a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a110:	ba 00 00 00 00       	mov    $0x0,%edx
f011a115:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011a11b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011a121:	29 d0                	sub    %edx,%eax
f011a123:	01 c8                	add    %ecx,%eax
f011a125:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011a12a:	c1 e8 0c             	shr    $0xc,%eax
f011a12d:	89 c2                	mov    %eax,%edx
f011a12f:	4a                   	dec    %edx
f011a130:	89 95 24 ff ff ff    	mov    %edx,-0xdc(%ebp)
f011a136:	c1 e0 02             	shl    $0x2,%eax
f011a139:	8d 50 03             	lea    0x3(%eax),%edx
f011a13c:	b8 10 00 00 00       	mov    $0x10,%eax
f011a141:	48                   	dec    %eax
f011a142:	01 d0                	add    %edx,%eax
f011a144:	bf 10 00 00 00       	mov    $0x10,%edi
f011a149:	ba 00 00 00 00       	mov    $0x0,%edx
f011a14e:	f7 f7                	div    %edi
f011a150:	6b c0 10             	imul   $0x10,%eax,%eax
f011a153:	29 c4                	sub    %eax,%esp
f011a155:	89 e0                	mov    %esp,%eax
f011a157:	83 c0 03             	add    $0x3,%eax
f011a15a:	c1 e8 02             	shr    $0x2,%eax
f011a15d:	c1 e0 02             	shl    $0x2,%eax
f011a160:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+INITIAL_KHEAB_ALLOCATIONS)/PAGE_SIZE ;
f011a166:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a16d:	10 00 00 
f011a170:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a175:	0f b6 d0             	movzbl %al,%edx
f011a178:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a17e:	01 d0                	add    %edx,%eax
f011a180:	48                   	dec    %eax
f011a181:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a187:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a18d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a192:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a198:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a19e:	29 d0                	sub    %edx,%eax
f011a1a0:	89 c1                	mov    %eax,%ecx
f011a1a2:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a1a9:	10 00 00 
f011a1ac:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a1b1:	0f b6 c0             	movzbl %al,%eax
f011a1b4:	c1 e0 04             	shl    $0x4,%eax
f011a1b7:	89 c2                	mov    %eax,%edx
f011a1b9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a1bf:	01 d0                	add    %edx,%eax
f011a1c1:	48                   	dec    %eax
f011a1c2:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a1c8:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a1ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1d3:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a1d9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a1df:	29 d0                	sub    %edx,%eax
f011a1e1:	01 c8                	add    %ecx,%eax
f011a1e3:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f011a1e8:	c1 e8 0c             	shr    $0xc,%eax
f011a1eb:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011a1f1:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011a1f8:	10 00 00 
f011a1fb:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a200:	0f b6 d0             	movzbl %al,%edx
f011a203:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a209:	01 d0                	add    %edx,%eax
f011a20b:	48                   	dec    %eax
f011a20c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011a212:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a218:	ba 00 00 00 00       	mov    $0x0,%edx
f011a21d:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011a223:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a229:	29 d0                	sub    %edx,%eax
f011a22b:	89 c1                	mov    %eax,%ecx
f011a22d:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011a234:	10 00 00 
f011a237:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a23c:	0f b6 c0             	movzbl %al,%eax
f011a23f:	c1 e0 04             	shl    $0x4,%eax
f011a242:	89 c2                	mov    %eax,%edx
f011a244:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a24a:	01 d0                	add    %edx,%eax
f011a24c:	48                   	dec    %eax
f011a24d:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011a253:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a259:	ba 00 00 00 00       	mov    $0x0,%edx
f011a25e:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011a264:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a26a:	29 d0                	sub    %edx,%eax
f011a26c:	01 c8                	add    %ecx,%eax
f011a26e:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011a273:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		int i = 0;
f011a279:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011a280:	c7 45 e4 00 00 00 f6 	movl   $0xf6000000,-0x1c(%ebp)
f011a287:	e9 d8 00 00 00       	jmp    f011a364 <test_kheap_virt_addr+0xb8c>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
f011a28c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011a28f:	a1 30 0d 80 f0       	mov    0xf0800d30,%eax
f011a294:	83 ec 04             	sub    $0x4,%esp
f011a297:	8d 8d bc fd ff ff    	lea    -0x244(%ebp),%ecx
f011a29d:	51                   	push   %ecx
f011a29e:	52                   	push   %edx
f011a29f:	50                   	push   %eax
f011a2a0:	e8 36 99 fe ff       	call   f0103bdb <get_page_table>
f011a2a5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011a2a8:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011a2ae:	85 c0                	test   %eax,%eax
f011a2b0:	75 17                	jne    f011a2c9 <test_kheap_virt_addr+0xaf1>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f011a2b2:	83 ec 04             	sub    $0x4,%esp
f011a2b5:	68 30 24 12 f0       	push   $0xf0122430
f011a2ba:	68 3a 0a 00 00       	push   $0xa3a
f011a2bf:	68 76 1a 12 f0       	push   $0xf0121a76
f011a2c4:	e8 e6 5e fe ff       	call   f01001af <_panic>

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f011a2c9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011a2d0:	eb 73                	jmp    f011a345 <test_kheap_virt_addr+0xb6d>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f011a2d2:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f011a2d8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a2db:	c1 e2 02             	shl    $0x2,%edx
f011a2de:	01 d0                	add    %edx,%eax
f011a2e0:	8b 00                	mov    (%eax),%eax
f011a2e2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011a2e7:	89 c1                	mov    %eax,%ecx
f011a2e9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a2ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a2f2:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a2f5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a2fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a2fe:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a301:	83 ec 0c             	sub    $0xc,%esp
f011a304:	50                   	push   %eax
f011a305:	e8 e8 2c ff ff       	call   f010cff2 <kheap_virtual_address>
f011a30a:	83 c4 10             	add    $0x10,%esp
f011a30d:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)

				if (retrievedVA != (va + j*PAGE_SIZE))
f011a313:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a316:	c1 e0 0c             	shl    $0xc,%eax
f011a319:	89 c2                	mov    %eax,%edx
f011a31b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a31e:	01 d0                	add    %edx,%eax
f011a320:	3b 85 f4 fe ff ff    	cmp    -0x10c(%ebp),%eax
f011a326:	74 17                	je     f011a33f <test_kheap_virt_addr+0xb67>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_virtual_address");
f011a328:	83 ec 04             	sub    $0x4,%esp
f011a32b:	68 24 25 12 f0       	push   $0xf0122524
f011a330:	68 44 0a 00 00       	push   $0xa44
f011a335:	68 76 1a 12 f0       	push   $0xf0121a76
f011a33a:	e8 70 5e fe ff       	call   f01001af <_panic>
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (void*)va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = 0; i < numOfFrames && j < 1024; ++j, ++i)
f011a33f:	ff 45 dc             	incl   -0x24(%ebp)
f011a342:	ff 45 e0             	incl   -0x20(%ebp)
f011a345:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a348:	3b 85 0c ff ff ff    	cmp    -0xf4(%ebp),%eax
f011a34e:	7d 0d                	jge    f011a35d <test_kheap_virt_addr+0xb85>
f011a350:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f011a357:	0f 8e 75 ff ff ff    	jle    f011a2d2 <test_kheap_virt_addr+0xafa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = KERNEL_HEAP_START; va < endVA; va+=PTSIZE)
f011a35d:	81 45 e4 00 00 40 00 	addl   $0x400000,-0x1c(%ebp)
f011a364:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a367:	3b 85 f8 fe ff ff    	cmp    -0x108(%ebp),%eax
f011a36d:	0f 82 19 ff ff ff    	jb     f011a28c <test_kheap_virt_addr+0xab4>
					panic("Wrong kheap_virtual_address");
				}
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f011a373:	83 ec 0c             	sub    $0xc,%esp
f011a376:	68 40 25 12 f0       	push   $0xf0122540
f011a37b:	e8 84 ce fe ff       	call   f0107204 <cprintf>
f011a380:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011a383:	e8 c6 06 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a388:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011a38e:	e8 e7 1d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a393:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[0]);
f011a399:	8b 85 c0 fd ff ff    	mov    -0x240(%ebp),%eax
f011a39f:	83 ec 0c             	sub    $0xc,%esp
f011a3a2:	50                   	push   %eax
f011a3a3:	e8 38 2b ff ff       	call   f010cee0 <kfree>
f011a3a8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a3ab:	e8 ca 1d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a3b0:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011a3b6:	74 17                	je     f011a3cf <test_kheap_virt_addr+0xbf7>
f011a3b8:	83 ec 04             	sub    $0x4,%esp
f011a3bb:	68 88 1a 12 f0       	push   $0xf0121a88
f011a3c0:	68 51 0a 00 00       	push   $0xa51
f011a3c5:	68 76 1a 12 f0       	push   $0xf0121a76
f011a3ca:	e8 e0 5d fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011a3cf:	e8 7a 06 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a3d4:	89 c2                	mov    %eax,%edx
f011a3d6:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a3dc:	29 c2                	sub    %eax,%edx
f011a3de:	89 d0                	mov    %edx,%eax
f011a3e0:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a3e5:	74 17                	je     f011a3fe <test_kheap_virt_addr+0xc26>
f011a3e7:	83 ec 04             	sub    $0x4,%esp
f011a3ea:	68 f8 21 12 f0       	push   $0xf01221f8
f011a3ef:	68 52 0a 00 00       	push   $0xa52
f011a3f4:	68 76 1a 12 f0       	push   $0xf0121a76
f011a3f9:	e8 b1 5d fe ff       	call   f01001af <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a3fe:	e8 4b 06 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a403:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a409:	e8 6c 1d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a40e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[1]);
f011a414:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f011a41a:	83 ec 0c             	sub    $0xc,%esp
f011a41d:	50                   	push   %eax
f011a41e:	e8 bd 2a ff ff       	call   f010cee0 <kfree>
f011a423:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a426:	e8 4f 1d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a42b:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011a431:	74 17                	je     f011a44a <test_kheap_virt_addr+0xc72>
f011a433:	83 ec 04             	sub    $0x4,%esp
f011a436:	68 88 1a 12 f0       	push   $0xf0121a88
f011a43b:	68 58 0a 00 00       	push   $0xa58
f011a440:	68 76 1a 12 f0       	push   $0xf0121a76
f011a445:	e8 65 5d fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011a44a:	e8 ff 05 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a44f:	89 c2                	mov    %eax,%edx
f011a451:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a457:	29 c2                	sub    %eax,%edx
f011a459:	89 d0                	mov    %edx,%eax
f011a45b:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a460:	74 17                	je     f011a479 <test_kheap_virt_addr+0xca1>
f011a462:	83 ec 04             	sub    $0x4,%esp
f011a465:	68 f8 21 12 f0       	push   $0xf01221f8
f011a46a:	68 59 0a 00 00       	push   $0xa59
f011a46f:	68 76 1a 12 f0       	push   $0xf0121a76
f011a474:	e8 36 5d fe ff       	call   f01001af <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011a479:	e8 d0 05 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a47e:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a484:	e8 f1 1c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a489:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		kfree(ptr_allocations[6]);
f011a48f:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f011a495:	83 ec 0c             	sub    $0xc,%esp
f011a498:	50                   	push   %eax
f011a499:	e8 42 2a ff ff       	call   f010cee0 <kfree>
f011a49e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4a1:	e8 d4 1c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a4a6:	3b 85 ec fe ff ff    	cmp    -0x114(%ebp),%eax
f011a4ac:	74 17                	je     f011a4c5 <test_kheap_virt_addr+0xced>
f011a4ae:	83 ec 04             	sub    $0x4,%esp
f011a4b1:	68 88 1a 12 f0       	push   $0xf0121a88
f011a4b6:	68 5f 0a 00 00       	push   $0xa5f
f011a4bb:	68 76 1a 12 f0       	push   $0xf0121a76
f011a4c0:	e8 ea 5c fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011a4c5:	e8 84 05 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a4ca:	89 c2                	mov    %eax,%edx
f011a4cc:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a4d2:	29 c2                	sub    %eax,%edx
f011a4d4:	89 d0                	mov    %edx,%eax
f011a4d6:	3d 00 06 00 00       	cmp    $0x600,%eax
f011a4db:	74 17                	je     f011a4f4 <test_kheap_virt_addr+0xd1c>
f011a4dd:	83 ec 04             	sub    $0x4,%esp
f011a4e0:	68 f8 21 12 f0       	push   $0xf01221f8
f011a4e5:	68 60 0a 00 00       	push   $0xa60
f011a4ea:	68 76 1a 12 f0       	push   $0xf0121a76
f011a4ef:	e8 bb 5c fe ff       	call   f01001af <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f011a4f4:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011a4fb:	10 00 00 
f011a4fe:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a503:	0f b6 d0             	movzbl %al,%edx
f011a506:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a50c:	01 d0                	add    %edx,%eax
f011a50e:	48                   	dec    %eax
f011a50f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011a515:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a51b:	ba 00 00 00 00       	mov    $0x0,%edx
f011a520:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011a526:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a52c:	29 d0                	sub    %edx,%eax
f011a52e:	89 c1                	mov    %eax,%ecx
f011a530:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011a537:	10 00 00 
f011a53a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a53f:	0f b6 c0             	movzbl %al,%eax
f011a542:	c1 e0 04             	shl    $0x4,%eax
f011a545:	89 c2                	mov    %eax,%edx
f011a547:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a54d:	01 d0                	add    %edx,%eax
f011a54f:	48                   	dec    %eax
f011a550:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011a556:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a55c:	ba 00 00 00 00       	mov    $0x0,%edx
f011a561:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011a567:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a56d:	29 d0                	sub    %edx,%eax
f011a56f:	01 c8                	add    %ecx,%eax
f011a571:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f011a576:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		int i = 0;
f011a57c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAB_ALLOCATIONS) / PAGE_SIZE;
f011a583:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a58a:	10 00 00 
f011a58d:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a592:	0f b6 d0             	movzbl %al,%edx
f011a595:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a59b:	01 d0                	add    %edx,%eax
f011a59d:	48                   	dec    %eax
f011a59e:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a5a4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a5aa:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5af:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a5b5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a5bb:	29 d0                	sub    %edx,%eax
f011a5bd:	89 c1                	mov    %eax,%ecx
f011a5bf:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a5c6:	10 00 00 
f011a5c9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a5ce:	0f b6 c0             	movzbl %al,%eax
f011a5d1:	c1 e0 04             	shl    $0x4,%eax
f011a5d4:	89 c2                	mov    %eax,%edx
f011a5d6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a5dc:	01 d0                	add    %edx,%eax
f011a5de:	48                   	dec    %eax
f011a5df:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a5e5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5f0:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a5f6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5fc:	29 d0                	sub    %edx,%eax
f011a5fe:	01 c8                	add    %ecx,%eax
f011a600:	05 00 40 00 00       	add    $0x4000,%eax
f011a605:	c1 e8 0c             	shr    $0xc,%eax
f011a608:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011a60e:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a614:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a617:	eb 41                	jmp    f011a65a <test_kheap_virt_addr+0xe82>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a619:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a61f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a622:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a625:	83 ec 0c             	sub    $0xc,%esp
f011a628:	50                   	push   %eax
f011a629:	e8 c4 29 ff ff       	call   f010cff2 <kheap_virtual_address>
f011a62e:	83 c4 10             	add    $0x10,%esp
f011a631:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
			if (retrievedVA != 0)
f011a637:	83 bd c0 fe ff ff 00 	cmpl   $0x0,-0x140(%ebp)
f011a63e:	74 17                	je     f011a657 <test_kheap_virt_addr+0xe7f>
			{
				panic("Wrong kheap_virtual_address");
f011a640:	83 ec 04             	sub    $0x4,%esp
f011a643:	68 24 25 12 f0       	push   $0xf0122524
f011a648:	68 71 0a 00 00       	push   $0xa71
f011a64d:	68 76 1a 12 f0       	push   $0xf0121a76
f011a652:	e8 58 5b fe ff       	call   f01001af <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAB_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011a657:	ff 45 d8             	incl   -0x28(%ebp)
f011a65a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a660:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011a666:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a669:	39 c2                	cmp    %eax,%edx
f011a66b:	77 ac                	ja     f011a619 <test_kheap_virt_addr+0xe41>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a66d:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a673:	05 00 04 00 00       	add    $0x400,%eax
f011a678:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a67b:	eb 4b                	jmp    f011a6c8 <test_kheap_virt_addr+0xef0>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a67d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a683:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a686:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a689:	83 ec 0c             	sub    $0xc,%esp
f011a68c:	50                   	push   %eax
f011a68d:	e8 60 29 ff ff       	call   f010cff2 <kheap_virtual_address>
f011a692:	83 c4 10             	add    $0x10,%esp
f011a695:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f011a69b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a69e:	c1 e0 0c             	shl    $0xc,%eax
f011a6a1:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011a6a6:	3b 85 bc fe ff ff    	cmp    -0x144(%ebp),%eax
f011a6ac:	74 17                	je     f011a6c5 <test_kheap_virt_addr+0xeed>
			{
				panic("Wrong kheap_virtual_address");
f011a6ae:	83 ec 04             	sub    $0x4,%esp
f011a6b1:	68 24 25 12 f0       	push   $0xf0122524
f011a6b6:	68 7b 0a 00 00       	push   $0xa7b
f011a6bb:	68 76 1a 12 f0       	push   $0xf0121a76
f011a6c0:	e8 ea 5a fe ff       	call   f01001af <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a6c5:	ff 45 d8             	incl   -0x28(%ebp)
f011a6c8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a6ce:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f011a6d4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a6d7:	39 c2                	cmp    %eax,%edx
f011a6d9:	77 a2                	ja     f011a67d <test_kheap_virt_addr+0xea5>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a6db:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a6e1:	05 04 07 00 00       	add    $0x704,%eax
f011a6e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a6e9:	eb 41                	jmp    f011a72c <test_kheap_virt_addr+0xf54>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a6eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a6f1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a6f4:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a6f7:	83 ec 0c             	sub    $0xc,%esp
f011a6fa:	50                   	push   %eax
f011a6fb:	e8 f2 28 ff ff       	call   f010cff2 <kheap_virtual_address>
f011a700:	83 c4 10             	add    $0x10,%esp
f011a703:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
			if (retrievedVA != 0)
f011a709:	83 bd b8 fe ff ff 00 	cmpl   $0x0,-0x148(%ebp)
f011a710:	74 17                	je     f011a729 <test_kheap_virt_addr+0xf51>
			{
				panic("Wrong kheap_virtual_address");
f011a712:	83 ec 04             	sub    $0x4,%esp
f011a715:	68 24 25 12 f0       	push   $0xf0122524
f011a71a:	68 84 0a 00 00       	push   $0xa84
f011a71f:	68 76 1a 12 f0       	push   $0xf0121a76
f011a724:	e8 86 5a fe ff       	call   f01001af <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f011a729:	ff 45 d8             	incl   -0x28(%ebp)
f011a72c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a732:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f011a738:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a73b:	39 c2                	cmp    %eax,%edx
f011a73d:	77 ac                	ja     f011a6eb <test_kheap_virt_addr+0xf13>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011a73f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a745:	05 04 0d 00 00       	add    $0xd04,%eax
f011a74a:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011a74d:	eb 4b                	jmp    f011a79a <test_kheap_virt_addr+0xfc2>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011a74f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a755:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011a758:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011a75b:	83 ec 0c             	sub    $0xc,%esp
f011a75e:	50                   	push   %eax
f011a75f:	e8 8e 28 ff ff       	call   f010cff2 <kheap_virtual_address>
f011a764:	83 c4 10             	add    $0x10,%esp
f011a767:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + i*PAGE_SIZE)
f011a76d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a770:	c1 e0 0c             	shl    $0xc,%eax
f011a773:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f011a778:	3b 85 b4 fe ff ff    	cmp    -0x14c(%ebp),%eax
f011a77e:	74 17                	je     f011a797 <test_kheap_virt_addr+0xfbf>
			{
				panic("Wrong kheap_virtual_address");
f011a780:	83 ec 04             	sub    $0x4,%esp
f011a783:	68 24 25 12 f0       	push   $0xf0122524
f011a788:	68 8d 0a 00 00       	push   $0xa8d
f011a78d:	68 76 1a 12 f0       	push   $0xf0121a76
f011a792:	e8 18 5a fe ff       	call   f01001af <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f011a797:	ff 45 d8             	incl   -0x28(%ebp)
f011a79a:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a7a0:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f011a7a6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011a7a9:	39 c2                	cmp    %eax,%edx
f011a7ab:	77 a2                	ja     f011a74f <test_kheap_virt_addr+0xf77>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f011a7ad:	83 ec 0c             	sub    $0xc,%esp
f011a7b0:	68 f9 1b 12 f0       	push   $0xf0121bf9
f011a7b5:	e8 4a ca fe ff       	call   f0107204 <cprintf>
f011a7ba:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011a7bd:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f011a7c4:	eb 54                	jmp    f011a81a <test_kheap_virt_addr+0x1042>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011a7c6:	83 ec 0c             	sub    $0xc,%esp
f011a7c9:	ff 75 d4             	pushl  -0x2c(%ebp)
f011a7cc:	e8 21 28 ff ff       	call   f010cff2 <kheap_virtual_address>
f011a7d1:	83 c4 10             	add    $0x10,%esp
f011a7d4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
			if (retrievedVA != 0)
f011a7da:	83 bd b0 fe ff ff 00 	cmpl   $0x0,-0x150(%ebp)
f011a7e1:	74 30                	je     f011a813 <test_kheap_virt_addr+0x103b>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011a7e3:	83 ec 04             	sub    $0x4,%esp
f011a7e6:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f011a7ec:	ff 75 d4             	pushl  -0x2c(%ebp)
f011a7ef:	68 71 25 12 f0       	push   $0xf0122571
f011a7f4:	e8 0b ca fe ff       	call   f0107204 <cprintf>
f011a7f9:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f011a7fc:	83 ec 04             	sub    $0x4,%esp
f011a7ff:	68 24 25 12 f0       	push   $0xf0122524
f011a804:	68 9d 0a 00 00       	push   $0xa9d
f011a809:	68 76 1a 12 f0       	push   $0xf0121a76
f011a80e:	e8 9c 59 fe ff       	call   f01001af <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011a813:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f011a81a:	b8 68 0d 88 00       	mov    $0x880d68,%eax
f011a81f:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f011a822:	72 a2                	jb     f011a7c6 <test_kheap_virt_addr+0xfee>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f011a824:	83 ec 0c             	sub    $0xc,%esp
f011a827:	68 52 1c 12 f0       	push   $0xf0121c52
f011a82c:	e8 d3 c9 fe ff       	call   f0107204 <cprintf>
f011a831:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f011a834:	83 ec 0c             	sub    $0xc,%esp
f011a837:	68 90 25 12 f0       	push   $0xf0122590
f011a83c:	e8 c3 c9 fe ff       	call   f0107204 <cprintf>
f011a841:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a844:	b8 01 00 00 00       	mov    $0x1,%eax
f011a849:	89 f4                	mov    %esi,%esp

}
f011a84b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011a84e:	5b                   	pop    %ebx
f011a84f:	5e                   	pop    %esi
f011a850:	5f                   	pop    %edi
f011a851:	5d                   	pop    %ebp
f011a852:	c3                   	ret    

f011a853 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011a853:	55                   	push   %ebp
f011a854:	89 e5                	mov    %esp,%ebp
f011a856:	57                   	push   %edi
f011a857:	56                   	push   %esi
f011a858:	53                   	push   %ebx
f011a859:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	if (firstCall)
f011a85f:	a0 8a cc 15 f0       	mov    0xf015cc8a,%al
f011a864:	84 c0                	test   %al,%al
f011a866:	74 56                	je     f011a8be <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011a868:	c6 05 8a cc 15 f0 00 	movb   $0x0,0xf015cc8a
		initFreeFrames = sys_calculate_free_frames() ;
f011a86f:	e8 da 01 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a874:	a3 64 0d 88 f0       	mov    %eax,0xf0880d64
		initFreeDiskFrames = pf_calculate_free_frames() ;
f011a879:	e8 fc 18 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a87e:	a3 60 0d 88 f0       	mov    %eax,0xf0880d60
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011a883:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f011a889:	bb ed 26 12 f0       	mov    $0xf01226ed,%ebx
f011a88e:	ba 11 00 00 00       	mov    $0x11,%edx
f011a893:	89 c7                	mov    %eax,%edi
f011a895:	89 de                	mov    %ebx,%esi
f011a897:	89 d1                	mov    %edx,%ecx
f011a899:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011a89b:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011a8a1:	b9 53 00 00 00       	mov    $0x53,%ecx
f011a8a6:	b0 00                	mov    $0x0,%al
f011a8a8:	89 d7                	mov    %edx,%edi
f011a8aa:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f011a8ac:	83 ec 0c             	sub    $0xc,%esp
f011a8af:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
f011a8b5:	50                   	push   %eax
f011a8b6:	e8 c7 6f fe ff       	call   f0101882 <execute_command>
f011a8bb:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f011a8be:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011a8c5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f011a8cc:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f011a8d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a8d4:	eb 2d                	jmp    f011a903 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011a8d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a8d9:	05 f4 02 00 00       	add    $0x2f4,%eax
f011a8de:	83 ec 08             	sub    $0x8,%esp
f011a8e1:	68 d7 25 12 f0       	push   $0xf01225d7
f011a8e6:	50                   	push   %eax
f011a8e7:	e8 9d 25 00 00       	call   f011ce89 <strcmp>
f011a8ec:	83 c4 10             	add    $0x10,%esp
f011a8ef:	85 c0                	test   %eax,%eax
f011a8f1:	75 08                	jne    f011a8fb <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f011a8f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a8f6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f011a8f9:	eb 2f                	jmp    f011a92a <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f011a8fb:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f011a900:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a903:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011a907:	74 08                	je     f011a911 <test_three_creation_functions+0xbe>
f011a909:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a90c:	8b 40 44             	mov    0x44(%eax),%eax
f011a90f:	eb 05                	jmp    f011a916 <test_three_creation_functions+0xc3>
f011a911:	b8 00 00 00 00       	mov    $0x0,%eax
f011a916:	a3 6c 28 7e f0       	mov    %eax,0xf07e286c
f011a91b:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f011a920:	85 c0                	test   %eax,%eax
f011a922:	75 b2                	jne    f011a8d6 <test_three_creation_functions+0x83>
f011a924:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011a928:	75 ac                	jne    f011a8d6 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f011a92a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a92d:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
f011a933:	85 c0                	test   %eax,%eax
f011a935:	74 17                	je     f011a94e <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f011a937:	83 ec 04             	sub    $0x4,%esp
f011a93a:	68 e0 25 12 f0       	push   $0xf01225e0
f011a93f:	68 c7 0a 00 00       	push   $0xac7
f011a944:	68 76 1a 12 f0       	push   $0xf0121a76
f011a949:	e8 61 58 fe ff       	call   f01001af <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f011a94e:	83 ec 0c             	sub    $0xc,%esp
f011a951:	ff 75 e4             	pushl  -0x1c(%ebp)
f011a954:	e8 6e 9c fe ff       	call   f01045c7 <env_page_ws_get_size>
f011a959:	83 c4 10             	add    $0x10,%esp
f011a95c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f011a95f:	e8 ea 00 ff ff       	call   f010aa4e <sys_calculate_free_frames>
f011a964:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011a967:	e8 0e 18 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011a96c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a96f:	a1 60 0d 88 f0       	mov    0xf0880d60,%eax
f011a974:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011a977:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a97a:	74 17                	je     f011a993 <test_three_creation_functions+0x140>
f011a97c:	83 ec 04             	sub    $0x4,%esp
f011a97f:	68 88 1a 12 f0       	push   $0xf0121a88
f011a984:	68 cd 0a 00 00       	push   $0xacd
f011a989:	68 76 1a 12 f0       	push   $0xf0121a76
f011a98e:	e8 1c 58 fe ff       	call   f01001af <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011a993:	a1 64 0d 88 f0       	mov    0xf0880d64,%eax
f011a998:	2b 45 d8             	sub    -0x28(%ebp),%eax
f011a99b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a99e:	83 c2 15             	add    $0x15,%edx
f011a9a1:	39 d0                	cmp    %edx,%eax
f011a9a3:	74 17                	je     f011a9bc <test_three_creation_functions+0x169>
f011a9a5:	83 ec 04             	sub    $0x4,%esp
f011a9a8:	68 f0 1a 12 f0       	push   $0xf0121af0
f011a9ad:	68 cf 0a 00 00       	push   $0xacf
f011a9b2:	68 76 1a 12 f0       	push   $0xf0121a76
f011a9b7:	e8 f3 57 fe ff       	call   f01001af <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f011a9bc:	83 ec 0c             	sub    $0xc,%esp
f011a9bf:	68 00 10 00 00       	push   $0x1000
f011a9c4:	e8 cc 24 ff ff       	call   f010ce95 <kmalloc>
f011a9c9:	83 c4 10             	add    $0x10,%esp
f011a9cc:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f011a9cf:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a9d6:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011a9db:	0f b6 d0             	movzbl %al,%edx
f011a9de:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a9e1:	01 d0                	add    %edx,%eax
f011a9e3:	48                   	dec    %eax
f011a9e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a9e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a9ea:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9ef:	f7 75 cc             	divl   -0x34(%ebp)
f011a9f2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a9f5:	29 d0                	sub    %edx,%eax
f011a9f7:	89 c1                	mov    %eax,%ecx
f011a9f9:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011aa00:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011aa05:	0f b6 c0             	movzbl %al,%eax
f011aa08:	c1 e0 04             	shl    $0x4,%eax
f011aa0b:	89 c2                	mov    %eax,%edx
f011aa0d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011aa10:	01 d0                	add    %edx,%eax
f011aa12:	48                   	dec    %eax
f011aa13:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011aa16:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa19:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa1e:	f7 75 c4             	divl   -0x3c(%ebp)
f011aa21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa24:	29 d0                	sub    %edx,%eax
f011aa26:	01 c8                	add    %ecx,%eax
f011aa28:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f011aa2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011aa31:	39 c2                	cmp    %eax,%edx
f011aa33:	74 17                	je     f011aa4c <test_three_creation_functions+0x1f9>
f011aa35:	83 ec 04             	sub    $0x4,%esp
f011aa38:	68 30 26 12 f0       	push   $0xf0122630
f011aa3d:	68 d3 0a 00 00       	push   $0xad3
f011aa42:	68 76 1a 12 f0       	push   $0xf0121a76
f011aa47:	e8 63 57 fe ff       	call   f01001af <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f011aa4c:	83 ec 0c             	sub    $0xc,%esp
f011aa4f:	68 a0 26 12 f0       	push   $0xf01226a0
f011aa54:	e8 ab c7 fe ff       	call   f0107204 <cprintf>
f011aa59:	83 c4 10             	add    $0x10,%esp

	return 1;
f011aa5c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011aa61:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011aa64:	5b                   	pop    %ebx
f011aa65:	5e                   	pop    %esi
f011aa66:	5f                   	pop    %edi
f011aa67:	5d                   	pop    %ebp
f011aa68:	c3                   	ret    

f011aa69 <scarce_memory>:
#include <kern/sched.h>
#include <kern/kclock.h>
#include <kern/utilities.h>

void scarce_memory()
{
f011aa69:	55                   	push   %ebp
f011aa6a:	89 e5                	mov    %esp,%ebp
f011aa6c:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f011aa6f:	a1 60 28 7e f0       	mov    0xf07e2860,%eax
f011aa74:	ba 64 00 00 00       	mov    $0x64,%edx
f011aa79:	29 c2                	sub    %eax,%edx
f011aa7b:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f011aa80:	0f af c2             	imul   %edx,%eax
f011aa83:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011aa88:	f7 e2                	mul    %edx
f011aa8a:	89 d0                	mov    %edx,%eax
f011aa8c:	c1 e8 05             	shr    $0x5,%eax
f011aa8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f011aa92:	a1 60 28 7e f0       	mov    0xf07e2860,%eax
f011aa97:	ba 64 00 00 00       	mov    $0x64,%edx
f011aa9c:	29 c2                	sub    %eax,%edx
f011aa9e:	a1 7c 28 7e f0       	mov    0xf07e287c,%eax
f011aaa3:	89 d1                	mov    %edx,%ecx
f011aaa5:	0f af c8             	imul   %eax,%ecx
f011aaa8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011aaad:	f7 e1                	mul    %ecx
f011aaaf:	c1 ea 05             	shr    $0x5,%edx
f011aab2:	89 d0                	mov    %edx,%eax
f011aab4:	c1 e0 02             	shl    $0x2,%eax
f011aab7:	01 d0                	add    %edx,%eax
f011aab9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011aac0:	01 d0                	add    %edx,%eax
f011aac2:	c1 e0 02             	shl    $0x2,%eax
f011aac5:	29 c1                	sub    %eax,%ecx
f011aac7:	89 ca                	mov    %ecx,%edx
f011aac9:	85 d2                	test   %edx,%edx
f011aacb:	74 03                	je     f011aad0 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f011aacd:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f011aad0:	8b 15 7c 28 7e f0    	mov    0xf07e287c,%edx
f011aad6:	a1 20 0d 80 f0       	mov    0xf0800d20,%eax
f011aadb:	29 c2                	sub    %eax,%edx
f011aadd:	89 d0                	mov    %edx,%eax
f011aadf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f011aae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011aae5:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011aae8:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f011aaeb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct Frame_Info* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f011aaf2:	eb 12                	jmp    f011ab06 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f011aaf4:	83 ec 0c             	sub    $0xc,%esp
f011aaf7:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f011aafa:	50                   	push   %eax
f011aafb:	e8 5c 8f fe ff       	call   f0103a5c <allocate_frame>
f011ab00:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct Frame_Info* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f011ab03:	ff 45 f0             	incl   -0x10(%ebp)
f011ab06:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ab09:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ab0c:	76 e6                	jbe    f011aaf4 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f011ab0e:	90                   	nop
f011ab0f:	c9                   	leave  
f011ab10:	c3                   	ret    

f011ab11 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f011ab11:	55                   	push   %ebp
f011ab12:	89 e5                	mov    %esp,%ebp
f011ab14:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f011ab17:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f011ab1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f011ab25:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f011ab2c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f011ab30:	0f 85 d0 01 00 00    	jne    f011ad06 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f5>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f011ab36:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011ab3d:	e9 de 00 00 00       	jmp    f011ac20 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x10f>
		{
			struct Env * ptr_ready_env = NULL;
f011ab42:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f011ab49:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011ab4e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011ab51:	c1 e2 04             	shl    $0x4,%edx
f011ab54:	01 d0                	add    %edx,%eax
f011ab56:	8b 00                	mov    (%eax),%eax
f011ab58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011ab5b:	e9 85 00 00 00       	jmp    f011abe5 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xd4>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f011ab60:	83 ec 0c             	sub    $0xc,%esp
f011ab63:	ff 75 e4             	pushl  -0x1c(%ebp)
f011ab66:	e8 5c 9a fe ff       	call   f01045c7 <env_page_ws_get_size>
f011ab6b:	83 c4 10             	add    $0x10,%esp
f011ab6e:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011ab71:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ab76:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f011ab7c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab7f:	0f af c2             	imul   %edx,%eax
f011ab82:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011ab87:	f7 e2                	mul    %edx
f011ab89:	89 d0                	mov    %edx,%eax
f011ab8b:	c1 e8 05             	shr    $0x5,%eax
f011ab8e:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011ab91:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ab96:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f011ab9c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ab9f:	89 d1                	mov    %edx,%ecx
f011aba1:	0f af c8             	imul   %eax,%ecx
f011aba4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011aba9:	f7 e1                	mul    %ecx
f011abab:	c1 ea 05             	shr    $0x5,%edx
f011abae:	89 d0                	mov    %edx,%eax
f011abb0:	c1 e0 02             	shl    $0x2,%eax
f011abb3:	01 d0                	add    %edx,%eax
f011abb5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011abbc:	01 d0                	add    %edx,%eax
f011abbe:	c1 e0 02             	shl    $0x2,%eax
f011abc1:	29 c1                	sub    %eax,%ecx
f011abc3:	89 ca                	mov    %ecx,%edx
f011abc5:	85 d2                	test   %edx,%edx
f011abc7:	74 03                	je     f011abcc <calc_no_pages_tobe_removed_from_ready_exit_queues+0xbb>
					num_of_pages_to_be_removed++;
f011abc9:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f011abcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011abcf:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f011abd2:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011abd7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011abda:	c1 e2 04             	shl    $0x4,%edx
f011abdd:	01 d0                	add    %edx,%eax
f011abdf:	8b 40 08             	mov    0x8(%eax),%eax
f011abe2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011abe5:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011abea:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011abed:	c1 e2 04             	shl    $0x4,%edx
f011abf0:	01 d0                	add    %edx,%eax
f011abf2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011abf6:	74 08                	je     f011ac00 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
f011abf8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011abfb:	8b 52 44             	mov    0x44(%edx),%edx
f011abfe:	eb 05                	jmp    f011ac05 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xf4>
f011ac00:	ba 00 00 00 00       	mov    $0x0,%edx
f011ac05:	89 50 08             	mov    %edx,0x8(%eax)
f011ac08:	8b 40 08             	mov    0x8(%eax),%eax
f011ac0b:	85 c0                	test   %eax,%eax
f011ac0d:	0f 85 4d ff ff ff    	jne    f011ab60 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
f011ac13:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011ac17:	0f 85 43 ff ff ff    	jne    f011ab60 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4f>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f011ac1d:	ff 45 e8             	incl   -0x18(%ebp)
f011ac20:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011ac25:	0f b6 c0             	movzbl %al,%eax
f011ac28:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ac2b:	0f 8f 11 ff ff ff    	jg     f011ab42 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f011ac31:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f011ac38:	a1 64 28 7e f0       	mov    0xf07e2864,%eax
f011ac3d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011ac40:	eb 19                	jmp    f011ac5b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14a>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f011ac42:	83 ec 0c             	sub    $0xc,%esp
f011ac45:	ff 75 dc             	pushl  -0x24(%ebp)
f011ac48:	e8 7a 99 fe ff       	call   f01045c7 <env_page_ws_get_size>
f011ac4d:	83 c4 10             	add    $0x10,%esp
f011ac50:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f011ac53:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f011ac58:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011ac5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011ac5f:	74 08                	je     f011ac69 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x158>
f011ac61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ac64:	8b 40 44             	mov    0x44(%eax),%eax
f011ac67:	eb 05                	jmp    f011ac6e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15d>
f011ac69:	b8 00 00 00 00       	mov    $0x0,%eax
f011ac6e:	a3 6c 28 7e f0       	mov    %eax,0xf07e286c
f011ac73:	a1 6c 28 7e f0       	mov    0xf07e286c,%eax
f011ac78:	85 c0                	test   %eax,%eax
f011ac7a:	75 c6                	jne    f011ac42 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
f011ac7c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011ac80:	75 c0                	jne    f011ac42 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x131>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f011ac82:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ac87:	85 c0                	test   %eax,%eax
f011ac89:	0f 84 ec 00 00 00    	je     f011ad7b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f011ac8f:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ac94:	83 ec 0c             	sub    $0xc,%esp
f011ac97:	50                   	push   %eax
f011ac98:	e8 2a 99 fe ff       	call   f01045c7 <env_page_ws_get_size>
f011ac9d:	83 c4 10             	add    $0x10,%esp
f011aca0:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011aca3:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011aca8:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f011acae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011acb1:	0f af c2             	imul   %edx,%eax
f011acb4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011acb9:	f7 e2                	mul    %edx
f011acbb:	89 d0                	mov    %edx,%eax
f011acbd:	c1 e8 05             	shr    $0x5,%eax
f011acc0:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011acc3:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011acc8:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f011acce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011acd1:	89 d1                	mov    %edx,%ecx
f011acd3:	0f af c8             	imul   %eax,%ecx
f011acd6:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011acdb:	f7 e1                	mul    %ecx
f011acdd:	c1 ea 05             	shr    $0x5,%edx
f011ace0:	89 d0                	mov    %edx,%eax
f011ace2:	c1 e0 02             	shl    $0x2,%eax
f011ace5:	01 d0                	add    %edx,%eax
f011ace7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011acee:	01 d0                	add    %edx,%eax
f011acf0:	c1 e0 02             	shl    $0x2,%eax
f011acf3:	29 c1                	sub    %eax,%ecx
f011acf5:	89 ca                	mov    %ecx,%edx
f011acf7:	85 d2                	test   %edx,%edx
f011acf9:	74 03                	je     f011acfe <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1ed>
				num_of_pages_to_be_removed++;
f011acfb:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011acfe:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ad01:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011ad04:	eb 75                	jmp    f011ad7b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26a>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f011ad06:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ad0b:	83 ec 0c             	sub    $0xc,%esp
f011ad0e:	50                   	push   %eax
f011ad0f:	e8 b3 98 fe ff       	call   f01045c7 <env_page_ws_get_size>
f011ad14:	83 c4 10             	add    $0x10,%esp
f011ad17:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011ad1a:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ad1f:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f011ad25:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ad28:	0f af c2             	imul   %edx,%eax
f011ad2b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011ad30:	f7 e2                	mul    %edx
f011ad32:	89 d0                	mov    %edx,%eax
f011ad34:	c1 e8 05             	shr    $0x5,%eax
f011ad37:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011ad3a:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ad3f:	8b 90 38 03 00 00    	mov    0x338(%eax),%edx
f011ad45:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ad48:	89 d1                	mov    %edx,%ecx
f011ad4a:	0f af c8             	imul   %eax,%ecx
f011ad4d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011ad52:	f7 e1                	mul    %ecx
f011ad54:	c1 ea 05             	shr    $0x5,%edx
f011ad57:	89 d0                	mov    %edx,%eax
f011ad59:	c1 e0 02             	shl    $0x2,%eax
f011ad5c:	01 d0                	add    %edx,%eax
f011ad5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011ad65:	01 d0                	add    %edx,%eax
f011ad67:	c1 e0 02             	shl    $0x2,%eax
f011ad6a:	29 c1                	sub    %eax,%ecx
f011ad6c:	89 ca                	mov    %ecx,%edx
f011ad6e:	85 d2                	test   %edx,%edx
f011ad70:	74 03                	je     f011ad75 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x264>
			num_of_pages_to_be_removed++;
f011ad72:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011ad75:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ad78:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f011ad7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ad7e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ad81:	01 c2                	add    %eax,%edx
f011ad83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ad86:	01 d0                	add    %edx,%eax
}
f011ad88:	c9                   	leave  
f011ad89:	c3                   	ret    

f011ad8a <schenv>:


void schenv()
{
f011ad8a:	55                   	push   %ebp
f011ad8b:	89 e5                	mov    %esp,%ebp
f011ad8d:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f011ad90:	c6 05 c4 28 7e f0 00 	movb   $0x0,0xf07e28c4
	__ne = NULL;
f011ad97:	c7 05 90 28 7e f0 00 	movl   $0x0,0xf07e2890
f011ad9e:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f011ada1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ada8:	eb 3f                	jmp    f011ade9 <schenv+0x5f>
	{
		if (queue_size(&(env_ready_queues[i])))
f011adaa:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011adaf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adb2:	c1 e2 04             	shl    $0x4,%edx
f011adb5:	01 d0                	add    %edx,%eax
f011adb7:	83 ec 0c             	sub    $0xc,%esp
f011adba:	50                   	push   %eax
f011adbb:	e8 71 e3 fe ff       	call   f0109131 <queue_size>
f011adc0:	83 c4 10             	add    $0x10,%esp
f011adc3:	85 c0                	test   %eax,%eax
f011adc5:	74 1f                	je     f011ade6 <schenv+0x5c>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f011adc7:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011adcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011adcf:	c1 e2 04             	shl    $0x4,%edx
f011add2:	01 d0                	add    %edx,%eax
f011add4:	8b 40 04             	mov    0x4(%eax),%eax
f011add7:	a3 90 28 7e f0       	mov    %eax,0xf07e2890
			__nl = i;
f011addc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011addf:	a2 c4 28 7e f0       	mov    %al,0xf07e28c4
			break;
f011ade4:	eb 10                	jmp    f011adf6 <schenv+0x6c>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f011ade6:	ff 45 f4             	incl   -0xc(%ebp)
f011ade9:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011adee:	0f b6 c0             	movzbl %al,%eax
f011adf1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011adf4:	7f b4                	jg     f011adaa <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f011adf6:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011adfb:	85 c0                	test   %eax,%eax
f011adfd:	0f 84 86 00 00 00    	je     f011ae89 <schenv+0xff>
	{
		if (__ne != NULL)
f011ae03:	a1 90 28 7e f0       	mov    0xf07e2890,%eax
f011ae08:	85 c0                	test   %eax,%eax
f011ae0a:	74 4b                	je     f011ae57 <schenv+0xcd>
		{
			if ((__pl + 1) < __nl)
f011ae0c:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae11:	0f b6 c0             	movzbl %al,%eax
f011ae14:	8d 50 01             	lea    0x1(%eax),%edx
f011ae17:	a0 c4 28 7e f0       	mov    0xf07e28c4,%al
f011ae1c:	0f b6 c0             	movzbl %al,%eax
f011ae1f:	39 c2                	cmp    %eax,%edx
f011ae21:	7d 66                	jge    f011ae89 <schenv+0xff>
			{
				__ne = curenv;
f011ae23:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ae28:	a3 90 28 7e f0       	mov    %eax,0xf07e2890
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011ae2d:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae32:	0f b6 c0             	movzbl %al,%eax
f011ae35:	8a 15 b4 28 7e f0    	mov    0xf07e28b4,%dl
f011ae3b:	0f b6 d2             	movzbl %dl,%edx
f011ae3e:	4a                   	dec    %edx
f011ae3f:	39 d0                	cmp    %edx,%eax
f011ae41:	7d 08                	jge    f011ae4b <schenv+0xc1>
f011ae43:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae48:	40                   	inc    %eax
f011ae49:	eb 05                	jmp    f011ae50 <schenv+0xc6>
f011ae4b:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae50:	a2 c4 28 7e f0       	mov    %al,0xf07e28c4
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f011ae55:	eb 32                	jmp    f011ae89 <schenv+0xff>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f011ae57:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011ae5c:	a3 90 28 7e f0       	mov    %eax,0xf07e2890
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011ae61:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae66:	0f b6 c0             	movzbl %al,%eax
f011ae69:	8a 15 b4 28 7e f0    	mov    0xf07e28b4,%dl
f011ae6f:	0f b6 d2             	movzbl %dl,%edx
f011ae72:	4a                   	dec    %edx
f011ae73:	39 d0                	cmp    %edx,%eax
f011ae75:	7d 08                	jge    f011ae7f <schenv+0xf5>
f011ae77:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae7c:	40                   	inc    %eax
f011ae7d:	eb 05                	jmp    f011ae84 <schenv+0xfa>
f011ae7f:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011ae84:	a2 c4 28 7e f0       	mov    %al,0xf07e28c4
		}
	}
}
f011ae89:	90                   	nop
f011ae8a:	c9                   	leave  
f011ae8b:	c3                   	ret    

f011ae8c <chksch>:

void chksch(uint8 onoff)
{
f011ae8c:	55                   	push   %ebp
f011ae8d:	89 e5                	mov    %esp,%ebp
f011ae8f:	83 ec 04             	sub    $0x4,%esp
f011ae92:	8b 45 08             	mov    0x8(%ebp),%eax
f011ae95:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f011ae98:	c7 05 c0 28 7e f0 00 	movl   $0x0,0xf07e28c0
f011ae9f:	00 00 00 
	__ne = NULL;
f011aea2:	c7 05 90 28 7e f0 00 	movl   $0x0,0xf07e2890
f011aea9:	00 00 00 
	__pl = 0 ;
f011aeac:	c6 05 54 28 7e f0 00 	movb   $0x0,0xf07e2854
	__nl = 0 ;
f011aeb3:	c6 05 c4 28 7e f0 00 	movb   $0x0,0xf07e28c4
	__chkstatus = onoff;
f011aeba:	8a 45 fc             	mov    -0x4(%ebp),%al
f011aebd:	a2 8c 28 7e f0       	mov    %al,0xf07e288c
}
f011aec2:	90                   	nop
f011aec3:	c9                   	leave  
f011aec4:	c3                   	ret    

f011aec5 <chk1>:
void chk1()
{
f011aec5:	55                   	push   %ebp
f011aec6:	89 e5                	mov    %esp,%ebp
f011aec8:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f011aecb:	a0 8c 28 7e f0       	mov    0xf07e288c,%al
f011aed0:	84 c0                	test   %al,%al
f011aed2:	74 2b                	je     f011aeff <chk1+0x3a>
		return ;
	__pe = curenv;
f011aed4:	a1 90 1f 7e f0       	mov    0xf07e1f90,%eax
f011aed9:	a3 c0 28 7e f0       	mov    %eax,0xf07e28c0
	__pl = __nl ;
f011aede:	a0 c4 28 7e f0       	mov    0xf07e28c4,%al
f011aee3:	a2 54 28 7e f0       	mov    %al,0xf07e2854
	if (__pe == NULL)
f011aee8:	a1 c0 28 7e f0       	mov    0xf07e28c0,%eax
f011aeed:	85 c0                	test   %eax,%eax
f011aeef:	75 07                	jne    f011aef8 <chk1+0x33>
	{
		__pl = 0;
f011aef1:	c6 05 54 28 7e f0 00 	movb   $0x0,0xf07e2854
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f011aef8:	e8 8d fe ff ff       	call   f011ad8a <schenv>
f011aefd:	eb 01                	jmp    f011af00 <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f011aeff:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f011af00:	c9                   	leave  
f011af01:	c3                   	ret    

f011af02 <chk2>:
void chk2(struct Env* __se)
{
f011af02:	55                   	push   %ebp
f011af03:	89 e5                	mov    %esp,%ebp
f011af05:	53                   	push   %ebx
f011af06:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f011af09:	a0 8c 28 7e f0       	mov    0xf07e288c,%al
f011af0e:	84 c0                	test   %al,%al
f011af10:	0f 84 43 02 00 00    	je     f011b159 <chk2+0x257>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f011af16:	a1 90 28 7e f0       	mov    0xf07e2890,%eax
f011af1b:	39 45 08             	cmp    %eax,0x8(%ebp)
f011af1e:	74 19                	je     f011af39 <chk2+0x37>
f011af20:	68 54 27 12 f0       	push   $0xf0122754
f011af25:	68 61 27 12 f0       	push   $0xf0122761
f011af2a:	68 8e 00 00 00       	push   $0x8e
f011af2f:	68 76 27 12 f0       	push   $0xf0122776
f011af34:	e8 e5 52 fe ff       	call   f010021e <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f011af39:	a1 90 28 7e f0       	mov    0xf07e2890,%eax
f011af3e:	85 c0                	test   %eax,%eax
f011af40:	0f 84 25 01 00 00    	je     f011b06b <chk2+0x169>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f011af46:	8b 15 84 28 7e f0    	mov    0xf07e2884,%edx
f011af4c:	a0 c4 28 7e f0       	mov    0xf07e28c4,%al
f011af51:	0f b6 c0             	movzbl %al,%eax
f011af54:	01 d0                	add    %edx,%eax
f011af56:	8a 00                	mov    (%eax),%al
f011af58:	0f b6 d8             	movzbl %al,%ebx
f011af5b:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f011af60:	99                   	cltd   
f011af61:	f7 fb                	idiv   %ebx
f011af63:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f011af69:	8b 15 84 28 7e f0    	mov    0xf07e2884,%edx
f011af6f:	a0 c4 28 7e f0       	mov    0xf07e28c4,%al
f011af74:	0f b6 c0             	movzbl %al,%eax
f011af77:	01 d0                	add    %edx,%eax
f011af79:	8a 00                	mov    (%eax),%al
f011af7b:	0f b6 d8             	movzbl %al,%ebx
f011af7e:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f011af83:	99                   	cltd   
f011af84:	f7 fb                	idiv   %ebx
f011af86:	89 c3                	mov    %eax,%ebx
f011af88:	89 c8                	mov    %ecx,%eax
f011af8a:	99                   	cltd   
f011af8b:	f7 fb                	idiv   %ebx
f011af8d:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f011af91:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011af95:	83 e0 01             	and    $0x1,%eax
f011af98:	66 85 c0             	test   %ax,%ax
f011af9b:	74 07                	je     f011afa4 <chk2+0xa2>
f011af9d:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011afa1:	40                   	inc    %eax
f011afa2:	eb 04                	jmp    f011afa8 <chk2+0xa6>
f011afa4:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f011afa8:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f011afac:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f011afb0:	89 d0                	mov    %edx,%eax
f011afb2:	c1 e0 02             	shl    $0x2,%eax
f011afb5:	01 d0                	add    %edx,%eax
f011afb7:	01 c0                	add    %eax,%eax
f011afb9:	01 d0                	add    %edx,%eax
f011afbb:	c1 e0 02             	shl    $0x2,%eax
f011afbe:	01 d0                	add    %edx,%eax
f011afc0:	01 c0                	add    %eax,%eax
f011afc2:	89 c1                	mov    %eax,%ecx
f011afc4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011afc9:	f7 e9                	imul   %ecx
f011afcb:	c1 fa 05             	sar    $0x5,%edx
f011afce:	89 c8                	mov    %ecx,%eax
f011afd0:	c1 f8 1f             	sar    $0x1f,%eax
f011afd3:	29 c2                	sub    %eax,%edx
f011afd5:	89 d0                	mov    %edx,%eax
f011afd7:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f011afdb:	e8 84 bf fe ff       	call   f0106f64 <kclock_read_cnt0>
f011afe0:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f011afe4:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011afe8:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f011afec:	76 0a                	jbe    f011aff8 <chk2+0xf6>
f011afee:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f011aff2:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f011aff6:	76 19                	jbe    f011b011 <chk2+0x10f>
f011aff8:	68 88 27 12 f0       	push   $0xf0122788
f011affd:	68 61 27 12 f0       	push   $0xf0122761
f011b002:	68 98 00 00 00       	push   $0x98
f011b007:	68 76 27 12 f0       	push   $0xf0122776
f011b00c:	e8 0d 52 fe ff       	call   f010021e <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f011b011:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b018:	eb 44                	jmp    f011b05e <chk2+0x15c>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f011b01a:	a1 90 28 7e f0       	mov    0xf07e2890,%eax
f011b01f:	8b 40 4c             	mov    0x4c(%eax),%eax
f011b022:	89 c2                	mov    %eax,%edx
f011b024:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011b029:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b02c:	c1 e1 04             	shl    $0x4,%ecx
f011b02f:	01 c8                	add    %ecx,%eax
f011b031:	83 ec 08             	sub    $0x8,%esp
f011b034:	52                   	push   %edx
f011b035:	50                   	push   %eax
f011b036:	e8 6c e2 fe ff       	call   f01092a7 <find_env_in_queue>
f011b03b:	83 c4 10             	add    $0x10,%esp
f011b03e:	85 c0                	test   %eax,%eax
f011b040:	74 19                	je     f011b05b <chk2+0x159>
f011b042:	68 ac 27 12 f0       	push   $0xf01227ac
f011b047:	68 61 27 12 f0       	push   $0xf0122761
f011b04c:	68 9c 00 00 00       	push   $0x9c
f011b051:	68 76 27 12 f0       	push   $0xf0122776
f011b056:	e8 c3 51 fe ff       	call   f010021e <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f011b05b:	ff 45 f4             	incl   -0xc(%ebp)
f011b05e:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011b063:	0f b6 c0             	movzbl %al,%eax
f011b066:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b069:	7f af                	jg     f011b01a <chk2+0x118>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f011b06b:	a1 c0 28 7e f0       	mov    0xf07e28c0,%eax
f011b070:	85 c0                	test   %eax,%eax
f011b072:	0f 84 e2 00 00 00    	je     f011b15a <chk2+0x258>
f011b078:	8b 15 c0 28 7e f0    	mov    0xf07e28c0,%edx
f011b07e:	a1 90 28 7e f0       	mov    0xf07e2890,%eax
f011b083:	39 c2                	cmp    %eax,%edx
f011b085:	0f 84 cf 00 00 00    	je     f011b15a <chk2+0x258>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f011b08b:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011b090:	0f b6 c0             	movzbl %al,%eax
f011b093:	8a 15 b4 28 7e f0    	mov    0xf07e28b4,%dl
f011b099:	0f b6 d2             	movzbl %dl,%edx
f011b09c:	4a                   	dec    %edx
f011b09d:	39 d0                	cmp    %edx,%eax
f011b09f:	74 08                	je     f011b0a9 <chk2+0x1a7>
f011b0a1:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011b0a6:	40                   	inc    %eax
f011b0a7:	eb 05                	jmp    f011b0ae <chk2+0x1ac>
f011b0a9:	a0 54 28 7e f0       	mov    0xf07e2854,%al
f011b0ae:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f011b0b1:	a1 c0 28 7e f0       	mov    0xf07e28c0,%eax
f011b0b6:	8b 40 4c             	mov    0x4c(%eax),%eax
f011b0b9:	89 c2                	mov    %eax,%edx
f011b0bb:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011b0c0:	0f b6 4d e9          	movzbl -0x17(%ebp),%ecx
f011b0c4:	c1 e1 04             	shl    $0x4,%ecx
f011b0c7:	01 c8                	add    %ecx,%eax
f011b0c9:	83 ec 08             	sub    $0x8,%esp
f011b0cc:	52                   	push   %edx
f011b0cd:	50                   	push   %eax
f011b0ce:	e8 d4 e1 fe ff       	call   f01092a7 <find_env_in_queue>
f011b0d3:	83 c4 10             	add    $0x10,%esp
f011b0d6:	85 c0                	test   %eax,%eax
f011b0d8:	75 19                	jne    f011b0f3 <chk2+0x1f1>
f011b0da:	68 ec 27 12 f0       	push   $0xf01227ec
f011b0df:	68 61 27 12 f0       	push   $0xf0122761
f011b0e4:	68 a2 00 00 00       	push   $0xa2
f011b0e9:	68 76 27 12 f0       	push   $0xf0122776
f011b0ee:	e8 2b 51 fe ff       	call   f010021e <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f011b0f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b0fa:	eb 4e                	jmp    f011b14a <chk2+0x248>
		{
			if (i == __tl) continue;
f011b0fc:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f011b100:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b103:	74 41                	je     f011b146 <chk2+0x244>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f011b105:	a1 c0 28 7e f0       	mov    0xf07e28c0,%eax
f011b10a:	8b 40 4c             	mov    0x4c(%eax),%eax
f011b10d:	89 c2                	mov    %eax,%edx
f011b10f:	a1 58 28 7e f0       	mov    0xf07e2858,%eax
f011b114:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f011b117:	c1 e1 04             	shl    $0x4,%ecx
f011b11a:	01 c8                	add    %ecx,%eax
f011b11c:	83 ec 08             	sub    $0x8,%esp
f011b11f:	52                   	push   %edx
f011b120:	50                   	push   %eax
f011b121:	e8 81 e1 fe ff       	call   f01092a7 <find_env_in_queue>
f011b126:	83 c4 10             	add    $0x10,%esp
f011b129:	85 c0                	test   %eax,%eax
f011b12b:	74 1a                	je     f011b147 <chk2+0x245>
f011b12d:	68 30 28 12 f0       	push   $0xf0122830
f011b132:	68 61 27 12 f0       	push   $0xf0122761
f011b137:	68 a6 00 00 00       	push   $0xa6
f011b13c:	68 76 27 12 f0       	push   $0xf0122776
f011b141:	e8 d8 50 fe ff       	call   f010021e <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f011b146:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f011b147:	ff 45 f0             	incl   -0x10(%ebp)
f011b14a:	a0 b4 28 7e f0       	mov    0xf07e28b4,%al
f011b14f:	0f b6 c0             	movzbl %al,%eax
f011b152:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011b155:	7f a5                	jg     f011b0fc <chk2+0x1fa>
f011b157:	eb 01                	jmp    f011b15a <chk2+0x258>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f011b159:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f011b15a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011b15d:	c9                   	leave  
f011b15e:	c3                   	ret    

f011b15f <set_program_priority>:
#include <kern/memory_manager.h>
#include <kern/kheap.h>
#include <kern/file_manager.h>

void set_program_priority(struct Env* env, int priority)
{
f011b15f:	55                   	push   %ebp
f011b160:	89 e5                	mov    %esp,%ebp
f011b162:	83 ec 08             	sub    $0x8,%esp
	panic("Program Priority function is not implemented yet\n");
f011b165:	83 ec 04             	sub    $0x4,%esp
f011b168:	68 70 28 12 f0       	push   $0xf0122870
f011b16d:	6a 0b                	push   $0xb
f011b16f:	68 a2 28 12 f0       	push   $0xf01228a2
f011b174:	e8 36 50 fe ff       	call   f01001af <_panic>

f011b179 <test_priority_normal_and_higher>:
extern int pf_calculate_free_frames() ;
extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011b179:	55                   	push   %ebp
f011b17a:	89 e5                	mov    %esp,%ebp
f011b17c:	57                   	push   %edi
f011b17d:	56                   	push   %esi
f011b17e:	53                   	push   %ebx
f011b17f:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f011b185:	a0 8b cc 15 f0       	mov    0xf015cc8b,%al
f011b18a:	84 c0                	test   %al,%al
f011b18c:	0f 84 b7 09 00 00    	je     f011bb49 <test_priority_normal_and_higher+0x9d0>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f011b192:	c6 05 8b cc 15 f0 00 	movb   $0x0,0xf015cc8b
		char command[100] = "load fos_add 20";
f011b199:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011b19f:	bb 18 2b 12 f0       	mov    $0xf0122b18,%ebx
f011b1a4:	ba 04 00 00 00       	mov    $0x4,%edx
f011b1a9:	89 c7                	mov    %eax,%edi
f011b1ab:	89 de                	mov    %ebx,%esi
f011b1ad:	89 d1                	mov    %edx,%ecx
f011b1af:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011b1b1:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f011b1b7:	b9 15 00 00 00       	mov    $0x15,%ecx
f011b1bc:	b8 00 00 00 00       	mov    $0x0,%eax
f011b1c1:	89 d7                	mov    %edx,%edi
f011b1c3:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011b1c5:	83 ec 0c             	sub    $0xc,%esp
f011b1c8:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f011b1ce:	50                   	push   %eax
f011b1cf:	e8 ae 66 fe ff       	call   f0101882 <execute_command>
f011b1d4:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011b1d7:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011b1dd:	bb 7c 2b 12 f0       	mov    $0xf0122b7c,%ebx
f011b1e2:	ba 0d 00 00 00       	mov    $0xd,%edx
f011b1e7:	89 c7                	mov    %eax,%edi
f011b1e9:	89 de                	mov    %ebx,%esi
f011b1eb:	89 d1                	mov    %edx,%ecx
f011b1ed:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011b1ef:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f011b1f5:	b9 57 00 00 00       	mov    $0x57,%ecx
f011b1fa:	b0 00                	mov    $0x0,%al
f011b1fc:	89 d7                	mov    %edx,%edi
f011b1fe:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011b200:	83 ec 0c             	sub    $0xc,%esp
f011b203:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011b209:	50                   	push   %eax
f011b20a:	e8 73 66 fe ff       	call   f0101882 <execute_command>
f011b20f:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f011b212:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011b218:	bb e0 2b 12 f0       	mov    $0xf0122be0,%ebx
f011b21d:	ba 17 00 00 00       	mov    $0x17,%edx
f011b222:	89 c7                	mov    %eax,%edi
f011b224:	89 de                	mov    %ebx,%esi
f011b226:	89 d1                	mov    %edx,%ecx
f011b228:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011b22a:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f011b230:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011b235:	b0 00                	mov    $0x0,%al
f011b237:	89 d7                	mov    %edx,%edi
f011b239:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011b23b:	83 ec 0c             	sub    $0xc,%esp
f011b23e:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011b244:	50                   	push   %eax
f011b245:	e8 38 66 fe ff       	call   f0101882 <execute_command>
f011b24a:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011b24d:	83 ec 04             	sub    $0x4,%esp
f011b250:	6a 00                	push   $0x0
f011b252:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011b255:	50                   	push   %eax
f011b256:	68 00 10 00 00       	push   $0x1000
f011b25b:	e8 1b 7f fe ff       	call   f010317b <envid2env>
f011b260:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011b263:	83 ec 04             	sub    $0x4,%esp
f011b266:	6a 00                	push   $0x0
f011b268:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011b26b:	50                   	push   %eax
f011b26c:	68 01 10 00 00       	push   $0x1001
f011b271:	e8 05 7f fe ff       	call   f010317b <envid2env>
f011b276:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011b279:	83 ec 04             	sub    $0x4,%esp
f011b27c:	6a 00                	push   $0x0
f011b27e:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f011b281:	50                   	push   %eax
f011b282:	68 02 10 00 00       	push   $0x1002
f011b287:	e8 ef 7e fe ff       	call   f010317b <envid2env>
f011b28c:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011b28f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b292:	85 c0                	test   %eax,%eax
f011b294:	74 0e                	je     f011b2a4 <test_priority_normal_and_higher+0x12b>
f011b296:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b299:	85 c0                	test   %eax,%eax
f011b29b:	74 07                	je     f011b2a4 <test_priority_normal_and_higher+0x12b>
f011b29d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b2a0:	85 c0                	test   %eax,%eax
f011b2a2:	75 14                	jne    f011b2b8 <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f011b2a4:	83 ec 04             	sub    $0x4,%esp
f011b2a7:	68 bc 28 12 f0       	push   $0xf01228bc
f011b2ac:	6a 27                	push   $0x27
f011b2ae:	68 d5 28 12 f0       	push   $0xf01228d5
f011b2b3:	e8 f7 4e fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011b2b8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b2bb:	8b 40 74             	mov    0x74(%eax),%eax
f011b2be:	83 f8 14             	cmp    $0x14,%eax
f011b2c1:	75 16                	jne    f011b2d9 <test_priority_normal_and_higher+0x160>
f011b2c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b2c6:	8b 40 74             	mov    0x74(%eax),%eax
f011b2c9:	83 f8 0f             	cmp    $0xf,%eax
f011b2cc:	75 0b                	jne    f011b2d9 <test_priority_normal_and_higher+0x160>
f011b2ce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b2d1:	8b 40 74             	mov    0x74(%eax),%eax
f011b2d4:	83 f8 0a             	cmp    $0xa,%eax
f011b2d7:	74 14                	je     f011b2ed <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f011b2d9:	83 ec 04             	sub    $0x4,%esp
f011b2dc:	68 ec 28 12 f0       	push   $0xf01228ec
f011b2e1:	6a 2a                	push   $0x2a
f011b2e3:	68 d5 28 12 f0       	push   $0xf01228d5
f011b2e8:	e8 c2 4e fe ff       	call   f01001af <_panic>

		for(int i = 0; i < 20; i++)
f011b2ed:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011b2f4:	eb 44                	jmp    f011b33a <test_priority_normal_and_higher+0x1c1>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011b2f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b2f9:	8b 48 78             	mov    0x78(%eax),%ecx
f011b2fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b2ff:	89 d0                	mov    %edx,%eax
f011b301:	01 c0                	add    %eax,%eax
f011b303:	01 d0                	add    %edx,%eax
f011b305:	c1 e0 02             	shl    $0x2,%eax
f011b308:	01 c8                	add    %ecx,%eax
f011b30a:	8b 10                	mov    (%eax),%edx
f011b30c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b30f:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011b316:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b319:	8b 48 78             	mov    0x78(%eax),%ecx
f011b31c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011b31f:	89 d0                	mov    %edx,%eax
f011b321:	01 c0                	add    %eax,%eax
f011b323:	01 d0                	add    %edx,%eax
f011b325:	c1 e0 02             	shl    $0x2,%eax
f011b328:	01 c8                	add    %ecx,%eax
f011b32a:	8b 50 08             	mov    0x8(%eax),%edx
f011b32d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011b330:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011b337:	ff 45 e4             	incl   -0x1c(%ebp)
f011b33a:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011b33e:	7e b6                	jle    f011b2f6 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011b340:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011b347:	eb 44                	jmp    f011b38d <test_priority_normal_and_higher+0x214>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011b349:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b34c:	8b 48 78             	mov    0x78(%eax),%ecx
f011b34f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011b352:	89 d0                	mov    %edx,%eax
f011b354:	01 c0                	add    %eax,%eax
f011b356:	01 d0                	add    %edx,%eax
f011b358:	c1 e0 02             	shl    $0x2,%eax
f011b35b:	01 c8                	add    %ecx,%eax
f011b35d:	8b 10                	mov    (%eax),%edx
f011b35f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b362:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011b369:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b36c:	8b 48 78             	mov    0x78(%eax),%ecx
f011b36f:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011b372:	89 d0                	mov    %edx,%eax
f011b374:	01 c0                	add    %eax,%eax
f011b376:	01 d0                	add    %edx,%eax
f011b378:	c1 e0 02             	shl    $0x2,%eax
f011b37b:	01 c8                	add    %ecx,%eax
f011b37d:	8b 50 08             	mov    0x8(%eax),%edx
f011b380:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011b383:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011b38a:	ff 45 e0             	incl   -0x20(%ebp)
f011b38d:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f011b391:	7e b6                	jle    f011b349 <test_priority_normal_and_higher+0x1d0>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011b393:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011b39a:	eb 44                	jmp    f011b3e0 <test_priority_normal_and_higher+0x267>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011b39c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b39f:	8b 48 78             	mov    0x78(%eax),%ecx
f011b3a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b3a5:	89 d0                	mov    %edx,%eax
f011b3a7:	01 c0                	add    %eax,%eax
f011b3a9:	01 d0                	add    %edx,%eax
f011b3ab:	c1 e0 02             	shl    $0x2,%eax
f011b3ae:	01 c8                	add    %ecx,%eax
f011b3b0:	8b 10                	mov    (%eax),%edx
f011b3b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b3b5:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011b3bc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b3bf:	8b 48 78             	mov    0x78(%eax),%ecx
f011b3c2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b3c5:	89 d0                	mov    %edx,%eax
f011b3c7:	01 c0                	add    %eax,%eax
f011b3c9:	01 d0                	add    %edx,%eax
f011b3cb:	c1 e0 02             	shl    $0x2,%eax
f011b3ce:	01 c8                	add    %ecx,%eax
f011b3d0:	8b 50 08             	mov    0x8(%eax),%edx
f011b3d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011b3d6:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f011b3dd:	ff 45 dc             	incl   -0x24(%ebp)
f011b3e0:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011b3e4:	7e b6                	jle    f011b39c <test_priority_normal_and_higher+0x223>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011b3e6:	e8 63 f6 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b3eb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f011b3ee:	e8 87 0d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b3f3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011b3f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b3f9:	83 ec 08             	sub    $0x8,%esp
f011b3fc:	6a 03                	push   $0x3
f011b3fe:	50                   	push   %eax
f011b3ff:	e8 5b fd ff ff       	call   f011b15f <set_program_priority>
f011b404:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011b407:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b40a:	83 ec 08             	sub    $0x8,%esp
f011b40d:	6a 03                	push   $0x3
f011b40f:	50                   	push   %eax
f011b410:	e8 4a fd ff ff       	call   f011b15f <set_program_priority>
f011b415:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011b418:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b41b:	83 ec 08             	sub    $0x8,%esp
f011b41e:	6a 03                	push   $0x3
f011b420:	50                   	push   %eax
f011b421:	e8 39 fd ff ff       	call   f011b15f <set_program_priority>
f011b426:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b429:	e8 4c 0d ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b42e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b431:	74 14                	je     f011b447 <test_priority_normal_and_higher+0x2ce>
f011b433:	83 ec 04             	sub    $0x4,%esp
f011b436:	68 38 29 12 f0       	push   $0xf0122938
f011b43b:	6a 46                	push   $0x46
f011b43d:	68 d5 28 12 f0       	push   $0xf01228d5
f011b442:	e8 68 4d fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011b447:	e8 02 f6 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b44c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b44f:	74 14                	je     f011b465 <test_priority_normal_and_higher+0x2ec>
f011b451:	83 ec 04             	sub    $0x4,%esp
f011b454:	68 38 29 12 f0       	push   $0xf0122938
f011b459:	6a 47                	push   $0x47
f011b45b:	68 d5 28 12 f0       	push   $0xf01228d5
f011b460:	e8 4a 4d fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011b465:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b468:	8b 40 74             	mov    0x74(%eax),%eax
f011b46b:	83 f8 14             	cmp    $0x14,%eax
f011b46e:	75 16                	jne    f011b486 <test_priority_normal_and_higher+0x30d>
f011b470:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b473:	8b 40 74             	mov    0x74(%eax),%eax
f011b476:	83 f8 0f             	cmp    $0xf,%eax
f011b479:	75 0b                	jne    f011b486 <test_priority_normal_and_higher+0x30d>
f011b47b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b47e:	8b 40 74             	mov    0x74(%eax),%eax
f011b481:	83 f8 0a             	cmp    $0xa,%eax
f011b484:	74 14                	je     f011b49a <test_priority_normal_and_higher+0x321>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011b486:	83 ec 04             	sub    $0x4,%esp
f011b489:	68 64 29 12 f0       	push   $0xf0122964
f011b48e:	6a 4a                	push   $0x4a
f011b490:	68 d5 28 12 f0       	push   $0xf01228d5
f011b495:	e8 15 4d fe ff       	call   f01001af <_panic>

		freeFrames = sys_calculate_free_frames();
f011b49a:	e8 af f5 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b49f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4a2:	e8 d3 0c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b4a7:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f011b4aa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b4ad:	83 ec 08             	sub    $0x8,%esp
f011b4b0:	6a 04                	push   $0x4
f011b4b2:	50                   	push   %eax
f011b4b3:	e8 a7 fc ff ff       	call   f011b15f <set_program_priority>
f011b4b8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f011b4bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b4be:	83 ec 08             	sub    $0x8,%esp
f011b4c1:	6a 04                	push   $0x4
f011b4c3:	50                   	push   %eax
f011b4c4:	e8 96 fc ff ff       	call   f011b15f <set_program_priority>
f011b4c9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011b4cc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b4cf:	83 ec 08             	sub    $0x8,%esp
f011b4d2:	6a 04                	push   $0x4
f011b4d4:	50                   	push   %eax
f011b4d5:	e8 85 fc ff ff       	call   f011b15f <set_program_priority>
f011b4da:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b4dd:	e8 98 0c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b4e2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b4e5:	74 14                	je     f011b4fb <test_priority_normal_and_higher+0x382>
f011b4e7:	83 ec 04             	sub    $0x4,%esp
f011b4ea:	68 38 29 12 f0       	push   $0xf0122938
f011b4ef:	6a 54                	push   $0x54
f011b4f1:	68 d5 28 12 f0       	push   $0xf01228d5
f011b4f6:	e8 b4 4c fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011b4fb:	e8 4e f5 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b500:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b503:	74 14                	je     f011b519 <test_priority_normal_and_higher+0x3a0>
f011b505:	83 ec 04             	sub    $0x4,%esp
f011b508:	68 b8 29 12 f0       	push   $0xf01229b8
f011b50d:	6a 55                	push   $0x55
f011b50f:	68 d5 28 12 f0       	push   $0xf01228d5
f011b514:	e8 96 4c fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011b519:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b51c:	8b 40 74             	mov    0x74(%eax),%eax
f011b51f:	83 f8 14             	cmp    $0x14,%eax
f011b522:	75 16                	jne    f011b53a <test_priority_normal_and_higher+0x3c1>
f011b524:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b527:	8b 40 74             	mov    0x74(%eax),%eax
f011b52a:	83 f8 0f             	cmp    $0xf,%eax
f011b52d:	75 0b                	jne    f011b53a <test_priority_normal_and_higher+0x3c1>
f011b52f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b532:	8b 40 74             	mov    0x74(%eax),%eax
f011b535:	83 f8 14             	cmp    $0x14,%eax
f011b538:	74 14                	je     f011b54e <test_priority_normal_and_higher+0x3d5>
			panic("The programs' working set size should be doubled only if it is full\n");
f011b53a:	83 ec 04             	sub    $0x4,%esp
f011b53d:	68 e8 29 12 f0       	push   $0xf01229e8
f011b542:	6a 58                	push   $0x58
f011b544:	68 d5 28 12 f0       	push   $0xf01228d5
f011b549:	e8 61 4c fe ff       	call   f01001af <_panic>

		freeFrames = sys_calculate_free_frames();
f011b54e:	e8 fb f4 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b553:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b556:	e8 1f 0c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b55b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f011b55e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b561:	83 ec 08             	sub    $0x8,%esp
f011b564:	6a 04                	push   $0x4
f011b566:	50                   	push   %eax
f011b567:	e8 f3 fb ff ff       	call   f011b15f <set_program_priority>
f011b56c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b56f:	e8 06 0c ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b574:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b577:	74 14                	je     f011b58d <test_priority_normal_and_higher+0x414>
f011b579:	83 ec 04             	sub    $0x4,%esp
f011b57c:	68 38 29 12 f0       	push   $0xf0122938
f011b581:	6a 60                	push   $0x60
f011b583:	68 d5 28 12 f0       	push   $0xf01228d5
f011b588:	e8 22 4c fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011b58d:	e8 bc f4 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b592:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b595:	74 14                	je     f011b5ab <test_priority_normal_and_higher+0x432>
f011b597:	83 ec 04             	sub    $0x4,%esp
f011b59a:	68 38 29 12 f0       	push   $0xf0122938
f011b59f:	6a 61                	push   $0x61
f011b5a1:	68 d5 28 12 f0       	push   $0xf01228d5
f011b5a6:	e8 04 4c fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011b5ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b5ae:	8b 40 74             	mov    0x74(%eax),%eax
f011b5b1:	83 f8 14             	cmp    $0x14,%eax
f011b5b4:	75 16                	jne    f011b5cc <test_priority_normal_and_higher+0x453>
f011b5b6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b5b9:	8b 40 74             	mov    0x74(%eax),%eax
f011b5bc:	83 f8 0f             	cmp    $0xf,%eax
f011b5bf:	75 0b                	jne    f011b5cc <test_priority_normal_and_higher+0x453>
f011b5c1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b5c4:	8b 40 74             	mov    0x74(%eax),%eax
f011b5c7:	83 f8 14             	cmp    $0x14,%eax
f011b5ca:	74 14                	je     f011b5e0 <test_priority_normal_and_higher+0x467>
			panic("The programs' working set size should be doubled only once\n");
f011b5cc:	83 ec 04             	sub    $0x4,%esp
f011b5cf:	68 30 2a 12 f0       	push   $0xf0122a30
f011b5d4:	6a 64                	push   $0x64
f011b5d6:	68 d5 28 12 f0       	push   $0xf01228d5
f011b5db:	e8 cf 4b fe ff       	call   f01001af <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011b5e0:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011b5e7:	eb 1b                	jmp    f011b604 <test_priority_normal_and_higher+0x48b>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011b5e9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b5ec:	8b 48 78             	mov    0x78(%eax),%ecx
f011b5ef:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011b5f2:	89 d0                	mov    %edx,%eax
f011b5f4:	01 c0                	add    %eax,%eax
f011b5f6:	01 d0                	add    %edx,%eax
f011b5f8:	c1 e0 02             	shl    $0x2,%eax
f011b5fb:	01 c8                	add    %ecx,%eax
f011b5fd:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f011b601:	ff 45 d8             	incl   -0x28(%ebp)
f011b604:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011b608:	7e df                	jle    f011b5e9 <test_priority_normal_and_higher+0x470>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011b60a:	e8 3f f4 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b60f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b612:	e8 63 0b ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b617:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f011b61a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b61d:	83 ec 08             	sub    $0x8,%esp
f011b620:	6a 04                	push   $0x4
f011b622:	50                   	push   %eax
f011b623:	e8 37 fb ff ff       	call   f011b15f <set_program_priority>
f011b628:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b62b:	e8 4a 0b ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b630:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b633:	74 14                	je     f011b649 <test_priority_normal_and_higher+0x4d0>
f011b635:	83 ec 04             	sub    $0x4,%esp
f011b638:	68 38 29 12 f0       	push   $0xf0122938
f011b63d:	6a 71                	push   $0x71
f011b63f:	68 d5 28 12 f0       	push   $0xf01228d5
f011b644:	e8 66 4b fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011b649:	e8 00 f4 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b64e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b651:	74 14                	je     f011b667 <test_priority_normal_and_higher+0x4ee>
f011b653:	83 ec 04             	sub    $0x4,%esp
f011b656:	68 38 29 12 f0       	push   $0xf0122938
f011b65b:	6a 72                	push   $0x72
f011b65d:	68 d5 28 12 f0       	push   $0xf01228d5
f011b662:	e8 48 4b fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011b667:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b66a:	8b 40 74             	mov    0x74(%eax),%eax
f011b66d:	83 f8 14             	cmp    $0x14,%eax
f011b670:	75 16                	jne    f011b688 <test_priority_normal_and_higher+0x50f>
f011b672:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b675:	8b 40 74             	mov    0x74(%eax),%eax
f011b678:	83 f8 0f             	cmp    $0xf,%eax
f011b67b:	75 0b                	jne    f011b688 <test_priority_normal_and_higher+0x50f>
f011b67d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b680:	8b 40 74             	mov    0x74(%eax),%eax
f011b683:	83 f8 14             	cmp    $0x14,%eax
f011b686:	74 14                	je     f011b69c <test_priority_normal_and_higher+0x523>
			panic("The programs' working set size should be doubled only once\n");
f011b688:	83 ec 04             	sub    $0x4,%esp
f011b68b:	68 30 2a 12 f0       	push   $0xf0122a30
f011b690:	6a 75                	push   $0x75
f011b692:	68 d5 28 12 f0       	push   $0xf01228d5
f011b697:	e8 13 4b fe ff       	call   f01001af <_panic>

		for(int i = 10; i < 15; i++)
f011b69c:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f011b6a3:	eb 1b                	jmp    f011b6c0 <test_priority_normal_and_higher+0x547>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011b6a5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b6a8:	8b 48 78             	mov    0x78(%eax),%ecx
f011b6ab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011b6ae:	89 d0                	mov    %edx,%eax
f011b6b0:	01 c0                	add    %eax,%eax
f011b6b2:	01 d0                	add    %edx,%eax
f011b6b4:	c1 e0 02             	shl    $0x2,%eax
f011b6b7:	01 c8                	add    %ecx,%eax
f011b6b9:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011b6bd:	ff 45 d4             	incl   -0x2c(%ebp)
f011b6c0:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011b6c4:	7e df                	jle    f011b6a5 <test_priority_normal_and_higher+0x52c>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011b6c6:	e8 83 f3 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b6cb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b6ce:	e8 a7 0a ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b6d3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011b6d6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b6d9:	83 ec 08             	sub    $0x8,%esp
f011b6dc:	6a 05                	push   $0x5
f011b6de:	50                   	push   %eax
f011b6df:	e8 7b fa ff ff       	call   f011b15f <set_program_priority>
f011b6e4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f011b6e7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b6ea:	83 ec 08             	sub    $0x8,%esp
f011b6ed:	6a 05                	push   $0x5
f011b6ef:	50                   	push   %eax
f011b6f0:	e8 6a fa ff ff       	call   f011b15f <set_program_priority>
f011b6f5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b6f8:	e8 7d 0a ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b6fd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b700:	74 17                	je     f011b719 <test_priority_normal_and_higher+0x5a0>
f011b702:	83 ec 04             	sub    $0x4,%esp
f011b705:	68 38 29 12 f0       	push   $0xf0122938
f011b70a:	68 80 00 00 00       	push   $0x80
f011b70f:	68 d5 28 12 f0       	push   $0xf01228d5
f011b714:	e8 96 4a fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011b719:	e8 30 f3 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b71e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b721:	74 17                	je     f011b73a <test_priority_normal_and_higher+0x5c1>
f011b723:	83 ec 04             	sub    $0x4,%esp
f011b726:	68 38 29 12 f0       	push   $0xf0122938
f011b72b:	68 81 00 00 00       	push   $0x81
f011b730:	68 d5 28 12 f0       	push   $0xf01228d5
f011b735:	e8 75 4a fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011b73a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b73d:	8b 40 74             	mov    0x74(%eax),%eax
f011b740:	83 f8 14             	cmp    $0x14,%eax
f011b743:	75 16                	jne    f011b75b <test_priority_normal_and_higher+0x5e2>
f011b745:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b748:	8b 40 74             	mov    0x74(%eax),%eax
f011b74b:	83 f8 1e             	cmp    $0x1e,%eax
f011b74e:	75 0b                	jne    f011b75b <test_priority_normal_and_higher+0x5e2>
f011b750:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b753:	8b 40 74             	mov    0x74(%eax),%eax
f011b756:	83 f8 28             	cmp    $0x28,%eax
f011b759:	74 17                	je     f011b772 <test_priority_normal_and_higher+0x5f9>
			panic("The programs' working set size should be doubled if full\n");
f011b75b:	83 ec 04             	sub    $0x4,%esp
f011b75e:	68 6c 2a 12 f0       	push   $0xf0122a6c
f011b763:	68 84 00 00 00       	push   $0x84
f011b768:	68 d5 28 12 f0       	push   $0xf01228d5
f011b76d:	e8 3d 4a fe ff       	call   f01001af <_panic>

		for(int i = 20; i < 40; i++)
f011b772:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f011b779:	eb 1b                	jmp    f011b796 <test_priority_normal_and_higher+0x61d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011b77b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b77e:	8b 48 78             	mov    0x78(%eax),%ecx
f011b781:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011b784:	89 d0                	mov    %edx,%eax
f011b786:	01 c0                	add    %eax,%eax
f011b788:	01 d0                	add    %edx,%eax
f011b78a:	c1 e0 02             	shl    $0x2,%eax
f011b78d:	01 c8                	add    %ecx,%eax
f011b78f:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011b793:	ff 45 d0             	incl   -0x30(%ebp)
f011b796:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f011b79a:	7e df                	jle    f011b77b <test_priority_normal_and_higher+0x602>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011b79c:	e8 ad f2 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b7a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b7a4:	e8 d1 09 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b7a9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011b7ac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b7af:	83 ec 08             	sub    $0x8,%esp
f011b7b2:	6a 05                	push   $0x5
f011b7b4:	50                   	push   %eax
f011b7b5:	e8 a5 f9 ff ff       	call   f011b15f <set_program_priority>
f011b7ba:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011b7bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b7c0:	83 ec 08             	sub    $0x8,%esp
f011b7c3:	6a 04                	push   $0x4
f011b7c5:	50                   	push   %eax
f011b7c6:	e8 94 f9 ff ff       	call   f011b15f <set_program_priority>
f011b7cb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b7ce:	e8 a7 09 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b7d3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b7d6:	74 17                	je     f011b7ef <test_priority_normal_and_higher+0x676>
f011b7d8:	83 ec 04             	sub    $0x4,%esp
f011b7db:	68 38 29 12 f0       	push   $0xf0122938
f011b7e0:	68 8f 00 00 00       	push   $0x8f
f011b7e5:	68 d5 28 12 f0       	push   $0xf01228d5
f011b7ea:	e8 c0 49 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011b7ef:	e8 5a f2 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b7f4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b7f7:	74 17                	je     f011b810 <test_priority_normal_and_higher+0x697>
f011b7f9:	83 ec 04             	sub    $0x4,%esp
f011b7fc:	68 38 29 12 f0       	push   $0xf0122938
f011b801:	68 90 00 00 00       	push   $0x90
f011b806:	68 d5 28 12 f0       	push   $0xf01228d5
f011b80b:	e8 9f 49 fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011b810:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b813:	8b 40 74             	mov    0x74(%eax),%eax
f011b816:	83 f8 14             	cmp    $0x14,%eax
f011b819:	75 16                	jne    f011b831 <test_priority_normal_and_higher+0x6b8>
f011b81b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b81e:	8b 40 74             	mov    0x74(%eax),%eax
f011b821:	83 f8 1e             	cmp    $0x1e,%eax
f011b824:	75 0b                	jne    f011b831 <test_priority_normal_and_higher+0x6b8>
f011b826:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b829:	8b 40 74             	mov    0x74(%eax),%eax
f011b82c:	83 f8 28             	cmp    $0x28,%eax
f011b82f:	74 17                	je     f011b848 <test_priority_normal_and_higher+0x6cf>
			panic("The programs' working set size should be doubled if full\n");
f011b831:	83 ec 04             	sub    $0x4,%esp
f011b834:	68 6c 2a 12 f0       	push   $0xf0122a6c
f011b839:	68 93 00 00 00       	push   $0x93
f011b83e:	68 d5 28 12 f0       	push   $0xf01228d5
f011b843:	e8 67 49 fe ff       	call   f01001af <_panic>

		for(int i = 15; i < 30; i++)
f011b848:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f011b84f:	eb 1b                	jmp    f011b86c <test_priority_normal_and_higher+0x6f3>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011b851:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b854:	8b 48 78             	mov    0x78(%eax),%ecx
f011b857:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011b85a:	89 d0                	mov    %edx,%eax
f011b85c:	01 c0                	add    %eax,%eax
f011b85e:	01 d0                	add    %edx,%eax
f011b860:	c1 e0 02             	shl    $0x2,%eax
f011b863:	01 c8                	add    %ecx,%eax
f011b865:	c6 40 04 00          	movb   $0x0,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011b869:	ff 45 cc             	incl   -0x34(%ebp)
f011b86c:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f011b870:	7e df                	jle    f011b851 <test_priority_normal_and_higher+0x6d8>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011b872:	e8 d7 f1 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b877:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b87a:	e8 fb 08 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b87f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011b882:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b885:	83 ec 08             	sub    $0x8,%esp
f011b888:	6a 05                	push   $0x5
f011b88a:	50                   	push   %eax
f011b88b:	e8 cf f8 ff ff       	call   f011b15f <set_program_priority>
f011b890:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011b893:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b896:	83 ec 08             	sub    $0x8,%esp
f011b899:	6a 04                	push   $0x4
f011b89b:	50                   	push   %eax
f011b89c:	e8 be f8 ff ff       	call   f011b15f <set_program_priority>
f011b8a1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011b8a4:	e8 d1 08 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011b8a9:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011b8ac:	74 17                	je     f011b8c5 <test_priority_normal_and_higher+0x74c>
f011b8ae:	83 ec 04             	sub    $0x4,%esp
f011b8b1:	68 38 29 12 f0       	push   $0xf0122938
f011b8b6:	68 9e 00 00 00       	push   $0x9e
f011b8bb:	68 d5 28 12 f0       	push   $0xf01228d5
f011b8c0:	e8 ea 48 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011b8c5:	e8 84 f1 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011b8ca:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011b8cd:	74 17                	je     f011b8e6 <test_priority_normal_and_higher+0x76d>
f011b8cf:	83 ec 04             	sub    $0x4,%esp
f011b8d2:	68 38 29 12 f0       	push   $0xf0122938
f011b8d7:	68 9f 00 00 00       	push   $0x9f
f011b8dc:	68 d5 28 12 f0       	push   $0xf01228d5
f011b8e1:	e8 c9 48 fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011b8e6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b8e9:	8b 40 74             	mov    0x74(%eax),%eax
f011b8ec:	83 f8 14             	cmp    $0x14,%eax
f011b8ef:	75 16                	jne    f011b907 <test_priority_normal_and_higher+0x78e>
f011b8f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b8f4:	8b 40 74             	mov    0x74(%eax),%eax
f011b8f7:	83 f8 3c             	cmp    $0x3c,%eax
f011b8fa:	75 0b                	jne    f011b907 <test_priority_normal_and_higher+0x78e>
f011b8fc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b8ff:	8b 40 74             	mov    0x74(%eax),%eax
f011b902:	83 f8 28             	cmp    $0x28,%eax
f011b905:	74 17                	je     f011b91e <test_priority_normal_and_higher+0x7a5>
			panic("The programs' working set size should be doubled if full\n");
f011b907:	83 ec 04             	sub    $0x4,%esp
f011b90a:	68 6c 2a 12 f0       	push   $0xf0122a6c
f011b90f:	68 a2 00 00 00       	push   $0xa2
f011b914:	68 d5 28 12 f0       	push   $0xf01228d5
f011b919:	e8 91 48 fe ff       	call   f01001af <_panic>

		for(int i = 15; i < 60; i++)
f011b91e:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f011b925:	eb 1b                	jmp    f011b942 <test_priority_normal_and_higher+0x7c9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011b927:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b92a:	8b 48 78             	mov    0x78(%eax),%ecx
f011b92d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011b930:	89 d0                	mov    %edx,%eax
f011b932:	01 c0                	add    %eax,%eax
f011b934:	01 d0                	add    %edx,%eax
f011b936:	c1 e0 02             	shl    $0x2,%eax
f011b939:	01 c8                	add    %ecx,%eax
f011b93b:	c6 40 04 01          	movb   $0x1,0x4(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011b93f:	ff 45 c8             	incl   -0x38(%ebp)
f011b942:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f011b946:	7e df                	jle    f011b927 <test_priority_normal_and_higher+0x7ae>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011b948:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011b94f:	eb 1b                	jmp    f011b96c <test_priority_normal_and_higher+0x7f3>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f011b951:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b954:	8b 48 78             	mov    0x78(%eax),%ecx
f011b957:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011b95a:	89 d0                	mov    %edx,%eax
f011b95c:	01 c0                	add    %eax,%eax
f011b95e:	01 d0                	add    %edx,%eax
f011b960:	c1 e0 02             	shl    $0x2,%eax
f011b963:	01 c8                	add    %ecx,%eax
f011b965:	c6 40 04 01          	movb   $0x1,0x4(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011b969:	ff 45 c4             	incl   -0x3c(%ebp)
f011b96c:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f011b970:	7e df                	jle    f011b951 <test_priority_normal_and_higher+0x7d8>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011b972:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f011b979:	eb 7a                	jmp    f011b9f5 <test_priority_normal_and_higher+0x87c>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011b97b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b97e:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f011b985:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b988:	8b 58 78             	mov    0x78(%eax),%ebx
f011b98b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011b98e:	89 d0                	mov    %edx,%eax
f011b990:	01 c0                	add    %eax,%eax
f011b992:	01 d0                	add    %edx,%eax
f011b994:	c1 e0 02             	shl    $0x2,%eax
f011b997:	01 d8                	add    %ebx,%eax
f011b999:	8b 00                	mov    (%eax),%eax
f011b99b:	39 c1                	cmp    %eax,%ecx
f011b99d:	74 17                	je     f011b9b6 <test_priority_normal_and_higher+0x83d>
				panic("Working set should be moved properly to the new one");
f011b99f:	83 ec 04             	sub    $0x4,%esp
f011b9a2:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011b9a7:	68 b0 00 00 00       	push   $0xb0
f011b9ac:	68 d5 28 12 f0       	push   $0xf01228d5
f011b9b1:	e8 f9 47 fe ff       	call   f01001af <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011b9b6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b9b9:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f011b9c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b9c3:	8b 58 78             	mov    0x78(%eax),%ebx
f011b9c6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011b9c9:	89 d0                	mov    %edx,%eax
f011b9cb:	01 c0                	add    %eax,%eax
f011b9cd:	01 d0                	add    %edx,%eax
f011b9cf:	c1 e0 02             	shl    $0x2,%eax
f011b9d2:	01 d8                	add    %ebx,%eax
f011b9d4:	8b 40 08             	mov    0x8(%eax),%eax
f011b9d7:	39 c1                	cmp    %eax,%ecx
f011b9d9:	74 17                	je     f011b9f2 <test_priority_normal_and_higher+0x879>
				panic("Working set should be moved properly to the new one");
f011b9db:	83 ec 04             	sub    $0x4,%esp
f011b9de:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011b9e3:	68 b3 00 00 00       	push   $0xb3
f011b9e8:	68 d5 28 12 f0       	push   $0xf01228d5
f011b9ed:	e8 bd 47 fe ff       	call   f01001af <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011b9f2:	ff 45 c0             	incl   -0x40(%ebp)
f011b9f5:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011b9f9:	7e 80                	jle    f011b97b <test_priority_normal_and_higher+0x802>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011b9fb:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011ba02:	eb 7a                	jmp    f011ba7e <test_priority_normal_and_higher+0x905>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011ba04:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ba07:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011ba0e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba11:	8b 58 78             	mov    0x78(%eax),%ebx
f011ba14:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011ba17:	89 d0                	mov    %edx,%eax
f011ba19:	01 c0                	add    %eax,%eax
f011ba1b:	01 d0                	add    %edx,%eax
f011ba1d:	c1 e0 02             	shl    $0x2,%eax
f011ba20:	01 d8                	add    %ebx,%eax
f011ba22:	8b 00                	mov    (%eax),%eax
f011ba24:	39 c1                	cmp    %eax,%ecx
f011ba26:	74 17                	je     f011ba3f <test_priority_normal_and_higher+0x8c6>
				panic("Working set should be moved properly to the new one");
f011ba28:	83 ec 04             	sub    $0x4,%esp
f011ba2b:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011ba30:	68 b9 00 00 00       	push   $0xb9
f011ba35:	68 d5 28 12 f0       	push   $0xf01228d5
f011ba3a:	e8 70 47 fe ff       	call   f01001af <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011ba3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ba42:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f011ba49:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011ba4c:	8b 58 78             	mov    0x78(%eax),%ebx
f011ba4f:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011ba52:	89 d0                	mov    %edx,%eax
f011ba54:	01 c0                	add    %eax,%eax
f011ba56:	01 d0                	add    %edx,%eax
f011ba58:	c1 e0 02             	shl    $0x2,%eax
f011ba5b:	01 d8                	add    %ebx,%eax
f011ba5d:	8b 40 08             	mov    0x8(%eax),%eax
f011ba60:	39 c1                	cmp    %eax,%ecx
f011ba62:	74 17                	je     f011ba7b <test_priority_normal_and_higher+0x902>
				panic("Working set should be moved properly to the new one");
f011ba64:	83 ec 04             	sub    $0x4,%esp
f011ba67:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011ba6c:	68 bc 00 00 00       	push   $0xbc
f011ba71:	68 d5 28 12 f0       	push   $0xf01228d5
f011ba76:	e8 34 47 fe ff       	call   f01001af <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011ba7b:	ff 45 bc             	incl   -0x44(%ebp)
f011ba7e:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011ba82:	7e 80                	jle    f011ba04 <test_priority_normal_and_higher+0x88b>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011ba84:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f011ba8b:	eb 7a                	jmp    f011bb07 <test_priority_normal_and_higher+0x98e>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011ba8d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ba90:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011ba97:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ba9a:	8b 58 78             	mov    0x78(%eax),%ebx
f011ba9d:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011baa0:	89 d0                	mov    %edx,%eax
f011baa2:	01 c0                	add    %eax,%eax
f011baa4:	01 d0                	add    %edx,%eax
f011baa6:	c1 e0 02             	shl    $0x2,%eax
f011baa9:	01 d8                	add    %ebx,%eax
f011baab:	8b 00                	mov    (%eax),%eax
f011baad:	39 c1                	cmp    %eax,%ecx
f011baaf:	74 17                	je     f011bac8 <test_priority_normal_and_higher+0x94f>
				panic("Working set should be moved properly to the new one");
f011bab1:	83 ec 04             	sub    $0x4,%esp
f011bab4:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011bab9:	68 c2 00 00 00       	push   $0xc2
f011babe:	68 d5 28 12 f0       	push   $0xf01228d5
f011bac3:	e8 e7 46 fe ff       	call   f01001af <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011bac8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bacb:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f011bad2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bad5:	8b 58 78             	mov    0x78(%eax),%ebx
f011bad8:	8b 55 b8             	mov    -0x48(%ebp),%edx
f011badb:	89 d0                	mov    %edx,%eax
f011badd:	01 c0                	add    %eax,%eax
f011badf:	01 d0                	add    %edx,%eax
f011bae1:	c1 e0 02             	shl    $0x2,%eax
f011bae4:	01 d8                	add    %ebx,%eax
f011bae6:	8b 40 08             	mov    0x8(%eax),%eax
f011bae9:	39 c1                	cmp    %eax,%ecx
f011baeb:	74 17                	je     f011bb04 <test_priority_normal_and_higher+0x98b>
				panic("Working set should be moved properly to the new one");
f011baed:	83 ec 04             	sub    $0x4,%esp
f011baf0:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011baf5:	68 c5 00 00 00       	push   $0xc5
f011bafa:	68 d5 28 12 f0       	push   $0xf01228d5
f011baff:	e8 ab 46 fe ff       	call   f01001af <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011bb04:	ff 45 b8             	incl   -0x48(%ebp)
f011bb07:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011bb0b:	7e 80                	jle    f011ba8d <test_priority_normal_and_higher+0x914>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f011bb0d:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011bb14:	75 6e 61 
f011bb17:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f011bb1e:	6c 00 00 
f011bb21:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011bb27:	b9 17 00 00 00       	mov    $0x17,%ecx
f011bb2c:	b8 00 00 00 00       	mov    $0x0,%eax
f011bb31:	89 d7                	mov    %edx,%edi
f011bb33:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011bb35:	83 ec 0c             	sub    $0xc,%esp
f011bb38:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f011bb3e:	50                   	push   %eax
f011bb3f:	e8 3e 5d fe ff       	call   f0101882 <execute_command>
f011bb44:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011bb47:	eb 10                	jmp    f011bb59 <test_priority_normal_and_higher+0x9e0>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011bb49:	83 ec 0c             	sub    $0xc,%esp
f011bb4c:	68 dc 2a 12 f0       	push   $0xf0122adc
f011bb51:	e8 ae b6 fe ff       	call   f0107204 <cprintf>
f011bb56:	83 c4 10             	add    $0x10,%esp
	}
}
f011bb59:	90                   	nop
f011bb5a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011bb5d:	5b                   	pop    %ebx
f011bb5e:	5e                   	pop    %esi
f011bb5f:	5f                   	pop    %edi
f011bb60:	5d                   	pop    %ebp
f011bb61:	c3                   	ret    

f011bb62 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011bb62:	55                   	push   %ebp
f011bb63:	89 e5                	mov    %esp,%ebp
f011bb65:	57                   	push   %edi
f011bb66:	56                   	push   %esi
f011bb67:	53                   	push   %ebx
f011bb68:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f011bb6e:	a0 8b cc 15 f0       	mov    0xf015cc8b,%al
f011bb73:	84 c0                	test   %al,%al
f011bb75:	0f 84 be 09 00 00    	je     f011c539 <test_priority_normal_and_lower+0x9d7>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011bb7b:	c6 05 8b cc 15 f0 00 	movb   $0x0,0xf015cc8b
		char command[100] = "load fos_add 20";
f011bb82:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011bb88:	bb 18 2b 12 f0       	mov    $0xf0122b18,%ebx
f011bb8d:	ba 04 00 00 00       	mov    $0x4,%edx
f011bb92:	89 c7                	mov    %eax,%edi
f011bb94:	89 de                	mov    %ebx,%esi
f011bb96:	89 d1                	mov    %edx,%ecx
f011bb98:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011bb9a:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f011bba0:	b9 15 00 00 00       	mov    $0x15,%ecx
f011bba5:	b8 00 00 00 00       	mov    $0x0,%eax
f011bbaa:	89 d7                	mov    %edx,%edi
f011bbac:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f011bbae:	83 ec 0c             	sub    $0xc,%esp
f011bbb1:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011bbb7:	50                   	push   %eax
f011bbb8:	e8 c5 5c fe ff       	call   f0101882 <execute_command>
f011bbbd:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f011bbc0:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011bbc6:	bb d4 2d 12 f0       	mov    $0xf0122dd4,%ebx
f011bbcb:	ba 0d 00 00 00       	mov    $0xd,%edx
f011bbd0:	89 c7                	mov    %eax,%edi
f011bbd2:	89 de                	mov    %ebx,%esi
f011bbd4:	89 d1                	mov    %edx,%ecx
f011bbd6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011bbd8:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f011bbde:	b9 57 00 00 00       	mov    $0x57,%ecx
f011bbe3:	b0 00                	mov    $0x0,%al
f011bbe5:	89 d7                	mov    %edx,%edi
f011bbe7:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011bbe9:	83 ec 0c             	sub    $0xc,%esp
f011bbec:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011bbf2:	50                   	push   %eax
f011bbf3:	e8 8a 5c fe ff       	call   f0101882 <execute_command>
f011bbf8:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f011bbfb:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011bc01:	bb 38 2e 12 f0       	mov    $0xf0122e38,%ebx
f011bc06:	ba 17 00 00 00       	mov    $0x17,%edx
f011bc0b:	89 c7                	mov    %eax,%edi
f011bc0d:	89 de                	mov    %ebx,%esi
f011bc0f:	89 d1                	mov    %edx,%ecx
f011bc11:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011bc13:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011bc19:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f011bc1e:	b0 00                	mov    $0x0,%al
f011bc20:	89 d7                	mov    %edx,%edi
f011bc22:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011bc24:	83 ec 0c             	sub    $0xc,%esp
f011bc27:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011bc2d:	50                   	push   %eax
f011bc2e:	e8 4f 5c fe ff       	call   f0101882 <execute_command>
f011bc33:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011bc36:	83 ec 04             	sub    $0x4,%esp
f011bc39:	6a 00                	push   $0x0
f011bc3b:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011bc3e:	50                   	push   %eax
f011bc3f:	68 00 10 00 00       	push   $0x1000
f011bc44:	e8 32 75 fe ff       	call   f010317b <envid2env>
f011bc49:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f011bc4c:	83 ec 04             	sub    $0x4,%esp
f011bc4f:	6a 00                	push   $0x0
f011bc51:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011bc54:	50                   	push   %eax
f011bc55:	68 01 10 00 00       	push   $0x1001
f011bc5a:	e8 1c 75 fe ff       	call   f010317b <envid2env>
f011bc5f:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011bc62:	83 ec 04             	sub    $0x4,%esp
f011bc65:	6a 00                	push   $0x0
f011bc67:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011bc6a:	50                   	push   %eax
f011bc6b:	68 02 10 00 00       	push   $0x1002
f011bc70:	e8 06 75 fe ff       	call   f010317b <envid2env>
f011bc75:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011bc78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc7b:	85 c0                	test   %eax,%eax
f011bc7d:	74 0e                	je     f011bc8d <test_priority_normal_and_lower+0x12b>
f011bc7f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bc82:	85 c0                	test   %eax,%eax
f011bc84:	74 07                	je     f011bc8d <test_priority_normal_and_lower+0x12b>
f011bc86:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc89:	85 c0                	test   %eax,%eax
f011bc8b:	75 17                	jne    f011bca4 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f011bc8d:	83 ec 04             	sub    $0x4,%esp
f011bc90:	68 bc 28 12 f0       	push   $0xf01228bc
f011bc95:	68 ec 00 00 00       	push   $0xec
f011bc9a:	68 d5 28 12 f0       	push   $0xf01228d5
f011bc9f:	e8 0b 45 fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011bca4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bca7:	8b 40 74             	mov    0x74(%eax),%eax
f011bcaa:	83 f8 14             	cmp    $0x14,%eax
f011bcad:	75 16                	jne    f011bcc5 <test_priority_normal_and_lower+0x163>
f011bcaf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bcb2:	8b 40 74             	mov    0x74(%eax),%eax
f011bcb5:	83 f8 1e             	cmp    $0x1e,%eax
f011bcb8:	75 0b                	jne    f011bcc5 <test_priority_normal_and_lower+0x163>
f011bcba:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bcbd:	8b 40 74             	mov    0x74(%eax),%eax
f011bcc0:	83 f8 28             	cmp    $0x28,%eax
f011bcc3:	74 17                	je     f011bcdc <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f011bcc5:	83 ec 04             	sub    $0x4,%esp
f011bcc8:	68 ec 28 12 f0       	push   $0xf01228ec
f011bccd:	68 ef 00 00 00       	push   $0xef
f011bcd2:	68 d5 28 12 f0       	push   $0xf01228d5
f011bcd7:	e8 d3 44 fe ff       	call   f01001af <_panic>

		for(int i = 0; i < 20; i++)
f011bcdc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011bce3:	eb 44                	jmp    f011bd29 <test_priority_normal_and_lower+0x1c7>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f011bce5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bce8:	8b 48 78             	mov    0x78(%eax),%ecx
f011bceb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bcee:	89 d0                	mov    %edx,%eax
f011bcf0:	01 c0                	add    %eax,%eax
f011bcf2:	01 d0                	add    %edx,%eax
f011bcf4:	c1 e0 02             	shl    $0x2,%eax
f011bcf7:	01 c8                	add    %ecx,%eax
f011bcf9:	8b 10                	mov    (%eax),%edx
f011bcfb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bcfe:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011bd05:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bd08:	8b 48 78             	mov    0x78(%eax),%ecx
f011bd0b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011bd0e:	89 d0                	mov    %edx,%eax
f011bd10:	01 c0                	add    %eax,%eax
f011bd12:	01 d0                	add    %edx,%eax
f011bd14:	c1 e0 02             	shl    $0x2,%eax
f011bd17:	01 c8                	add    %ecx,%eax
f011bd19:	8b 50 08             	mov    0x8(%eax),%edx
f011bd1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011bd1f:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011bd26:	ff 45 e4             	incl   -0x1c(%ebp)
f011bd29:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011bd2d:	7e b6                	jle    f011bce5 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011bd2f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011bd36:	eb 44                	jmp    f011bd7c <test_priority_normal_and_lower+0x21a>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011bd38:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bd3b:	8b 48 78             	mov    0x78(%eax),%ecx
f011bd3e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011bd41:	89 d0                	mov    %edx,%eax
f011bd43:	01 c0                	add    %eax,%eax
f011bd45:	01 d0                	add    %edx,%eax
f011bd47:	c1 e0 02             	shl    $0x2,%eax
f011bd4a:	01 c8                	add    %ecx,%eax
f011bd4c:	8b 10                	mov    (%eax),%edx
f011bd4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bd51:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011bd58:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bd5b:	8b 48 78             	mov    0x78(%eax),%ecx
f011bd5e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011bd61:	89 d0                	mov    %edx,%eax
f011bd63:	01 c0                	add    %eax,%eax
f011bd65:	01 d0                	add    %edx,%eax
f011bd67:	c1 e0 02             	shl    $0x2,%eax
f011bd6a:	01 c8                	add    %ecx,%eax
f011bd6c:	8b 50 08             	mov    0x8(%eax),%edx
f011bd6f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011bd72:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011bd79:	ff 45 e0             	incl   -0x20(%ebp)
f011bd7c:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f011bd80:	7e b6                	jle    f011bd38 <test_priority_normal_and_lower+0x1d6>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011bd82:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011bd89:	eb 44                	jmp    f011bdcf <test_priority_normal_and_lower+0x26d>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011bd8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bd8e:	8b 48 78             	mov    0x78(%eax),%ecx
f011bd91:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bd94:	89 d0                	mov    %edx,%eax
f011bd96:	01 c0                	add    %eax,%eax
f011bd98:	01 d0                	add    %edx,%eax
f011bd9a:	c1 e0 02             	shl    $0x2,%eax
f011bd9d:	01 c8                	add    %ecx,%eax
f011bd9f:	8b 10                	mov    (%eax),%edx
f011bda1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bda4:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011bdab:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bdae:	8b 48 78             	mov    0x78(%eax),%ecx
f011bdb1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011bdb4:	89 d0                	mov    %edx,%eax
f011bdb6:	01 c0                	add    %eax,%eax
f011bdb8:	01 d0                	add    %edx,%eax
f011bdba:	c1 e0 02             	shl    $0x2,%eax
f011bdbd:	01 c8                	add    %ecx,%eax
f011bdbf:	8b 50 08             	mov    0x8(%eax),%edx
f011bdc2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bdc5:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f011bdcc:	ff 45 dc             	incl   -0x24(%ebp)
f011bdcf:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011bdd3:	7e b6                	jle    f011bd8b <test_priority_normal_and_lower+0x229>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011bdd5:	e8 74 ec fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011bdda:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011bddd:	e8 98 03 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011bde2:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011bde5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bde8:	83 ec 08             	sub    $0x8,%esp
f011bdeb:	6a 03                	push   $0x3
f011bded:	50                   	push   %eax
f011bdee:	e8 6c f3 ff ff       	call   f011b15f <set_program_priority>
f011bdf3:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011bdf6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bdf9:	83 ec 08             	sub    $0x8,%esp
f011bdfc:	6a 03                	push   $0x3
f011bdfe:	50                   	push   %eax
f011bdff:	e8 5b f3 ff ff       	call   f011b15f <set_program_priority>
f011be04:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011be07:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011be0a:	83 ec 08             	sub    $0x8,%esp
f011be0d:	6a 03                	push   $0x3
f011be0f:	50                   	push   %eax
f011be10:	e8 4a f3 ff ff       	call   f011b15f <set_program_priority>
f011be15:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011be18:	e8 5d 03 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011be1d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011be20:	74 17                	je     f011be39 <test_priority_normal_and_lower+0x2d7>
f011be22:	83 ec 04             	sub    $0x4,%esp
f011be25:	68 38 29 12 f0       	push   $0xf0122938
f011be2a:	68 0b 01 00 00       	push   $0x10b
f011be2f:	68 d5 28 12 f0       	push   $0xf01228d5
f011be34:	e8 76 43 fe ff       	call   f01001af <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011be39:	e8 10 ec fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011be3e:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011be41:	74 17                	je     f011be5a <test_priority_normal_and_lower+0x2f8>
f011be43:	83 ec 04             	sub    $0x4,%esp
f011be46:	68 38 29 12 f0       	push   $0xf0122938
f011be4b:	68 0c 01 00 00       	push   $0x10c
f011be50:	68 d5 28 12 f0       	push   $0xf01228d5
f011be55:	e8 55 43 fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011be5a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011be5d:	8b 40 74             	mov    0x74(%eax),%eax
f011be60:	83 f8 14             	cmp    $0x14,%eax
f011be63:	75 16                	jne    f011be7b <test_priority_normal_and_lower+0x319>
f011be65:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011be68:	8b 40 74             	mov    0x74(%eax),%eax
f011be6b:	83 f8 1e             	cmp    $0x1e,%eax
f011be6e:	75 0b                	jne    f011be7b <test_priority_normal_and_lower+0x319>
f011be70:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011be73:	8b 40 74             	mov    0x74(%eax),%eax
f011be76:	83 f8 28             	cmp    $0x28,%eax
f011be79:	74 17                	je     f011be92 <test_priority_normal_and_lower+0x330>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011be7b:	83 ec 04             	sub    $0x4,%esp
f011be7e:	68 64 29 12 f0       	push   $0xf0122964
f011be83:	68 0f 01 00 00       	push   $0x10f
f011be88:	68 d5 28 12 f0       	push   $0xf01228d5
f011be8d:	e8 1d 43 fe ff       	call   f01001af <_panic>

		freeFrames = sys_calculate_free_frames();
f011be92:	e8 b7 eb fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011be97:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be9a:	e8 db 02 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011be9f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011bea2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bea5:	83 ec 08             	sub    $0x8,%esp
f011bea8:	6a 02                	push   $0x2
f011beaa:	50                   	push   %eax
f011beab:	e8 af f2 ff ff       	call   f011b15f <set_program_priority>
f011beb0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011beb3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011beb6:	83 ec 08             	sub    $0x8,%esp
f011beb9:	6a 02                	push   $0x2
f011bebb:	50                   	push   %eax
f011bebc:	e8 9e f2 ff ff       	call   f011b15f <set_program_priority>
f011bec1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011bec4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bec7:	83 ec 08             	sub    $0x8,%esp
f011beca:	6a 02                	push   $0x2
f011becc:	50                   	push   %eax
f011becd:	e8 8d f2 ff ff       	call   f011b15f <set_program_priority>
f011bed2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011bed5:	e8 a0 02 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011beda:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011bedd:	74 17                	je     f011bef6 <test_priority_normal_and_lower+0x394>
f011bedf:	83 ec 04             	sub    $0x4,%esp
f011bee2:	68 38 29 12 f0       	push   $0xf0122938
f011bee7:	68 19 01 00 00       	push   $0x119
f011beec:	68 d5 28 12 f0       	push   $0xf01228d5
f011bef1:	e8 b9 42 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011bef6:	e8 53 eb fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011befb:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011befe:	74 21                	je     f011bf21 <test_priority_normal_and_lower+0x3bf>
f011bf00:	e8 49 eb fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011bf05:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011bf08:	29 c2                	sub    %eax,%edx
f011bf0a:	89 d0                	mov    %edx,%eax
f011bf0c:	50                   	push   %eax
f011bf0d:	68 b8 29 12 f0       	push   $0xf01229b8
f011bf12:	68 1a 01 00 00       	push   $0x11a
f011bf17:	68 d5 28 12 f0       	push   $0xf01228d5
f011bf1c:	e8 8e 42 fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011bf21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bf24:	8b 40 74             	mov    0x74(%eax),%eax
f011bf27:	83 f8 0a             	cmp    $0xa,%eax
f011bf2a:	75 16                	jne    f011bf42 <test_priority_normal_and_lower+0x3e0>
f011bf2c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bf2f:	8b 40 74             	mov    0x74(%eax),%eax
f011bf32:	83 f8 0f             	cmp    $0xf,%eax
f011bf35:	75 0b                	jne    f011bf42 <test_priority_normal_and_lower+0x3e0>
f011bf37:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bf3a:	8b 40 74             	mov    0x74(%eax),%eax
f011bf3d:	83 f8 14             	cmp    $0x14,%eax
f011bf40:	74 17                	je     f011bf59 <test_priority_normal_and_lower+0x3f7>
			panic("The programs' working set size should be doubled only if it is full\n");
f011bf42:	83 ec 04             	sub    $0x4,%esp
f011bf45:	68 e8 29 12 f0       	push   $0xf01229e8
f011bf4a:	68 1d 01 00 00       	push   $0x11d
f011bf4f:	68 d5 28 12 f0       	push   $0xf01228d5
f011bf54:	e8 56 42 fe ff       	call   f01001af <_panic>

		freeFrames = sys_calculate_free_frames();
f011bf59:	e8 f0 ea fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011bf5e:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bf61:	e8 14 02 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011bf66:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011bf69:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bf6c:	83 ec 08             	sub    $0x8,%esp
f011bf6f:	6a 02                	push   $0x2
f011bf71:	50                   	push   %eax
f011bf72:	e8 e8 f1 ff ff       	call   f011b15f <set_program_priority>
f011bf77:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011bf7a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bf7d:	83 ec 08             	sub    $0x8,%esp
f011bf80:	6a 02                	push   $0x2
f011bf82:	50                   	push   %eax
f011bf83:	e8 d7 f1 ff ff       	call   f011b15f <set_program_priority>
f011bf88:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011bf8b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bf8e:	83 ec 08             	sub    $0x8,%esp
f011bf91:	6a 02                	push   $0x2
f011bf93:	50                   	push   %eax
f011bf94:	e8 c6 f1 ff ff       	call   f011b15f <set_program_priority>
f011bf99:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011bf9c:	e8 d9 01 ff ff       	call   f010c17a <pf_calculate_free_frames>
f011bfa1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011bfa4:	74 17                	je     f011bfbd <test_priority_normal_and_lower+0x45b>
f011bfa6:	83 ec 04             	sub    $0x4,%esp
f011bfa9:	68 38 29 12 f0       	push   $0xf0122938
f011bfae:	68 27 01 00 00       	push   $0x127
f011bfb3:	68 d5 28 12 f0       	push   $0xf01228d5
f011bfb8:	e8 f2 41 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f011bfbd:	e8 8c ea fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011bfc2:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011bfc5:	74 21                	je     f011bfe8 <test_priority_normal_and_lower+0x486>
f011bfc7:	e8 82 ea fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011bfcc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011bfcf:	29 c2                	sub    %eax,%edx
f011bfd1:	89 d0                	mov    %edx,%eax
f011bfd3:	50                   	push   %eax
f011bfd4:	68 b8 29 12 f0       	push   $0xf01229b8
f011bfd9:	68 28 01 00 00       	push   $0x128
f011bfde:	68 d5 28 12 f0       	push   $0xf01228d5
f011bfe3:	e8 c7 41 fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f011bfe8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bfeb:	8b 40 74             	mov    0x74(%eax),%eax
f011bfee:	83 f8 0a             	cmp    $0xa,%eax
f011bff1:	75 16                	jne    f011c009 <test_priority_normal_and_lower+0x4a7>
f011bff3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bff6:	8b 40 74             	mov    0x74(%eax),%eax
f011bff9:	83 f8 0f             	cmp    $0xf,%eax
f011bffc:	75 0b                	jne    f011c009 <test_priority_normal_and_lower+0x4a7>
f011bffe:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c001:	8b 40 74             	mov    0x74(%eax),%eax
f011c004:	83 f8 0a             	cmp    $0xa,%eax
f011c007:	74 17                	je     f011c020 <test_priority_normal_and_lower+0x4be>
			panic("The programs' working set size should be doubled only if it is full\n");
f011c009:	83 ec 04             	sub    $0x4,%esp
f011c00c:	68 e8 29 12 f0       	push   $0xf01229e8
f011c011:	68 2b 01 00 00       	push   $0x12b
f011c016:	68 d5 28 12 f0       	push   $0xf01228d5
f011c01b:	e8 8f 41 fe ff       	call   f01001af <_panic>

		for(int i = 0; i < 10; i++)
f011c020:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011c027:	eb 7a                	jmp    f011c0a3 <test_priority_normal_and_lower+0x541>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011c029:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c02c:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011c033:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c036:	8b 58 78             	mov    0x78(%eax),%ebx
f011c039:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011c03c:	89 d0                	mov    %edx,%eax
f011c03e:	01 c0                	add    %eax,%eax
f011c040:	01 d0                	add    %edx,%eax
f011c042:	c1 e0 02             	shl    $0x2,%eax
f011c045:	01 d8                	add    %ebx,%eax
f011c047:	8b 00                	mov    (%eax),%eax
f011c049:	39 c1                	cmp    %eax,%ecx
f011c04b:	74 17                	je     f011c064 <test_priority_normal_and_lower+0x502>
				panic("Working set should be moved properly to the new one");
f011c04d:	83 ec 04             	sub    $0x4,%esp
f011c050:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011c055:	68 30 01 00 00       	push   $0x130
f011c05a:	68 d5 28 12 f0       	push   $0xf01228d5
f011c05f:	e8 4b 41 fe ff       	call   f01001af <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011c064:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011c067:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011c06e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c071:	8b 58 78             	mov    0x78(%eax),%ebx
f011c074:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011c077:	89 d0                	mov    %edx,%eax
f011c079:	01 c0                	add    %eax,%eax
f011c07b:	01 d0                	add    %edx,%eax
f011c07d:	c1 e0 02             	shl    $0x2,%eax
f011c080:	01 d8                	add    %ebx,%eax
f011c082:	8b 40 08             	mov    0x8(%eax),%eax
f011c085:	39 c1                	cmp    %eax,%ecx
f011c087:	74 17                	je     f011c0a0 <test_priority_normal_and_lower+0x53e>
				panic("Working set should be moved properly to the new one");
f011c089:	83 ec 04             	sub    $0x4,%esp
f011c08c:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011c091:	68 33 01 00 00       	push   $0x133
f011c096:	68 d5 28 12 f0       	push   $0xf01228d5
f011c09b:	e8 0f 41 fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f011c0a0:	ff 45 d8             	incl   -0x28(%ebp)
f011c0a3:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f011c0a7:	7e 80                	jle    f011c029 <test_priority_normal_and_lower+0x4c7>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011c0a9:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011c0b0:	eb 7a                	jmp    f011c12c <test_priority_normal_and_lower+0x5ca>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011c0b2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c0b5:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011c0bc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c0bf:	8b 58 78             	mov    0x78(%eax),%ebx
f011c0c2:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011c0c5:	89 d0                	mov    %edx,%eax
f011c0c7:	01 c0                	add    %eax,%eax
f011c0c9:	01 d0                	add    %edx,%eax
f011c0cb:	c1 e0 02             	shl    $0x2,%eax
f011c0ce:	01 d8                	add    %ebx,%eax
f011c0d0:	8b 00                	mov    (%eax),%eax
f011c0d2:	39 c1                	cmp    %eax,%ecx
f011c0d4:	74 17                	je     f011c0ed <test_priority_normal_and_lower+0x58b>
				panic("Working set should be moved properly to the new one");
f011c0d6:	83 ec 04             	sub    $0x4,%esp
f011c0d9:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011c0de:	68 39 01 00 00       	push   $0x139
f011c0e3:	68 d5 28 12 f0       	push   $0xf01228d5
f011c0e8:	e8 c2 40 fe ff       	call   f01001af <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011c0ed:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c0f0:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011c0f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c0fa:	8b 58 78             	mov    0x78(%eax),%ebx
f011c0fd:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011c100:	89 d0                	mov    %edx,%eax
f011c102:	01 c0                	add    %eax,%eax
f011c104:	01 d0                	add    %edx,%eax
f011c106:	c1 e0 02             	shl    $0x2,%eax
f011c109:	01 d8                	add    %ebx,%eax
f011c10b:	8b 40 08             	mov    0x8(%eax),%eax
f011c10e:	39 c1                	cmp    %eax,%ecx
f011c110:	74 17                	je     f011c129 <test_priority_normal_and_lower+0x5c7>
				panic("Working set should be moved properly to the new one");
f011c112:	83 ec 04             	sub    $0x4,%esp
f011c115:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011c11a:	68 3c 01 00 00       	push   $0x13c
f011c11f:	68 d5 28 12 f0       	push   $0xf01228d5
f011c124:	e8 86 40 fe ff       	call   f01001af <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011c129:	ff 45 d4             	incl   -0x2c(%ebp)
f011c12c:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011c130:	7e 80                	jle    f011c0b2 <test_priority_normal_and_lower+0x550>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011c132:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011c139:	eb 7a                	jmp    f011c1b5 <test_priority_normal_and_lower+0x653>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011c13b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c13e:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011c145:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c148:	8b 58 78             	mov    0x78(%eax),%ebx
f011c14b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011c14e:	89 d0                	mov    %edx,%eax
f011c150:	01 c0                	add    %eax,%eax
f011c152:	01 d0                	add    %edx,%eax
f011c154:	c1 e0 02             	shl    $0x2,%eax
f011c157:	01 d8                	add    %ebx,%eax
f011c159:	8b 00                	mov    (%eax),%eax
f011c15b:	39 c1                	cmp    %eax,%ecx
f011c15d:	74 17                	je     f011c176 <test_priority_normal_and_lower+0x614>
				panic("Working set should be moved properly to the new one");
f011c15f:	83 ec 04             	sub    $0x4,%esp
f011c162:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011c167:	68 42 01 00 00       	push   $0x142
f011c16c:	68 d5 28 12 f0       	push   $0xf01228d5
f011c171:	e8 39 40 fe ff       	call   f01001af <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011c176:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011c179:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011c180:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c183:	8b 58 78             	mov    0x78(%eax),%ebx
f011c186:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011c189:	89 d0                	mov    %edx,%eax
f011c18b:	01 c0                	add    %eax,%eax
f011c18d:	01 d0                	add    %edx,%eax
f011c18f:	c1 e0 02             	shl    $0x2,%eax
f011c192:	01 d8                	add    %ebx,%eax
f011c194:	8b 40 08             	mov    0x8(%eax),%eax
f011c197:	39 c1                	cmp    %eax,%ecx
f011c199:	74 17                	je     f011c1b2 <test_priority_normal_and_lower+0x650>
				panic("Working set should be moved properly to the new one");
f011c19b:	83 ec 04             	sub    $0x4,%esp
f011c19e:	68 a8 2a 12 f0       	push   $0xf0122aa8
f011c1a3:	68 45 01 00 00       	push   $0x145
f011c1a8:	68 d5 28 12 f0       	push   $0xf01228d5
f011c1ad:	e8 fd 3f fe ff       	call   f01001af <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011c1b2:	ff 45 d0             	incl   -0x30(%ebp)
f011c1b5:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f011c1b9:	7e 80                	jle    f011c13b <test_priority_normal_and_lower+0x5d9>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f011c1bb:	e8 8e e8 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011c1c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c1c3:	e8 b2 ff fe ff       	call   f010c17a <pf_calculate_free_frames>
f011c1c8:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011c1cb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c1ce:	83 ec 08             	sub    $0x8,%esp
f011c1d1:	6a 01                	push   $0x1
f011c1d3:	50                   	push   %eax
f011c1d4:	e8 86 ef ff ff       	call   f011b15f <set_program_priority>
f011c1d9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f011c1dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c1df:	83 ec 08             	sub    $0x8,%esp
f011c1e2:	6a 01                	push   $0x1
f011c1e4:	50                   	push   %eax
f011c1e5:	e8 75 ef ff ff       	call   f011b15f <set_program_priority>
f011c1ea:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f011c1ed:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c1f0:	83 ec 08             	sub    $0x8,%esp
f011c1f3:	6a 01                	push   $0x1
f011c1f5:	50                   	push   %eax
f011c1f6:	e8 64 ef ff ff       	call   f011b15f <set_program_priority>
f011c1fb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011c1fe:	e8 77 ff fe ff       	call   f010c17a <pf_calculate_free_frames>
f011c203:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011c206:	74 17                	je     f011c21f <test_priority_normal_and_lower+0x6bd>
f011c208:	83 ec 04             	sub    $0x4,%esp
f011c20b:	68 38 29 12 f0       	push   $0xf0122938
f011c210:	68 4e 01 00 00       	push   $0x14e
f011c215:	68 d5 28 12 f0       	push   $0xf01228d5
f011c21a:	e8 90 3f fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f011c21f:	e8 2a e8 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011c224:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011c227:	83 f8 0d             	cmp    $0xd,%eax
f011c22a:	74 17                	je     f011c243 <test_priority_normal_and_lower+0x6e1>
f011c22c:	83 ec 04             	sub    $0x4,%esp
f011c22f:	68 44 2c 12 f0       	push   $0xf0122c44
f011c234:	68 4f 01 00 00       	push   $0x14f
f011c239:	68 d5 28 12 f0       	push   $0xf01228d5
f011c23e:	e8 6c 3f fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011c243:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c246:	8b 40 74             	mov    0x74(%eax),%eax
f011c249:	83 f8 05             	cmp    $0x5,%eax
f011c24c:	75 16                	jne    f011c264 <test_priority_normal_and_lower+0x702>
f011c24e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c251:	8b 40 74             	mov    0x74(%eax),%eax
f011c254:	83 f8 07             	cmp    $0x7,%eax
f011c257:	75 0b                	jne    f011c264 <test_priority_normal_and_lower+0x702>
f011c259:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c25c:	8b 40 74             	mov    0x74(%eax),%eax
f011c25f:	83 f8 05             	cmp    $0x5,%eax
f011c262:	74 17                	je     f011c27b <test_priority_normal_and_lower+0x719>
			panic("The programs' working set size should be half\n");
f011c264:	83 ec 04             	sub    $0x4,%esp
f011c267:	68 8c 2c 12 f0       	push   $0xf0122c8c
f011c26c:	68 52 01 00 00       	push   $0x152
f011c271:	68 d5 28 12 f0       	push   $0xf01228d5
f011c276:	e8 34 3f fe ff       	call   f01001af <_panic>


		freeFrames = sys_calculate_free_frames();
f011c27b:	e8 ce e7 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011c280:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c283:	e8 f2 fe fe ff       	call   f010c17a <pf_calculate_free_frames>
f011c288:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011c28b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c28e:	83 ec 08             	sub    $0x8,%esp
f011c291:	6a 01                	push   $0x1
f011c293:	50                   	push   %eax
f011c294:	e8 c6 ee ff ff       	call   f011b15f <set_program_priority>
f011c299:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011c29c:	e8 d9 fe fe ff       	call   f010c17a <pf_calculate_free_frames>
f011c2a1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011c2a4:	74 17                	je     f011c2bd <test_priority_normal_and_lower+0x75b>
f011c2a6:	83 ec 04             	sub    $0x4,%esp
f011c2a9:	68 38 29 12 f0       	push   $0xf0122938
f011c2ae:	68 58 01 00 00       	push   $0x158
f011c2b3:	68 d5 28 12 f0       	push   $0xf01228d5
f011c2b8:	e8 f2 3e fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f011c2bd:	e8 8c e7 fe ff       	call   f010aa4e <sys_calculate_free_frames>
f011c2c2:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011c2c5:	83 f8 03             	cmp    $0x3,%eax
f011c2c8:	74 17                	je     f011c2e1 <test_priority_normal_and_lower+0x77f>
f011c2ca:	83 ec 04             	sub    $0x4,%esp
f011c2cd:	68 38 29 12 f0       	push   $0xf0122938
f011c2d2:	68 59 01 00 00       	push   $0x159
f011c2d7:	68 d5 28 12 f0       	push   $0xf01228d5
f011c2dc:	e8 ce 3e fe ff       	call   f01001af <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011c2e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c2e4:	8b 40 74             	mov    0x74(%eax),%eax
f011c2e7:	83 f8 02             	cmp    $0x2,%eax
f011c2ea:	75 16                	jne    f011c302 <test_priority_normal_and_lower+0x7a0>
f011c2ec:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c2ef:	8b 40 74             	mov    0x74(%eax),%eax
f011c2f2:	83 f8 07             	cmp    $0x7,%eax
f011c2f5:	75 0b                	jne    f011c302 <test_priority_normal_and_lower+0x7a0>
f011c2f7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c2fa:	8b 40 74             	mov    0x74(%eax),%eax
f011c2fd:	83 f8 05             	cmp    $0x5,%eax
f011c300:	74 17                	je     f011c319 <test_priority_normal_and_lower+0x7b7>
			panic("The programs' working set size should be doubled if full\n");
f011c302:	83 ec 04             	sub    $0x4,%esp
f011c305:	68 6c 2a 12 f0       	push   $0xf0122a6c
f011c30a:	68 5c 01 00 00       	push   $0x15c
f011c30f:	68 d5 28 12 f0       	push   $0xf01228d5
f011c314:	e8 96 3e fe ff       	call   f01001af <_panic>

		for(int i = 0; i < 2; i++)
f011c319:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011c320:	e9 80 00 00 00       	jmp    f011c3a5 <test_priority_normal_and_lower+0x843>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011c325:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c328:	83 c0 08             	add    $0x8,%eax
f011c32b:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011c332:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c335:	8b 58 78             	mov    0x78(%eax),%ebx
f011c338:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011c33b:	89 d0                	mov    %edx,%eax
f011c33d:	01 c0                	add    %eax,%eax
f011c33f:	01 d0                	add    %edx,%eax
f011c341:	c1 e0 02             	shl    $0x2,%eax
f011c344:	01 d8                	add    %ebx,%eax
f011c346:	8b 00                	mov    (%eax),%eax
f011c348:	39 c1                	cmp    %eax,%ecx
f011c34a:	74 17                	je     f011c363 <test_priority_normal_and_lower+0x801>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011c34c:	83 ec 04             	sub    $0x4,%esp
f011c34f:	68 bc 2c 12 f0       	push   $0xf0122cbc
f011c354:	68 61 01 00 00       	push   $0x161
f011c359:	68 d5 28 12 f0       	push   $0xf01228d5
f011c35e:	e8 4c 3e fe ff       	call   f01001af <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011c363:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c366:	83 c0 08             	add    $0x8,%eax
f011c369:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011c370:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c373:	8b 58 78             	mov    0x78(%eax),%ebx
f011c376:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011c379:	89 d0                	mov    %edx,%eax
f011c37b:	01 c0                	add    %eax,%eax
f011c37d:	01 d0                	add    %edx,%eax
f011c37f:	c1 e0 02             	shl    $0x2,%eax
f011c382:	01 d8                	add    %ebx,%eax
f011c384:	8b 40 08             	mov    0x8(%eax),%eax
f011c387:	39 c1                	cmp    %eax,%ecx
f011c389:	74 17                	je     f011c3a2 <test_priority_normal_and_lower+0x840>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011c38b:	83 ec 04             	sub    $0x4,%esp
f011c38e:	68 bc 2c 12 f0       	push   $0xf0122cbc
f011c393:	68 64 01 00 00       	push   $0x164
f011c398:	68 d5 28 12 f0       	push   $0xf01228d5
f011c39d:	e8 0d 3e fe ff       	call   f01001af <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011c3a2:	ff 45 cc             	incl   -0x34(%ebp)
f011c3a5:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f011c3a9:	0f 8e 76 ff ff ff    	jle    f011c325 <test_priority_normal_and_lower+0x7c3>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011c3af:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f011c3b6:	e9 80 00 00 00       	jmp    f011c43b <test_priority_normal_and_lower+0x8d9>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011c3bb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c3be:	83 c0 03             	add    $0x3,%eax
f011c3c1:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f011c3c8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c3cb:	8b 58 78             	mov    0x78(%eax),%ebx
f011c3ce:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011c3d1:	89 d0                	mov    %edx,%eax
f011c3d3:	01 c0                	add    %eax,%eax
f011c3d5:	01 d0                	add    %edx,%eax
f011c3d7:	c1 e0 02             	shl    $0x2,%eax
f011c3da:	01 d8                	add    %ebx,%eax
f011c3dc:	8b 00                	mov    (%eax),%eax
f011c3de:	39 c1                	cmp    %eax,%ecx
f011c3e0:	74 17                	je     f011c3f9 <test_priority_normal_and_lower+0x897>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f011c3e2:	ff 75 c8             	pushl  -0x38(%ebp)
f011c3e5:	68 28 2d 12 f0       	push   $0xf0122d28
f011c3ea:	68 6a 01 00 00       	push   $0x16a
f011c3ef:	68 d5 28 12 f0       	push   $0xf01228d5
f011c3f4:	e8 b6 3d fe ff       	call   f01001af <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011c3f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c3fc:	83 c0 03             	add    $0x3,%eax
f011c3ff:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f011c406:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011c409:	8b 58 78             	mov    0x78(%eax),%ebx
f011c40c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011c40f:	89 d0                	mov    %edx,%eax
f011c411:	01 c0                	add    %eax,%eax
f011c413:	01 d0                	add    %edx,%eax
f011c415:	c1 e0 02             	shl    $0x2,%eax
f011c418:	01 d8                	add    %ebx,%eax
f011c41a:	8b 40 08             	mov    0x8(%eax),%eax
f011c41d:	39 c1                	cmp    %eax,%ecx
f011c41f:	74 17                	je     f011c438 <test_priority_normal_and_lower+0x8d6>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011c421:	83 ec 04             	sub    $0x4,%esp
f011c424:	68 bc 2c 12 f0       	push   $0xf0122cbc
f011c429:	68 6d 01 00 00       	push   $0x16d
f011c42e:	68 d5 28 12 f0       	push   $0xf01228d5
f011c433:	e8 77 3d fe ff       	call   f01001af <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f011c438:	ff 45 c8             	incl   -0x38(%ebp)
f011c43b:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011c43f:	0f 8e 76 ff ff ff    	jle    f011c3bb <test_priority_normal_and_lower+0x859>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011c445:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011c44c:	e9 80 00 00 00       	jmp    f011c4d1 <test_priority_normal_and_lower+0x96f>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011c451:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c454:	83 c0 05             	add    $0x5,%eax
f011c457:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011c45e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c461:	8b 58 78             	mov    0x78(%eax),%ebx
f011c464:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011c467:	89 d0                	mov    %edx,%eax
f011c469:	01 c0                	add    %eax,%eax
f011c46b:	01 d0                	add    %edx,%eax
f011c46d:	c1 e0 02             	shl    $0x2,%eax
f011c470:	01 d8                	add    %ebx,%eax
f011c472:	8b 00                	mov    (%eax),%eax
f011c474:	39 c1                	cmp    %eax,%ecx
f011c476:	74 17                	je     f011c48f <test_priority_normal_and_lower+0x92d>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011c478:	83 ec 04             	sub    $0x4,%esp
f011c47b:	68 bc 2c 12 f0       	push   $0xf0122cbc
f011c480:	68 73 01 00 00       	push   $0x173
f011c485:	68 d5 28 12 f0       	push   $0xf01228d5
f011c48a:	e8 20 3d fe ff       	call   f01001af <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011c48f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011c492:	83 c0 05             	add    $0x5,%eax
f011c495:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011c49c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011c49f:	8b 58 78             	mov    0x78(%eax),%ebx
f011c4a2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011c4a5:	89 d0                	mov    %edx,%eax
f011c4a7:	01 c0                	add    %eax,%eax
f011c4a9:	01 d0                	add    %edx,%eax
f011c4ab:	c1 e0 02             	shl    $0x2,%eax
f011c4ae:	01 d8                	add    %ebx,%eax
f011c4b0:	8b 40 08             	mov    0x8(%eax),%eax
f011c4b3:	39 c1                	cmp    %eax,%ecx
f011c4b5:	74 17                	je     f011c4ce <test_priority_normal_and_lower+0x96c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011c4b7:	83 ec 04             	sub    $0x4,%esp
f011c4ba:	68 bc 2c 12 f0       	push   $0xf0122cbc
f011c4bf:	68 76 01 00 00       	push   $0x176
f011c4c4:	68 d5 28 12 f0       	push   $0xf01228d5
f011c4c9:	e8 e1 3c fe ff       	call   f01001af <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011c4ce:	ff 45 c4             	incl   -0x3c(%ebp)
f011c4d1:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f011c4d5:	0f 8e 76 ff ff ff    	jle    f011c451 <test_priority_normal_and_lower+0x8ef>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011c4db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c4de:	83 ec 08             	sub    $0x8,%esp
f011c4e1:	6a 05                	push   $0x5
f011c4e3:	50                   	push   %eax
f011c4e4:	e8 76 ec ff ff       	call   f011b15f <set_program_priority>
f011c4e9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011c4ec:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011c4ef:	83 ec 08             	sub    $0x8,%esp
f011c4f2:	6a 05                	push   $0x5
f011c4f4:	50                   	push   %eax
f011c4f5:	e8 65 ec ff ff       	call   f011b15f <set_program_priority>
f011c4fa:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011c4fd:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011c504:	75 6e 61 
f011c507:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011c50e:	6c 00 00 
f011c511:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011c517:	b9 17 00 00 00       	mov    $0x17,%ecx
f011c51c:	b8 00 00 00 00       	mov    $0x0,%eax
f011c521:	89 d7                	mov    %edx,%edi
f011c523:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011c525:	83 ec 0c             	sub    $0xc,%esp
f011c528:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011c52e:	50                   	push   %eax
f011c52f:	e8 4e 53 fe ff       	call   f0101882 <execute_command>
f011c534:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f011c537:	eb 10                	jmp    f011c549 <test_priority_normal_and_lower+0x9e7>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011c539:	83 ec 0c             	sub    $0xc,%esp
f011c53c:	68 98 2d 12 f0       	push   $0xf0122d98
f011c541:	e8 be ac fe ff       	call   f0107204 <cprintf>
f011c546:	83 c4 10             	add    $0x10,%esp
	}
}
f011c549:	90                   	nop
f011c54a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011c54d:	5b                   	pop    %ebx
f011c54e:	5e                   	pop    %esi
f011c54f:	5f                   	pop    %edi
f011c550:	5d                   	pop    %ebp
f011c551:	c3                   	ret    

f011c552 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f011c552:	55                   	push   %ebp
f011c553:	89 e5                	mov    %esp,%ebp
f011c555:	53                   	push   %ebx
f011c556:	83 ec 14             	sub    $0x14,%esp
f011c559:	8b 45 10             	mov    0x10(%ebp),%eax
f011c55c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011c55f:	8b 45 14             	mov    0x14(%ebp),%eax
f011c562:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f011c565:	8b 45 18             	mov    0x18(%ebp),%eax
f011c568:	ba 00 00 00 00       	mov    $0x0,%edx
f011c56d:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f011c570:	77 55                	ja     f011c5c7 <printnum+0x75>
f011c572:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f011c575:	72 05                	jb     f011c57c <printnum+0x2a>
f011c577:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c57a:	77 4b                	ja     f011c5c7 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f011c57c:	8b 45 1c             	mov    0x1c(%ebp),%eax
f011c57f:	8d 58 ff             	lea    -0x1(%eax),%ebx
f011c582:	8b 45 18             	mov    0x18(%ebp),%eax
f011c585:	ba 00 00 00 00       	mov    $0x0,%edx
f011c58a:	52                   	push   %edx
f011c58b:	50                   	push   %eax
f011c58c:	ff 75 f4             	pushl  -0xc(%ebp)
f011c58f:	ff 75 f0             	pushl  -0x10(%ebp)
f011c592:	e8 b9 11 00 00       	call   f011d750 <__udivdi3>
f011c597:	83 c4 10             	add    $0x10,%esp
f011c59a:	83 ec 04             	sub    $0x4,%esp
f011c59d:	ff 75 20             	pushl  0x20(%ebp)
f011c5a0:	53                   	push   %ebx
f011c5a1:	ff 75 18             	pushl  0x18(%ebp)
f011c5a4:	52                   	push   %edx
f011c5a5:	50                   	push   %eax
f011c5a6:	ff 75 0c             	pushl  0xc(%ebp)
f011c5a9:	ff 75 08             	pushl  0x8(%ebp)
f011c5ac:	e8 a1 ff ff ff       	call   f011c552 <printnum>
f011c5b1:	83 c4 20             	add    $0x20,%esp
f011c5b4:	eb 1a                	jmp    f011c5d0 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f011c5b6:	83 ec 08             	sub    $0x8,%esp
f011c5b9:	ff 75 0c             	pushl  0xc(%ebp)
f011c5bc:	ff 75 20             	pushl  0x20(%ebp)
f011c5bf:	8b 45 08             	mov    0x8(%ebp),%eax
f011c5c2:	ff d0                	call   *%eax
f011c5c4:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f011c5c7:	ff 4d 1c             	decl   0x1c(%ebp)
f011c5ca:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f011c5ce:	7f e6                	jg     f011c5b6 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f011c5d0:	8b 4d 18             	mov    0x18(%ebp),%ecx
f011c5d3:	bb 00 00 00 00       	mov    $0x0,%ebx
f011c5d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011c5db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5de:	53                   	push   %ebx
f011c5df:	51                   	push   %ecx
f011c5e0:	52                   	push   %edx
f011c5e1:	50                   	push   %eax
f011c5e2:	e8 79 12 00 00       	call   f011d860 <__umoddi3>
f011c5e7:	83 c4 10             	add    $0x10,%esp
f011c5ea:	05 b4 30 12 f0       	add    $0xf01230b4,%eax
f011c5ef:	8a 00                	mov    (%eax),%al
f011c5f1:	0f be c0             	movsbl %al,%eax
f011c5f4:	83 ec 08             	sub    $0x8,%esp
f011c5f7:	ff 75 0c             	pushl  0xc(%ebp)
f011c5fa:	50                   	push   %eax
f011c5fb:	8b 45 08             	mov    0x8(%ebp),%eax
f011c5fe:	ff d0                	call   *%eax
f011c600:	83 c4 10             	add    $0x10,%esp
}
f011c603:	90                   	nop
f011c604:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011c607:	c9                   	leave  
f011c608:	c3                   	ret    

f011c609 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f011c609:	55                   	push   %ebp
f011c60a:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f011c60c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f011c610:	7e 1c                	jle    f011c62e <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f011c612:	8b 45 08             	mov    0x8(%ebp),%eax
f011c615:	8b 00                	mov    (%eax),%eax
f011c617:	8d 50 08             	lea    0x8(%eax),%edx
f011c61a:	8b 45 08             	mov    0x8(%ebp),%eax
f011c61d:	89 10                	mov    %edx,(%eax)
f011c61f:	8b 45 08             	mov    0x8(%ebp),%eax
f011c622:	8b 00                	mov    (%eax),%eax
f011c624:	83 e8 08             	sub    $0x8,%eax
f011c627:	8b 50 04             	mov    0x4(%eax),%edx
f011c62a:	8b 00                	mov    (%eax),%eax
f011c62c:	eb 40                	jmp    f011c66e <getuint+0x65>
	else if (lflag)
f011c62e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011c632:	74 1e                	je     f011c652 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f011c634:	8b 45 08             	mov    0x8(%ebp),%eax
f011c637:	8b 00                	mov    (%eax),%eax
f011c639:	8d 50 04             	lea    0x4(%eax),%edx
f011c63c:	8b 45 08             	mov    0x8(%ebp),%eax
f011c63f:	89 10                	mov    %edx,(%eax)
f011c641:	8b 45 08             	mov    0x8(%ebp),%eax
f011c644:	8b 00                	mov    (%eax),%eax
f011c646:	83 e8 04             	sub    $0x4,%eax
f011c649:	8b 00                	mov    (%eax),%eax
f011c64b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c650:	eb 1c                	jmp    f011c66e <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f011c652:	8b 45 08             	mov    0x8(%ebp),%eax
f011c655:	8b 00                	mov    (%eax),%eax
f011c657:	8d 50 04             	lea    0x4(%eax),%edx
f011c65a:	8b 45 08             	mov    0x8(%ebp),%eax
f011c65d:	89 10                	mov    %edx,(%eax)
f011c65f:	8b 45 08             	mov    0x8(%ebp),%eax
f011c662:	8b 00                	mov    (%eax),%eax
f011c664:	83 e8 04             	sub    $0x4,%eax
f011c667:	8b 00                	mov    (%eax),%eax
f011c669:	ba 00 00 00 00       	mov    $0x0,%edx
}
f011c66e:	5d                   	pop    %ebp
f011c66f:	c3                   	ret    

f011c670 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f011c670:	55                   	push   %ebp
f011c671:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f011c673:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f011c677:	7e 1c                	jle    f011c695 <getint+0x25>
		return va_arg(*ap, long long);
f011c679:	8b 45 08             	mov    0x8(%ebp),%eax
f011c67c:	8b 00                	mov    (%eax),%eax
f011c67e:	8d 50 08             	lea    0x8(%eax),%edx
f011c681:	8b 45 08             	mov    0x8(%ebp),%eax
f011c684:	89 10                	mov    %edx,(%eax)
f011c686:	8b 45 08             	mov    0x8(%ebp),%eax
f011c689:	8b 00                	mov    (%eax),%eax
f011c68b:	83 e8 08             	sub    $0x8,%eax
f011c68e:	8b 50 04             	mov    0x4(%eax),%edx
f011c691:	8b 00                	mov    (%eax),%eax
f011c693:	eb 38                	jmp    f011c6cd <getint+0x5d>
	else if (lflag)
f011c695:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011c699:	74 1a                	je     f011c6b5 <getint+0x45>
		return va_arg(*ap, long);
f011c69b:	8b 45 08             	mov    0x8(%ebp),%eax
f011c69e:	8b 00                	mov    (%eax),%eax
f011c6a0:	8d 50 04             	lea    0x4(%eax),%edx
f011c6a3:	8b 45 08             	mov    0x8(%ebp),%eax
f011c6a6:	89 10                	mov    %edx,(%eax)
f011c6a8:	8b 45 08             	mov    0x8(%ebp),%eax
f011c6ab:	8b 00                	mov    (%eax),%eax
f011c6ad:	83 e8 04             	sub    $0x4,%eax
f011c6b0:	8b 00                	mov    (%eax),%eax
f011c6b2:	99                   	cltd   
f011c6b3:	eb 18                	jmp    f011c6cd <getint+0x5d>
	else
		return va_arg(*ap, int);
f011c6b5:	8b 45 08             	mov    0x8(%ebp),%eax
f011c6b8:	8b 00                	mov    (%eax),%eax
f011c6ba:	8d 50 04             	lea    0x4(%eax),%edx
f011c6bd:	8b 45 08             	mov    0x8(%ebp),%eax
f011c6c0:	89 10                	mov    %edx,(%eax)
f011c6c2:	8b 45 08             	mov    0x8(%ebp),%eax
f011c6c5:	8b 00                	mov    (%eax),%eax
f011c6c7:	83 e8 04             	sub    $0x4,%eax
f011c6ca:	8b 00                	mov    (%eax),%eax
f011c6cc:	99                   	cltd   
}
f011c6cd:	5d                   	pop    %ebp
f011c6ce:	c3                   	ret    

f011c6cf <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f011c6cf:	55                   	push   %ebp
f011c6d0:	89 e5                	mov    %esp,%ebp
f011c6d2:	56                   	push   %esi
f011c6d3:	53                   	push   %ebx
f011c6d4:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f011c6d7:	eb 17                	jmp    f011c6f0 <vprintfmt+0x21>
			if (ch == '\0')
f011c6d9:	85 db                	test   %ebx,%ebx
f011c6db:	0f 84 af 03 00 00    	je     f011ca90 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f011c6e1:	83 ec 08             	sub    $0x8,%esp
f011c6e4:	ff 75 0c             	pushl  0xc(%ebp)
f011c6e7:	53                   	push   %ebx
f011c6e8:	8b 45 08             	mov    0x8(%ebp),%eax
f011c6eb:	ff d0                	call   *%eax
f011c6ed:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f011c6f0:	8b 45 10             	mov    0x10(%ebp),%eax
f011c6f3:	8d 50 01             	lea    0x1(%eax),%edx
f011c6f6:	89 55 10             	mov    %edx,0x10(%ebp)
f011c6f9:	8a 00                	mov    (%eax),%al
f011c6fb:	0f b6 d8             	movzbl %al,%ebx
f011c6fe:	83 fb 25             	cmp    $0x25,%ebx
f011c701:	75 d6                	jne    f011c6d9 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f011c703:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f011c707:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f011c70e:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f011c715:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f011c71c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f011c723:	8b 45 10             	mov    0x10(%ebp),%eax
f011c726:	8d 50 01             	lea    0x1(%eax),%edx
f011c729:	89 55 10             	mov    %edx,0x10(%ebp)
f011c72c:	8a 00                	mov    (%eax),%al
f011c72e:	0f b6 d8             	movzbl %al,%ebx
f011c731:	8d 43 dd             	lea    -0x23(%ebx),%eax
f011c734:	83 f8 55             	cmp    $0x55,%eax
f011c737:	0f 87 2b 03 00 00    	ja     f011ca68 <vprintfmt+0x399>
f011c73d:	8b 04 85 d8 30 12 f0 	mov    -0xfedcf28(,%eax,4),%eax
f011c744:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f011c746:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f011c74a:	eb d7                	jmp    f011c723 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f011c74c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f011c750:	eb d1                	jmp    f011c723 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f011c752:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f011c759:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011c75c:	89 d0                	mov    %edx,%eax
f011c75e:	c1 e0 02             	shl    $0x2,%eax
f011c761:	01 d0                	add    %edx,%eax
f011c763:	01 c0                	add    %eax,%eax
f011c765:	01 d8                	add    %ebx,%eax
f011c767:	83 e8 30             	sub    $0x30,%eax
f011c76a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f011c76d:	8b 45 10             	mov    0x10(%ebp),%eax
f011c770:	8a 00                	mov    (%eax),%al
f011c772:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f011c775:	83 fb 2f             	cmp    $0x2f,%ebx
f011c778:	7e 3e                	jle    f011c7b8 <vprintfmt+0xe9>
f011c77a:	83 fb 39             	cmp    $0x39,%ebx
f011c77d:	7f 39                	jg     f011c7b8 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f011c77f:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f011c782:	eb d5                	jmp    f011c759 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f011c784:	8b 45 14             	mov    0x14(%ebp),%eax
f011c787:	83 c0 04             	add    $0x4,%eax
f011c78a:	89 45 14             	mov    %eax,0x14(%ebp)
f011c78d:	8b 45 14             	mov    0x14(%ebp),%eax
f011c790:	83 e8 04             	sub    $0x4,%eax
f011c793:	8b 00                	mov    (%eax),%eax
f011c795:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f011c798:	eb 1f                	jmp    f011c7b9 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f011c79a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011c79e:	79 83                	jns    f011c723 <vprintfmt+0x54>
				width = 0;
f011c7a0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f011c7a7:	e9 77 ff ff ff       	jmp    f011c723 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f011c7ac:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f011c7b3:	e9 6b ff ff ff       	jmp    f011c723 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f011c7b8:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f011c7b9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011c7bd:	0f 89 60 ff ff ff    	jns    f011c723 <vprintfmt+0x54>
				width = precision, precision = -1;
f011c7c3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c7c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011c7c9:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f011c7d0:	e9 4e ff ff ff       	jmp    f011c723 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f011c7d5:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f011c7d8:	e9 46 ff ff ff       	jmp    f011c723 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f011c7dd:	8b 45 14             	mov    0x14(%ebp),%eax
f011c7e0:	83 c0 04             	add    $0x4,%eax
f011c7e3:	89 45 14             	mov    %eax,0x14(%ebp)
f011c7e6:	8b 45 14             	mov    0x14(%ebp),%eax
f011c7e9:	83 e8 04             	sub    $0x4,%eax
f011c7ec:	8b 00                	mov    (%eax),%eax
f011c7ee:	83 ec 08             	sub    $0x8,%esp
f011c7f1:	ff 75 0c             	pushl  0xc(%ebp)
f011c7f4:	50                   	push   %eax
f011c7f5:	8b 45 08             	mov    0x8(%ebp),%eax
f011c7f8:	ff d0                	call   *%eax
f011c7fa:	83 c4 10             	add    $0x10,%esp
			break;
f011c7fd:	e9 89 02 00 00       	jmp    f011ca8b <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f011c802:	8b 45 14             	mov    0x14(%ebp),%eax
f011c805:	83 c0 04             	add    $0x4,%eax
f011c808:	89 45 14             	mov    %eax,0x14(%ebp)
f011c80b:	8b 45 14             	mov    0x14(%ebp),%eax
f011c80e:	83 e8 04             	sub    $0x4,%eax
f011c811:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f011c813:	85 db                	test   %ebx,%ebx
f011c815:	79 02                	jns    f011c819 <vprintfmt+0x14a>
				err = -err;
f011c817:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f011c819:	83 fb 64             	cmp    $0x64,%ebx
f011c81c:	7f 0b                	jg     f011c829 <vprintfmt+0x15a>
f011c81e:	8b 34 9d 20 2f 12 f0 	mov    -0xfedd0e0(,%ebx,4),%esi
f011c825:	85 f6                	test   %esi,%esi
f011c827:	75 19                	jne    f011c842 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f011c829:	53                   	push   %ebx
f011c82a:	68 c5 30 12 f0       	push   $0xf01230c5
f011c82f:	ff 75 0c             	pushl  0xc(%ebp)
f011c832:	ff 75 08             	pushl  0x8(%ebp)
f011c835:	e8 5e 02 00 00       	call   f011ca98 <printfmt>
f011c83a:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f011c83d:	e9 49 02 00 00       	jmp    f011ca8b <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f011c842:	56                   	push   %esi
f011c843:	68 ce 30 12 f0       	push   $0xf01230ce
f011c848:	ff 75 0c             	pushl  0xc(%ebp)
f011c84b:	ff 75 08             	pushl  0x8(%ebp)
f011c84e:	e8 45 02 00 00       	call   f011ca98 <printfmt>
f011c853:	83 c4 10             	add    $0x10,%esp
			break;
f011c856:	e9 30 02 00 00       	jmp    f011ca8b <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f011c85b:	8b 45 14             	mov    0x14(%ebp),%eax
f011c85e:	83 c0 04             	add    $0x4,%eax
f011c861:	89 45 14             	mov    %eax,0x14(%ebp)
f011c864:	8b 45 14             	mov    0x14(%ebp),%eax
f011c867:	83 e8 04             	sub    $0x4,%eax
f011c86a:	8b 30                	mov    (%eax),%esi
f011c86c:	85 f6                	test   %esi,%esi
f011c86e:	75 05                	jne    f011c875 <vprintfmt+0x1a6>
				p = "(null)";
f011c870:	be d1 30 12 f0       	mov    $0xf01230d1,%esi
			if (width > 0 && padc != '-')
f011c875:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011c879:	7e 6d                	jle    f011c8e8 <vprintfmt+0x219>
f011c87b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f011c87f:	74 67                	je     f011c8e8 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f011c881:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c884:	83 ec 08             	sub    $0x8,%esp
f011c887:	50                   	push   %eax
f011c888:	56                   	push   %esi
f011c889:	e8 12 05 00 00       	call   f011cda0 <strnlen>
f011c88e:	83 c4 10             	add    $0x10,%esp
f011c891:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f011c894:	eb 16                	jmp    f011c8ac <vprintfmt+0x1dd>
					putch(padc, putdat);
f011c896:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f011c89a:	83 ec 08             	sub    $0x8,%esp
f011c89d:	ff 75 0c             	pushl  0xc(%ebp)
f011c8a0:	50                   	push   %eax
f011c8a1:	8b 45 08             	mov    0x8(%ebp),%eax
f011c8a4:	ff d0                	call   *%eax
f011c8a6:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f011c8a9:	ff 4d e4             	decl   -0x1c(%ebp)
f011c8ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011c8b0:	7f e4                	jg     f011c896 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f011c8b2:	eb 34                	jmp    f011c8e8 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f011c8b4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011c8b8:	74 1c                	je     f011c8d6 <vprintfmt+0x207>
f011c8ba:	83 fb 1f             	cmp    $0x1f,%ebx
f011c8bd:	7e 05                	jle    f011c8c4 <vprintfmt+0x1f5>
f011c8bf:	83 fb 7e             	cmp    $0x7e,%ebx
f011c8c2:	7e 12                	jle    f011c8d6 <vprintfmt+0x207>
					putch('?', putdat);
f011c8c4:	83 ec 08             	sub    $0x8,%esp
f011c8c7:	ff 75 0c             	pushl  0xc(%ebp)
f011c8ca:	6a 3f                	push   $0x3f
f011c8cc:	8b 45 08             	mov    0x8(%ebp),%eax
f011c8cf:	ff d0                	call   *%eax
f011c8d1:	83 c4 10             	add    $0x10,%esp
f011c8d4:	eb 0f                	jmp    f011c8e5 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f011c8d6:	83 ec 08             	sub    $0x8,%esp
f011c8d9:	ff 75 0c             	pushl  0xc(%ebp)
f011c8dc:	53                   	push   %ebx
f011c8dd:	8b 45 08             	mov    0x8(%ebp),%eax
f011c8e0:	ff d0                	call   *%eax
f011c8e2:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f011c8e5:	ff 4d e4             	decl   -0x1c(%ebp)
f011c8e8:	89 f0                	mov    %esi,%eax
f011c8ea:	8d 70 01             	lea    0x1(%eax),%esi
f011c8ed:	8a 00                	mov    (%eax),%al
f011c8ef:	0f be d8             	movsbl %al,%ebx
f011c8f2:	85 db                	test   %ebx,%ebx
f011c8f4:	74 24                	je     f011c91a <vprintfmt+0x24b>
f011c8f6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011c8fa:	78 b8                	js     f011c8b4 <vprintfmt+0x1e5>
f011c8fc:	ff 4d e0             	decl   -0x20(%ebp)
f011c8ff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011c903:	79 af                	jns    f011c8b4 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f011c905:	eb 13                	jmp    f011c91a <vprintfmt+0x24b>
				putch(' ', putdat);
f011c907:	83 ec 08             	sub    $0x8,%esp
f011c90a:	ff 75 0c             	pushl  0xc(%ebp)
f011c90d:	6a 20                	push   $0x20
f011c90f:	8b 45 08             	mov    0x8(%ebp),%eax
f011c912:	ff d0                	call   *%eax
f011c914:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f011c917:	ff 4d e4             	decl   -0x1c(%ebp)
f011c91a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011c91e:	7f e7                	jg     f011c907 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f011c920:	e9 66 01 00 00       	jmp    f011ca8b <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f011c925:	83 ec 08             	sub    $0x8,%esp
f011c928:	ff 75 e8             	pushl  -0x18(%ebp)
f011c92b:	8d 45 14             	lea    0x14(%ebp),%eax
f011c92e:	50                   	push   %eax
f011c92f:	e8 3c fd ff ff       	call   f011c670 <getint>
f011c934:	83 c4 10             	add    $0x10,%esp
f011c937:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011c93a:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f011c93d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011c940:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c943:	85 d2                	test   %edx,%edx
f011c945:	79 23                	jns    f011c96a <vprintfmt+0x29b>
				putch('-', putdat);
f011c947:	83 ec 08             	sub    $0x8,%esp
f011c94a:	ff 75 0c             	pushl  0xc(%ebp)
f011c94d:	6a 2d                	push   $0x2d
f011c94f:	8b 45 08             	mov    0x8(%ebp),%eax
f011c952:	ff d0                	call   *%eax
f011c954:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f011c957:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011c95a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c95d:	f7 d8                	neg    %eax
f011c95f:	83 d2 00             	adc    $0x0,%edx
f011c962:	f7 da                	neg    %edx
f011c964:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011c967:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f011c96a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f011c971:	e9 bc 00 00 00       	jmp    f011ca32 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f011c976:	83 ec 08             	sub    $0x8,%esp
f011c979:	ff 75 e8             	pushl  -0x18(%ebp)
f011c97c:	8d 45 14             	lea    0x14(%ebp),%eax
f011c97f:	50                   	push   %eax
f011c980:	e8 84 fc ff ff       	call   f011c609 <getuint>
f011c985:	83 c4 10             	add    $0x10,%esp
f011c988:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011c98b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f011c98e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f011c995:	e9 98 00 00 00       	jmp    f011ca32 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f011c99a:	83 ec 08             	sub    $0x8,%esp
f011c99d:	ff 75 0c             	pushl  0xc(%ebp)
f011c9a0:	6a 58                	push   $0x58
f011c9a2:	8b 45 08             	mov    0x8(%ebp),%eax
f011c9a5:	ff d0                	call   *%eax
f011c9a7:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f011c9aa:	83 ec 08             	sub    $0x8,%esp
f011c9ad:	ff 75 0c             	pushl  0xc(%ebp)
f011c9b0:	6a 58                	push   $0x58
f011c9b2:	8b 45 08             	mov    0x8(%ebp),%eax
f011c9b5:	ff d0                	call   *%eax
f011c9b7:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f011c9ba:	83 ec 08             	sub    $0x8,%esp
f011c9bd:	ff 75 0c             	pushl  0xc(%ebp)
f011c9c0:	6a 58                	push   $0x58
f011c9c2:	8b 45 08             	mov    0x8(%ebp),%eax
f011c9c5:	ff d0                	call   *%eax
f011c9c7:	83 c4 10             	add    $0x10,%esp
			break;
f011c9ca:	e9 bc 00 00 00       	jmp    f011ca8b <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f011c9cf:	83 ec 08             	sub    $0x8,%esp
f011c9d2:	ff 75 0c             	pushl  0xc(%ebp)
f011c9d5:	6a 30                	push   $0x30
f011c9d7:	8b 45 08             	mov    0x8(%ebp),%eax
f011c9da:	ff d0                	call   *%eax
f011c9dc:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f011c9df:	83 ec 08             	sub    $0x8,%esp
f011c9e2:	ff 75 0c             	pushl  0xc(%ebp)
f011c9e5:	6a 78                	push   $0x78
f011c9e7:	8b 45 08             	mov    0x8(%ebp),%eax
f011c9ea:	ff d0                	call   *%eax
f011c9ec:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f011c9ef:	8b 45 14             	mov    0x14(%ebp),%eax
f011c9f2:	83 c0 04             	add    $0x4,%eax
f011c9f5:	89 45 14             	mov    %eax,0x14(%ebp)
f011c9f8:	8b 45 14             	mov    0x14(%ebp),%eax
f011c9fb:	83 e8 04             	sub    $0x4,%eax
f011c9fe:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f011ca00:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ca03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f011ca0a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f011ca11:	eb 1f                	jmp    f011ca32 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f011ca13:	83 ec 08             	sub    $0x8,%esp
f011ca16:	ff 75 e8             	pushl  -0x18(%ebp)
f011ca19:	8d 45 14             	lea    0x14(%ebp),%eax
f011ca1c:	50                   	push   %eax
f011ca1d:	e8 e7 fb ff ff       	call   f011c609 <getuint>
f011ca22:	83 c4 10             	add    $0x10,%esp
f011ca25:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ca28:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f011ca2b:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f011ca32:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f011ca36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ca39:	83 ec 04             	sub    $0x4,%esp
f011ca3c:	52                   	push   %edx
f011ca3d:	ff 75 e4             	pushl  -0x1c(%ebp)
f011ca40:	50                   	push   %eax
f011ca41:	ff 75 f4             	pushl  -0xc(%ebp)
f011ca44:	ff 75 f0             	pushl  -0x10(%ebp)
f011ca47:	ff 75 0c             	pushl  0xc(%ebp)
f011ca4a:	ff 75 08             	pushl  0x8(%ebp)
f011ca4d:	e8 00 fb ff ff       	call   f011c552 <printnum>
f011ca52:	83 c4 20             	add    $0x20,%esp
			break;
f011ca55:	eb 34                	jmp    f011ca8b <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f011ca57:	83 ec 08             	sub    $0x8,%esp
f011ca5a:	ff 75 0c             	pushl  0xc(%ebp)
f011ca5d:	53                   	push   %ebx
f011ca5e:	8b 45 08             	mov    0x8(%ebp),%eax
f011ca61:	ff d0                	call   *%eax
f011ca63:	83 c4 10             	add    $0x10,%esp
			break;
f011ca66:	eb 23                	jmp    f011ca8b <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f011ca68:	83 ec 08             	sub    $0x8,%esp
f011ca6b:	ff 75 0c             	pushl  0xc(%ebp)
f011ca6e:	6a 25                	push   $0x25
f011ca70:	8b 45 08             	mov    0x8(%ebp),%eax
f011ca73:	ff d0                	call   *%eax
f011ca75:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f011ca78:	ff 4d 10             	decl   0x10(%ebp)
f011ca7b:	eb 03                	jmp    f011ca80 <vprintfmt+0x3b1>
f011ca7d:	ff 4d 10             	decl   0x10(%ebp)
f011ca80:	8b 45 10             	mov    0x10(%ebp),%eax
f011ca83:	48                   	dec    %eax
f011ca84:	8a 00                	mov    (%eax),%al
f011ca86:	3c 25                	cmp    $0x25,%al
f011ca88:	75 f3                	jne    f011ca7d <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f011ca8a:	90                   	nop
		}
	}
f011ca8b:	e9 47 fc ff ff       	jmp    f011c6d7 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f011ca90:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f011ca91:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011ca94:	5b                   	pop    %ebx
f011ca95:	5e                   	pop    %esi
f011ca96:	5d                   	pop    %ebp
f011ca97:	c3                   	ret    

f011ca98 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f011ca98:	55                   	push   %ebp
f011ca99:	89 e5                	mov    %esp,%ebp
f011ca9b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f011ca9e:	8d 45 10             	lea    0x10(%ebp),%eax
f011caa1:	83 c0 04             	add    $0x4,%eax
f011caa4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f011caa7:	8b 45 10             	mov    0x10(%ebp),%eax
f011caaa:	ff 75 f4             	pushl  -0xc(%ebp)
f011caad:	50                   	push   %eax
f011caae:	ff 75 0c             	pushl  0xc(%ebp)
f011cab1:	ff 75 08             	pushl  0x8(%ebp)
f011cab4:	e8 16 fc ff ff       	call   f011c6cf <vprintfmt>
f011cab9:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f011cabc:	90                   	nop
f011cabd:	c9                   	leave  
f011cabe:	c3                   	ret    

f011cabf <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f011cabf:	55                   	push   %ebp
f011cac0:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f011cac2:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cac5:	8b 40 08             	mov    0x8(%eax),%eax
f011cac8:	8d 50 01             	lea    0x1(%eax),%edx
f011cacb:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cace:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f011cad1:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cad4:	8b 10                	mov    (%eax),%edx
f011cad6:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cad9:	8b 40 04             	mov    0x4(%eax),%eax
f011cadc:	39 c2                	cmp    %eax,%edx
f011cade:	73 12                	jae    f011caf2 <sprintputch+0x33>
		*b->buf++ = ch;
f011cae0:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cae3:	8b 00                	mov    (%eax),%eax
f011cae5:	8d 48 01             	lea    0x1(%eax),%ecx
f011cae8:	8b 55 0c             	mov    0xc(%ebp),%edx
f011caeb:	89 0a                	mov    %ecx,(%edx)
f011caed:	8b 55 08             	mov    0x8(%ebp),%edx
f011caf0:	88 10                	mov    %dl,(%eax)
}
f011caf2:	90                   	nop
f011caf3:	5d                   	pop    %ebp
f011caf4:	c3                   	ret    

f011caf5 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f011caf5:	55                   	push   %ebp
f011caf6:	89 e5                	mov    %esp,%ebp
f011caf8:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f011cafb:	8b 45 08             	mov    0x8(%ebp),%eax
f011cafe:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011cb01:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cb04:	8d 50 ff             	lea    -0x1(%eax),%edx
f011cb07:	8b 45 08             	mov    0x8(%ebp),%eax
f011cb0a:	01 d0                	add    %edx,%eax
f011cb0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011cb0f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f011cb16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011cb1a:	74 06                	je     f011cb22 <vsnprintf+0x2d>
f011cb1c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011cb20:	7f 07                	jg     f011cb29 <vsnprintf+0x34>
		return -E_INVAL;
f011cb22:	b8 03 00 00 00       	mov    $0x3,%eax
f011cb27:	eb 20                	jmp    f011cb49 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f011cb29:	ff 75 14             	pushl  0x14(%ebp)
f011cb2c:	ff 75 10             	pushl  0x10(%ebp)
f011cb2f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f011cb32:	50                   	push   %eax
f011cb33:	68 bf ca 11 f0       	push   $0xf011cabf
f011cb38:	e8 92 fb ff ff       	call   f011c6cf <vprintfmt>
f011cb3d:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f011cb40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cb43:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f011cb46:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011cb49:	c9                   	leave  
f011cb4a:	c3                   	ret    

f011cb4b <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f011cb4b:	55                   	push   %ebp
f011cb4c:	89 e5                	mov    %esp,%ebp
f011cb4e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f011cb51:	8d 45 10             	lea    0x10(%ebp),%eax
f011cb54:	83 c0 04             	add    $0x4,%eax
f011cb57:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f011cb5a:	8b 45 10             	mov    0x10(%ebp),%eax
f011cb5d:	ff 75 f4             	pushl  -0xc(%ebp)
f011cb60:	50                   	push   %eax
f011cb61:	ff 75 0c             	pushl  0xc(%ebp)
f011cb64:	ff 75 08             	pushl  0x8(%ebp)
f011cb67:	e8 89 ff ff ff       	call   f011caf5 <vsnprintf>
f011cb6c:	83 c4 10             	add    $0x10,%esp
f011cb6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f011cb72:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f011cb75:	c9                   	leave  
f011cb76:	c3                   	ret    

f011cb77 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f011cb77:	55                   	push   %ebp
f011cb78:	89 e5                	mov    %esp,%ebp
f011cb7a:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f011cb7d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011cb81:	74 13                	je     f011cb96 <readline+0x1f>
		cprintf("%s", prompt);
f011cb83:	83 ec 08             	sub    $0x8,%esp
f011cb86:	ff 75 08             	pushl  0x8(%ebp)
f011cb89:	68 30 32 12 f0       	push   $0xf0123230
f011cb8e:	e8 71 a6 fe ff       	call   f0107204 <cprintf>
f011cb93:	83 c4 10             	add    $0x10,%esp

	i = 0;
f011cb96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f011cb9d:	83 ec 0c             	sub    $0xc,%esp
f011cba0:	6a 00                	push   $0x0
f011cba2:	e8 b0 41 fe ff       	call   f0100d57 <iscons>
f011cba7:	83 c4 10             	add    $0x10,%esp
f011cbaa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f011cbad:	e8 8c 41 fe ff       	call   f0100d3e <getchar>
f011cbb2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f011cbb5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cbb9:	79 22                	jns    f011cbdd <readline+0x66>
			if (c != -E_EOF)
f011cbbb:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f011cbbf:	0f 84 ad 00 00 00    	je     f011cc72 <readline+0xfb>
				cprintf("read error: %e\n", c);
f011cbc5:	83 ec 08             	sub    $0x8,%esp
f011cbc8:	ff 75 ec             	pushl  -0x14(%ebp)
f011cbcb:	68 33 32 12 f0       	push   $0xf0123233
f011cbd0:	e8 2f a6 fe ff       	call   f0107204 <cprintf>
f011cbd5:	83 c4 10             	add    $0x10,%esp
			return;
f011cbd8:	e9 95 00 00 00       	jmp    f011cc72 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011cbdd:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f011cbe1:	7e 34                	jle    f011cc17 <readline+0xa0>
f011cbe3:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f011cbea:	7f 2b                	jg     f011cc17 <readline+0xa0>
			if (echoing)
f011cbec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011cbf0:	74 0e                	je     f011cc00 <readline+0x89>
				cputchar(c);
f011cbf2:	83 ec 0c             	sub    $0xc,%esp
f011cbf5:	ff 75 ec             	pushl  -0x14(%ebp)
f011cbf8:	e8 2a 41 fe ff       	call   f0100d27 <cputchar>
f011cbfd:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f011cc00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cc03:	8d 50 01             	lea    0x1(%eax),%edx
f011cc06:	89 55 f4             	mov    %edx,-0xc(%ebp)
f011cc09:	89 c2                	mov    %eax,%edx
f011cc0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cc0e:	01 d0                	add    %edx,%eax
f011cc10:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011cc13:	88 10                	mov    %dl,(%eax)
f011cc15:	eb 56                	jmp    f011cc6d <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f011cc17:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f011cc1b:	75 1f                	jne    f011cc3c <readline+0xc5>
f011cc1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011cc21:	7e 19                	jle    f011cc3c <readline+0xc5>
			if (echoing)
f011cc23:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011cc27:	74 0e                	je     f011cc37 <readline+0xc0>
				cputchar(c);
f011cc29:	83 ec 0c             	sub    $0xc,%esp
f011cc2c:	ff 75 ec             	pushl  -0x14(%ebp)
f011cc2f:	e8 f3 40 fe ff       	call   f0100d27 <cputchar>
f011cc34:	83 c4 10             	add    $0x10,%esp

			i--;
f011cc37:	ff 4d f4             	decl   -0xc(%ebp)
f011cc3a:	eb 31                	jmp    f011cc6d <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f011cc3c:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f011cc40:	74 0a                	je     f011cc4c <readline+0xd5>
f011cc42:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f011cc46:	0f 85 61 ff ff ff    	jne    f011cbad <readline+0x36>
			if (echoing)
f011cc4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011cc50:	74 0e                	je     f011cc60 <readline+0xe9>
				cputchar(c);
f011cc52:	83 ec 0c             	sub    $0xc,%esp
f011cc55:	ff 75 ec             	pushl  -0x14(%ebp)
f011cc58:	e8 ca 40 fe ff       	call   f0100d27 <cputchar>
f011cc5d:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f011cc60:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc63:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cc66:	01 d0                	add    %edx,%eax
f011cc68:	c6 00 00             	movb   $0x0,(%eax)
			return;
f011cc6b:	eb 06                	jmp    f011cc73 <readline+0xfc>
		}
	}
f011cc6d:	e9 3b ff ff ff       	jmp    f011cbad <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f011cc72:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f011cc73:	c9                   	leave  
f011cc74:	c3                   	ret    

f011cc75 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f011cc75:	55                   	push   %ebp
f011cc76:	89 e5                	mov    %esp,%ebp
f011cc78:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f011cc7b:	e8 c0 de fe ff       	call   f010ab40 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f011cc80:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011cc84:	74 13                	je     f011cc99 <atomic_readline+0x24>
		cprintf("%s", prompt);
f011cc86:	83 ec 08             	sub    $0x8,%esp
f011cc89:	ff 75 08             	pushl  0x8(%ebp)
f011cc8c:	68 30 32 12 f0       	push   $0xf0123230
f011cc91:	e8 6e a5 fe ff       	call   f0107204 <cprintf>
f011cc96:	83 c4 10             	add    $0x10,%esp

	i = 0;
f011cc99:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f011cca0:	83 ec 0c             	sub    $0xc,%esp
f011cca3:	6a 00                	push   $0x0
f011cca5:	e8 ad 40 fe ff       	call   f0100d57 <iscons>
f011ccaa:	83 c4 10             	add    $0x10,%esp
f011ccad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f011ccb0:	e8 89 40 fe ff       	call   f0100d3e <getchar>
f011ccb5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f011ccb8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ccbc:	79 23                	jns    f011cce1 <atomic_readline+0x6c>
			if (c != -E_EOF)
f011ccbe:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f011ccc2:	74 13                	je     f011ccd7 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f011ccc4:	83 ec 08             	sub    $0x8,%esp
f011ccc7:	ff 75 ec             	pushl  -0x14(%ebp)
f011ccca:	68 33 32 12 f0       	push   $0xf0123233
f011cccf:	e8 30 a5 fe ff       	call   f0107204 <cprintf>
f011ccd4:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f011ccd7:	e8 7e de fe ff       	call   f010ab5a <sys_enable_interrupt>
			return;
f011ccdc:	e9 9a 00 00 00       	jmp    f011cd7b <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f011cce1:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f011cce5:	7e 34                	jle    f011cd1b <atomic_readline+0xa6>
f011cce7:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f011ccee:	7f 2b                	jg     f011cd1b <atomic_readline+0xa6>
			if (echoing)
f011ccf0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011ccf4:	74 0e                	je     f011cd04 <atomic_readline+0x8f>
				cputchar(c);
f011ccf6:	83 ec 0c             	sub    $0xc,%esp
f011ccf9:	ff 75 ec             	pushl  -0x14(%ebp)
f011ccfc:	e8 26 40 fe ff       	call   f0100d27 <cputchar>
f011cd01:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f011cd04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cd07:	8d 50 01             	lea    0x1(%eax),%edx
f011cd0a:	89 55 f4             	mov    %edx,-0xc(%ebp)
f011cd0d:	89 c2                	mov    %eax,%edx
f011cd0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cd12:	01 d0                	add    %edx,%eax
f011cd14:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011cd17:	88 10                	mov    %dl,(%eax)
f011cd19:	eb 5b                	jmp    f011cd76 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f011cd1b:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f011cd1f:	75 1f                	jne    f011cd40 <atomic_readline+0xcb>
f011cd21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011cd25:	7e 19                	jle    f011cd40 <atomic_readline+0xcb>
			if (echoing)
f011cd27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011cd2b:	74 0e                	je     f011cd3b <atomic_readline+0xc6>
				cputchar(c);
f011cd2d:	83 ec 0c             	sub    $0xc,%esp
f011cd30:	ff 75 ec             	pushl  -0x14(%ebp)
f011cd33:	e8 ef 3f fe ff       	call   f0100d27 <cputchar>
f011cd38:	83 c4 10             	add    $0x10,%esp
			i--;
f011cd3b:	ff 4d f4             	decl   -0xc(%ebp)
f011cd3e:	eb 36                	jmp    f011cd76 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f011cd40:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f011cd44:	74 0a                	je     f011cd50 <atomic_readline+0xdb>
f011cd46:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f011cd4a:	0f 85 60 ff ff ff    	jne    f011ccb0 <atomic_readline+0x3b>
			if (echoing)
f011cd50:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011cd54:	74 0e                	je     f011cd64 <atomic_readline+0xef>
				cputchar(c);
f011cd56:	83 ec 0c             	sub    $0xc,%esp
f011cd59:	ff 75 ec             	pushl  -0x14(%ebp)
f011cd5c:	e8 c6 3f fe ff       	call   f0100d27 <cputchar>
f011cd61:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f011cd64:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd67:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cd6a:	01 d0                	add    %edx,%eax
f011cd6c:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f011cd6f:	e8 e6 dd fe ff       	call   f010ab5a <sys_enable_interrupt>
			return;
f011cd74:	eb 05                	jmp    f011cd7b <atomic_readline+0x106>
		}
	}
f011cd76:	e9 35 ff ff ff       	jmp    f011ccb0 <atomic_readline+0x3b>
}
f011cd7b:	c9                   	leave  
f011cd7c:	c3                   	ret    

f011cd7d <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f011cd7d:	55                   	push   %ebp
f011cd7e:	89 e5                	mov    %esp,%ebp
f011cd80:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f011cd83:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011cd8a:	eb 06                	jmp    f011cd92 <strlen+0x15>
		n++;
f011cd8c:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f011cd8f:	ff 45 08             	incl   0x8(%ebp)
f011cd92:	8b 45 08             	mov    0x8(%ebp),%eax
f011cd95:	8a 00                	mov    (%eax),%al
f011cd97:	84 c0                	test   %al,%al
f011cd99:	75 f1                	jne    f011cd8c <strlen+0xf>
		n++;
	return n;
f011cd9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011cd9e:	c9                   	leave  
f011cd9f:	c3                   	ret    

f011cda0 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f011cda0:	55                   	push   %ebp
f011cda1:	89 e5                	mov    %esp,%ebp
f011cda3:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f011cda6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011cdad:	eb 09                	jmp    f011cdb8 <strnlen+0x18>
		n++;
f011cdaf:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f011cdb2:	ff 45 08             	incl   0x8(%ebp)
f011cdb5:	ff 4d 0c             	decl   0xc(%ebp)
f011cdb8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011cdbc:	74 09                	je     f011cdc7 <strnlen+0x27>
f011cdbe:	8b 45 08             	mov    0x8(%ebp),%eax
f011cdc1:	8a 00                	mov    (%eax),%al
f011cdc3:	84 c0                	test   %al,%al
f011cdc5:	75 e8                	jne    f011cdaf <strnlen+0xf>
		n++;
	return n;
f011cdc7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011cdca:	c9                   	leave  
f011cdcb:	c3                   	ret    

f011cdcc <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f011cdcc:	55                   	push   %ebp
f011cdcd:	89 e5                	mov    %esp,%ebp
f011cdcf:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f011cdd2:	8b 45 08             	mov    0x8(%ebp),%eax
f011cdd5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f011cdd8:	90                   	nop
f011cdd9:	8b 45 08             	mov    0x8(%ebp),%eax
f011cddc:	8d 50 01             	lea    0x1(%eax),%edx
f011cddf:	89 55 08             	mov    %edx,0x8(%ebp)
f011cde2:	8b 55 0c             	mov    0xc(%ebp),%edx
f011cde5:	8d 4a 01             	lea    0x1(%edx),%ecx
f011cde8:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f011cdeb:	8a 12                	mov    (%edx),%dl
f011cded:	88 10                	mov    %dl,(%eax)
f011cdef:	8a 00                	mov    (%eax),%al
f011cdf1:	84 c0                	test   %al,%al
f011cdf3:	75 e4                	jne    f011cdd9 <strcpy+0xd>
		/* do nothing */;
	return ret;
f011cdf5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011cdf8:	c9                   	leave  
f011cdf9:	c3                   	ret    

f011cdfa <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f011cdfa:	55                   	push   %ebp
f011cdfb:	89 e5                	mov    %esp,%ebp
f011cdfd:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f011ce00:	8b 45 08             	mov    0x8(%ebp),%eax
f011ce03:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f011ce06:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011ce0d:	eb 1f                	jmp    f011ce2e <strncpy+0x34>
		*dst++ = *src;
f011ce0f:	8b 45 08             	mov    0x8(%ebp),%eax
f011ce12:	8d 50 01             	lea    0x1(%eax),%edx
f011ce15:	89 55 08             	mov    %edx,0x8(%ebp)
f011ce18:	8b 55 0c             	mov    0xc(%ebp),%edx
f011ce1b:	8a 12                	mov    (%edx),%dl
f011ce1d:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f011ce1f:	8b 45 0c             	mov    0xc(%ebp),%eax
f011ce22:	8a 00                	mov    (%eax),%al
f011ce24:	84 c0                	test   %al,%al
f011ce26:	74 03                	je     f011ce2b <strncpy+0x31>
			src++;
f011ce28:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f011ce2b:	ff 45 fc             	incl   -0x4(%ebp)
f011ce2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011ce31:	3b 45 10             	cmp    0x10(%ebp),%eax
f011ce34:	72 d9                	jb     f011ce0f <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f011ce36:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f011ce39:	c9                   	leave  
f011ce3a:	c3                   	ret    

f011ce3b <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f011ce3b:	55                   	push   %ebp
f011ce3c:	89 e5                	mov    %esp,%ebp
f011ce3e:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f011ce41:	8b 45 08             	mov    0x8(%ebp),%eax
f011ce44:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f011ce47:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011ce4b:	74 30                	je     f011ce7d <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f011ce4d:	eb 16                	jmp    f011ce65 <strlcpy+0x2a>
			*dst++ = *src++;
f011ce4f:	8b 45 08             	mov    0x8(%ebp),%eax
f011ce52:	8d 50 01             	lea    0x1(%eax),%edx
f011ce55:	89 55 08             	mov    %edx,0x8(%ebp)
f011ce58:	8b 55 0c             	mov    0xc(%ebp),%edx
f011ce5b:	8d 4a 01             	lea    0x1(%edx),%ecx
f011ce5e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f011ce61:	8a 12                	mov    (%edx),%dl
f011ce63:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f011ce65:	ff 4d 10             	decl   0x10(%ebp)
f011ce68:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011ce6c:	74 09                	je     f011ce77 <strlcpy+0x3c>
f011ce6e:	8b 45 0c             	mov    0xc(%ebp),%eax
f011ce71:	8a 00                	mov    (%eax),%al
f011ce73:	84 c0                	test   %al,%al
f011ce75:	75 d8                	jne    f011ce4f <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f011ce77:	8b 45 08             	mov    0x8(%ebp),%eax
f011ce7a:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f011ce7d:	8b 55 08             	mov    0x8(%ebp),%edx
f011ce80:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011ce83:	29 c2                	sub    %eax,%edx
f011ce85:	89 d0                	mov    %edx,%eax
}
f011ce87:	c9                   	leave  
f011ce88:	c3                   	ret    

f011ce89 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f011ce89:	55                   	push   %ebp
f011ce8a:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f011ce8c:	eb 06                	jmp    f011ce94 <strcmp+0xb>
		p++, q++;
f011ce8e:	ff 45 08             	incl   0x8(%ebp)
f011ce91:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f011ce94:	8b 45 08             	mov    0x8(%ebp),%eax
f011ce97:	8a 00                	mov    (%eax),%al
f011ce99:	84 c0                	test   %al,%al
f011ce9b:	74 0e                	je     f011ceab <strcmp+0x22>
f011ce9d:	8b 45 08             	mov    0x8(%ebp),%eax
f011cea0:	8a 10                	mov    (%eax),%dl
f011cea2:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cea5:	8a 00                	mov    (%eax),%al
f011cea7:	38 c2                	cmp    %al,%dl
f011cea9:	74 e3                	je     f011ce8e <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f011ceab:	8b 45 08             	mov    0x8(%ebp),%eax
f011ceae:	8a 00                	mov    (%eax),%al
f011ceb0:	0f b6 d0             	movzbl %al,%edx
f011ceb3:	8b 45 0c             	mov    0xc(%ebp),%eax
f011ceb6:	8a 00                	mov    (%eax),%al
f011ceb8:	0f b6 c0             	movzbl %al,%eax
f011cebb:	29 c2                	sub    %eax,%edx
f011cebd:	89 d0                	mov    %edx,%eax
}
f011cebf:	5d                   	pop    %ebp
f011cec0:	c3                   	ret    

f011cec1 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f011cec1:	55                   	push   %ebp
f011cec2:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f011cec4:	eb 09                	jmp    f011cecf <strncmp+0xe>
		n--, p++, q++;
f011cec6:	ff 4d 10             	decl   0x10(%ebp)
f011cec9:	ff 45 08             	incl   0x8(%ebp)
f011cecc:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f011cecf:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011ced3:	74 17                	je     f011ceec <strncmp+0x2b>
f011ced5:	8b 45 08             	mov    0x8(%ebp),%eax
f011ced8:	8a 00                	mov    (%eax),%al
f011ceda:	84 c0                	test   %al,%al
f011cedc:	74 0e                	je     f011ceec <strncmp+0x2b>
f011cede:	8b 45 08             	mov    0x8(%ebp),%eax
f011cee1:	8a 10                	mov    (%eax),%dl
f011cee3:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cee6:	8a 00                	mov    (%eax),%al
f011cee8:	38 c2                	cmp    %al,%dl
f011ceea:	74 da                	je     f011cec6 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f011ceec:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011cef0:	75 07                	jne    f011cef9 <strncmp+0x38>
		return 0;
f011cef2:	b8 00 00 00 00       	mov    $0x0,%eax
f011cef7:	eb 14                	jmp    f011cf0d <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f011cef9:	8b 45 08             	mov    0x8(%ebp),%eax
f011cefc:	8a 00                	mov    (%eax),%al
f011cefe:	0f b6 d0             	movzbl %al,%edx
f011cf01:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cf04:	8a 00                	mov    (%eax),%al
f011cf06:	0f b6 c0             	movzbl %al,%eax
f011cf09:	29 c2                	sub    %eax,%edx
f011cf0b:	89 d0                	mov    %edx,%eax
}
f011cf0d:	5d                   	pop    %ebp
f011cf0e:	c3                   	ret    

f011cf0f <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f011cf0f:	55                   	push   %ebp
f011cf10:	89 e5                	mov    %esp,%ebp
f011cf12:	83 ec 04             	sub    $0x4,%esp
f011cf15:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cf18:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f011cf1b:	eb 12                	jmp    f011cf2f <strchr+0x20>
		if (*s == c)
f011cf1d:	8b 45 08             	mov    0x8(%ebp),%eax
f011cf20:	8a 00                	mov    (%eax),%al
f011cf22:	3a 45 fc             	cmp    -0x4(%ebp),%al
f011cf25:	75 05                	jne    f011cf2c <strchr+0x1d>
			return (char *) s;
f011cf27:	8b 45 08             	mov    0x8(%ebp),%eax
f011cf2a:	eb 11                	jmp    f011cf3d <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f011cf2c:	ff 45 08             	incl   0x8(%ebp)
f011cf2f:	8b 45 08             	mov    0x8(%ebp),%eax
f011cf32:	8a 00                	mov    (%eax),%al
f011cf34:	84 c0                	test   %al,%al
f011cf36:	75 e5                	jne    f011cf1d <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f011cf38:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011cf3d:	c9                   	leave  
f011cf3e:	c3                   	ret    

f011cf3f <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f011cf3f:	55                   	push   %ebp
f011cf40:	89 e5                	mov    %esp,%ebp
f011cf42:	83 ec 04             	sub    $0x4,%esp
f011cf45:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cf48:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f011cf4b:	eb 0d                	jmp    f011cf5a <strfind+0x1b>
		if (*s == c)
f011cf4d:	8b 45 08             	mov    0x8(%ebp),%eax
f011cf50:	8a 00                	mov    (%eax),%al
f011cf52:	3a 45 fc             	cmp    -0x4(%ebp),%al
f011cf55:	74 0e                	je     f011cf65 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f011cf57:	ff 45 08             	incl   0x8(%ebp)
f011cf5a:	8b 45 08             	mov    0x8(%ebp),%eax
f011cf5d:	8a 00                	mov    (%eax),%al
f011cf5f:	84 c0                	test   %al,%al
f011cf61:	75 ea                	jne    f011cf4d <strfind+0xe>
f011cf63:	eb 01                	jmp    f011cf66 <strfind+0x27>
		if (*s == c)
			break;
f011cf65:	90                   	nop
	return (char *) s;
f011cf66:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011cf69:	c9                   	leave  
f011cf6a:	c3                   	ret    

f011cf6b <memset>:


void *
memset(void *v, int c, uint32 n)
{
f011cf6b:	55                   	push   %ebp
f011cf6c:	89 e5                	mov    %esp,%ebp
f011cf6e:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f011cf71:	8b 45 08             	mov    0x8(%ebp),%eax
f011cf74:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f011cf77:	8b 45 10             	mov    0x10(%ebp),%eax
f011cf7a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f011cf7d:	eb 0e                	jmp    f011cf8d <memset+0x22>
		*p++ = c;
f011cf7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011cf82:	8d 50 01             	lea    0x1(%eax),%edx
f011cf85:	89 55 fc             	mov    %edx,-0x4(%ebp)
f011cf88:	8b 55 0c             	mov    0xc(%ebp),%edx
f011cf8b:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f011cf8d:	ff 4d f8             	decl   -0x8(%ebp)
f011cf90:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f011cf94:	79 e9                	jns    f011cf7f <memset+0x14>
		*p++ = c;

	return v;
f011cf96:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011cf99:	c9                   	leave  
f011cf9a:	c3                   	ret    

f011cf9b <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f011cf9b:	55                   	push   %ebp
f011cf9c:	89 e5                	mov    %esp,%ebp
f011cf9e:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f011cfa1:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cfa4:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f011cfa7:	8b 45 08             	mov    0x8(%ebp),%eax
f011cfaa:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f011cfad:	eb 16                	jmp    f011cfc5 <memcpy+0x2a>
		*d++ = *s++;
f011cfaf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011cfb2:	8d 50 01             	lea    0x1(%eax),%edx
f011cfb5:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011cfb8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011cfbb:	8d 4a 01             	lea    0x1(%edx),%ecx
f011cfbe:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f011cfc1:	8a 12                	mov    (%edx),%dl
f011cfc3:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f011cfc5:	8b 45 10             	mov    0x10(%ebp),%eax
f011cfc8:	8d 50 ff             	lea    -0x1(%eax),%edx
f011cfcb:	89 55 10             	mov    %edx,0x10(%ebp)
f011cfce:	85 c0                	test   %eax,%eax
f011cfd0:	75 dd                	jne    f011cfaf <memcpy+0x14>
		*d++ = *s++;

	return dst;
f011cfd2:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011cfd5:	c9                   	leave  
f011cfd6:	c3                   	ret    

f011cfd7 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f011cfd7:	55                   	push   %ebp
f011cfd8:	89 e5                	mov    %esp,%ebp
f011cfda:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;
	
	s = src;
f011cfdd:	8b 45 0c             	mov    0xc(%ebp),%eax
f011cfe0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f011cfe3:	8b 45 08             	mov    0x8(%ebp),%eax
f011cfe6:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f011cfe9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011cfec:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f011cfef:	73 50                	jae    f011d041 <memmove+0x6a>
f011cff1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011cff4:	8b 45 10             	mov    0x10(%ebp),%eax
f011cff7:	01 d0                	add    %edx,%eax
f011cff9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f011cffc:	76 43                	jbe    f011d041 <memmove+0x6a>
		s += n;
f011cffe:	8b 45 10             	mov    0x10(%ebp),%eax
f011d001:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f011d004:	8b 45 10             	mov    0x10(%ebp),%eax
f011d007:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f011d00a:	eb 10                	jmp    f011d01c <memmove+0x45>
			*--d = *--s;
f011d00c:	ff 4d f8             	decl   -0x8(%ebp)
f011d00f:	ff 4d fc             	decl   -0x4(%ebp)
f011d012:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d015:	8a 10                	mov    (%eax),%dl
f011d017:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d01a:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f011d01c:	8b 45 10             	mov    0x10(%ebp),%eax
f011d01f:	8d 50 ff             	lea    -0x1(%eax),%edx
f011d022:	89 55 10             	mov    %edx,0x10(%ebp)
f011d025:	85 c0                	test   %eax,%eax
f011d027:	75 e3                	jne    f011d00c <memmove+0x35>
	const char *s;
	char *d;
	
	s = src;
	d = dst;
	if (s < d && s + n > d) {
f011d029:	eb 23                	jmp    f011d04e <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f011d02b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d02e:	8d 50 01             	lea    0x1(%eax),%edx
f011d031:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011d034:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011d037:	8d 4a 01             	lea    0x1(%edx),%ecx
f011d03a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f011d03d:	8a 12                	mov    (%edx),%dl
f011d03f:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f011d041:	8b 45 10             	mov    0x10(%ebp),%eax
f011d044:	8d 50 ff             	lea    -0x1(%eax),%edx
f011d047:	89 55 10             	mov    %edx,0x10(%ebp)
f011d04a:	85 c0                	test   %eax,%eax
f011d04c:	75 dd                	jne    f011d02b <memmove+0x54>
			*d++ = *s++;

	return dst;
f011d04e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011d051:	c9                   	leave  
f011d052:	c3                   	ret    

f011d053 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f011d053:	55                   	push   %ebp
f011d054:	89 e5                	mov    %esp,%ebp
f011d056:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f011d059:	8b 45 08             	mov    0x8(%ebp),%eax
f011d05c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f011d05f:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d062:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f011d065:	eb 2a                	jmp    f011d091 <memcmp+0x3e>
		if (*s1 != *s2)
f011d067:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d06a:	8a 10                	mov    (%eax),%dl
f011d06c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d06f:	8a 00                	mov    (%eax),%al
f011d071:	38 c2                	cmp    %al,%dl
f011d073:	74 16                	je     f011d08b <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f011d075:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d078:	8a 00                	mov    (%eax),%al
f011d07a:	0f b6 d0             	movzbl %al,%edx
f011d07d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d080:	8a 00                	mov    (%eax),%al
f011d082:	0f b6 c0             	movzbl %al,%eax
f011d085:	29 c2                	sub    %eax,%edx
f011d087:	89 d0                	mov    %edx,%eax
f011d089:	eb 18                	jmp    f011d0a3 <memcmp+0x50>
		s1++, s2++;
f011d08b:	ff 45 fc             	incl   -0x4(%ebp)
f011d08e:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f011d091:	8b 45 10             	mov    0x10(%ebp),%eax
f011d094:	8d 50 ff             	lea    -0x1(%eax),%edx
f011d097:	89 55 10             	mov    %edx,0x10(%ebp)
f011d09a:	85 c0                	test   %eax,%eax
f011d09c:	75 c9                	jne    f011d067 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f011d09e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011d0a3:	c9                   	leave  
f011d0a4:	c3                   	ret    

f011d0a5 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f011d0a5:	55                   	push   %ebp
f011d0a6:	89 e5                	mov    %esp,%ebp
f011d0a8:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f011d0ab:	8b 55 08             	mov    0x8(%ebp),%edx
f011d0ae:	8b 45 10             	mov    0x10(%ebp),%eax
f011d0b1:	01 d0                	add    %edx,%eax
f011d0b3:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f011d0b6:	eb 15                	jmp    f011d0cd <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f011d0b8:	8b 45 08             	mov    0x8(%ebp),%eax
f011d0bb:	8a 00                	mov    (%eax),%al
f011d0bd:	0f b6 d0             	movzbl %al,%edx
f011d0c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d0c3:	0f b6 c0             	movzbl %al,%eax
f011d0c6:	39 c2                	cmp    %eax,%edx
f011d0c8:	74 0d                	je     f011d0d7 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f011d0ca:	ff 45 08             	incl   0x8(%ebp)
f011d0cd:	8b 45 08             	mov    0x8(%ebp),%eax
f011d0d0:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f011d0d3:	72 e3                	jb     f011d0b8 <memfind+0x13>
f011d0d5:	eb 01                	jmp    f011d0d8 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f011d0d7:	90                   	nop
	return (void *) s;
f011d0d8:	8b 45 08             	mov    0x8(%ebp),%eax
}
f011d0db:	c9                   	leave  
f011d0dc:	c3                   	ret    

f011d0dd <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f011d0dd:	55                   	push   %ebp
f011d0de:	89 e5                	mov    %esp,%ebp
f011d0e0:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f011d0e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f011d0ea:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f011d0f1:	eb 03                	jmp    f011d0f6 <strtol+0x19>
		s++;
f011d0f3:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f011d0f6:	8b 45 08             	mov    0x8(%ebp),%eax
f011d0f9:	8a 00                	mov    (%eax),%al
f011d0fb:	3c 20                	cmp    $0x20,%al
f011d0fd:	74 f4                	je     f011d0f3 <strtol+0x16>
f011d0ff:	8b 45 08             	mov    0x8(%ebp),%eax
f011d102:	8a 00                	mov    (%eax),%al
f011d104:	3c 09                	cmp    $0x9,%al
f011d106:	74 eb                	je     f011d0f3 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f011d108:	8b 45 08             	mov    0x8(%ebp),%eax
f011d10b:	8a 00                	mov    (%eax),%al
f011d10d:	3c 2b                	cmp    $0x2b,%al
f011d10f:	75 05                	jne    f011d116 <strtol+0x39>
		s++;
f011d111:	ff 45 08             	incl   0x8(%ebp)
f011d114:	eb 13                	jmp    f011d129 <strtol+0x4c>
	else if (*s == '-')
f011d116:	8b 45 08             	mov    0x8(%ebp),%eax
f011d119:	8a 00                	mov    (%eax),%al
f011d11b:	3c 2d                	cmp    $0x2d,%al
f011d11d:	75 0a                	jne    f011d129 <strtol+0x4c>
		s++, neg = 1;
f011d11f:	ff 45 08             	incl   0x8(%ebp)
f011d122:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f011d129:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011d12d:	74 06                	je     f011d135 <strtol+0x58>
f011d12f:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f011d133:	75 20                	jne    f011d155 <strtol+0x78>
f011d135:	8b 45 08             	mov    0x8(%ebp),%eax
f011d138:	8a 00                	mov    (%eax),%al
f011d13a:	3c 30                	cmp    $0x30,%al
f011d13c:	75 17                	jne    f011d155 <strtol+0x78>
f011d13e:	8b 45 08             	mov    0x8(%ebp),%eax
f011d141:	40                   	inc    %eax
f011d142:	8a 00                	mov    (%eax),%al
f011d144:	3c 78                	cmp    $0x78,%al
f011d146:	75 0d                	jne    f011d155 <strtol+0x78>
		s += 2, base = 16;
f011d148:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f011d14c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f011d153:	eb 28                	jmp    f011d17d <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f011d155:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011d159:	75 15                	jne    f011d170 <strtol+0x93>
f011d15b:	8b 45 08             	mov    0x8(%ebp),%eax
f011d15e:	8a 00                	mov    (%eax),%al
f011d160:	3c 30                	cmp    $0x30,%al
f011d162:	75 0c                	jne    f011d170 <strtol+0x93>
		s++, base = 8;
f011d164:	ff 45 08             	incl   0x8(%ebp)
f011d167:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f011d16e:	eb 0d                	jmp    f011d17d <strtol+0xa0>
	else if (base == 0)
f011d170:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011d174:	75 07                	jne    f011d17d <strtol+0xa0>
		base = 10;
f011d176:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f011d17d:	8b 45 08             	mov    0x8(%ebp),%eax
f011d180:	8a 00                	mov    (%eax),%al
f011d182:	3c 2f                	cmp    $0x2f,%al
f011d184:	7e 19                	jle    f011d19f <strtol+0xc2>
f011d186:	8b 45 08             	mov    0x8(%ebp),%eax
f011d189:	8a 00                	mov    (%eax),%al
f011d18b:	3c 39                	cmp    $0x39,%al
f011d18d:	7f 10                	jg     f011d19f <strtol+0xc2>
			dig = *s - '0';
f011d18f:	8b 45 08             	mov    0x8(%ebp),%eax
f011d192:	8a 00                	mov    (%eax),%al
f011d194:	0f be c0             	movsbl %al,%eax
f011d197:	83 e8 30             	sub    $0x30,%eax
f011d19a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011d19d:	eb 42                	jmp    f011d1e1 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f011d19f:	8b 45 08             	mov    0x8(%ebp),%eax
f011d1a2:	8a 00                	mov    (%eax),%al
f011d1a4:	3c 60                	cmp    $0x60,%al
f011d1a6:	7e 19                	jle    f011d1c1 <strtol+0xe4>
f011d1a8:	8b 45 08             	mov    0x8(%ebp),%eax
f011d1ab:	8a 00                	mov    (%eax),%al
f011d1ad:	3c 7a                	cmp    $0x7a,%al
f011d1af:	7f 10                	jg     f011d1c1 <strtol+0xe4>
			dig = *s - 'a' + 10;
f011d1b1:	8b 45 08             	mov    0x8(%ebp),%eax
f011d1b4:	8a 00                	mov    (%eax),%al
f011d1b6:	0f be c0             	movsbl %al,%eax
f011d1b9:	83 e8 57             	sub    $0x57,%eax
f011d1bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011d1bf:	eb 20                	jmp    f011d1e1 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f011d1c1:	8b 45 08             	mov    0x8(%ebp),%eax
f011d1c4:	8a 00                	mov    (%eax),%al
f011d1c6:	3c 40                	cmp    $0x40,%al
f011d1c8:	7e 39                	jle    f011d203 <strtol+0x126>
f011d1ca:	8b 45 08             	mov    0x8(%ebp),%eax
f011d1cd:	8a 00                	mov    (%eax),%al
f011d1cf:	3c 5a                	cmp    $0x5a,%al
f011d1d1:	7f 30                	jg     f011d203 <strtol+0x126>
			dig = *s - 'A' + 10;
f011d1d3:	8b 45 08             	mov    0x8(%ebp),%eax
f011d1d6:	8a 00                	mov    (%eax),%al
f011d1d8:	0f be c0             	movsbl %al,%eax
f011d1db:	83 e8 37             	sub    $0x37,%eax
f011d1de:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f011d1e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d1e4:	3b 45 10             	cmp    0x10(%ebp),%eax
f011d1e7:	7d 19                	jge    f011d202 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f011d1e9:	ff 45 08             	incl   0x8(%ebp)
f011d1ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d1ef:	0f af 45 10          	imul   0x10(%ebp),%eax
f011d1f3:	89 c2                	mov    %eax,%edx
f011d1f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d1f8:	01 d0                	add    %edx,%eax
f011d1fa:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f011d1fd:	e9 7b ff ff ff       	jmp    f011d17d <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f011d202:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f011d203:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011d207:	74 08                	je     f011d211 <strtol+0x134>
		*endptr = (char *) s;
f011d209:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d20c:	8b 55 08             	mov    0x8(%ebp),%edx
f011d20f:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f011d211:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011d215:	74 07                	je     f011d21e <strtol+0x141>
f011d217:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d21a:	f7 d8                	neg    %eax
f011d21c:	eb 03                	jmp    f011d221 <strtol+0x144>
f011d21e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f011d221:	c9                   	leave  
f011d222:	c3                   	ret    

f011d223 <ltostr>:

void
ltostr(long value, char *str)
{
f011d223:	55                   	push   %ebp
f011d224:	89 e5                	mov    %esp,%ebp
f011d226:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f011d229:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f011d230:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f011d237:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011d23b:	79 13                	jns    f011d250 <ltostr+0x2d>
	{
		neg = 1;
f011d23d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f011d244:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d247:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f011d24a:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f011d24d:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f011d250:	8b 45 08             	mov    0x8(%ebp),%eax
f011d253:	b9 0a 00 00 00       	mov    $0xa,%ecx
f011d258:	99                   	cltd   
f011d259:	f7 f9                	idiv   %ecx
f011d25b:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f011d25e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d261:	8d 50 01             	lea    0x1(%eax),%edx
f011d264:	89 55 f8             	mov    %edx,-0x8(%ebp)
f011d267:	89 c2                	mov    %eax,%edx
f011d269:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d26c:	01 d0                	add    %edx,%eax
f011d26e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011d271:	83 c2 30             	add    $0x30,%edx
f011d274:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f011d276:	8b 4d 08             	mov    0x8(%ebp),%ecx
f011d279:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011d27e:	f7 e9                	imul   %ecx
f011d280:	c1 fa 02             	sar    $0x2,%edx
f011d283:	89 c8                	mov    %ecx,%eax
f011d285:	c1 f8 1f             	sar    $0x1f,%eax
f011d288:	29 c2                	sub    %eax,%edx
f011d28a:	89 d0                	mov    %edx,%eax
f011d28c:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f011d28f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f011d292:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011d297:	f7 e9                	imul   %ecx
f011d299:	c1 fa 02             	sar    $0x2,%edx
f011d29c:	89 c8                	mov    %ecx,%eax
f011d29e:	c1 f8 1f             	sar    $0x1f,%eax
f011d2a1:	29 c2                	sub    %eax,%edx
f011d2a3:	89 d0                	mov    %edx,%eax
f011d2a5:	c1 e0 02             	shl    $0x2,%eax
f011d2a8:	01 d0                	add    %edx,%eax
f011d2aa:	01 c0                	add    %eax,%eax
f011d2ac:	29 c1                	sub    %eax,%ecx
f011d2ae:	89 ca                	mov    %ecx,%edx
f011d2b0:	85 d2                	test   %edx,%edx
f011d2b2:	75 9c                	jne    f011d250 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f011d2b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f011d2bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d2be:	48                   	dec    %eax
f011d2bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f011d2c2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011d2c6:	74 3d                	je     f011d305 <ltostr+0xe2>
		start = 1 ;
f011d2c8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f011d2cf:	eb 34                	jmp    f011d305 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f011d2d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d2d7:	01 d0                	add    %edx,%eax
f011d2d9:	8a 00                	mov    (%eax),%al
f011d2db:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f011d2de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d2e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d2e4:	01 c2                	add    %eax,%edx
f011d2e6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f011d2e9:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d2ec:	01 c8                	add    %ecx,%eax
f011d2ee:	8a 00                	mov    (%eax),%al
f011d2f0:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f011d2f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011d2f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d2f8:	01 c2                	add    %eax,%edx
f011d2fa:	8a 45 eb             	mov    -0x15(%ebp),%al
f011d2fd:	88 02                	mov    %al,(%edx)
		start++ ;
f011d2ff:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f011d302:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f011d305:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d308:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d30b:	7c c4                	jl     f011d2d1 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f011d30d:	8b 55 f8             	mov    -0x8(%ebp),%edx
f011d310:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d313:	01 d0                	add    %edx,%eax
f011d315:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f011d318:	90                   	nop
f011d319:	c9                   	leave  
f011d31a:	c3                   	ret    

f011d31b <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f011d31b:	55                   	push   %ebp
f011d31c:	89 e5                	mov    %esp,%ebp
f011d31e:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f011d321:	ff 75 08             	pushl  0x8(%ebp)
f011d324:	e8 54 fa ff ff       	call   f011cd7d <strlen>
f011d329:	83 c4 04             	add    $0x4,%esp
f011d32c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f011d32f:	ff 75 0c             	pushl  0xc(%ebp)
f011d332:	e8 46 fa ff ff       	call   f011cd7d <strlen>
f011d337:	83 c4 04             	add    $0x4,%esp
f011d33a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f011d33d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f011d344:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011d34b:	eb 17                	jmp    f011d364 <strcconcat+0x49>
		final[s] = str1[s] ;
f011d34d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011d350:	8b 45 10             	mov    0x10(%ebp),%eax
f011d353:	01 c2                	add    %eax,%edx
f011d355:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f011d358:	8b 45 08             	mov    0x8(%ebp),%eax
f011d35b:	01 c8                	add    %ecx,%eax
f011d35d:	8a 00                	mov    (%eax),%al
f011d35f:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f011d361:	ff 45 fc             	incl   -0x4(%ebp)
f011d364:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d367:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d36a:	7c e1                	jl     f011d34d <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f011d36c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f011d373:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f011d37a:	eb 1f                	jmp    f011d39b <strcconcat+0x80>
		final[s++] = str2[i] ;
f011d37c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d37f:	8d 50 01             	lea    0x1(%eax),%edx
f011d382:	89 55 fc             	mov    %edx,-0x4(%ebp)
f011d385:	89 c2                	mov    %eax,%edx
f011d387:	8b 45 10             	mov    0x10(%ebp),%eax
f011d38a:	01 c2                	add    %eax,%edx
f011d38c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f011d38f:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d392:	01 c8                	add    %ecx,%eax
f011d394:	8a 00                	mov    (%eax),%al
f011d396:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f011d398:	ff 45 f8             	incl   -0x8(%ebp)
f011d39b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d39e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011d3a1:	7c d9                	jl     f011d37c <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f011d3a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011d3a6:	8b 45 10             	mov    0x10(%ebp),%eax
f011d3a9:	01 d0                	add    %edx,%eax
f011d3ab:	c6 00 00             	movb   $0x0,(%eax)
}
f011d3ae:	90                   	nop
f011d3af:	c9                   	leave  
f011d3b0:	c3                   	ret    

f011d3b1 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f011d3b1:	55                   	push   %ebp
f011d3b2:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f011d3b4:	8b 45 14             	mov    0x14(%ebp),%eax
f011d3b7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f011d3bd:	8b 45 14             	mov    0x14(%ebp),%eax
f011d3c0:	8b 00                	mov    (%eax),%eax
f011d3c2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011d3c9:	8b 45 10             	mov    0x10(%ebp),%eax
f011d3cc:	01 d0                	add    %edx,%eax
f011d3ce:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f011d3d4:	eb 0c                	jmp    f011d3e2 <strsplit+0x31>
			*string++ = 0;
f011d3d6:	8b 45 08             	mov    0x8(%ebp),%eax
f011d3d9:	8d 50 01             	lea    0x1(%eax),%edx
f011d3dc:	89 55 08             	mov    %edx,0x8(%ebp)
f011d3df:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1) 
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f011d3e2:	8b 45 08             	mov    0x8(%ebp),%eax
f011d3e5:	8a 00                	mov    (%eax),%al
f011d3e7:	84 c0                	test   %al,%al
f011d3e9:	74 18                	je     f011d403 <strsplit+0x52>
f011d3eb:	8b 45 08             	mov    0x8(%ebp),%eax
f011d3ee:	8a 00                	mov    (%eax),%al
f011d3f0:	0f be c0             	movsbl %al,%eax
f011d3f3:	50                   	push   %eax
f011d3f4:	ff 75 0c             	pushl  0xc(%ebp)
f011d3f7:	e8 13 fb ff ff       	call   f011cf0f <strchr>
f011d3fc:	83 c4 08             	add    $0x8,%esp
f011d3ff:	85 c0                	test   %eax,%eax
f011d401:	75 d3                	jne    f011d3d6 <strsplit+0x25>
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
f011d403:	8b 45 08             	mov    0x8(%ebp),%eax
f011d406:	8a 00                	mov    (%eax),%al
f011d408:	84 c0                	test   %al,%al
f011d40a:	74 5a                	je     f011d466 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1) 
f011d40c:	8b 45 14             	mov    0x14(%ebp),%eax
f011d40f:	8b 00                	mov    (%eax),%eax
f011d411:	83 f8 0f             	cmp    $0xf,%eax
f011d414:	75 07                	jne    f011d41d <strsplit+0x6c>
		{
			return 0;
f011d416:	b8 00 00 00 00       	mov    $0x0,%eax
f011d41b:	eb 66                	jmp    f011d483 <strsplit+0xd2>
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f011d41d:	8b 45 14             	mov    0x14(%ebp),%eax
f011d420:	8b 00                	mov    (%eax),%eax
f011d422:	8d 48 01             	lea    0x1(%eax),%ecx
f011d425:	8b 55 14             	mov    0x14(%ebp),%edx
f011d428:	89 0a                	mov    %ecx,(%edx)
f011d42a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011d431:	8b 45 10             	mov    0x10(%ebp),%eax
f011d434:	01 c2                	add    %eax,%edx
f011d436:	8b 45 08             	mov    0x8(%ebp),%eax
f011d439:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f011d43b:	eb 03                	jmp    f011d440 <strsplit+0x8f>
			string++;
f011d43d:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}
		
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f011d440:	8b 45 08             	mov    0x8(%ebp),%eax
f011d443:	8a 00                	mov    (%eax),%al
f011d445:	84 c0                	test   %al,%al
f011d447:	74 8b                	je     f011d3d4 <strsplit+0x23>
f011d449:	8b 45 08             	mov    0x8(%ebp),%eax
f011d44c:	8a 00                	mov    (%eax),%al
f011d44e:	0f be c0             	movsbl %al,%eax
f011d451:	50                   	push   %eax
f011d452:	ff 75 0c             	pushl  0xc(%ebp)
f011d455:	e8 b5 fa ff ff       	call   f011cf0f <strchr>
f011d45a:	83 c4 08             	add    $0x8,%esp
f011d45d:	85 c0                	test   %eax,%eax
f011d45f:	74 dc                	je     f011d43d <strsplit+0x8c>
			string++;
	}
f011d461:	e9 6e ff ff ff       	jmp    f011d3d4 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;
		
		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f011d466:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f011d467:	8b 45 14             	mov    0x14(%ebp),%eax
f011d46a:	8b 00                	mov    (%eax),%eax
f011d46c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011d473:	8b 45 10             	mov    0x10(%ebp),%eax
f011d476:	01 d0                	add    %edx,%eax
f011d478:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f011d47e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011d483:	c9                   	leave  
f011d484:	c3                   	ret    

f011d485 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f011d485:	55                   	push   %ebp
f011d486:	89 e5                	mov    %esp,%ebp
f011d488:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f011d48b:	90                   	nop
f011d48c:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f011d493:	8b 45 f8             	mov    -0x8(%ebp),%eax
f011d496:	89 c2                	mov    %eax,%edx
f011d498:	ec                   	in     (%dx),%al
f011d499:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f011d49c:	8a 45 f7             	mov    -0x9(%ebp),%al
f011d49f:	0f b6 c0             	movzbl %al,%eax
f011d4a2:	89 45 fc             	mov    %eax,-0x4(%ebp)
f011d4a5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d4a8:	25 c0 00 00 00       	and    $0xc0,%eax
f011d4ad:	83 f8 40             	cmp    $0x40,%eax
f011d4b0:	75 da                	jne    f011d48c <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f011d4b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011d4b6:	74 11                	je     f011d4c9 <ide_wait_ready+0x44>
f011d4b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011d4bb:	83 e0 21             	and    $0x21,%eax
f011d4be:	85 c0                	test   %eax,%eax
f011d4c0:	74 07                	je     f011d4c9 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f011d4c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f011d4c7:	eb 05                	jmp    f011d4ce <ide_wait_ready+0x49>
	}
	return 0;
f011d4c9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011d4ce:	c9                   	leave  
f011d4cf:	c3                   	ret    

f011d4d0 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f011d4d0:	55                   	push   %ebp
f011d4d1:	89 e5                	mov    %esp,%ebp
f011d4d3:	57                   	push   %edi
f011d4d4:	53                   	push   %ebx
f011d4d5:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f011d4d8:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f011d4df:	76 16                	jbe    f011d4f7 <ide_read+0x27>
f011d4e1:	68 43 32 12 f0       	push   $0xf0123243
f011d4e6:	68 50 32 12 f0       	push   $0xf0123250
f011d4eb:	6a 25                	push   $0x25
f011d4ed:	68 65 32 12 f0       	push   $0xf0123265
f011d4f2:	e8 b8 2c fe ff       	call   f01001af <_panic>

	//This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f011d4f7:	83 ec 0c             	sub    $0xc,%esp
f011d4fa:	6a 00                	push   $0x0
f011d4fc:	e8 84 ff ff ff       	call   f011d485 <ide_wait_ready>
f011d501:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f011d504:	8b 45 10             	mov    0x10(%ebp),%eax
f011d507:	0f b6 c0             	movzbl %al,%eax
f011d50a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011d511:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011d514:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011d517:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011d51a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f011d51b:	8b 45 08             	mov    0x8(%ebp),%eax
f011d51e:	0f b6 c0             	movzbl %al,%eax
f011d521:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f011d528:	88 45 d3             	mov    %al,-0x2d(%ebp)
f011d52b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f011d52e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011d531:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011d532:	8b 45 08             	mov    0x8(%ebp),%eax
f011d535:	c1 e8 08             	shr    $0x8,%eax
f011d538:	0f b6 c0             	movzbl %al,%eax
f011d53b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011d542:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011d545:	8a 45 d4             	mov    -0x2c(%ebp),%al
f011d548:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011d54b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f011d54c:	8b 45 08             	mov    0x8(%ebp),%eax
f011d54f:	c1 e8 10             	shr    $0x10,%eax
f011d552:	0f b6 c0             	movzbl %al,%eax
f011d555:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f011d55c:	88 45 d5             	mov    %al,-0x2b(%ebp)
f011d55f:	8a 45 d5             	mov    -0x2b(%ebp),%al
f011d562:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d565:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f011d566:	a1 4c 28 7e f0       	mov    0xf07e284c,%eax
f011d56b:	83 e0 01             	and    $0x1,%eax
f011d56e:	c1 e0 04             	shl    $0x4,%eax
f011d571:	88 c2                	mov    %al,%dl
f011d573:	8b 45 08             	mov    0x8(%ebp),%eax
f011d576:	c1 e8 18             	shr    $0x18,%eax
f011d579:	83 e0 0f             	and    $0xf,%eax
f011d57c:	09 d0                	or     %edx,%eax
f011d57e:	83 c8 e0             	or     $0xffffffe0,%eax
f011d581:	0f b6 c0             	movzbl %al,%eax
f011d584:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f011d58b:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011d58e:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011d591:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011d594:	ee                   	out    %al,(%dx)
f011d595:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f011d59c:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f011d5a0:	8a 45 d7             	mov    -0x29(%ebp),%al
f011d5a3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011d5a6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011d5a7:	eb 55                	jmp    f011d5fe <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f011d5a9:	83 ec 0c             	sub    $0xc,%esp
f011d5ac:	6a 01                	push   $0x1
f011d5ae:	e8 d2 fe ff ff       	call   f011d485 <ide_wait_ready>
f011d5b3:	83 c4 10             	add    $0x10,%esp
f011d5b6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011d5b9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011d5bd:	79 05                	jns    f011d5c4 <ide_read+0xf4>
			return r;
f011d5bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d5c2:	eb 45                	jmp    f011d609 <ide_read+0x139>
f011d5c4:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f011d5cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d5ce:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011d5d1:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f011d5d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d5db:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011d5de:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d5e1:	89 cb                	mov    %ecx,%ebx
f011d5e3:	89 df                	mov    %ebx,%edi
f011d5e5:	89 c1                	mov    %eax,%ecx
f011d5e7:	fc                   	cld    
f011d5e8:	f2 6d                	repnz insl (%dx),%es:(%edi)
f011d5ea:	89 c8                	mov    %ecx,%eax
f011d5ec:	89 fb                	mov    %edi,%ebx
f011d5ee:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011d5f1:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f011d5f4:	ff 4d 10             	decl   0x10(%ebp)
f011d5f7:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011d5fe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011d602:	75 a5                	jne    f011d5a9 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f011d604:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011d609:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d60c:	5b                   	pop    %ebx
f011d60d:	5f                   	pop    %edi
f011d60e:	5d                   	pop    %ebp
f011d60f:	c3                   	ret    

f011d610 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f011d610:	55                   	push   %ebp
f011d611:	89 e5                	mov    %esp,%ebp
f011d613:	56                   	push   %esi
f011d614:	53                   	push   %ebx
f011d615:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f011d618:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f011d61f:	76 16                	jbe    f011d637 <ide_write+0x27>
f011d621:	68 43 32 12 f0       	push   $0xf0123243
f011d626:	68 50 32 12 f0       	push   $0xf0123250
f011d62b:	6a 3f                	push   $0x3f
f011d62d:	68 65 32 12 f0       	push   $0xf0123265
f011d632:	e8 78 2b fe ff       	call   f01001af <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f011d637:	83 ec 0c             	sub    $0xc,%esp
f011d63a:	6a 00                	push   $0x0
f011d63c:	e8 44 fe ff ff       	call   f011d485 <ide_wait_ready>
f011d641:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f011d644:	8b 45 10             	mov    0x10(%ebp),%eax
f011d647:	0f b6 c0             	movzbl %al,%eax
f011d64a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f011d651:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f011d654:	8a 45 d2             	mov    -0x2e(%ebp),%al
f011d657:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011d65a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f011d65b:	8b 45 08             	mov    0x8(%ebp),%eax
f011d65e:	0f b6 c0             	movzbl %al,%eax
f011d661:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f011d668:	88 45 d3             	mov    %al,-0x2d(%ebp)
f011d66b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f011d66e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011d671:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f011d672:	8b 45 08             	mov    0x8(%ebp),%eax
f011d675:	c1 e8 08             	shr    $0x8,%eax
f011d678:	0f b6 c0             	movzbl %al,%eax
f011d67b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f011d682:	88 45 d4             	mov    %al,-0x2c(%ebp)
f011d685:	8a 45 d4             	mov    -0x2c(%ebp),%al
f011d688:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011d68b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f011d68c:	8b 45 08             	mov    0x8(%ebp),%eax
f011d68f:	c1 e8 10             	shr    $0x10,%eax
f011d692:	0f b6 c0             	movzbl %al,%eax
f011d695:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f011d69c:	88 45 d5             	mov    %al,-0x2b(%ebp)
f011d69f:	8a 45 d5             	mov    -0x2b(%ebp),%al
f011d6a2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011d6a5:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f011d6a6:	a1 4c 28 7e f0       	mov    0xf07e284c,%eax
f011d6ab:	83 e0 01             	and    $0x1,%eax
f011d6ae:	c1 e0 04             	shl    $0x4,%eax
f011d6b1:	88 c2                	mov    %al,%dl
f011d6b3:	8b 45 08             	mov    0x8(%ebp),%eax
f011d6b6:	c1 e8 18             	shr    $0x18,%eax
f011d6b9:	83 e0 0f             	and    $0xf,%eax
f011d6bc:	09 d0                	or     %edx,%eax
f011d6be:	83 c8 e0             	or     $0xffffffe0,%eax
f011d6c1:	0f b6 c0             	movzbl %al,%eax
f011d6c4:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f011d6cb:	88 45 d6             	mov    %al,-0x2a(%ebp)
f011d6ce:	8a 45 d6             	mov    -0x2a(%ebp),%al
f011d6d1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011d6d4:	ee                   	out    %al,(%dx)
f011d6d5:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f011d6dc:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f011d6e0:	8a 45 d7             	mov    -0x29(%ebp),%al
f011d6e3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011d6e6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011d6e7:	eb 55                	jmp    f011d73e <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f011d6e9:	83 ec 0c             	sub    $0xc,%esp
f011d6ec:	6a 01                	push   $0x1
f011d6ee:	e8 92 fd ff ff       	call   f011d485 <ide_wait_ready>
f011d6f3:	83 c4 10             	add    $0x10,%esp
f011d6f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011d6f9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011d6fd:	79 05                	jns    f011d704 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f011d6ff:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d702:	eb 45                	jmp    f011d749 <ide_write+0x139>
f011d704:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f011d70b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011d70e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f011d711:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f011d718:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d71b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f011d71e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d721:	89 cb                	mov    %ecx,%ebx
f011d723:	89 de                	mov    %ebx,%esi
f011d725:	89 c1                	mov    %eax,%ecx
f011d727:	fc                   	cld    
f011d728:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f011d72a:	89 c8                	mov    %ecx,%eax
f011d72c:	89 f3                	mov    %esi,%ebx
f011d72e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f011d731:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f011d734:	ff 4d 10             	decl   0x10(%ebp)
f011d737:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f011d73e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011d742:	75 a5                	jne    f011d6e9 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f011d744:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011d749:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d74c:	5b                   	pop    %ebx
f011d74d:	5e                   	pop    %esi
f011d74e:	5d                   	pop    %ebp
f011d74f:	c3                   	ret    

f011d750 <__udivdi3>:
f011d750:	55                   	push   %ebp
f011d751:	57                   	push   %edi
f011d752:	56                   	push   %esi
f011d753:	53                   	push   %ebx
f011d754:	83 ec 1c             	sub    $0x1c,%esp
f011d757:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f011d75b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f011d75f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f011d763:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f011d767:	89 ca                	mov    %ecx,%edx
f011d769:	89 f8                	mov    %edi,%eax
f011d76b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f011d76f:	85 f6                	test   %esi,%esi
f011d771:	75 2d                	jne    f011d7a0 <__udivdi3+0x50>
f011d773:	39 cf                	cmp    %ecx,%edi
f011d775:	77 65                	ja     f011d7dc <__udivdi3+0x8c>
f011d777:	89 fd                	mov    %edi,%ebp
f011d779:	85 ff                	test   %edi,%edi
f011d77b:	75 0b                	jne    f011d788 <__udivdi3+0x38>
f011d77d:	b8 01 00 00 00       	mov    $0x1,%eax
f011d782:	31 d2                	xor    %edx,%edx
f011d784:	f7 f7                	div    %edi
f011d786:	89 c5                	mov    %eax,%ebp
f011d788:	31 d2                	xor    %edx,%edx
f011d78a:	89 c8                	mov    %ecx,%eax
f011d78c:	f7 f5                	div    %ebp
f011d78e:	89 c1                	mov    %eax,%ecx
f011d790:	89 d8                	mov    %ebx,%eax
f011d792:	f7 f5                	div    %ebp
f011d794:	89 cf                	mov    %ecx,%edi
f011d796:	89 fa                	mov    %edi,%edx
f011d798:	83 c4 1c             	add    $0x1c,%esp
f011d79b:	5b                   	pop    %ebx
f011d79c:	5e                   	pop    %esi
f011d79d:	5f                   	pop    %edi
f011d79e:	5d                   	pop    %ebp
f011d79f:	c3                   	ret    
f011d7a0:	39 ce                	cmp    %ecx,%esi
f011d7a2:	77 28                	ja     f011d7cc <__udivdi3+0x7c>
f011d7a4:	0f bd fe             	bsr    %esi,%edi
f011d7a7:	83 f7 1f             	xor    $0x1f,%edi
f011d7aa:	75 40                	jne    f011d7ec <__udivdi3+0x9c>
f011d7ac:	39 ce                	cmp    %ecx,%esi
f011d7ae:	72 0a                	jb     f011d7ba <__udivdi3+0x6a>
f011d7b0:	3b 44 24 08          	cmp    0x8(%esp),%eax
f011d7b4:	0f 87 9e 00 00 00    	ja     f011d858 <__udivdi3+0x108>
f011d7ba:	b8 01 00 00 00       	mov    $0x1,%eax
f011d7bf:	89 fa                	mov    %edi,%edx
f011d7c1:	83 c4 1c             	add    $0x1c,%esp
f011d7c4:	5b                   	pop    %ebx
f011d7c5:	5e                   	pop    %esi
f011d7c6:	5f                   	pop    %edi
f011d7c7:	5d                   	pop    %ebp
f011d7c8:	c3                   	ret    
f011d7c9:	8d 76 00             	lea    0x0(%esi),%esi
f011d7cc:	31 ff                	xor    %edi,%edi
f011d7ce:	31 c0                	xor    %eax,%eax
f011d7d0:	89 fa                	mov    %edi,%edx
f011d7d2:	83 c4 1c             	add    $0x1c,%esp
f011d7d5:	5b                   	pop    %ebx
f011d7d6:	5e                   	pop    %esi
f011d7d7:	5f                   	pop    %edi
f011d7d8:	5d                   	pop    %ebp
f011d7d9:	c3                   	ret    
f011d7da:	66 90                	xchg   %ax,%ax
f011d7dc:	89 d8                	mov    %ebx,%eax
f011d7de:	f7 f7                	div    %edi
f011d7e0:	31 ff                	xor    %edi,%edi
f011d7e2:	89 fa                	mov    %edi,%edx
f011d7e4:	83 c4 1c             	add    $0x1c,%esp
f011d7e7:	5b                   	pop    %ebx
f011d7e8:	5e                   	pop    %esi
f011d7e9:	5f                   	pop    %edi
f011d7ea:	5d                   	pop    %ebp
f011d7eb:	c3                   	ret    
f011d7ec:	bd 20 00 00 00       	mov    $0x20,%ebp
f011d7f1:	89 eb                	mov    %ebp,%ebx
f011d7f3:	29 fb                	sub    %edi,%ebx
f011d7f5:	89 f9                	mov    %edi,%ecx
f011d7f7:	d3 e6                	shl    %cl,%esi
f011d7f9:	89 c5                	mov    %eax,%ebp
f011d7fb:	88 d9                	mov    %bl,%cl
f011d7fd:	d3 ed                	shr    %cl,%ebp
f011d7ff:	89 e9                	mov    %ebp,%ecx
f011d801:	09 f1                	or     %esi,%ecx
f011d803:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f011d807:	89 f9                	mov    %edi,%ecx
f011d809:	d3 e0                	shl    %cl,%eax
f011d80b:	89 c5                	mov    %eax,%ebp
f011d80d:	89 d6                	mov    %edx,%esi
f011d80f:	88 d9                	mov    %bl,%cl
f011d811:	d3 ee                	shr    %cl,%esi
f011d813:	89 f9                	mov    %edi,%ecx
f011d815:	d3 e2                	shl    %cl,%edx
f011d817:	8b 44 24 08          	mov    0x8(%esp),%eax
f011d81b:	88 d9                	mov    %bl,%cl
f011d81d:	d3 e8                	shr    %cl,%eax
f011d81f:	09 c2                	or     %eax,%edx
f011d821:	89 d0                	mov    %edx,%eax
f011d823:	89 f2                	mov    %esi,%edx
f011d825:	f7 74 24 0c          	divl   0xc(%esp)
f011d829:	89 d6                	mov    %edx,%esi
f011d82b:	89 c3                	mov    %eax,%ebx
f011d82d:	f7 e5                	mul    %ebp
f011d82f:	39 d6                	cmp    %edx,%esi
f011d831:	72 19                	jb     f011d84c <__udivdi3+0xfc>
f011d833:	74 0b                	je     f011d840 <__udivdi3+0xf0>
f011d835:	89 d8                	mov    %ebx,%eax
f011d837:	31 ff                	xor    %edi,%edi
f011d839:	e9 58 ff ff ff       	jmp    f011d796 <__udivdi3+0x46>
f011d83e:	66 90                	xchg   %ax,%ax
f011d840:	8b 54 24 08          	mov    0x8(%esp),%edx
f011d844:	89 f9                	mov    %edi,%ecx
f011d846:	d3 e2                	shl    %cl,%edx
f011d848:	39 c2                	cmp    %eax,%edx
f011d84a:	73 e9                	jae    f011d835 <__udivdi3+0xe5>
f011d84c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f011d84f:	31 ff                	xor    %edi,%edi
f011d851:	e9 40 ff ff ff       	jmp    f011d796 <__udivdi3+0x46>
f011d856:	66 90                	xchg   %ax,%ax
f011d858:	31 c0                	xor    %eax,%eax
f011d85a:	e9 37 ff ff ff       	jmp    f011d796 <__udivdi3+0x46>
f011d85f:	90                   	nop

f011d860 <__umoddi3>:
f011d860:	55                   	push   %ebp
f011d861:	57                   	push   %edi
f011d862:	56                   	push   %esi
f011d863:	53                   	push   %ebx
f011d864:	83 ec 1c             	sub    $0x1c,%esp
f011d867:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f011d86b:	8b 74 24 34          	mov    0x34(%esp),%esi
f011d86f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f011d873:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f011d877:	89 44 24 0c          	mov    %eax,0xc(%esp)
f011d87b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f011d87f:	89 f3                	mov    %esi,%ebx
f011d881:	89 fa                	mov    %edi,%edx
f011d883:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011d887:	89 34 24             	mov    %esi,(%esp)
f011d88a:	85 c0                	test   %eax,%eax
f011d88c:	75 1a                	jne    f011d8a8 <__umoddi3+0x48>
f011d88e:	39 f7                	cmp    %esi,%edi
f011d890:	0f 86 a2 00 00 00    	jbe    f011d938 <__umoddi3+0xd8>
f011d896:	89 c8                	mov    %ecx,%eax
f011d898:	89 f2                	mov    %esi,%edx
f011d89a:	f7 f7                	div    %edi
f011d89c:	89 d0                	mov    %edx,%eax
f011d89e:	31 d2                	xor    %edx,%edx
f011d8a0:	83 c4 1c             	add    $0x1c,%esp
f011d8a3:	5b                   	pop    %ebx
f011d8a4:	5e                   	pop    %esi
f011d8a5:	5f                   	pop    %edi
f011d8a6:	5d                   	pop    %ebp
f011d8a7:	c3                   	ret    
f011d8a8:	39 f0                	cmp    %esi,%eax
f011d8aa:	0f 87 ac 00 00 00    	ja     f011d95c <__umoddi3+0xfc>
f011d8b0:	0f bd e8             	bsr    %eax,%ebp
f011d8b3:	83 f5 1f             	xor    $0x1f,%ebp
f011d8b6:	0f 84 ac 00 00 00    	je     f011d968 <__umoddi3+0x108>
f011d8bc:	bf 20 00 00 00       	mov    $0x20,%edi
f011d8c1:	29 ef                	sub    %ebp,%edi
f011d8c3:	89 fe                	mov    %edi,%esi
f011d8c5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f011d8c9:	89 e9                	mov    %ebp,%ecx
f011d8cb:	d3 e0                	shl    %cl,%eax
f011d8cd:	89 d7                	mov    %edx,%edi
f011d8cf:	89 f1                	mov    %esi,%ecx
f011d8d1:	d3 ef                	shr    %cl,%edi
f011d8d3:	09 c7                	or     %eax,%edi
f011d8d5:	89 e9                	mov    %ebp,%ecx
f011d8d7:	d3 e2                	shl    %cl,%edx
f011d8d9:	89 14 24             	mov    %edx,(%esp)
f011d8dc:	89 d8                	mov    %ebx,%eax
f011d8de:	d3 e0                	shl    %cl,%eax
f011d8e0:	89 c2                	mov    %eax,%edx
f011d8e2:	8b 44 24 08          	mov    0x8(%esp),%eax
f011d8e6:	d3 e0                	shl    %cl,%eax
f011d8e8:	89 44 24 04          	mov    %eax,0x4(%esp)
f011d8ec:	8b 44 24 08          	mov    0x8(%esp),%eax
f011d8f0:	89 f1                	mov    %esi,%ecx
f011d8f2:	d3 e8                	shr    %cl,%eax
f011d8f4:	09 d0                	or     %edx,%eax
f011d8f6:	d3 eb                	shr    %cl,%ebx
f011d8f8:	89 da                	mov    %ebx,%edx
f011d8fa:	f7 f7                	div    %edi
f011d8fc:	89 d3                	mov    %edx,%ebx
f011d8fe:	f7 24 24             	mull   (%esp)
f011d901:	89 c6                	mov    %eax,%esi
f011d903:	89 d1                	mov    %edx,%ecx
f011d905:	39 d3                	cmp    %edx,%ebx
f011d907:	0f 82 87 00 00 00    	jb     f011d994 <__umoddi3+0x134>
f011d90d:	0f 84 91 00 00 00    	je     f011d9a4 <__umoddi3+0x144>
f011d913:	8b 54 24 04          	mov    0x4(%esp),%edx
f011d917:	29 f2                	sub    %esi,%edx
f011d919:	19 cb                	sbb    %ecx,%ebx
f011d91b:	89 d8                	mov    %ebx,%eax
f011d91d:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f011d921:	d3 e0                	shl    %cl,%eax
f011d923:	89 e9                	mov    %ebp,%ecx
f011d925:	d3 ea                	shr    %cl,%edx
f011d927:	09 d0                	or     %edx,%eax
f011d929:	89 e9                	mov    %ebp,%ecx
f011d92b:	d3 eb                	shr    %cl,%ebx
f011d92d:	89 da                	mov    %ebx,%edx
f011d92f:	83 c4 1c             	add    $0x1c,%esp
f011d932:	5b                   	pop    %ebx
f011d933:	5e                   	pop    %esi
f011d934:	5f                   	pop    %edi
f011d935:	5d                   	pop    %ebp
f011d936:	c3                   	ret    
f011d937:	90                   	nop
f011d938:	89 fd                	mov    %edi,%ebp
f011d93a:	85 ff                	test   %edi,%edi
f011d93c:	75 0b                	jne    f011d949 <__umoddi3+0xe9>
f011d93e:	b8 01 00 00 00       	mov    $0x1,%eax
f011d943:	31 d2                	xor    %edx,%edx
f011d945:	f7 f7                	div    %edi
f011d947:	89 c5                	mov    %eax,%ebp
f011d949:	89 f0                	mov    %esi,%eax
f011d94b:	31 d2                	xor    %edx,%edx
f011d94d:	f7 f5                	div    %ebp
f011d94f:	89 c8                	mov    %ecx,%eax
f011d951:	f7 f5                	div    %ebp
f011d953:	89 d0                	mov    %edx,%eax
f011d955:	e9 44 ff ff ff       	jmp    f011d89e <__umoddi3+0x3e>
f011d95a:	66 90                	xchg   %ax,%ax
f011d95c:	89 c8                	mov    %ecx,%eax
f011d95e:	89 f2                	mov    %esi,%edx
f011d960:	83 c4 1c             	add    $0x1c,%esp
f011d963:	5b                   	pop    %ebx
f011d964:	5e                   	pop    %esi
f011d965:	5f                   	pop    %edi
f011d966:	5d                   	pop    %ebp
f011d967:	c3                   	ret    
f011d968:	3b 04 24             	cmp    (%esp),%eax
f011d96b:	72 06                	jb     f011d973 <__umoddi3+0x113>
f011d96d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f011d971:	77 0f                	ja     f011d982 <__umoddi3+0x122>
f011d973:	89 f2                	mov    %esi,%edx
f011d975:	29 f9                	sub    %edi,%ecx
f011d977:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f011d97b:	89 14 24             	mov    %edx,(%esp)
f011d97e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f011d982:	8b 44 24 04          	mov    0x4(%esp),%eax
f011d986:	8b 14 24             	mov    (%esp),%edx
f011d989:	83 c4 1c             	add    $0x1c,%esp
f011d98c:	5b                   	pop    %ebx
f011d98d:	5e                   	pop    %esi
f011d98e:	5f                   	pop    %edi
f011d98f:	5d                   	pop    %ebp
f011d990:	c3                   	ret    
f011d991:	8d 76 00             	lea    0x0(%esi),%esi
f011d994:	2b 04 24             	sub    (%esp),%eax
f011d997:	19 fa                	sbb    %edi,%edx
f011d999:	89 d1                	mov    %edx,%ecx
f011d99b:	89 c6                	mov    %eax,%esi
f011d99d:	e9 71 ff ff ff       	jmp    f011d913 <__umoddi3+0xb3>
f011d9a2:	66 90                	xchg   %ax,%ax
f011d9a4:	39 44 24 04          	cmp    %eax,0x4(%esp)
f011d9a8:	72 ea                	jb     f011d994 <__umoddi3+0x134>
f011d9aa:	89 d9                	mov    %ebx,%ecx
f011d9ac:	e9 62 ff ff ff       	jmp    f011d913 <__umoddi3+0xb3>
